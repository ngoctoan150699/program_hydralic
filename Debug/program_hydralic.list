
program_hydralic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009124  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080092b4  080092b4  0000a2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093c4  080093c4  0000b0b8  2**0
                  CONTENTS
  4 .ARM          00000008  080093c4  080093c4  0000a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093cc  080093cc  0000b0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093cc  080093cc  0000a3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093d0  080093d0  0000a3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080093d4  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0b8  2**0
                  CONTENTS
 10 .bss          00004d98  200000b8  200000b8  0000b0b8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004e50  20004e50  0000b0b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c39  00000000  00000000  0000b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e48  00000000  00000000  00023d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00027b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f96  00000000  00000000  00028fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000055f6  00000000  00000000  00029f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001751b  00000000  00000000  0002f554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4331  00000000  00000000  00046a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ada0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c68  00000000  00000000  0011ade4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00120a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800929c 	.word	0x0800929c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0800929c 	.word	0x0800929c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_ldivmod>:
 80009bc:	b97b      	cbnz	r3, 80009de <__aeabi_ldivmod+0x22>
 80009be:	b972      	cbnz	r2, 80009de <__aeabi_ldivmod+0x22>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bfbe      	ittt	lt
 80009c4:	2000      	movlt	r0, #0
 80009c6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80009ca:	e006      	blt.n	80009da <__aeabi_ldivmod+0x1e>
 80009cc:	bf08      	it	eq
 80009ce:	2800      	cmpeq	r0, #0
 80009d0:	bf1c      	itt	ne
 80009d2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80009d6:	f04f 30ff 	movne.w	r0, #4294967295
 80009da:	f000 b9d3 	b.w	8000d84 <__aeabi_idiv0>
 80009de:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e6:	2900      	cmp	r1, #0
 80009e8:	db09      	blt.n	80009fe <__aeabi_ldivmod+0x42>
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db1a      	blt.n	8000a24 <__aeabi_ldivmod+0x68>
 80009ee:	f000 f84d 	bl	8000a8c <__udivmoddi4>
 80009f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009fa:	b004      	add	sp, #16
 80009fc:	4770      	bx	lr
 80009fe:	4240      	negs	r0, r0
 8000a00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db1b      	blt.n	8000a40 <__aeabi_ldivmod+0x84>
 8000a08:	f000 f840 	bl	8000a8c <__udivmoddi4>
 8000a0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a14:	b004      	add	sp, #16
 8000a16:	4240      	negs	r0, r0
 8000a18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a1c:	4252      	negs	r2, r2
 8000a1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a22:	4770      	bx	lr
 8000a24:	4252      	negs	r2, r2
 8000a26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a2a:	f000 f82f 	bl	8000a8c <__udivmoddi4>
 8000a2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a36:	b004      	add	sp, #16
 8000a38:	4240      	negs	r0, r0
 8000a3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a3e:	4770      	bx	lr
 8000a40:	4252      	negs	r2, r2
 8000a42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a46:	f000 f821 	bl	8000a8c <__udivmoddi4>
 8000a4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a52:	b004      	add	sp, #16
 8000a54:	4252      	negs	r2, r2
 8000a56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <u_timer_expired>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool u_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8000d88:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6178      	str	r0, [r7, #20]
 8000d92:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8000d96:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000d9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d9e:	eb10 0a02 	adds.w	sl, r0, r2
 8000da2:	eb41 0b03 	adc.w	fp, r1, r3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	4592      	cmp	sl, r2
 8000dae:	eb7b 0303 	sbcs.w	r3, fp, r3
 8000db2:	d206      	bcs.n	8000dc2 <u_timer_expired+0x3a>
 8000db4:	6979      	ldr	r1, [r7, #20]
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	d10d      	bne.n	8000de8 <u_timer_expired+0x60>
 8000dcc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dd4:	1886      	adds	r6, r0, r2
 8000dd6:	603e      	str	r6, [r7, #0]
 8000dd8:	eb41 0303 	adc.w	r3, r1, r3
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000de4:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000df2:	4290      	cmp	r0, r2
 8000df4:	eb71 0303 	sbcs.w	r3, r1, r3
 8000df8:	d201      	bcs.n	8000dfe <u_timer_expired+0x76>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e022      	b.n	8000e44 <u_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e04:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000e08:	ebb0 0802 	subs.w	r8, r0, r2
 8000e0c:	eb61 0903 	sbc.w	r9, r1, r3
 8000e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e14:	4542      	cmp	r2, r8
 8000e16:	eb73 0309 	sbcs.w	r3, r3, r9
 8000e1a:	d207      	bcs.n	8000e2c <u_timer_expired+0xa4>
 8000e1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e24:	1884      	adds	r4, r0, r2
 8000e26:	eb41 0503 	adc.w	r5, r1, r3
 8000e2a:	e007      	b.n	8000e3c <u_timer_expired+0xb4>
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e36:	1884      	adds	r4, r0, r2
 8000e38:	eb41 0503 	adc.w	r5, r1, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e4e:	4770      	bx	lr

08000e50 <readGPIOInputs>:


void readGPIOInputs(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    gpioInputStates[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000e54:	2140      	movs	r1, #64	@ 0x40
 8000e56:	4815      	ldr	r0, [pc, #84]	@ (8000eac <readGPIOInputs+0x5c>)
 8000e58:	f003 fc00 	bl	800465c <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <readGPIOInputs+0x60>)
 8000e62:	701a      	strb	r2, [r3, #0]
    gpioInputStates[1] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000e64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e68:	4812      	ldr	r0, [pc, #72]	@ (8000eb4 <readGPIOInputs+0x64>)
 8000e6a:	f003 fbf7 	bl	800465c <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <readGPIOInputs+0x60>)
 8000e74:	705a      	strb	r2, [r3, #1]
    gpioInputStates[2] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8000e76:	2180      	movs	r1, #128	@ 0x80
 8000e78:	480e      	ldr	r0, [pc, #56]	@ (8000eb4 <readGPIOInputs+0x64>)
 8000e7a:	f003 fbef 	bl	800465c <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <readGPIOInputs+0x60>)
 8000e84:	709a      	strb	r2, [r3, #2]
    gpioInputStates[3] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 8000e86:	2140      	movs	r1, #64	@ 0x40
 8000e88:	480a      	ldr	r0, [pc, #40]	@ (8000eb4 <readGPIOInputs+0x64>)
 8000e8a:	f003 fbe7 	bl	800465c <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <readGPIOInputs+0x60>)
 8000e94:	70da      	strb	r2, [r3, #3]
    gpioInputStates[4] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000e96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9a:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <readGPIOInputs+0x64>)
 8000e9c:	f003 fbde 	bl	800465c <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b02      	ldr	r3, [pc, #8]	@ (8000eb0 <readGPIOInputs+0x60>)
 8000ea6:	711a      	strb	r2, [r3, #4]
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	200000f8 	.word	0x200000f8
 8000eb4:	40021400 	.word	0x40021400

08000eb8 <manualMode>:
void manualMode(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
    modeLift = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_RESET ? true : false; // TRUE: bánh xe, FALSE: pallet
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	481a      	ldr	r0, [pc, #104]	@ (8000f2c <manualMode+0x74>)
 8000ec2:	f003 fbcb 	bl	800465c <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bf0c      	ite	eq
 8000ecc:	2301      	moveq	r3, #1
 8000ece:	2300      	movne	r3, #0
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <manualMode+0x78>)
 8000ed4:	701a      	strb	r2, [r3, #0]

    bool liftPressed = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7) == GPIO_PIN_RESET ? true : false;
 8000ed6:	2180      	movs	r1, #128	@ 0x80
 8000ed8:	4816      	ldr	r0, [pc, #88]	@ (8000f34 <manualMode+0x7c>)
 8000eda:	f003 fbbf 	bl	800465c <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bf0c      	ite	eq
 8000ee4:	2301      	moveq	r3, #1
 8000ee6:	2300      	movne	r3, #0
 8000ee8:	71fb      	strb	r3, [r7, #7]
    bool lowerPressed = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == GPIO_PIN_RESET ? true : false;
 8000eea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eee:	4811      	ldr	r0, [pc, #68]	@ (8000f34 <manualMode+0x7c>)
 8000ef0:	f003 fbb4 	bl	800465c <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	bf0c      	ite	eq
 8000efa:	2301      	moveq	r3, #1
 8000efc:	2300      	movne	r3, #0
 8000efe:	71bb      	strb	r3, [r7, #6]

    if (liftPressed) {
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <manualMode+0x56>
        buttonPressCount = 1;  // Nâng
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <manualMode+0x80>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
        buttonPressCount = 3;  // Hạ
    }
    else {
        buttonPressCount = 0;  // Tắt thủy lực
    }
}
 8000f0c:	e009      	b.n	8000f22 <manualMode+0x6a>
    else if (lowerPressed) {
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <manualMode+0x64>
        buttonPressCount = 3;  // Hạ
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <manualMode+0x80>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	701a      	strb	r2, [r3, #0]
}
 8000f1a:	e002      	b.n	8000f22 <manualMode+0x6a>
        buttonPressCount = 0;  // Tắt thủy lực
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <manualMode+0x80>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	200000d5 	.word	0x200000d5
 8000f34:	40021400 	.word	0x40021400
 8000f38:	200000d4 	.word	0x200000d4

08000f3c <autoMode>:

void autoMode()
{
 8000f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f40:	b08c      	sub	sp, #48	@ 0x30
 8000f42:	af02      	add	r7, sp, #8
  switch (autoStep)
 8000f44:	4bab      	ldr	r3, [pc, #684]	@ (80011f4 <autoMode+0x2b8>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	f200 8143 	bhi.w	80011d6 <autoMode+0x29a>
 8000f50:	a201      	add	r2, pc, #4	@ (adr r2, 8000f58 <autoMode+0x1c>)
 8000f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f56:	bf00      	nop
 8000f58:	08000f69 	.word	0x08000f69
 8000f5c:	08001009 	.word	0x08001009
 8000f60:	080010a9 	.word	0x080010a9
 8000f64:	08001141 	.word	0x08001141
  {
  case 0: // nâng pallet
    buttonPressCount = 1;
 8000f68:	4ba3      	ldr	r3, [pc, #652]	@ (80011f8 <autoMode+0x2bc>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
    modeLift = false;
 8000f6e:	4ba3      	ldr	r3, [pc, #652]	@ (80011fc <autoMode+0x2c0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
    m_error = true;
 8000f74:	4ba2      	ldr	r3, [pc, #648]	@ (8001200 <autoMode+0x2c4>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LIFT_PALLET, HAL_GetTick()))
 8000f7a:	f002 fa4d 	bl	8003418 <HAL_GetTick>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2200      	movs	r2, #0
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f86:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000f8a:	e9cd 3400 	strd	r3, r4, [sp]
 8000f8e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	489b      	ldr	r0, [pc, #620]	@ (8001204 <autoMode+0x2c8>)
 8000f98:	f7ff fef6 	bl	8000d88 <u_timer_expired>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <autoMode+0x6c>
    {
      stepDone[0] = true;
 8000fa2:	4b99      	ldr	r3, [pc, #612]	@ (8001208 <autoMode+0x2cc>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
    }
    if (stepDone[0])
 8000fa8:	4b97      	ldr	r3, [pc, #604]	@ (8001208 <autoMode+0x2cc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8114 	beq.w	80011da <autoMode+0x29e>
    {
      buttonPressCount = 0; // off thuỷ lực
 8000fb2:	4b91      	ldr	r3, [pc, #580]	@ (80011f8 <autoMode+0x2bc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
      m_error = false;
 8000fb8:	4b91      	ldr	r3, [pc, #580]	@ (8001200 <autoMode+0x2c4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 8000fbe:	f002 fa2b 	bl	8003418 <HAL_GetTick>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	61fa      	str	r2, [r7, #28]
 8000fca:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000fce:	e9cd 3400 	strd	r3, r4, [sp]
 8000fd2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	488c      	ldr	r0, [pc, #560]	@ (800120c <autoMode+0x2d0>)
 8000fdc:	f7ff fed4 	bl	8000d88 <u_timer_expired>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 80f9 	beq.w	80011da <autoMode+0x29e>
      {
        stepDone[0] = false;
 8000fe8:	4b87      	ldr	r3, [pc, #540]	@ (8001208 <autoMode+0x2cc>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 8000fee:	2210      	movs	r2, #16
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4884      	ldr	r0, [pc, #528]	@ (8001204 <autoMode+0x2c8>)
 8000ff4:	f007 fe90 	bl	8008d18 <memset>
        autoStep++;
 8000ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80011f4 <autoMode+0x2b8>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b7c      	ldr	r3, [pc, #496]	@ (80011f4 <autoMode+0x2b8>)
 8001004:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8001006:	e0e8      	b.n	80011da <autoMode+0x29e>

  case 1: // hạ bánh xe
    buttonPressCount = 1;
 8001008:	4b7b      	ldr	r3, [pc, #492]	@ (80011f8 <autoMode+0x2bc>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
    modeLift = true;
 800100e:	4b7b      	ldr	r3, [pc, #492]	@ (80011fc <autoMode+0x2c0>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
    m_error = true;
 8001014:	4b7a      	ldr	r3, [pc, #488]	@ (8001200 <autoMode+0x2c4>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LOWER_WHEEL, HAL_GetTick()))
 800101a:	f002 f9fd 	bl	8003418 <HAL_GetTick>
 800101e:	4603      	mov	r3, r0
 8001020:	2200      	movs	r2, #0
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	617a      	str	r2, [r7, #20]
 8001026:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800102a:	e9cd 3400 	strd	r3, r4, [sp]
 800102e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	4873      	ldr	r0, [pc, #460]	@ (8001204 <autoMode+0x2c8>)
 8001038:	f7ff fea6 	bl	8000d88 <u_timer_expired>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <autoMode+0x10c>
    {
      stepDone[1] = true;
 8001042:	4b71      	ldr	r3, [pc, #452]	@ (8001208 <autoMode+0x2cc>)
 8001044:	2201      	movs	r2, #1
 8001046:	705a      	strb	r2, [r3, #1]
    }
    if (stepDone[1])
 8001048:	4b6f      	ldr	r3, [pc, #444]	@ (8001208 <autoMode+0x2cc>)
 800104a:	785b      	ldrb	r3, [r3, #1]
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80c6 	beq.w	80011de <autoMode+0x2a2>
    {
      buttonPressCount = 0; // off thuỷ lực
 8001052:	4b69      	ldr	r3, [pc, #420]	@ (80011f8 <autoMode+0x2bc>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
      m_error = false;
 8001058:	4b69      	ldr	r3, [pc, #420]	@ (8001200 <autoMode+0x2c4>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 800105e:	f002 f9db 	bl	8003418 <HAL_GetTick>
 8001062:	4603      	mov	r3, r0
 8001064:	2200      	movs	r2, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	60fa      	str	r2, [r7, #12]
 800106a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800106e:	e9cd 3400 	strd	r3, r4, [sp]
 8001072:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	4864      	ldr	r0, [pc, #400]	@ (800120c <autoMode+0x2d0>)
 800107c:	f7ff fe84 	bl	8000d88 <u_timer_expired>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 80ab 	beq.w	80011de <autoMode+0x2a2>
      {
        stepDone[1] = false;
 8001088:	4b5f      	ldr	r3, [pc, #380]	@ (8001208 <autoMode+0x2cc>)
 800108a:	2200      	movs	r2, #0
 800108c:	705a      	strb	r2, [r3, #1]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 800108e:	2210      	movs	r2, #16
 8001090:	2100      	movs	r1, #0
 8001092:	485c      	ldr	r0, [pc, #368]	@ (8001204 <autoMode+0x2c8>)
 8001094:	f007 fe40 	bl	8008d18 <memset>
        autoStep++;
 8001098:	4b56      	ldr	r3, [pc, #344]	@ (80011f4 <autoMode+0x2b8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b54      	ldr	r3, [pc, #336]	@ (80011f4 <autoMode+0x2b8>)
 80010a4:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 80010a6:	e09a      	b.n	80011de <autoMode+0x2a2>

  case 2: // hạ pallet
    buttonPressCount = 3;
 80010a8:	4b53      	ldr	r3, [pc, #332]	@ (80011f8 <autoMode+0x2bc>)
 80010aa:	2203      	movs	r2, #3
 80010ac:	701a      	strb	r2, [r3, #0]
    modeLift = false;
 80010ae:	4b53      	ldr	r3, [pc, #332]	@ (80011fc <autoMode+0x2c0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
    m_error = true;
 80010b4:	4b52      	ldr	r3, [pc, #328]	@ (8001200 <autoMode+0x2c4>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_DOWN_PALLET, HAL_GetTick()))
 80010ba:	f002 f9ad 	bl	8003418 <HAL_GetTick>
 80010be:	4603      	mov	r3, r0
 80010c0:	2200      	movs	r2, #0
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010ca:	e9cd 3400 	strd	r3, r4, [sp]
 80010ce:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	484b      	ldr	r0, [pc, #300]	@ (8001204 <autoMode+0x2c8>)
 80010d8:	f7ff fe56 	bl	8000d88 <u_timer_expired>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <autoMode+0x1ac>
    {
      stepDone[2] = true;
 80010e2:	4b49      	ldr	r3, [pc, #292]	@ (8001208 <autoMode+0x2cc>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	709a      	strb	r2, [r3, #2]
    }
    if (stepDone[2])
 80010e8:	4b47      	ldr	r3, [pc, #284]	@ (8001208 <autoMode+0x2cc>)
 80010ea:	789b      	ldrb	r3, [r3, #2]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d078      	beq.n	80011e2 <autoMode+0x2a6>
    {
      buttonPressCount = 0; // off thuỷ lực
 80010f0:	4b41      	ldr	r3, [pc, #260]	@ (80011f8 <autoMode+0x2bc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
      m_error = false;
 80010f6:	4b42      	ldr	r3, [pc, #264]	@ (8001200 <autoMode+0x2c4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 80010fc:	f002 f98c 	bl	8003418 <HAL_GetTick>
 8001100:	4603      	mov	r3, r0
 8001102:	2200      	movs	r2, #0
 8001104:	469a      	mov	sl, r3
 8001106:	4693      	mov	fp, r2
 8001108:	e9cd ab00 	strd	sl, fp, [sp]
 800110c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	483d      	ldr	r0, [pc, #244]	@ (800120c <autoMode+0x2d0>)
 8001116:	f7ff fe37 	bl	8000d88 <u_timer_expired>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d060      	beq.n	80011e2 <autoMode+0x2a6>
      {
        stepDone[2] = false;
 8001120:	4b39      	ldr	r3, [pc, #228]	@ (8001208 <autoMode+0x2cc>)
 8001122:	2200      	movs	r2, #0
 8001124:	709a      	strb	r2, [r3, #2]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 8001126:	2210      	movs	r2, #16
 8001128:	2100      	movs	r1, #0
 800112a:	4836      	ldr	r0, [pc, #216]	@ (8001204 <autoMode+0x2c8>)
 800112c:	f007 fdf4 	bl	8008d18 <memset>
        autoStep++;
 8001130:	4b30      	ldr	r3, [pc, #192]	@ (80011f4 <autoMode+0x2b8>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b2e      	ldr	r3, [pc, #184]	@ (80011f4 <autoMode+0x2b8>)
 800113c:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 800113e:	e050      	b.n	80011e2 <autoMode+0x2a6>

  case 3: // nâng bánh xe
    buttonPressCount = 3;
 8001140:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <autoMode+0x2bc>)
 8001142:	2203      	movs	r2, #3
 8001144:	701a      	strb	r2, [r3, #0]
    modeLift = true;
 8001146:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <autoMode+0x2c0>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
    m_error = true;
 800114c:	4b2c      	ldr	r3, [pc, #176]	@ (8001200 <autoMode+0x2c4>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LIFT_WHEEL, HAL_GetTick()))
 8001152:	f002 f961 	bl	8003418 <HAL_GetTick>
 8001156:	4603      	mov	r3, r0
 8001158:	2200      	movs	r2, #0
 800115a:	4698      	mov	r8, r3
 800115c:	4691      	mov	r9, r2
 800115e:	e9cd 8900 	strd	r8, r9, [sp]
 8001162:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	4826      	ldr	r0, [pc, #152]	@ (8001204 <autoMode+0x2c8>)
 800116c:	f7ff fe0c 	bl	8000d88 <u_timer_expired>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <autoMode+0x240>
    {
      stepDone[3] = true;
 8001176:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <autoMode+0x2cc>)
 8001178:	2201      	movs	r2, #1
 800117a:	70da      	strb	r2, [r3, #3]
    }
    if (stepDone[3])
 800117c:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <autoMode+0x2cc>)
 800117e:	78db      	ldrb	r3, [r3, #3]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d030      	beq.n	80011e6 <autoMode+0x2aa>
    {
      buttonPressCount = 0; // off thuỷ lực
 8001184:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <autoMode+0x2bc>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
      m_error = false;
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <autoMode+0x2c4>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 8001190:	f002 f942 	bl	8003418 <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	2200      	movs	r2, #0
 8001198:	461c      	mov	r4, r3
 800119a:	4615      	mov	r5, r2
 800119c:	e9cd 4500 	strd	r4, r5, [sp]
 80011a0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	4818      	ldr	r0, [pc, #96]	@ (800120c <autoMode+0x2d0>)
 80011aa:	f7ff fded 	bl	8000d88 <u_timer_expired>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d018      	beq.n	80011e6 <autoMode+0x2aa>
      {
        stepDone[3] = false;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <autoMode+0x2cc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	70da      	strb	r2, [r3, #3]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 80011ba:	2210      	movs	r2, #16
 80011bc:	2100      	movs	r1, #0
 80011be:	4811      	ldr	r0, [pc, #68]	@ (8001204 <autoMode+0x2c8>)
 80011c0:	f007 fdaa 	bl	8008d18 <memset>
        autoStep = 0;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <autoMode+0x2b8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
        totalCycle++;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <autoMode+0x2d4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001210 <autoMode+0x2d4>)
 80011d2:	6013      	str	r3, [r2, #0]
      }
    }
    break;
 80011d4:	e007      	b.n	80011e6 <autoMode+0x2aa>

  default:
    break;
 80011d6:	bf00      	nop
 80011d8:	e006      	b.n	80011e8 <autoMode+0x2ac>
    break;
 80011da:	bf00      	nop
 80011dc:	e004      	b.n	80011e8 <autoMode+0x2ac>
    break;
 80011de:	bf00      	nop
 80011e0:	e002      	b.n	80011e8 <autoMode+0x2ac>
    break;
 80011e2:	bf00      	nop
 80011e4:	e000      	b.n	80011e8 <autoMode+0x2ac>
    break;
 80011e6:	bf00      	nop
  }
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	@ 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011f2:	bf00      	nop
 80011f4:	200000d6 	.word	0x200000d6
 80011f8:	200000d4 	.word	0x200000d4
 80011fc:	200000d5 	.word	0x200000d5
 8001200:	20000110 	.word	0x20000110
 8001204:	200000e8 	.word	0x200000e8
 8001208:	200000dc 	.word	0x200000dc
 800120c:	200000f0 	.word	0x200000f0
 8001210:	200000d8 	.word	0x200000d8

08001214 <performAction>:

void performAction(int count, bool Mode) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
	switch (count) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d003      	beq.n	800122e <performAction+0x1a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b03      	cmp	r3, #3
 800122a:	d019      	beq.n	8001260 <performAction+0x4c>
 800122c:	e031      	b.n	8001292 <performAction+0x7e>
	case 1:
		if (Mode) {
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00a      	beq.n	800124a <performAction+0x36>
			hydraulicSetState(wheel_down_state);
 8001234:	2301      	movs	r3, #1
 8001236:	2201      	movs	r2, #1
 8001238:	f362 4317 	bfi	r3, r2, #16, #8
 800123c:	2201      	movs	r2, #1
 800123e:	f362 631f 	bfi	r3, r2, #24, #8
 8001242:	4618      	mov	r0, r3
 8001244:	f002 f83c 	bl	80032c0 <hydraulicSetState>
			// Thực hiện hành động hạ bánh xe
		} else {
			hydraulicSetState(pallet_up_state);
			// Thực hiện hành động nâng pallet
		}
		break;
 8001248:	e028      	b.n	800129c <performAction+0x88>
			hydraulicSetState(pallet_up_state);
 800124a:	2301      	movs	r3, #1
 800124c:	2201      	movs	r2, #1
 800124e:	f362 230f 	bfi	r3, r2, #8, #8
 8001252:	2201      	movs	r2, #1
 8001254:	f362 631f 	bfi	r3, r2, #24, #8
 8001258:	4618      	mov	r0, r3
 800125a:	f002 f831 	bl	80032c0 <hydraulicSetState>
		break;
 800125e:	e01d      	b.n	800129c <performAction+0x88>
	case 3:
		if (Mode) {
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00a      	beq.n	800127c <performAction+0x68>
			hydraulicSetState(wheel_up_state);
 8001266:	2300      	movs	r3, #0
 8001268:	2201      	movs	r2, #1
 800126a:	f362 4317 	bfi	r3, r2, #16, #8
 800126e:	2201      	movs	r2, #1
 8001270:	f362 631f 	bfi	r3, r2, #24, #8
 8001274:	4618      	mov	r0, r3
 8001276:	f002 f823 	bl	80032c0 <hydraulicSetState>
			// Thực hiện hành động nâng bánh xe
		} else {
			hydraulicSetState(pallet_down_state);
			// Thực hiện hành động hạ pallet
		}
		break;
 800127a:	e00f      	b.n	800129c <performAction+0x88>
			hydraulicSetState(pallet_down_state);
 800127c:	2300      	movs	r3, #0
 800127e:	2201      	movs	r2, #1
 8001280:	f362 230f 	bfi	r3, r2, #8, #8
 8001284:	2201      	movs	r2, #1
 8001286:	f362 631f 	bfi	r3, r2, #24, #8
 800128a:	4618      	mov	r0, r3
 800128c:	f002 f818 	bl	80032c0 <hydraulicSetState>
		break;
 8001290:	e004      	b.n	800129c <performAction+0x88>
	default:
		hydraulicSetState(free_all_state);
 8001292:	2300      	movs	r3, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f002 f813 	bl	80032c0 <hydraulicSetState>
		// Trạng thái tự do
		break;
 800129a:	bf00      	nop
	}
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <map_adc_to_float>:
float map_adc_to_float(uint16_t adc) {
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
    if (adc < MIN_ADC) adc = MIN_ADC;
    if (adc > MAX_ADC) adc = MAX_ADC;
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012b4:	d902      	bls.n	80012bc <map_adc_to_float+0x18>
 80012b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ba:	80fb      	strh	r3, [r7, #6]
    return ((adc - MIN_ADC) / (float)(MAX_ADC - MIN_ADC)) * MAX_FLOAT;
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80012e0 <map_adc_to_float+0x3c>
 80012ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012ce:	eef0 7a66 	vmov.f32	s15, s13
}
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	447a0000 	.word	0x447a0000

080012e4 <HandleAutoMode>:
        target_speed = 0;
    }
}

// Hàm xử lý chế độ Auto
void HandleAutoMode() {
 80012e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af02      	add	r7, sp, #8
    static uint64_t auto_timer = 0;  // Bộ đếm thời gian
    static int auto_state = 0;        // Trạng thái: 0 = thuận, 1 = ngược, 2 = dừng

    // Kiểm tra thời gian đã hết hạn chưa
    if (u_timer_expired(&auto_timer, (auto_state == 2) ? STOP_TIME : AUTO_TIME, HAL_GetTick())) {
 80012ec:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <HandleAutoMode+0x8c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d104      	bne.n	80012fe <HandleAutoMode+0x1a>
 80012f4:	f241 3488 	movw	r4, #5000	@ 0x1388
 80012f8:	f04f 0500 	mov.w	r5, #0
 80012fc:	e003      	b.n	8001306 <HandleAutoMode+0x22>
 80012fe:	f644 6420 	movw	r4, #20000	@ 0x4e20
 8001302:	f04f 0500 	mov.w	r5, #0
 8001306:	f002 f887 	bl	8003418 <HAL_GetTick>
 800130a:	4603      	mov	r3, r0
 800130c:	2200      	movs	r2, #0
 800130e:	4698      	mov	r8, r3
 8001310:	4691      	mov	r9, r2
 8001312:	e9cd 8900 	strd	r8, r9, [sp]
 8001316:	4622      	mov	r2, r4
 8001318:	462b      	mov	r3, r5
 800131a:	4816      	ldr	r0, [pc, #88]	@ (8001374 <HandleAutoMode+0x90>)
 800131c:	f7ff fd34 	bl	8000d88 <u_timer_expired>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d020      	beq.n	8001368 <HandleAutoMode+0x84>
        // Xử lý hành động theo trạng thái hiện tại
        if (auto_state == 0) {
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HandleAutoMode+0x8c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <HandleAutoMode+0x52>
            dir = 1;  // Chạy thuận
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <HandleAutoMode+0x94>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	e00a      	b.n	800134c <HandleAutoMode+0x68>
        } else if (auto_state == 1) {
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <HandleAutoMode+0x8c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d103      	bne.n	8001346 <HandleAutoMode+0x62>
            dir = 3;  // Chạy ngược
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <HandleAutoMode+0x94>)
 8001340:	2203      	movs	r2, #3
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	e002      	b.n	800134c <HandleAutoMode+0x68>
        } else {
            dir = 0;  // Dừng
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <HandleAutoMode+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
        }

        // Chuyển sang trạng thái tiếp theo (0 -> 1 -> 2 -> 0)
        auto_state = (auto_state + 1) % 3;
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <HandleAutoMode+0x8c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	1c59      	adds	r1, r3, #1
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HandleAutoMode+0x98>)
 8001354:	fb83 3201 	smull	r3, r2, r3, r1
 8001358:	17cb      	asrs	r3, r1, #31
 800135a:	1ad2      	subs	r2, r2, r3
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	1aca      	subs	r2, r1, r3
 8001364:	4b02      	ldr	r3, [pc, #8]	@ (8001370 <HandleAutoMode+0x8c>)
 8001366:	601a      	str	r2, [r3, #0]
    }
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001370:	20000268 	.word	0x20000268
 8001374:	20000270 	.word	0x20000270
 8001378:	2000010c 	.word	0x2000010c
 800137c:	55555556 	.word	0x55555556

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f001 ffe2 	bl	800334c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001388:	f000 f85a 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138c:	f000 f9c4 	bl	8001718 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001390:	f000 f8c0 	bl	8001514 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8001394:	f000 f996 	bl	80016c4 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 8001398:	f000 f8f2 	bl	8001580 <MX_CAN2_Init>
  MX_SPI1_Init();
 800139c:	f000 f926 	bl	80015ec <MX_SPI1_Init>
  MX_SPI2_Init();
 80013a0:	f000 f95a 	bl	8001658 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  mcp4922.begin(&hspi1,GPIOA,GPIO_PIN_4);
 80013a4:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <main+0x80>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2210      	movs	r2, #16
 80013aa:	4916      	ldr	r1, [pc, #88]	@ (8001404 <main+0x84>)
 80013ac:	4816      	ldr	r0, [pc, #88]	@ (8001408 <main+0x88>)
 80013ae:	4798      	blx	r3
  mcp3202.begin(&hspi2,GPIOB,GPIO_PIN_9);
 80013b0:	4b16      	ldr	r3, [pc, #88]	@ (800140c <main+0x8c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013b8:	4915      	ldr	r1, [pc, #84]	@ (8001410 <main+0x90>)
 80013ba:	4816      	ldr	r0, [pc, #88]	@ (8001414 <main+0x94>)
 80013bc:	4798      	blx	r3

//  Can_begin(&canOpen, &hcan2, 0);
//  CanCofigfilter(&canOpen, 0x11, 0x11);
//  canOpen.CanRxIT_Callback = &canOpenCallBack;
//  Can_Start(&canOpen, MotorID[0]);
  MotorInit(&hcan2);
 80013be:	4816      	ldr	r0, [pc, #88]	@ (8001418 <main+0x98>)
 80013c0:	f001 fb5c 	bl	8002a7c <MotorInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013c4:	f004 fd1e 	bl	8005e04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013c8:	4a14      	ldr	r2, [pc, #80]	@ (800141c <main+0x9c>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	4814      	ldr	r0, [pc, #80]	@ (8001420 <main+0xa0>)
 80013ce:	f004 fd63 	bl	8005e98 <osThreadNew>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a13      	ldr	r2, [pc, #76]	@ (8001424 <main+0xa4>)
 80013d6:	6013      	str	r3, [r2, #0]

  /* creation of Task_Pump */
  Task_PumpHandle = osThreadNew(StartTask_Pump, NULL, &Task_Pump_attributes);
 80013d8:	4a13      	ldr	r2, [pc, #76]	@ (8001428 <main+0xa8>)
 80013da:	2100      	movs	r1, #0
 80013dc:	4813      	ldr	r0, [pc, #76]	@ (800142c <main+0xac>)
 80013de:	f004 fd5b 	bl	8005e98 <osThreadNew>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <main+0xb0>)
 80013e6:	6013      	str	r3, [r2, #0]

  /* creation of Task_Motor */
  Task_MotorHandle = osThreadNew(StartTask_Motor, NULL, &Task_Motor_attributes);
 80013e8:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <main+0xb4>)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4812      	ldr	r0, [pc, #72]	@ (8001438 <main+0xb8>)
 80013ee:	f004 fd53 	bl	8005e98 <osThreadNew>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a11      	ldr	r2, [pc, #68]	@ (800143c <main+0xbc>)
 80013f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013f8:	f004 fd28 	bl	8005e4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <main+0x7c>
 8001400:	2000000c 	.word	0x2000000c
 8001404:	40020000 	.word	0x40020000
 8001408:	20000164 	.word	0x20000164
 800140c:	20000004 	.word	0x20000004
 8001410:	40020400 	.word	0x40020400
 8001414:	200001bc 	.word	0x200001bc
 8001418:	2000013c 	.word	0x2000013c
 800141c:	08009340 	.word	0x08009340
 8001420:	08001931 	.word	0x08001931
 8001424:	2000025c 	.word	0x2000025c
 8001428:	08009364 	.word	0x08009364
 800142c:	08001941 	.word	0x08001941
 8001430:	20000260 	.word	0x20000260
 8001434:	08009388 	.word	0x08009388
 8001438:	08001a29 	.word	0x08001a29
 800143c:	20000264 	.word	0x20000264

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	@ 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	2230      	movs	r2, #48	@ 0x30
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f007 fc62 	bl	8008d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <SystemClock_Config+0xcc>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	4a27      	ldr	r2, [pc, #156]	@ (800150c <SystemClock_Config+0xcc>)
 800146e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001472:	6413      	str	r3, [r2, #64]	@ 0x40
 8001474:	4b25      	ldr	r3, [pc, #148]	@ (800150c <SystemClock_Config+0xcc>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <SystemClock_Config+0xd0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a21      	ldr	r2, [pc, #132]	@ (8001510 <SystemClock_Config+0xd0>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <SystemClock_Config+0xd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149c:	2302      	movs	r3, #2
 800149e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a4:	2310      	movs	r3, #16
 80014a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a8:	2302      	movs	r3, #2
 80014aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014b0:	2308      	movs	r3, #8
 80014b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014b4:	23a8      	movs	r3, #168	@ 0xa8
 80014b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014bc:	2304      	movs	r3, #4
 80014be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 f8fb 	bl	80046c0 <HAL_RCC_OscConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014d0:	f000 fbc8 	bl	8001c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	230f      	movs	r3, #15
 80014d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d8:	2302      	movs	r3, #2
 80014da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	2105      	movs	r1, #5
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fb5c 	bl	8004bb0 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014fe:	f000 fbb1 	bl	8001c64 <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3750      	adds	r7, #80	@ 0x50
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40007000 	.word	0x40007000

08001514 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <MX_CAN1_Init+0x64>)
 800151a:	4a18      	ldr	r2, [pc, #96]	@ (800157c <MX_CAN1_Init+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <MX_CAN1_Init+0x64>)
 8001520:	2215      	movs	r2, #21
 8001522:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_CAN1_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <MX_CAN1_Init+0x64>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_CAN1_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <MX_CAN1_Init+0x64>)
 8001538:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800153c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_CAN1_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <MX_CAN1_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <MX_CAN1_Init+0x64>)
 800154c:	2200      	movs	r2, #0
 800154e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <MX_CAN1_Init+0x64>)
 8001552:	2200      	movs	r2, #0
 8001554:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001556:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <MX_CAN1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <MX_CAN1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_CAN1_Init+0x64>)
 8001564:	f001 ff64 	bl	8003430 <HAL_CAN_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800156e:	f000 fb79 	bl	8001c64 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */
 //CanCofigfilter(&CanUser1,FilterHigh, FilterLOw);

  /* USER CODE END CAN1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000114 	.word	0x20000114
 800157c:	40006400 	.word	0x40006400

08001580 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001584:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <MX_CAN2_Init+0x64>)
 8001586:	4a18      	ldr	r2, [pc, #96]	@ (80015e8 <MX_CAN2_Init+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <MX_CAN2_Init+0x64>)
 800158c:	2215      	movs	r2, #21
 800158e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <MX_CAN2_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001596:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <MX_CAN2_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_CAN2_Init+0x64>)
 800159e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015a2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <MX_CAN2_Init+0x64>)
 80015a6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015aa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80015ac:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <MX_CAN2_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_CAN2_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <MX_CAN2_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_CAN2_Init+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <MX_CAN2_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_CAN2_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_CAN2_Init+0x64>)
 80015d2:	f001 ff2d 	bl	8003430 <HAL_CAN_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80015dc:	f000 fb42 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000013c 	.word	0x2000013c
 80015e8:	40006800 	.word	0x40006800

080015ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015f0:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <MX_SPI1_Init+0x64>)
 80015f2:	4a18      	ldr	r2, [pc, #96]	@ (8001654 <MX_SPI1_Init+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015f6:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <MX_SPI1_Init+0x64>)
 80015f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015fe:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <MX_SPI1_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <MX_SPI1_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160a:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <MX_SPI1_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <MX_SPI1_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_SPI1_Init+0x64>)
 8001618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800161c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <MX_SPI1_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001624:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <MX_SPI1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MX_SPI1_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <MX_SPI1_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <MX_SPI1_Init+0x64>)
 8001638:	220a      	movs	r2, #10
 800163a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MX_SPI1_Init+0x64>)
 800163e:	f003 fc97 	bl	8004f70 <HAL_SPI_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001648:	f000 fb0c 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000164 	.word	0x20000164
 8001654:	40013000 	.word	0x40013000

08001658 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <MX_SPI2_Init+0x64>)
 800165e:	4a18      	ldr	r2, [pc, #96]	@ (80016c0 <MX_SPI2_Init+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MX_SPI2_Init+0x64>)
 8001664:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001668:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800166a:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <MX_SPI2_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <MX_SPI2_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_SPI2_Init+0x64>)
 8001678:	2202      	movs	r2, #2
 800167a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800167c:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <MX_SPI2_Init+0x64>)
 800167e:	2201      	movs	r2, #1
 8001680:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <MX_SPI2_Init+0x64>)
 8001684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001688:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800168a:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <MX_SPI2_Init+0x64>)
 800168c:	2228      	movs	r2, #40	@ 0x28
 800168e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001690:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <MX_SPI2_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001696:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <MX_SPI2_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <MX_SPI2_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <MX_SPI2_Init+0x64>)
 80016a4:	220a      	movs	r2, #10
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	@ (80016bc <MX_SPI2_Init+0x64>)
 80016aa:	f003 fc61 	bl	8004f70 <HAL_SPI_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016b4:	f000 fad6 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200001bc 	.word	0x200001bc
 80016c0:	40003800 	.word	0x40003800

080016c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <MX_USART3_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <MX_USART3_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <MX_USART3_UART_Init+0x4c>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <MX_USART3_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_USART3_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <MX_USART3_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_USART3_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <MX_USART3_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_USART3_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	@ (8001710 <MX_USART3_UART_Init+0x4c>)
 80016fc:	f004 f88a 	bl	8005814 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f000 faad 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000214 	.word	0x20000214
 8001714:	40004800 	.word	0x40004800

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	@ 0x30
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
 8001732:	4b78      	ldr	r3, [pc, #480]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a77      	ldr	r2, [pc, #476]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 8001738:	f043 0320 	orr.w	r3, r3, #32
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b75      	ldr	r3, [pc, #468]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	61bb      	str	r3, [r7, #24]
 8001748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	4b71      	ldr	r3, [pc, #452]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a70      	ldr	r2, [pc, #448]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b6e      	ldr	r3, [pc, #440]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b6a      	ldr	r3, [pc, #424]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a69      	ldr	r2, [pc, #420]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b67      	ldr	r3, [pc, #412]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b63      	ldr	r3, [pc, #396]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a62      	ldr	r2, [pc, #392]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b60      	ldr	r3, [pc, #384]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 80017a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b59      	ldr	r3, [pc, #356]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b55      	ldr	r3, [pc, #340]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a54      	ldr	r2, [pc, #336]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b52      	ldr	r3, [pc, #328]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b4e      	ldr	r3, [pc, #312]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a4d      	ldr	r2, [pc, #308]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b4b      	ldr	r3, [pc, #300]	@ (8001914 <MX_GPIO_Init+0x1fc>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2110      	movs	r1, #16
 80017f6:	4848      	ldr	r0, [pc, #288]	@ (8001918 <MX_GPIO_Init+0x200>)
 80017f8:	f002 ff48 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 8001802:	4846      	ldr	r0, [pc, #280]	@ (800191c <MX_GPIO_Init+0x204>)
 8001804:	f002 ff42 	bl	800468c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2140      	movs	r1, #64	@ 0x40
 800180c:	4844      	ldr	r0, [pc, #272]	@ (8001920 <MX_GPIO_Init+0x208>)
 800180e:	f002 ff3d 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001818:	4842      	ldr	r0, [pc, #264]	@ (8001924 <MX_GPIO_Init+0x20c>)
 800181a:	f002 ff37 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800181e:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 8001822:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4619      	mov	r1, r3
 8001832:	483d      	ldr	r0, [pc, #244]	@ (8001928 <MX_GPIO_Init+0x210>)
 8001834:	f002 fd76 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001838:	230c      	movs	r3, #12
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4838      	ldr	r0, [pc, #224]	@ (800192c <MX_GPIO_Init+0x214>)
 800184c:	f002 fd6a 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001850:	2308      	movs	r3, #8
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001854:	2303      	movs	r3, #3
 8001856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	482d      	ldr	r0, [pc, #180]	@ (8001918 <MX_GPIO_Init+0x200>)
 8001864:	f002 fd5e 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001868:	2310      	movs	r3, #16
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	4826      	ldr	r0, [pc, #152]	@ (8001918 <MX_GPIO_Init+0x200>)
 8001880:	f002 fd50 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001884:	2340      	movs	r3, #64	@ 0x40
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	4820      	ldr	r0, [pc, #128]	@ (8001918 <MX_GPIO_Init+0x200>)
 8001898:	f002 fd44 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800189c:	2303      	movs	r3, #3
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	481b      	ldr	r0, [pc, #108]	@ (800191c <MX_GPIO_Init+0x204>)
 80018b0:	f002 fd38 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG7
                           PG10 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80018b4:	f44f 634f 	mov.w	r3, #3312	@ 0xcf0
 80018b8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	4813      	ldr	r0, [pc, #76]	@ (800191c <MX_GPIO_Init+0x204>)
 80018ce:	f002 fd29 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018d2:	2340      	movs	r3, #64	@ 0x40
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	480d      	ldr	r0, [pc, #52]	@ (8001920 <MX_GPIO_Init+0x208>)
 80018ea:	f002 fd1b 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	4807      	ldr	r0, [pc, #28]	@ (8001924 <MX_GPIO_Init+0x20c>)
 8001908:	f002 fd0c 	bl	8004324 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800190c:	bf00      	nop
 800190e:	3730      	adds	r7, #48	@ 0x30
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000
 800191c:	40021800 	.word	0x40021800
 8001920:	40020c00 	.word	0x40020c00
 8001924:	40020400 	.word	0x40020400
 8001928:	40021400 	.word	0x40021400
 800192c:	40020800 	.word	0x40020800

08001930 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001938:	2001      	movs	r0, #1
 800193a:	f004 fb3f 	bl	8005fbc <osDelay>
 800193e:	e7fb      	b.n	8001938 <StartDefaultTask+0x8>

08001940 <StartTask_Pump>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Pump */
void StartTask_Pump(void *argument)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Pump */
  /* Infinite loop */
  for (;;)
  {
	  readGPIOInputs();
 8001948:	f7ff fa82 	bl	8000e50 <readGPIOInputs>
      // Kiểm tra nút RESET (GPIOG_PIN_2)
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)
 800194c:	2140      	movs	r1, #64	@ 0x40
 800194e:	482c      	ldr	r0, [pc, #176]	@ (8001a00 <StartTask_Pump+0xc0>)
 8001950:	f002 fe84 	bl	800465c <HAL_GPIO_ReadPin>
 8001954:	4603      	mov	r3, r0
 8001956:	2b01      	cmp	r3, #1
 8001958:	d122      	bne.n	80019a0 <StartTask_Pump+0x60>
      {
    	 // motorErrorReset();
    	  NMTmanagement(0x2, MotorID[0]);
 800195a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <StartTask_Pump+0xc4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4619      	mov	r1, r3
 8001960:	2002      	movs	r0, #2
 8001962:	f001 fb1b 	bl	8002f9c <NMTmanagement>
    	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2104      	movs	r1, #4
 800196a:	4827      	ldr	r0, [pc, #156]	@ (8001a08 <StartTask_Pump+0xc8>)
 800196c:	f002 fe8e 	bl	800468c <HAL_GPIO_WritePin>
          hydraulicSetState(free_all_state); // Dừng mọi hoạt động
 8001970:	2300      	movs	r3, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fca4 	bl	80032c0 <hydraulicSetState>
          // Reset tất cả
          buttonPressCount = 0;
 8001978:	4b24      	ldr	r3, [pc, #144]	@ (8001a0c <StartTask_Pump+0xcc>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
          autoStep = 0;
 800197e:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <StartTask_Pump+0xd0>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
          modeLift = false;
 8001984:	4b23      	ldr	r3, [pc, #140]	@ (8001a14 <StartTask_Pump+0xd4>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
          memset(timer_hydarulic, 0, sizeof(timer_hydarulic));  // Reset timer
 800198a:	2210      	movs	r2, #16
 800198c:	2100      	movs	r1, #0
 800198e:	4822      	ldr	r0, [pc, #136]	@ (8001a18 <StartTask_Pump+0xd8>)
 8001990:	f007 f9c2 	bl	8008d18 <memset>
          memset(stepDone, 0, sizeof(stepDone));  // Reset cờ chạy auto
 8001994:	2204      	movs	r2, #4
 8001996:	2100      	movs	r1, #0
 8001998:	4820      	ldr	r0, [pc, #128]	@ (8001a1c <StartTask_Pump+0xdc>)
 800199a:	f007 f9bd 	bl	8008d18 <memset>
          continue;
 800199e:	e02d      	b.n	80019fc <StartTask_Pump+0xbc>
      }



      mode = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10) == GPIO_PIN_SET ? true : false;
 80019a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019a4:	481e      	ldr	r0, [pc, #120]	@ (8001a20 <StartTask_Pump+0xe0>)
 80019a6:	f002 fe59 	bl	800465c <HAL_GPIO_ReadPin>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <StartTask_Pump+0xe4>)
 80019b8:	701a      	strb	r2, [r3, #0]

      if (mode) {
 80019ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <StartTask_Pump+0xe4>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <StartTask_Pump+0x88>
          autoMode();
 80019c2:	f7ff fabb 	bl	8000f3c <autoMode>
 80019c6:	e00b      	b.n	80019e0 <StartTask_Pump+0xa0>
      } else {
          manualMode();
 80019c8:	f7ff fa76 	bl	8000eb8 <manualMode>
          memset(timer_hydarulic, 0, sizeof(timer_hydarulic));  // Reset timer chế độ auto
 80019cc:	2210      	movs	r2, #16
 80019ce:	2100      	movs	r1, #0
 80019d0:	4811      	ldr	r0, [pc, #68]	@ (8001a18 <StartTask_Pump+0xd8>)
 80019d2:	f007 f9a1 	bl	8008d18 <memset>
          memset(stepDone, 0, sizeof(stepDone));  // Reset cờ chạy auto
 80019d6:	2204      	movs	r2, #4
 80019d8:	2100      	movs	r1, #0
 80019da:	4810      	ldr	r0, [pc, #64]	@ (8001a1c <StartTask_Pump+0xdc>)
 80019dc:	f007 f99c 	bl	8008d18 <memset>
      }

      performAction(buttonPressCount, modeLift);
 80019e0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <StartTask_Pump+0xcc>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <StartTask_Pump+0xd4>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	4619      	mov	r1, r3
 80019f0:	4610      	mov	r0, r2
 80019f2:	f7ff fc0f 	bl	8001214 <performAction>
      osDelay(10);
 80019f6:	200a      	movs	r0, #10
 80019f8:	f004 fae0 	bl	8005fbc <osDelay>
	  readGPIOInputs();
 80019fc:	e7a4      	b.n	8001948 <StartTask_Pump+0x8>
 80019fe:	bf00      	nop
 8001a00:	40020000 	.word	0x40020000
 8001a04:	20000030 	.word	0x20000030
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	200000d4 	.word	0x200000d4
 8001a10:	200000d6 	.word	0x200000d6
 8001a14:	200000d5 	.word	0x200000d5
 8001a18:	200000e8 	.word	0x200000e8
 8001a1c:	200000dc 	.word	0x200000dc
 8001a20:	40021400 	.word	0x40021400
 8001a24:	200000e0 	.word	0x200000e0

08001a28 <StartTask_Motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Motor */

void StartTask_Motor(void *argument) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartTask_Motor */
	osDelay(5000);
 8001a30:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001a34:	f004 fac2 	bl	8005fbc <osDelay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	487c      	ldr	r0, [pc, #496]	@ (8001c30 <StartTask_Motor+0x208>)
 8001a3e:	f002 fe25 	bl	800468c <HAL_GPIO_WritePin>
	// NMTmanagement(0x2, MotorID[0]);
	SetOperationMode(3, MotorID[0]);
 8001a42:	4b7c      	ldr	r3, [pc, #496]	@ (8001c34 <StartTask_Motor+0x20c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f001 f839 	bl	8002ac0 <SetOperationMode>
	SDOProfileAcc(speedToRps(0.25), MotorID[0]);
 8001a4e:	ed9f 0b72 	vldr	d0, [pc, #456]	@ 8001c18 <StartTask_Motor+0x1f0>
 8001a52:	f001 fc1d 	bl	8003290 <speedToRps>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b76      	ldr	r3, [pc, #472]	@ (8001c34 <StartTask_Motor+0x20c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f001 f8ca 	bl	8002bf8 <SDOProfileAcc>
	SDOProfileDec(speedToRps(0.3), MotorID[0]);
 8001a64:	ed9f 0b6e 	vldr	d0, [pc, #440]	@ 8001c20 <StartTask_Motor+0x1f8>
 8001a68:	f001 fc12 	bl	8003290 <speedToRps>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b71      	ldr	r3, [pc, #452]	@ (8001c34 <StartTask_Motor+0x20c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4610      	mov	r0, r2
 8001a76:	f001 f969 	bl	8002d4c <SDOProfileDec>
	SetControlWord(ControlWord_EN, MotorID[0]); // enable motor
 8001a7a:	4b6e      	ldr	r3, [pc, #440]	@ (8001c34 <StartTask_Motor+0x20c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	200f      	movs	r0, #15
 8001a82:	f001 f86b 	bl	8002b5c <SetControlWord>
	NMTmanagement(0x1, MotorID[0]);
 8001a86:	4b6b      	ldr	r3, [pc, #428]	@ (8001c34 <StartTask_Motor+0x20c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f001 fa85 	bl	8002f9c <NMTmanagement>

    /* Infinite loop */
    for (;;) {
		reset_motor = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET;
 8001a92:	2108      	movs	r1, #8
 8001a94:	4868      	ldr	r0, [pc, #416]	@ (8001c38 <StartTask_Motor+0x210>)
 8001a96:	f002 fde1 	bl	800465c <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b65      	ldr	r3, [pc, #404]	@ (8001c3c <StartTask_Motor+0x214>)
 8001aa8:	701a      	strb	r2, [r3, #0]

		adc_speed = mcp3202.readChannel(0);
 8001aaa:	4b65      	ldr	r3, [pc, #404]	@ (8001c40 <StartTask_Motor+0x218>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2000      	movs	r0, #0
 8001ab0:	4798      	blx	r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b63      	ldr	r3, [pc, #396]	@ (8001c44 <StartTask_Motor+0x21c>)
 8001ab8:	801a      	strh	r2, [r3, #0]

		if (reset_motor == 0) {
 8001aba:	4b60      	ldr	r3, [pc, #384]	@ (8001c3c <StartTask_Motor+0x214>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	f083 0301 	eor.w	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 808e 	beq.w	8001be6 <StartTask_Motor+0x1be>
			if (mode == 0) { // Chế độ Manual
 8001aca:	4b5f      	ldr	r3, [pc, #380]	@ (8001c48 <StartTask_Motor+0x220>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	f083 0301 	eor.w	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d064      	beq.n	8001ba2 <StartTask_Motor+0x17a>
				forward_pressed = (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6)
 8001ad8:	2140      	movs	r1, #64	@ 0x40
 8001ada:	485c      	ldr	r0, [pc, #368]	@ (8001c4c <StartTask_Motor+0x224>)
 8001adc:	f002 fdbe 	bl	800465c <HAL_GPIO_ReadPin>
 8001ae0:	4603      	mov	r3, r0
						== GPIO_PIN_SET);
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2da      	uxtb	r2, r3
				forward_pressed = (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6)
 8001aec:	4b58      	ldr	r3, [pc, #352]	@ (8001c50 <StartTask_Motor+0x228>)
 8001aee:	701a      	strb	r2, [r3, #0]
				reverse_pressed = (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8)
 8001af0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001af4:	4855      	ldr	r0, [pc, #340]	@ (8001c4c <StartTask_Motor+0x224>)
 8001af6:	f002 fdb1 	bl	800465c <HAL_GPIO_ReadPin>
 8001afa:	4603      	mov	r3, r0
						== GPIO_PIN_SET);
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2da      	uxtb	r2, r3
				reverse_pressed = (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8)
 8001b06:	4b53      	ldr	r3, [pc, #332]	@ (8001c54 <StartTask_Motor+0x22c>)
 8001b08:	701a      	strb	r2, [r3, #0]
				if (forward_pressed && reverse_pressed) {
 8001b0a:	4b51      	ldr	r3, [pc, #324]	@ (8001c50 <StartTask_Motor+0x228>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00e      	beq.n	8001b30 <StartTask_Motor+0x108>
 8001b12:	4b50      	ldr	r3, [pc, #320]	@ (8001c54 <StartTask_Motor+0x22c>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00a      	beq.n	8001b30 <StartTask_Motor+0x108>
					dir = 0; // Tránh xung đột khi nhấn cả hai nút
 8001b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c58 <StartTask_Motor+0x230>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
					target_speed = 0;
 8001b20:	494e      	ldr	r1, [pc, #312]	@ (8001c5c <StartTask_Motor+0x234>)
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	e9c1 2300 	strd	r2, r3, [r1]
 8001b2e:	e03a      	b.n	8001ba6 <StartTask_Motor+0x17e>
				} else if (forward_pressed) {
 8001b30:	4b47      	ldr	r3, [pc, #284]	@ (8001c50 <StartTask_Motor+0x228>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d012      	beq.n	8001b5e <StartTask_Motor+0x136>
					dir = 1;
 8001b38:	4b47      	ldr	r3, [pc, #284]	@ (8001c58 <StartTask_Motor+0x230>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
					target_speed = map_adc_to_float(adc_speed);
 8001b3e:	4b41      	ldr	r3, [pc, #260]	@ (8001c44 <StartTask_Motor+0x21c>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fbae 	bl	80012a4 <map_adc_to_float>
 8001b48:	ee10 3a10 	vmov	r3, s0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fca3 	bl	8000498 <__aeabi_f2d>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4941      	ldr	r1, [pc, #260]	@ (8001c5c <StartTask_Motor+0x234>)
 8001b58:	e9c1 2300 	strd	r2, r3, [r1]
 8001b5c:	e023      	b.n	8001ba6 <StartTask_Motor+0x17e>
				} else if (reverse_pressed) {
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c54 <StartTask_Motor+0x22c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d012      	beq.n	8001b8c <StartTask_Motor+0x164>
					dir = 3;
 8001b66:	4b3c      	ldr	r3, [pc, #240]	@ (8001c58 <StartTask_Motor+0x230>)
 8001b68:	2203      	movs	r2, #3
 8001b6a:	601a      	str	r2, [r3, #0]
					target_speed = map_adc_to_float(adc_speed);
 8001b6c:	4b35      	ldr	r3, [pc, #212]	@ (8001c44 <StartTask_Motor+0x21c>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fb97 	bl	80012a4 <map_adc_to_float>
 8001b76:	ee10 3a10 	vmov	r3, s0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fc8c 	bl	8000498 <__aeabi_f2d>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4935      	ldr	r1, [pc, #212]	@ (8001c5c <StartTask_Motor+0x234>)
 8001b86:	e9c1 2300 	strd	r2, r3, [r1]
 8001b8a:	e00c      	b.n	8001ba6 <StartTask_Motor+0x17e>
				} else {
					dir = 0;
 8001b8c:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <StartTask_Motor+0x230>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
					target_speed = 0;
 8001b92:	4932      	ldr	r1, [pc, #200]	@ (8001c5c <StartTask_Motor+0x234>)
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	e9c1 2300 	strd	r2, r3, [r1]
 8001ba0:	e001      	b.n	8001ba6 <StartTask_Motor+0x17e>
				}

			} else {
				HandleAutoMode();
 8001ba2:	f7ff fb9f 	bl	80012e4 <HandleAutoMode>
			}
			target_speed = map_adc_to_float(adc_speed);
 8001ba6:	4b27      	ldr	r3, [pc, #156]	@ (8001c44 <StartTask_Motor+0x21c>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fb7a 	bl	80012a4 <map_adc_to_float>
 8001bb0:	ee10 3a10 	vmov	r3, s0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fc6f 	bl	8000498 <__aeabi_f2d>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4927      	ldr	r1, [pc, #156]	@ (8001c5c <StartTask_Motor+0x234>)
 8001bc0:	e9c1 2300 	strd	r2, r3, [r1]
			motorControl(true, m_error, dir, target_speed);
 8001bc4:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <StartTask_Motor+0x238>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4a23      	ldr	r2, [pc, #140]	@ (8001c58 <StartTask_Motor+0x230>)
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	4923      	ldr	r1, [pc, #140]	@ (8001c5c <StartTask_Motor+0x234>)
 8001bd0:	ed91 7b00 	vldr	d7, [r1]
 8001bd4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd8:	eef0 0a67 	vmov.f32	s1, s15
 8001bdc:	4619      	mov	r1, r3
 8001bde:	2001      	movs	r0, #1
 8001be0:	f001 fa9c 	bl	800311c <motorControl>
 8001be4:	e013      	b.n	8001c0e <StartTask_Motor+0x1e6>
		} else {

			NMTmanagement(0x1, MotorID[0]);
 8001be6:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <StartTask_Motor+0x20c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4619      	mov	r1, r3
 8001bec:	2001      	movs	r0, #1
 8001bee:	f001 f9d5 	bl	8002f9c <NMTmanagement>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	480e      	ldr	r0, [pc, #56]	@ (8001c30 <StartTask_Motor+0x208>)
 8001bf8:	f002 fd48 	bl	800468c <HAL_GPIO_WritePin>
			motorControl(true, m_error, 0, 0);
 8001bfc:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <StartTask_Motor+0x238>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8001c28 <StartTask_Motor+0x200>
 8001c04:	2200      	movs	r2, #0
 8001c06:	4619      	mov	r1, r3
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f001 fa87 	bl	800311c <motorControl>
		}
		osDelay(50);
 8001c0e:	2032      	movs	r0, #50	@ 0x32
 8001c10:	f004 f9d4 	bl	8005fbc <osDelay>
		reset_motor = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET;
 8001c14:	e73d      	b.n	8001a92 <StartTask_Motor+0x6a>
 8001c16:	bf00      	nop
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	3fd00000 	.word	0x3fd00000
 8001c20:	33333333 	.word	0x33333333
 8001c24:	3fd33333 	.word	0x3fd33333
	...
 8001c30:	40021800 	.word	0x40021800
 8001c34:	20000030 	.word	0x20000030
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	200000e1 	.word	0x200000e1
 8001c40:	20000004 	.word	0x20000004
 8001c44:	200000fe 	.word	0x200000fe
 8001c48:	200000e0 	.word	0x200000e0
 8001c4c:	40021400 	.word	0x40021400
 8001c50:	20000108 	.word	0x20000108
 8001c54:	20000109 	.word	0x20000109
 8001c58:	2000010c 	.word	0x2000010c
 8001c5c:	20000100 	.word	0x20000100
 8001c60:	20000110 	.word	0x20000110

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <Error_Handler+0x8>

08001c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_MspInit+0x54>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	4a11      	ldr	r2, [pc, #68]	@ (8001cc4 <HAL_MspInit+0x54>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c86:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <HAL_MspInit+0x54>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_MspInit+0x54>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_MspInit+0x54>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <HAL_MspInit+0x54>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	210f      	movs	r1, #15
 8001cb2:	f06f 0001 	mvn.w	r0, #1
 8001cb6:	f002 fafe 	bl	80042b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	@ 0x30
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8001e10 <HAL_CAN_MspInit+0x148>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d13d      	bne.n	8001d66 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cea:	4b4a      	ldr	r3, [pc, #296]	@ (8001e14 <HAL_CAN_MspInit+0x14c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	4a48      	ldr	r2, [pc, #288]	@ (8001e14 <HAL_CAN_MspInit+0x14c>)
 8001cf2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cf4:	4b47      	ldr	r3, [pc, #284]	@ (8001e14 <HAL_CAN_MspInit+0x14c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d10d      	bne.n	8001d18 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	4b45      	ldr	r3, [pc, #276]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	4a44      	ldr	r2, [pc, #272]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001d06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0c:	4b42      	ldr	r3, [pc, #264]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d20:	4a3d      	ldr	r2, [pc, #244]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001d22:	f043 0308 	orr.w	r3, r3, #8
 8001d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d28:	4b3b      	ldr	r3, [pc, #236]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d34:	2303      	movs	r3, #3
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d44:	2309      	movs	r3, #9
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4833      	ldr	r0, [pc, #204]	@ (8001e1c <HAL_CAN_MspInit+0x154>)
 8001d50:	f002 fae8 	bl	8004324 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2105      	movs	r1, #5
 8001d58:	2014      	movs	r0, #20
 8001d5a:	f002 faac 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d5e:	2014      	movs	r0, #20
 8001d60:	f002 fac5 	bl	80042ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001d64:	e050      	b.n	8001e08 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e20 <HAL_CAN_MspInit+0x158>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d14b      	bne.n	8001e08 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	4a27      	ldr	r2, [pc, #156]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001d7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d80:	4b25      	ldr	r3, [pc, #148]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d8c:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <HAL_CAN_MspInit+0x14c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a20      	ldr	r2, [pc, #128]	@ (8001e14 <HAL_CAN_MspInit+0x14c>)
 8001d94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d96:	4b1f      	ldr	r3, [pc, #124]	@ (8001e14 <HAL_CAN_MspInit+0x14c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10d      	bne.n	8001dba <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001da8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dae:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a15      	ldr	r2, [pc, #84]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <HAL_CAN_MspInit+0x150>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001dd6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001de8:	2309      	movs	r3, #9
 8001dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <HAL_CAN_MspInit+0x15c>)
 8001df4:	f002 fa96 	bl	8004324 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2105      	movs	r1, #5
 8001dfc:	2040      	movs	r0, #64	@ 0x40
 8001dfe:	f002 fa5a 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001e02:	2040      	movs	r0, #64	@ 0x40
 8001e04:	f002 fa73 	bl	80042ee <HAL_NVIC_EnableIRQ>
}
 8001e08:	bf00      	nop
 8001e0a:	3730      	adds	r7, #48	@ 0x30
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40006400 	.word	0x40006400
 8001e14:	20000278 	.word	0x20000278
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40006800 	.word	0x40006800
 8001e24:	40020400 	.word	0x40020400

08001e28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	@ 0x30
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a41      	ldr	r2, [pc, #260]	@ (8001f4c <HAL_SPI_MspInit+0x124>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d14a      	bne.n	8001ee0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	4b40      	ldr	r3, [pc, #256]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	4a3f      	ldr	r2, [pc, #252]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001e54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	4b39      	ldr	r3, [pc, #228]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	4a38      	ldr	r2, [pc, #224]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e76:	4b36      	ldr	r3, [pc, #216]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	4b32      	ldr	r3, [pc, #200]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a31      	ldr	r2, [pc, #196]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b2f      	ldr	r3, [pc, #188]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eae:	2305      	movs	r3, #5
 8001eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4826      	ldr	r0, [pc, #152]	@ (8001f54 <HAL_SPI_MspInit+0x12c>)
 8001eba:	f002 fa33 	bl	8004324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ece:	2305      	movs	r3, #5
 8001ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	481f      	ldr	r0, [pc, #124]	@ (8001f58 <HAL_SPI_MspInit+0x130>)
 8001eda:	f002 fa23 	bl	8004324 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ede:	e031      	b.n	8001f44 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f5c <HAL_SPI_MspInit+0x134>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d12c      	bne.n	8001f44 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4a17      	ldr	r2, [pc, #92]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a10      	ldr	r2, [pc, #64]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <HAL_SPI_MspInit+0x128>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001f22:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f34:	2305      	movs	r3, #5
 8001f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4806      	ldr	r0, [pc, #24]	@ (8001f58 <HAL_SPI_MspInit+0x130>)
 8001f40:	f002 f9f0 	bl	8004324 <HAL_GPIO_Init>
}
 8001f44:	bf00      	nop
 8001f46:	3730      	adds	r7, #48	@ 0x30
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40013000 	.word	0x40013000
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40003800 	.word	0x40003800

08001f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	@ 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	@ (8001fe4 <HAL_UART_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12c      	bne.n	8001fdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	@ (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f92:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <HAL_UART_MspInit+0x88>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	@ (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_UART_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fcc:	2307      	movs	r3, #7
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	@ (8001fec <HAL_UART_MspInit+0x8c>)
 8001fd8:	f002 f9a4 	bl	8004324 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	@ 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40004800 	.word	0x40004800
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020c00 	.word	0x40020c00

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <HardFault_Handler+0x4>

08002000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <MemManage_Handler+0x4>

08002008 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <UsageFault_Handler+0x4>

08002018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202a:	f001 f9e1 	bl	80033f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800202e:	f005 fbed 	bl	800780c <xTaskGetSchedulerState>
 8002032:	4603      	mov	r3, r0
 8002034:	2b01      	cmp	r3, #1
 8002036:	d001      	beq.n	800203c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002038:	f006 f9e6 	bl	8008408 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <CAN1_RX0_IRQHandler+0x10>)
 8002046:	f001 fe2b 	bl	8003ca0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000114 	.word	0x20000114

08002054 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <CAN2_RX0_IRQHandler+0x10>)
 800205a:	f001 fe21 	bl	8003ca0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000013c 	.word	0x2000013c

08002068 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	e00a      	b.n	8002090 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800207a:	f3af 8000 	nop.w
 800207e:	4601      	mov	r1, r0
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	60ba      	str	r2, [r7, #8]
 8002086:	b2ca      	uxtb	r2, r1
 8002088:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	dbf0      	blt.n	800207a <_read+0x12>
  }

  return len;
 8002098:	687b      	ldr	r3, [r7, #4]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e009      	b.n	80020c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	60ba      	str	r2, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	dbf1      	blt.n	80020b4 <_write+0x12>
  }
  return len;
 80020d0:	687b      	ldr	r3, [r7, #4]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <_close>:

int _close(int file)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002102:	605a      	str	r2, [r3, #4]
  return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_isatty>:

int _isatty(int file)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800214c:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <_sbrk+0x5c>)
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <_sbrk+0x60>)
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002158:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <_sbrk+0x64>)
 8002162:	4a12      	ldr	r2, [pc, #72]	@ (80021ac <_sbrk+0x68>)
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	429a      	cmp	r2, r3
 8002172:	d207      	bcs.n	8002184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002174:	f006 fe1e 	bl	8008db4 <__errno>
 8002178:	4603      	mov	r3, r0
 800217a:	220c      	movs	r2, #12
 800217c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	e009      	b.n	8002198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002184:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218a:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <_sbrk+0x64>)
 8002194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20020000 	.word	0x20020000
 80021a4:	00000400 	.word	0x00000400
 80021a8:	2000027c 	.word	0x2000027c
 80021ac:	20004e50 	.word	0x20004e50

080021b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <SystemInit+0x20>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	4a05      	ldr	r2, [pc, #20]	@ (80021d0 <SystemInit+0x20>)
 80021bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800220c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021d8:	480d      	ldr	r0, [pc, #52]	@ (8002210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021da:	490e      	ldr	r1, [pc, #56]	@ (8002214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0b      	ldr	r2, [pc, #44]	@ (800221c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021f0:	4c0b      	ldr	r4, [pc, #44]	@ (8002220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021fe:	f7ff ffd7 	bl	80021b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002202:	f006 fddd 	bl	8008dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002206:	f7ff f8bb 	bl	8001380 <main>
  bx  lr    
 800220a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800220c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002214:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002218:	080093d4 	.word	0x080093d4
  ldr r2, =_sbss
 800221c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002220:	20004e50 	.word	0x20004e50

08002224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC_IRQHandler>
	...

08002228 <Can_begin>:
CAN_COM* Can_communication1;
CAN_COM* Can_communication2;
void (*rxDataITcallback)() = NULL;

void Can_begin(CAN_COM* canhandle, CAN_HandleTypeDef* Handle, uint8_t Idmode)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	4613      	mov	r3, r2
 8002234:	71fb      	strb	r3, [r7, #7]
	canhandle->CanHandle = Handle;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	629a      	str	r2, [r3, #40]	@ 0x28
	canhandle->IDMode = Idmode;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	79fa      	ldrb	r2, [r7, #7]
 8002240:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	if(Handle == &hcan1)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4a08      	ldr	r2, [pc, #32]	@ (8002268 <Can_begin+0x40>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d103      	bne.n	8002254 <Can_begin+0x2c>
	Can_communication1 = canhandle;
 800224c:	4a07      	ldr	r2, [pc, #28]	@ (800226c <Can_begin+0x44>)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6013      	str	r3, [r2, #0]
	else
		Can_communication2 = canhandle;
}
 8002252:	e002      	b.n	800225a <Can_begin+0x32>
		Can_communication2 = canhandle;
 8002254:	4a06      	ldr	r2, [pc, #24]	@ (8002270 <Can_begin+0x48>)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6013      	str	r3, [r2, #0]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000114 	.word	0x20000114
 800226c:	20000280 	.word	0x20000280
 8002270:	20000284 	.word	0x20000284

08002274 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a13      	ldr	r2, [pc, #76]	@ (80022cc <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d10f      	bne.n	80022a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	{
	HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication1->Can_rxHeader, Can_communication1->Can_rxData);
 8002284:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 800228c:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3364      	adds	r3, #100	@ 0x64
 8002292:	2100      	movs	r1, #0
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f001 fbbb 	bl	8003a10 <HAL_CAN_GetRxMessage>
	Can_communication1->CanRxIT_Callback();
 800229a:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022a0:	4798      	blx	r3
	} else
	{
		HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication2->Can_rxHeader, Can_communication2->Can_rxData);
		Can_communication2->CanRxIT_Callback();
	}
}
 80022a2:	e00e      	b.n	80022c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication2->Can_rxHeader, Can_communication2->Can_rxData);
 80022a4:	4b0b      	ldr	r3, [pc, #44]	@ (80022d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80022ac:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3364      	adds	r3, #100	@ 0x64
 80022b2:	2100      	movs	r1, #0
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f001 fbab 	bl	8003a10 <HAL_CAN_GetRxMessage>
		Can_communication2->CanRxIT_Callback();
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022c0:	4798      	blx	r3
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000114 	.word	0x20000114
 80022d0:	20000280 	.word	0x20000280
 80022d4:	20000284 	.word	0x20000284

080022d8 <Can_Write>:
void Can_Write(CAN_COM* canhandle, uint8_t* data, size_t size)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
		canhandle->Can_txHeader.DLC = size;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	63da      	str	r2, [r3, #60]	@ 0x3c
		if(HAL_CAN_AddTxMessage(canhandle->CanHandle, &canhandle->Can_txHeader, data, &canhandle->tx_mailBox) != HAL_OK)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3370      	adds	r3, #112	@ 0x70
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	f001 fab9 	bl	8003870 <HAL_CAN_AddTxMessage>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <Can_Write+0x30>
		{
			Error_Handler();
 8002304:	f7ff fcae 	bl	8001c64 <Error_Handler>
		}
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <CanCofigfilter>:
#endif

/* CONFIG FILLTER */
void CanCofigfilter(CAN_COM* canhandle, uint32_t FilterHigh , uint32_t FilterLow)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
	if(HAL_FDCAN_ConfigFilter(canhandle->CanHandle, &canhandle->CanfilterTypedef) != HAL_OK)
	{
		Error_Handler();
	}
#else
		canhandle->CanfilterTypedef.FilterActivation = CAN_FILTER_ENABLE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	621a      	str	r2, [r3, #32]
		canhandle->CanfilterTypedef.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
		canhandle->CanfilterTypedef.FilterIdHigh = FilterHigh;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	601a      	str	r2, [r3, #0]
		canhandle->CanfilterTypedef.FilterIdLow = FilterLow;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	605a      	str	r2, [r3, #4]
		canhandle->CanfilterTypedef.FilterMaskIdHigh = FilterHigh;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	609a      	str	r2, [r3, #8]
		canhandle->CanfilterTypedef.FilterMaskIdLow = FilterLow;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
		canhandle->CanfilterTypedef.FilterMode = CAN_FILTERMODE_IDMASK;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
		canhandle->CanfilterTypedef.FilterScale = CAN_FILTERSCALE_32BIT;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	61da      	str	r2, [r3, #28]
		if(canhandle->CanHandle == &hcan1)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	4a09      	ldr	r2, [pc, #36]	@ (8002378 <CanCofigfilter+0x68>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d105      	bne.n	8002362 <CanCofigfilter+0x52>
		{
			canhandle->CanfilterTypedef.FilterBank = 0; // which filter bank to use from the assigned ones
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
			canhandle->CanfilterTypedef.SlaveStartFilterBank = 13;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	220d      	movs	r2, #13
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24
		}
		HAL_CAN_ConfigFilter(canhandle->CanHandle, &canhandle->CanfilterTypedef);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f001 f95c 	bl	8003628 <HAL_CAN_ConfigFilter>
#endif
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000114 	.word	0x20000114

0800237c <Can_Start>:

/*  CONFIG DATA TRANSMIT*/
void Can_Start(CAN_COM* canhandle, uint32_t CanID)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
	  canhandle->TxHeader.FDFormat = FDCAN_FD_CAN;
	  canhandle->TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	  canhandle->TxHeader.MessageMarker = 0;
#else

	canhandle->Can_id =  CanID;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	675a      	str	r2, [r3, #116]	@ 0x74
	HAL_CAN_Start(canhandle->CanHandle);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	4618      	mov	r0, r3
 8002392:	f001 fa29 	bl	80037e8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(canhandle->CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	2102      	movs	r1, #2
 800239c:	4618      	mov	r0, r3
 800239e:	f001 fc59 	bl	8003c54 <HAL_CAN_ActivateNotification>
	canhandle->Can_txHeader.DLC = 3;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2203      	movs	r2, #3
 80023a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	canhandle->Can_txHeader.RTR = CAN_RTR_DATA;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	639a      	str	r2, [r3, #56]	@ 0x38
	if(canhandle->IDMode)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <Can_Start+0x4c>
	{
		canhandle->Can_txHeader.IDE = CAN_ID_EXT;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2204      	movs	r2, #4
 80023bc:	635a      	str	r2, [r3, #52]	@ 0x34
		canhandle->Can_txHeader.ExtId = canhandle->Can_id;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	631a      	str	r2, [r3, #48]	@ 0x30
	{
		canhandle->Can_txHeader.IDE = CAN_ID_STD;
		canhandle->Can_txHeader.StdId = canhandle->Can_id;
	}
#endif
}
 80023c6:	e006      	b.n	80023d6 <Can_Start+0x5a>
		canhandle->Can_txHeader.IDE = CAN_ID_STD;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	635a      	str	r2, [r3, #52]	@ 0x34
		canhandle->Can_txHeader.StdId = canhandle->Can_id;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <_begin>:
 *      Author: ADMIN-HPZ2
 */
#include "MCP3202.h"
mcp3202_pin spiPin;
void _begin (SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
	spiPin._hspi = hspi;
 80023ee:	4a07      	ldr	r2, [pc, #28]	@ (800240c <_begin+0x2c>)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6093      	str	r3, [r2, #8]
	spiPin.GPIO_p = GPIOx;
 80023f4:	4a05      	ldr	r2, [pc, #20]	@ (800240c <_begin+0x2c>)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	6013      	str	r3, [r2, #0]
	spiPin.GPIO_pin = GPIO_Pin;
 80023fa:	4a04      	ldr	r2, [pc, #16]	@ (800240c <_begin+0x2c>)
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	8093      	strh	r3, [r2, #4]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	20000288 	.word	0x20000288

08002410 <_readChannel>:

uint16_t _readChannel(uint8_t thisCh) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
	uint8_t txData[3] = { 0b00000001, 0, 0 }; // Khởi tạo mảng txData để truyền dữ liệu
 800241a:	4a21      	ldr	r2, [pc, #132]	@ (80024a0 <_readChannel+0x90>)
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	4611      	mov	r1, r2
 8002424:	8019      	strh	r1, [r3, #0]
 8002426:	3302      	adds	r3, #2
 8002428:	0c12      	lsrs	r2, r2, #16
 800242a:	701a      	strb	r2, [r3, #0]
	uint8_t rxData[3] = { 0, 0, 0 }; // Khởi tạo mảng rxData để nhận dữ liệu
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2100      	movs	r1, #0
 8002432:	460a      	mov	r2, r1
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	460a      	mov	r2, r1
 8002438:	709a      	strb	r2, [r3, #2]
	uint16_t result;
	// Gán giá trị bit đầu tiên của txData[0] để chọn kênh đọc dữ liệu
	txData[1] = (thisCh == 0) ? 0b10100000 : 0b11100000;
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <_readChannel+0x34>
 8002440:	23a0      	movs	r3, #160	@ 0xa0
 8002442:	e000      	b.n	8002446 <_readChannel+0x36>
 8002444:	23e0      	movs	r3, #224	@ 0xe0
 8002446:	747b      	strb	r3, [r7, #17]
	// Truyền và nhận dữ liệu qua SPI
	HAL_GPIO_WritePin(spiPin.GPIO_p, spiPin.GPIO_pin, GPIO_PIN_RESET); // Thiết lập tín hiệu CS để bắt đầu truyền nhận
 8002448:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <_readChannel+0x94>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a15      	ldr	r2, [pc, #84]	@ (80024a4 <_readChannel+0x94>)
 800244e:	8891      	ldrh	r1, [r2, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f002 f91a 	bl	800468c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spiPin._hspi, txData, rxData, 3, 100); // Truyền nhận dữ liệu
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <_readChannel+0x94>)
 800245a:	6898      	ldr	r0, [r3, #8]
 800245c:	f107 020c 	add.w	r2, r7, #12
 8002460:	f107 0110 	add.w	r1, r7, #16
 8002464:	2364      	movs	r3, #100	@ 0x64
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2303      	movs	r3, #3
 800246a:	f002 ff4e 	bl	800530a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(spiPin.GPIO_p, spiPin.GPIO_pin, GPIO_PIN_SET); // Thiết lập tín hiệu CS để kết thúc truyền nhận
 800246e:	4b0d      	ldr	r3, [pc, #52]	@ (80024a4 <_readChannel+0x94>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a0c      	ldr	r2, [pc, #48]	@ (80024a4 <_readChannel+0x94>)
 8002474:	8891      	ldrh	r1, [r2, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f002 f907 	bl	800468c <HAL_GPIO_WritePin>

	// Gộp 2 byte đầu tiên nhận được thành giá trị 12-bit
	//rxData[1] -=1;
	result = ((rxData[1] & 0x0F) << 8) | rxData[2];
 800247e:	7b7b      	ldrb	r3, [r7, #13]
 8002480:	b21b      	sxth	r3, r3
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	b21b      	sxth	r3, r3
 8002486:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800248a:	b21a      	sxth	r2, r3
 800248c:	7bbb      	ldrb	r3, [r7, #14]
 800248e:	b21b      	sxth	r3, r3
 8002490:	4313      	orrs	r3, r2
 8002492:	b21b      	sxth	r3, r3
 8002494:	82fb      	strh	r3, [r7, #22]

	return result;
 8002496:	8afb      	ldrh	r3, [r7, #22]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	080092d8 	.word	0x080092d8
 80024a4:	20000288 	.word	0x20000288

080024a8 <DAC_begin>:

#define ADC0_5V
mcp4922_pin spiPinDAC ;

void DAC_begin (SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
	spiPinDAC._hspi = hspi ;
 80024b6:	4a07      	ldr	r2, [pc, #28]	@ (80024d4 <DAC_begin+0x2c>)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6093      	str	r3, [r2, #8]
	spiPinDAC.GPIO_p = GPIOx;
 80024bc:	4a05      	ldr	r2, [pc, #20]	@ (80024d4 <DAC_begin+0x2c>)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	6013      	str	r3, [r2, #0]
	spiPinDAC.GPIO_pin = GPIO_Pin;
 80024c2:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <DAC_begin+0x2c>)
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	8093      	strh	r3, [r2, #4]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	20000294 	.word	0x20000294

080024d8 <highByte>:
bit 11 down to bit 0

 */
//************************************************************************

uint8_t highByte(uint16_t value) {
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
  return (uint8_t)(value >> 8);
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LowByte>:
uint8_t LowByte(uint16_t value) {
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	80fb      	strh	r3, [r7, #6]
  return (uint8_t)(value & 0xFF);
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	b2db      	uxtb	r3, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <sendIntValueSPI>:

void sendIntValueSPI(int A ,int B) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
int channelA = A | 0b0111000000000000;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8002520:	617b      	str	r3, [r7, #20]
int channelB = B | 0b1111000000000000;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8002528:	613b      	str	r3, [r7, #16]
uint8_t hightByteA = highByte(channelA);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	b29b      	uxth	r3, r3
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ffd2 	bl	80024d8 <highByte>
 8002534:	4603      	mov	r3, r0
 8002536:	73fb      	strb	r3, [r7, #15]
uint8_t lowByteA = LowByte(channelA);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	b29b      	uxth	r3, r3
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ffda 	bl	80024f6 <LowByte>
 8002542:	4603      	mov	r3, r0
 8002544:	73bb      	strb	r3, [r7, #14]
uint8_t hightByteB = highByte(channelB);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	b29b      	uxth	r3, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ffc4 	bl	80024d8 <highByte>
 8002550:	4603      	mov	r3, r0
 8002552:	737b      	strb	r3, [r7, #13]
uint8_t lowByteB = LowByte(channelB);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	b29b      	uxth	r3, r3
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ffcc 	bl	80024f6 <LowByte>
 800255e:	4603      	mov	r3, r0
 8002560:	733b      	strb	r3, [r7, #12]
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_RESET);
 8002562:	4b23      	ldr	r3, [pc, #140]	@ (80025f0 <sendIntValueSPI+0xe0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a22      	ldr	r2, [pc, #136]	@ (80025f0 <sendIntValueSPI+0xe0>)
 8002568:	8891      	ldrh	r1, [r2, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f002 f88d 	bl	800468c <HAL_GPIO_WritePin>
HAL_SPI_Transmit(spiPinDAC._hspi, &hightByteA,sizeof(hightByteA), 100);
 8002572:	4b1f      	ldr	r3, [pc, #124]	@ (80025f0 <sendIntValueSPI+0xe0>)
 8002574:	6898      	ldr	r0, [r3, #8]
 8002576:	f107 010f 	add.w	r1, r7, #15
 800257a:	2364      	movs	r3, #100	@ 0x64
 800257c:	2201      	movs	r2, #1
 800257e:	f002 fd80 	bl	8005082 <HAL_SPI_Transmit>
HAL_SPI_Transmit(spiPinDAC._hspi, &lowByteA,sizeof(lowByteA), 100);
 8002582:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <sendIntValueSPI+0xe0>)
 8002584:	6898      	ldr	r0, [r3, #8]
 8002586:	f107 010e 	add.w	r1, r7, #14
 800258a:	2364      	movs	r3, #100	@ 0x64
 800258c:	2201      	movs	r2, #1
 800258e:	f002 fd78 	bl	8005082 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_SET);
 8002592:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <sendIntValueSPI+0xe0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a16      	ldr	r2, [pc, #88]	@ (80025f0 <sendIntValueSPI+0xe0>)
 8002598:	8891      	ldrh	r1, [r2, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	4618      	mov	r0, r3
 800259e:	f002 f875 	bl	800468c <HAL_GPIO_WritePin>
__asm__("nop\n\t");
 80025a2:	bf00      	nop
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_RESET);
 80025a4:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <sendIntValueSPI+0xe0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a11      	ldr	r2, [pc, #68]	@ (80025f0 <sendIntValueSPI+0xe0>)
 80025aa:	8891      	ldrh	r1, [r2, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 f86c 	bl	800468c <HAL_GPIO_WritePin>
HAL_SPI_Transmit(spiPinDAC._hspi, &hightByteB, sizeof(hightByteB), 100);
 80025b4:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <sendIntValueSPI+0xe0>)
 80025b6:	6898      	ldr	r0, [r3, #8]
 80025b8:	f107 010d 	add.w	r1, r7, #13
 80025bc:	2364      	movs	r3, #100	@ 0x64
 80025be:	2201      	movs	r2, #1
 80025c0:	f002 fd5f 	bl	8005082 <HAL_SPI_Transmit>
HAL_SPI_Transmit(spiPinDAC._hspi, &lowByteB,sizeof(lowByteB), 100);
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <sendIntValueSPI+0xe0>)
 80025c6:	6898      	ldr	r0, [r3, #8]
 80025c8:	f107 010c 	add.w	r1, r7, #12
 80025cc:	2364      	movs	r3, #100	@ 0x64
 80025ce:	2201      	movs	r2, #1
 80025d0:	f002 fd57 	bl	8005082 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_SET);
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <sendIntValueSPI+0xe0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a05      	ldr	r2, [pc, #20]	@ (80025f0 <sendIntValueSPI+0xe0>)
 80025da:	8891      	ldrh	r1, [r2, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 f854 	bl	800468c <HAL_GPIO_WritePin>
__asm__("nop\n\t");
 80025e4:	bf00      	nop
}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000294 	.word	0x20000294

080025f4 <SetDAC>:

void SetDAC(uint16_t channelA, uint16_t channelB) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	460a      	mov	r2, r1
 80025fe:	80fb      	strh	r3, [r7, #6]
 8002600:	4613      	mov	r3, r2
 8002602:	80bb      	strh	r3, [r7, #4]
#ifdef ADC0_5V
if(channelA>2048)
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800260a:	d902      	bls.n	8002612 <SetDAC+0x1e>
	{channelA = 2048;}
 800260c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002610:	80fb      	strh	r3, [r7, #6]
	if(channelB>2048)
 8002612:	88bb      	ldrh	r3, [r7, #4]
 8002614:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002618:	d902      	bls.n	8002620 <SetDAC+0x2c>
	{channelB=2048;}
 800261a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800261e:	80bb      	strh	r3, [r7, #4]
#endif
  sendIntValueSPI(channelA,channelB);
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	88ba      	ldrh	r2, [r7, #4]
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff72 	bl	8002510 <sendIntValueSPI>
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <setKincoErrorStatus>:
/****************Set id Current Feedback in mode PDO************/
uint32_t CurrentID[MNum] = {0x281, 0x282};
/*********************FunctionCode***********************/
void readParameter();

void setKincoErrorStatus(struct KincoErrorStatus *status, uint16_t value) {
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
    status->Extended_error = value & (1 << 0);
 8002640:	887b      	ldrh	r3, [r7, #2]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	bf14      	ite	ne
 800264a:	2301      	movne	r3, #1
 800264c:	2300      	moveq	r3, #0
 800264e:	b2da      	uxtb	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	701a      	strb	r2, [r3, #0]
    status->Encoder_connected = value & (1 << 1);
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2da      	uxtb	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	705a      	strb	r2, [r3, #1]
    status->Encoder_internal = value & (1 << 2);
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	bf14      	ite	ne
 8002672:	2301      	movne	r3, #1
 8002674:	2300      	moveq	r3, #0
 8002676:	b2da      	uxtb	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	709a      	strb	r2, [r3, #2]
    status->Encoder_CRC = value & (1 << 3);
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2da      	uxtb	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	70da      	strb	r2, [r3, #3]
    status->Driver_temperature = value & (1 << 4);
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	711a      	strb	r2, [r3, #4]
    status->Over_voltage = value & (1 << 5);
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	715a      	strb	r2, [r3, #5]
    status->Under_voltage = value & (1 << 6);
 80026b8:	887b      	ldrh	r3, [r7, #2]
 80026ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf14      	ite	ne
 80026c2:	2301      	movne	r3, #1
 80026c4:	2300      	moveq	r3, #0
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	719a      	strb	r2, [r3, #6]
    status->Over_current = value & (1 << 7);
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf14      	ite	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	2300      	moveq	r3, #0
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	71da      	strb	r2, [r3, #7]
    status->Chop_resistor = value & (1 << 8);
 80026e0:	887b      	ldrh	r3, [r7, #2]
 80026e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	bf14      	ite	ne
 80026ea:	2301      	movne	r3, #1
 80026ec:	2300      	moveq	r3, #0
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	721a      	strb	r2, [r3, #8]
    status->Position_following = value & (1 << 9);
 80026f4:	887b      	ldrh	r3, [r7, #2]
 80026f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2da      	uxtb	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	725a      	strb	r2, [r3, #9]
    status->Low_logicvoltage = value & (1 << 10);
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800270e:	2b00      	cmp	r3, #0
 8002710:	bf14      	ite	ne
 8002712:	2301      	movne	r3, #1
 8002714:	2300      	moveq	r3, #0
 8002716:	b2da      	uxtb	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	729a      	strb	r2, [r3, #10]
    status->Motor_or_driver_IIt = value & (1 << 11);
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002722:	2b00      	cmp	r3, #0
 8002724:	bf14      	ite	ne
 8002726:	2301      	movne	r3, #1
 8002728:	2300      	moveq	r3, #0
 800272a:	b2da      	uxtb	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	72da      	strb	r2, [r3, #11]
    status->Over_frequency = value & (1 << 12);
 8002730:	887b      	ldrh	r3, [r7, #2]
 8002732:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf14      	ite	ne
 800273a:	2301      	movne	r3, #1
 800273c:	2300      	moveq	r3, #0
 800273e:	b2da      	uxtb	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	731a      	strb	r2, [r3, #12]
    status->Motor_temperature = value & (1 << 13);
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2da      	uxtb	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	735a      	strb	r2, [r3, #13]
    status->Motor_communication = value & (1 << 14);
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275e:	2b00      	cmp	r3, #0
 8002760:	bf14      	ite	ne
 8002762:	2301      	movne	r3, #1
 8002764:	2300      	moveq	r3, #0
 8002766:	b2da      	uxtb	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	739a      	strb	r2, [r3, #14]
    status->EEPROM_data = value & (1 << 15);
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf14      	ite	ne
 8002776:	2301      	movne	r3, #1
 8002778:	2300      	moveq	r3, #0
 800277a:	b2da      	uxtb	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	73da      	strb	r2, [r3, #15]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <MotorIsConnected>:
bool motorIsConnect = false;
void MotorIsConnected(uint32_t id)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	if(id == 0x701)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f240 7201 	movw	r2, #1793	@ 0x701
 800279a:	4293      	cmp	r3, r2
 800279c:	d102      	bne.n	80027a4 <MotorIsConnected+0x18>
	{
		motorIsConnect = true;
 800279e:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <MotorIsConnected+0x24>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
	}
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	200003ac 	.word	0x200003ac

080027b4 <CanRecieverCallback>:
void CanRecieverCallback()
{
 80027b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
	MesRx.Canid = Cankinco.Can_txHeader.StdId;
 80027bc:	4968      	ldr	r1, [pc, #416]	@ (8002960 <CanRecieverCallback+0x1ac>)
 80027be:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 80027c0:	4868      	ldr	r0, [pc, #416]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80027c2:	6001      	str	r1, [r0, #0]
	memcpy(MesRx.mes, Cankinco.Can_rxData,8);
 80027c4:	4867      	ldr	r0, [pc, #412]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80027c6:	4966      	ldr	r1, [pc, #408]	@ (8002960 <CanRecieverCallback+0x1ac>)
 80027c8:	f100 0c0a 	add.w	ip, r0, #10
 80027cc:	f101 0664 	add.w	r6, r1, #100	@ 0x64
 80027d0:	ce03      	ldmia	r6!, {r0, r1}
 80027d2:	f8cc 0000 	str.w	r0, [ip]
 80027d6:	f8cc 1004 	str.w	r1, [ip, #4]
	if(MesRx.Canid > 0x180 && MesRx.Canid < 0x280 )
 80027da:	4962      	ldr	r1, [pc, #392]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80027dc:	6809      	ldr	r1, [r1, #0]
 80027de:	f5b1 7fc0 	cmp.w	r1, #384	@ 0x180
 80027e2:	d960      	bls.n	80028a6 <CanRecieverCallback+0xf2>
 80027e4:	495f      	ldr	r1, [pc, #380]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80027e6:	6809      	ldr	r1, [r1, #0]
 80027e8:	f5b1 7f20 	cmp.w	r1, #640	@ 0x280
 80027ec:	d25b      	bcs.n	80028a6 <CanRecieverCallback+0xf2>
	{
		UINT8_TO_INT32(MesRx.mes,3,Kincoparameter.PosActual);
 80027ee:	495d      	ldr	r1, [pc, #372]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80027f0:	7b49      	ldrb	r1, [r1, #13]
 80027f2:	0608      	lsls	r0, r1, #24
 80027f4:	495b      	ldr	r1, [pc, #364]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80027f6:	7b09      	ldrb	r1, [r1, #12]
 80027f8:	0409      	lsls	r1, r1, #16
 80027fa:	4308      	orrs	r0, r1
 80027fc:	4959      	ldr	r1, [pc, #356]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80027fe:	7ac9      	ldrb	r1, [r1, #11]
 8002800:	0209      	lsls	r1, r1, #8
 8002802:	4301      	orrs	r1, r0
 8002804:	4857      	ldr	r0, [pc, #348]	@ (8002964 <CanRecieverCallback+0x1b0>)
 8002806:	7a80      	ldrb	r0, [r0, #10]
 8002808:	4301      	orrs	r1, r0
 800280a:	4857      	ldr	r0, [pc, #348]	@ (8002968 <CanRecieverCallback+0x1b4>)
 800280c:	6201      	str	r1, [r0, #32]
		int32_t tmp;
		UINT8_TO_INT32(MesRx.mes,7,tmp);
 800280e:	4955      	ldr	r1, [pc, #340]	@ (8002964 <CanRecieverCallback+0x1b0>)
 8002810:	7c49      	ldrb	r1, [r1, #17]
 8002812:	0608      	lsls	r0, r1, #24
 8002814:	4953      	ldr	r1, [pc, #332]	@ (8002964 <CanRecieverCallback+0x1b0>)
 8002816:	7c09      	ldrb	r1, [r1, #16]
 8002818:	0409      	lsls	r1, r1, #16
 800281a:	4308      	orrs	r0, r1
 800281c:	4951      	ldr	r1, [pc, #324]	@ (8002964 <CanRecieverCallback+0x1b0>)
 800281e:	7bc9      	ldrb	r1, [r1, #15]
 8002820:	0209      	lsls	r1, r1, #8
 8002822:	4301      	orrs	r1, r0
 8002824:	484f      	ldr	r0, [pc, #316]	@ (8002964 <CanRecieverCallback+0x1b0>)
 8002826:	7b80      	ldrb	r0, [r0, #14]
 8002828:	4301      	orrs	r1, r0
 800282a:	60b9      	str	r1, [r7, #8]
		Kincoparameter.SpeedReal = DEC_TO_RPM(tmp) ;
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	17c8      	asrs	r0, r1, #31
 8002830:	4688      	mov	r8, r1
 8002832:	4681      	mov	r9, r0
 8002834:	4640      	mov	r0, r8
 8002836:	4649      	mov	r1, r9
 8002838:	f04f 0a00 	mov.w	sl, #0
 800283c:	f04f 0b00 	mov.w	fp, #0
 8002840:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002844:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002848:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800284c:	4650      	mov	r0, sl
 800284e:	4659      	mov	r1, fp
 8002850:	ebb0 0208 	subs.w	r2, r0, r8
 8002854:	eb61 0309 	sbc.w	r3, r1, r9
 8002858:	f04f 0000 	mov.w	r0, #0
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	0099      	lsls	r1, r3, #2
 8002862:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002866:	0090      	lsls	r0, r2, #2
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	eb12 0408 	adds.w	r4, r2, r8
 8002870:	eb43 0509 	adc.w	r5, r3, r9
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	012b      	lsls	r3, r5, #4
 800287e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002882:	0122      	lsls	r2, r4, #4
 8002884:	1b11      	subs	r1, r2, r4
 8002886:	6039      	str	r1, [r7, #0]
 8002888:	eb63 0305 	sbc.w	r3, r3, r5
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	4a37      	ldr	r2, [pc, #220]	@ (800296c <CanRecieverCallback+0x1b8>)
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002898:	f7fe f890 	bl	80009bc <__aeabi_ldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4b31      	ldr	r3, [pc, #196]	@ (8002968 <CanRecieverCallback+0x1b4>)
 80028a2:	625a      	str	r2, [r3, #36]	@ 0x24
	{
 80028a4:	e055      	b.n	8002952 <CanRecieverCallback+0x19e>
	} else if (MesRx.Canid > 0x580 && MesRx.Canid < 0x600)
 80028a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80028ae:	d919      	bls.n	80028e4 <CanRecieverCallback+0x130>
 80028b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80028b8:	d214      	bcs.n	80028e4 <CanRecieverCallback+0x130>
	{
		for(int x=4; x <8; x++)
 80028ba:	2304      	movs	r3, #4
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	e00d      	b.n	80028dc <CanRecieverCallback+0x128>
		{
			MesRx.value[x-4] = Cankinco.Can_rxData[x];
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3b04      	subs	r3, #4
 80028c4:	4926      	ldr	r1, [pc, #152]	@ (8002960 <CanRecieverCallback+0x1ac>)
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	440a      	add	r2, r1
 80028ca:	3264      	adds	r2, #100	@ 0x64
 80028cc:	7811      	ldrb	r1, [r2, #0]
 80028ce:	4a25      	ldr	r2, [pc, #148]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80028d0:	4413      	add	r3, r2
 80028d2:	460a      	mov	r2, r1
 80028d4:	719a      	strb	r2, [r3, #6]
		for(int x=4; x <8; x++)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3301      	adds	r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b07      	cmp	r3, #7
 80028e0:	ddee      	ble.n	80028c0 <CanRecieverCallback+0x10c>
 80028e2:	e036      	b.n	8002952 <CanRecieverCallback+0x19e>
		}
	} else if (MesRx.Canid > 0x280 && MesRx.Canid < 0x300)
 80028e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80028ec:	d927      	bls.n	800293e <CanRecieverCallback+0x18a>
 80028ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002964 <CanRecieverCallback+0x1b0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028f6:	d222      	bcs.n	800293e <CanRecieverCallback+0x18a>
	{
		Kincoparameter.motorconnect = true ;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <CanRecieverCallback+0x1b4>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
		UINT8_TO_INT16(MesRx.mes,1,Kincoparameter.I_q);
 80028fe:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <CanRecieverCallback+0x1b0>)
 8002900:	7adb      	ldrb	r3, [r3, #11]
 8002902:	b21b      	sxth	r3, r3
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	b21a      	sxth	r2, r3
 8002908:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <CanRecieverCallback+0x1b0>)
 800290a:	7a9b      	ldrb	r3, [r3, #10]
 800290c:	b21b      	sxth	r3, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	b21a      	sxth	r2, r3
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <CanRecieverCallback+0x1b4>)
 8002914:	805a      	strh	r2, [r3, #2]
		UINT8_TO_INT16(MesRx.mes,3,Kincoparameter.Error_code);
 8002916:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <CanRecieverCallback+0x1b0>)
 8002918:	7b5b      	ldrb	r3, [r3, #13]
 800291a:	b21b      	sxth	r3, r3
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	b21a      	sxth	r2, r3
 8002920:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <CanRecieverCallback+0x1b0>)
 8002922:	7b1b      	ldrb	r3, [r3, #12]
 8002924:	b21b      	sxth	r3, r3
 8002926:	4313      	orrs	r3, r2
 8002928:	b21b      	sxth	r3, r3
 800292a:	b29a      	uxth	r2, r3
 800292c:	4b0e      	ldr	r3, [pc, #56]	@ (8002968 <CanRecieverCallback+0x1b4>)
 800292e:	809a      	strh	r2, [r3, #4]
		setKincoErrorStatus(&Kincoparameter.Error_status, Kincoparameter.Error_code);
 8002930:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <CanRecieverCallback+0x1b4>)
 8002932:	889b      	ldrh	r3, [r3, #4]
 8002934:	4619      	mov	r1, r3
 8002936:	480e      	ldr	r0, [pc, #56]	@ (8002970 <CanRecieverCallback+0x1bc>)
 8002938:	f7ff fe7c 	bl	8002634 <setKincoErrorStatus>
 800293c:	e009      	b.n	8002952 <CanRecieverCallback+0x19e>
	}else if (MesRx.Canid > 0x700)
 800293e:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <CanRecieverCallback+0x1b0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002946:	d904      	bls.n	8002952 <CanRecieverCallback+0x19e>
	{
		MotorIsConnected(MesRx.Canid);
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <CanRecieverCallback+0x1b0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff1d 	bl	800278c <MotorIsConnected>
	}

	readParameter();
 8002952:	f000 fb69 	bl	8003028 <readParameter>
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002960:	200002a0 	.word	0x200002a0
 8002964:	20000320 	.word	0x20000320
 8002968:	20000334 	.word	0x20000334
 800296c:	004e2000 	.word	0x004e2000
 8002970:	2000033a 	.word	0x2000033a

08002974 <CreateMessage>:
Message_Kinco_Can CreateMessage( uint32_t Res, uint32_t value )
{
 8002974:	b4b0      	push	{r4, r5, r7}
 8002976:	b091      	sub	sp, #68	@ 0x44
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
	uint8_t byteAdd[4];
	uint8_t byteval[4];
	uint8_t mes[8];
	Message_Kinco_Can candata;
	//candata.Canid = motorid ;
	INT_TO_UINT8_ARRAY(Res, byteAdd);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	0e1b      	lsrs	r3, r3, #24
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	INT_TO_UINT8_ARRAY(value, byteval);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0e1b      	lsrs	r3, r3, #24
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t ObjectSubindex = 0x23;
 80029cc:	2323      	movs	r3, #35	@ 0x23
 80029ce:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	mes[0] = ObjectSubindex;
 80029d2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80029d6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	mes[1] = byteAdd[1];
 80029da:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80029de:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	mes[2] = byteAdd[0];
 80029e2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	mes[3] = byteAdd[2];
 80029ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80029ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	mes[4] = byteval[3];
 80029f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	mes[5] = byteval[2];
 80029fa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80029fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	mes[6] = byteval[1];
 8002a02:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002a06:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	mes[7] = byteval[0];
 8002a0a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002a0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
//	mes[8] = '\00';
	candata.Res = ((uint16_t)byteAdd[0]<< 8) | byteAdd[1];
 8002a12:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b21b      	sxth	r3, r3
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	833b      	strh	r3, [r7, #24]
	memcpy(candata.mes,mes,8);
 8002a2a:	f107 021e 	add.w	r2, r7, #30
 8002a2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a32:	cb03      	ldmia	r3!, {r0, r1}
 8002a34:	6010      	str	r0, [r2, #0]
 8002a36:	6051      	str	r1, [r2, #4]
	for(int x=4; x <8; x++)
 8002a38:	2304      	movs	r3, #4
 8002a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a3c:	e00d      	b.n	8002a5a <CreateMessage+0xe6>
	{
		candata.value[x-4] = mes[x];
 8002a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a40:	3b04      	subs	r3, #4
 8002a42:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002a46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a48:	440a      	add	r2, r1
 8002a4a:	7812      	ldrb	r2, [r2, #0]
 8002a4c:	3340      	adds	r3, #64	@ 0x40
 8002a4e:	443b      	add	r3, r7
 8002a50:	f803 2c26 	strb.w	r2, [r3, #-38]
	for(int x=4; x <8; x++)
 8002a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a56:	3301      	adds	r3, #1
 8002a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a5c:	2b07      	cmp	r3, #7
 8002a5e:	ddee      	ble.n	8002a3e <CreateMessage+0xca>
	}
	return candata;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	461d      	mov	r5, r3
 8002a64:	f107 0414 	add.w	r4, r7, #20
 8002a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	602b      	str	r3, [r5, #0]
}
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	3744      	adds	r7, #68	@ 0x44
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bcb0      	pop	{r4, r5, r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <MotorInit>:

void MotorInit(CAN_HandleTypeDef *hcan)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	  Can_begin(&Cankinco, hcan, 0 );
 8002a84:	2200      	movs	r2, #0
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	480a      	ldr	r0, [pc, #40]	@ (8002ab4 <MotorInit+0x38>)
 8002a8a:	f7ff fbcd 	bl	8002228 <Can_begin>
	  CanCofigfilter(&Cankinco, FilterHigh, FilterLow);
 8002a8e:	2211      	movs	r2, #17
 8002a90:	2111      	movs	r1, #17
 8002a92:	4808      	ldr	r0, [pc, #32]	@ (8002ab4 <MotorInit+0x38>)
 8002a94:	f7ff fc3c 	bl	8002310 <CanCofigfilter>
	  Cankinco.CanRxIT_Callback = CanRecieverCallback;
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <MotorInit+0x38>)
 8002a9a:	4a07      	ldr	r2, [pc, #28]	@ (8002ab8 <MotorInit+0x3c>)
 8002a9c:	67da      	str	r2, [r3, #124]	@ 0x7c
	  Can_Start(&Cankinco, MotorID[0]);
 8002a9e:	4b07      	ldr	r3, [pc, #28]	@ (8002abc <MotorInit+0x40>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4803      	ldr	r0, [pc, #12]	@ (8002ab4 <MotorInit+0x38>)
 8002aa6:	f7ff fc69 	bl	800237c <Can_Start>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200002a0 	.word	0x200002a0
 8002ab8:	080027b5 	.word	0x080027b5
 8002abc:	20000030 	.word	0x20000030

08002ac0 <SetOperationMode>:

bool SetOperationMode(uint32_t vl, uint32_t id)
{
 8002ac0:	b5b0      	push	{r4, r5, r7, lr}
 8002ac2:	b08e      	sub	sp, #56	@ 0x38
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	61f8      	str	r0, [r7, #28]
 8002ac8:	61b9      	str	r1, [r7, #24]
    Message_Kinco_Can temp;
    Cankinco.Can_txHeader.StdId = id ;
 8002aca:	4a21      	ldr	r2, [pc, #132]	@ (8002b50 <SetOperationMode+0x90>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	62d3      	str	r3, [r2, #44]	@ 0x2c
    uint16_t timeout = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    temp = CreateMessage(OperationModeRes, vl);
 8002ad4:	463b      	mov	r3, r7
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	491e      	ldr	r1, [pc, #120]	@ (8002b54 <SetOperationMode+0x94>)
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff ff4a 	bl	8002974 <CreateMessage>
 8002ae0:	f107 0420 	add.w	r4, r7, #32
 8002ae4:	463d      	mov	r5, r7
 8002ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aea:	682b      	ldr	r3, [r5, #0]
 8002aec:	6023      	str	r3, [r4, #0]
    temp.mes[0] = 0x2F;
 8002aee:	232f      	movs	r3, #47	@ 0x2f
 8002af0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    do {
        Can_Write(&Cankinco, temp.mes, DATA_BYTE_6);
 8002af4:	f107 0320 	add.w	r3, r7, #32
 8002af8:	330a      	adds	r3, #10
 8002afa:	2206      	movs	r2, #6
 8002afc:	4619      	mov	r1, r3
 8002afe:	4814      	ldr	r0, [pc, #80]	@ (8002b50 <SetOperationMode+0x90>)
 8002b00:	f7ff fbea 	bl	80022d8 <Can_Write>
        timeout++;
 8002b04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b06:	3301      	adds	r3, #1
 8002b08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        osDelay(100);
 8002b0a:	2064      	movs	r0, #100	@ 0x64
 8002b0c:	f003 fa56 	bl	8005fbc <osDelay>
    } while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 20);
 8002b10:	f107 0320 	add.w	r3, r7, #32
 8002b14:	3306      	adds	r3, #6
 8002b16:	2204      	movs	r2, #4
 8002b18:	490f      	ldr	r1, [pc, #60]	@ (8002b58 <SetOperationMode+0x98>)
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f006 f8ec 	bl	8008cf8 <memcmp>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <SetOperationMode+0x6c>
 8002b26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b28:	2b13      	cmp	r3, #19
 8002b2a:	d9e3      	bls.n	8002af4 <SetOperationMode+0x34>

    return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true  ;
 8002b2c:	f107 0320 	add.w	r3, r7, #32
 8002b30:	3306      	adds	r3, #6
 8002b32:	2204      	movs	r2, #4
 8002b34:	4908      	ldr	r1, [pc, #32]	@ (8002b58 <SetOperationMode+0x98>)
 8002b36:	4618      	mov	r0, r3
 8002b38:	f006 f8de 	bl	8008cf8 <memcmp>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3738      	adds	r7, #56	@ 0x38
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b50:	200002a0 	.word	0x200002a0
 8002b54:	60600008 	.word	0x60600008
 8002b58:	20000326 	.word	0x20000326

08002b5c <SetControlWord>:

bool SetControlWord (uint32_t vl, uint32_t id)
{
 8002b5c:	b5b0      	push	{r4, r5, r7, lr}
 8002b5e:	b08e      	sub	sp, #56	@ 0x38
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	61f8      	str	r0, [r7, #28]
 8002b64:	61b9      	str	r1, [r7, #24]
	Message_Kinco_Can temp ;
	Cankinco.Can_txHeader.StdId = id ;
 8002b66:	4a21      	ldr	r2, [pc, #132]	@ (8002bec <SetControlWord+0x90>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	uint16_t timeout = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	temp = CreateMessage(ControlWordRes, vl);
 8002b70:	463b      	mov	r3, r7
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	491e      	ldr	r1, [pc, #120]	@ (8002bf0 <SetControlWord+0x94>)
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fefc 	bl	8002974 <CreateMessage>
 8002b7c:	f107 0420 	add.w	r4, r7, #32
 8002b80:	463d      	mov	r5, r7
 8002b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b86:	682b      	ldr	r3, [r5, #0]
 8002b88:	6023      	str	r3, [r4, #0]
	temp.mes[0] = 0x2B;
 8002b8a:	232b      	movs	r3, #43	@ 0x2b
 8002b8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	do {
		Can_Write(&Cankinco, temp.mes, DATA_BYTE_6);
 8002b90:	f107 0320 	add.w	r3, r7, #32
 8002b94:	330a      	adds	r3, #10
 8002b96:	2206      	movs	r2, #6
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4814      	ldr	r0, [pc, #80]	@ (8002bec <SetControlWord+0x90>)
 8002b9c:	f7ff fb9c 	bl	80022d8 <Can_Write>
		timeout ++ ;
 8002ba0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	86fb      	strh	r3, [r7, #54]	@ 0x36
		osDelay(100);
 8002ba6:	2064      	movs	r0, #100	@ 0x64
 8002ba8:	f003 fa08 	bl	8005fbc <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 20);
 8002bac:	f107 0320 	add.w	r3, r7, #32
 8002bb0:	3306      	adds	r3, #6
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	490f      	ldr	r1, [pc, #60]	@ (8002bf4 <SetControlWord+0x98>)
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f006 f89e 	bl	8008cf8 <memcmp>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <SetControlWord+0x6c>
 8002bc2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002bc4:	2b13      	cmp	r3, #19
 8002bc6:	d9e3      	bls.n	8002b90 <SetControlWord+0x34>

    return memcmp(temp.value, MesRx.value, 4) == 0 ? false :  true ;
 8002bc8:	f107 0320 	add.w	r3, r7, #32
 8002bcc:	3306      	adds	r3, #6
 8002bce:	2204      	movs	r2, #4
 8002bd0:	4908      	ldr	r1, [pc, #32]	@ (8002bf4 <SetControlWord+0x98>)
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f006 f890 	bl	8008cf8 <memcmp>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3738      	adds	r7, #56	@ 0x38
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bdb0      	pop	{r4, r5, r7, pc}
 8002bec:	200002a0 	.word	0x200002a0
 8002bf0:	60400010 	.word	0x60400010
 8002bf4:	20000326 	.word	0x20000326

08002bf8 <SDOProfileAcc>:
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
}
bool SDOProfileAcc(int vl, uint32_t id)
{
 8002bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bfc:	b097      	sub	sp, #92	@ 0x5c
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002c02:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	Cankinco.Can_txHeader.StdId = id ;
 8002c04:	484d      	ldr	r0, [pc, #308]	@ (8002d3c <SDOProfileAcc+0x144>)
 8002c06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c08:	62c1      	str	r1, [r0, #44]	@ 0x2c
	int64_t dec = RPS_TO_DEC(vl);
 8002c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c0c:	17c8      	asrs	r0, r1, #31
 8002c0e:	4688      	mov	r8, r1
 8002c10:	4681      	mov	r9, r0
 8002c12:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002c16:	f04f 0000 	mov.w	r0, #0
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	e9c7 0100 	strd	r0, r1, [r7]
 8002c22:	68f9      	ldr	r1, [r7, #12]
 8002c24:	008e      	lsls	r6, r1, #2
 8002c26:	607e      	str	r6, [r7, #4]
 8002c28:	687e      	ldr	r6, [r7, #4]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8002c30:	607e      	str	r6, [r7, #4]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	0089      	lsls	r1, r1, #2
 8002c36:	6039      	str	r1, [r7, #0]
 8002c38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c3c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002c40:	4601      	mov	r1, r0
 8002c42:	eb11 0408 	adds.w	r4, r1, r8
 8002c46:	68f9      	ldr	r1, [r7, #12]
 8002c48:	eb41 0509 	adc.w	r5, r1, r9
 8002c4c:	f04f 0000 	mov.w	r0, #0
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	00e9      	lsls	r1, r5, #3
 8002c56:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002c5a:	00e0      	lsls	r0, r4, #3
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	460d      	mov	r5, r1
 8002c60:	ebb4 0208 	subs.w	r2, r4, r8
 8002c64:	eb65 0309 	sbc.w	r3, r5, r9
 8002c68:	f04f 0000 	mov.w	r0, #0
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	0119      	lsls	r1, r3, #4
 8002c72:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002c76:	0110      	lsls	r0, r2, #4
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	eb12 0a08 	adds.w	sl, r2, r8
 8002c80:	eb43 0b09 	adc.w	fp, r3, r9
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	ea4f 530b 	mov.w	r3, fp, lsl #20
 8002c90:	ea43 331a 	orr.w	r3, r3, sl, lsr #12
 8002c94:	ea4f 520a 	mov.w	r2, sl, lsl #20
 8002c98:	4692      	mov	sl, r2
 8002c9a:	469b      	mov	fp, r3
 8002c9c:	4650      	mov	r0, sl
 8002c9e:	4659      	mov	r1, fp
 8002ca0:	4a27      	ldr	r2, [pc, #156]	@ (8002d40 <SDOProfileAcc+0x148>)
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	f7fd fe89 	bl	80009bc <__aeabi_ldivmod>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(ProfileAccRes, dec);
 8002cb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	4922      	ldr	r1, [pc, #136]	@ (8002d44 <SDOProfileAcc+0x14c>)
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fe5a 	bl	8002974 <CreateMessage>
 8002cc0:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002cc4:	f107 0510 	add.w	r5, r7, #16
 8002cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	6023      	str	r3, [r4, #0]
	uint16_t timeout = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	do {
		Can_Write(&Cankinco, temp.mes, DATA_BYTE_8);
 8002cd6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cda:	330a      	adds	r3, #10
 8002cdc:	2208      	movs	r2, #8
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4816      	ldr	r0, [pc, #88]	@ (8002d3c <SDOProfileAcc+0x144>)
 8002ce2:	f7ff faf9 	bl	80022d8 <Can_Write>
		timeout++;
 8002ce6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002cea:	3301      	adds	r3, #1
 8002cec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		osDelay(20);
 8002cf0:	2014      	movs	r0, #20
 8002cf2:	f003 f963 	bl	8005fbc <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);
 8002cf6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cfa:	3306      	adds	r3, #6
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	4912      	ldr	r1, [pc, #72]	@ (8002d48 <SDOProfileAcc+0x150>)
 8002d00:	4618      	mov	r0, r3
 8002d02:	f005 fff9 	bl	8008cf8 <memcmp>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <SDOProfileAcc+0x11c>
 8002d0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002d10:	2b63      	cmp	r3, #99	@ 0x63
 8002d12:	d9e0      	bls.n	8002cd6 <SDOProfileAcc+0xde>

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
 8002d14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d18:	3306      	adds	r3, #6
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	490a      	ldr	r1, [pc, #40]	@ (8002d48 <SDOProfileAcc+0x150>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f005 ffea 	bl	8008cf8 <memcmp>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	375c      	adds	r7, #92	@ 0x5c
 8002d34:	46bd      	mov	sp, r7
 8002d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200002a0 	.word	0x200002a0
 8002d40:	003d0900 	.word	0x003d0900
 8002d44:	60830020 	.word	0x60830020
 8002d48:	20000326 	.word	0x20000326

08002d4c <SDOProfileDec>:
bool SDOProfileDec(int vl, uint32_t id)
{
 8002d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d50:	b097      	sub	sp, #92	@ 0x5c
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002d56:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	Cankinco.Can_txHeader.StdId = id ;
 8002d58:	484d      	ldr	r0, [pc, #308]	@ (8002e90 <SDOProfileDec+0x144>)
 8002d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d5c:	62c1      	str	r1, [r0, #44]	@ 0x2c
	int64_t dec = RPS_TO_DEC(vl);
 8002d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d60:	17c8      	asrs	r0, r1, #31
 8002d62:	4688      	mov	r8, r1
 8002d64:	4681      	mov	r9, r0
 8002d66:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002d6a:	f04f 0000 	mov.w	r0, #0
 8002d6e:	f04f 0100 	mov.w	r1, #0
 8002d72:	e9c7 0100 	strd	r0, r1, [r7]
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	008e      	lsls	r6, r1, #2
 8002d7a:	607e      	str	r6, [r7, #4]
 8002d7c:	687e      	ldr	r6, [r7, #4]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8002d84:	607e      	str	r6, [r7, #4]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	0089      	lsls	r1, r1, #2
 8002d8a:	6039      	str	r1, [r7, #0]
 8002d8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d90:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002d94:	4601      	mov	r1, r0
 8002d96:	eb11 0408 	adds.w	r4, r1, r8
 8002d9a:	68f9      	ldr	r1, [r7, #12]
 8002d9c:	eb41 0509 	adc.w	r5, r1, r9
 8002da0:	f04f 0000 	mov.w	r0, #0
 8002da4:	f04f 0100 	mov.w	r1, #0
 8002da8:	00e9      	lsls	r1, r5, #3
 8002daa:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002dae:	00e0      	lsls	r0, r4, #3
 8002db0:	4604      	mov	r4, r0
 8002db2:	460d      	mov	r5, r1
 8002db4:	ebb4 0208 	subs.w	r2, r4, r8
 8002db8:	eb65 0309 	sbc.w	r3, r5, r9
 8002dbc:	f04f 0000 	mov.w	r0, #0
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	0119      	lsls	r1, r3, #4
 8002dc6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002dca:	0110      	lsls	r0, r2, #4
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	eb12 0a08 	adds.w	sl, r2, r8
 8002dd4:	eb43 0b09 	adc.w	fp, r3, r9
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	ea4f 530b 	mov.w	r3, fp, lsl #20
 8002de4:	ea43 331a 	orr.w	r3, r3, sl, lsr #12
 8002de8:	ea4f 520a 	mov.w	r2, sl, lsl #20
 8002dec:	4692      	mov	sl, r2
 8002dee:	469b      	mov	fp, r3
 8002df0:	4650      	mov	r0, sl
 8002df2:	4659      	mov	r1, fp
 8002df4:	4a27      	ldr	r2, [pc, #156]	@ (8002e94 <SDOProfileDec+0x148>)
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	f7fd fddf 	bl	80009bc <__aeabi_ldivmod>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(ProfileDecRes, dec);
 8002e06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e08:	f107 0310 	add.w	r3, r7, #16
 8002e0c:	4922      	ldr	r1, [pc, #136]	@ (8002e98 <SDOProfileDec+0x14c>)
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fdb0 	bl	8002974 <CreateMessage>
 8002e14:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002e18:	f107 0510 	add.w	r5, r7, #16
 8002e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	6023      	str	r3, [r4, #0]
	uint16_t timeout = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	do {
		Can_Write(&Cankinco, temp.mes, DATA_BYTE_8);
 8002e2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e2e:	330a      	adds	r3, #10
 8002e30:	2208      	movs	r2, #8
 8002e32:	4619      	mov	r1, r3
 8002e34:	4816      	ldr	r0, [pc, #88]	@ (8002e90 <SDOProfileDec+0x144>)
 8002e36:	f7ff fa4f 	bl	80022d8 <Can_Write>
		timeout++;
 8002e3a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		osDelay(20);
 8002e44:	2014      	movs	r0, #20
 8002e46:	f003 f8b9 	bl	8005fbc <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);
 8002e4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e4e:	3306      	adds	r3, #6
 8002e50:	2204      	movs	r2, #4
 8002e52:	4912      	ldr	r1, [pc, #72]	@ (8002e9c <SDOProfileDec+0x150>)
 8002e54:	4618      	mov	r0, r3
 8002e56:	f005 ff4f 	bl	8008cf8 <memcmp>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <SDOProfileDec+0x11c>
 8002e60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002e64:	2b63      	cmp	r3, #99	@ 0x63
 8002e66:	d9e0      	bls.n	8002e2a <SDOProfileDec+0xde>

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
 8002e68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e6c:	3306      	adds	r3, #6
 8002e6e:	2204      	movs	r2, #4
 8002e70:	490a      	ldr	r1, [pc, #40]	@ (8002e9c <SDOProfileDec+0x150>)
 8002e72:	4618      	mov	r0, r3
 8002e74:	f005 ff40 	bl	8008cf8 <memcmp>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3

}
 8002e84:	4618      	mov	r0, r3
 8002e86:	375c      	adds	r7, #92	@ 0x5c
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e8e:	bf00      	nop
 8002e90:	200002a0 	.word	0x200002a0
 8002e94:	003d0900 	.word	0x003d0900
 8002e98:	60840020 	.word	0x60840020
 8002e9c:	20000326 	.word	0x20000326

08002ea0 <SetSpeed>:

    return memcmp(temp.value, MesRx.value, 4) == 0 ? false :  true ;
}

void SetSpeed(int vl, uint32_t TPDO)
{
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	b095      	sub	sp, #84	@ 0x54
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002eaa:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	int64_t dec = RPM_TO_DEC(vl);
 8002eac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002eae:	17c8      	asrs	r0, r1, #31
 8002eb0:	4688      	mov	r8, r1
 8002eb2:	4681      	mov	r9, r0
 8002eb4:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002eb8:	f04f 0000 	mov.w	r0, #0
 8002ebc:	f04f 0100 	mov.w	r1, #0
 8002ec0:	e9c7 0100 	strd	r0, r1, [r7]
 8002ec4:	68f9      	ldr	r1, [r7, #12]
 8002ec6:	008e      	lsls	r6, r1, #2
 8002ec8:	607e      	str	r6, [r7, #4]
 8002eca:	687e      	ldr	r6, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8002ed2:	607e      	str	r6, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	0089      	lsls	r1, r1, #2
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ede:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002ee2:	4601      	mov	r1, r0
 8002ee4:	eb11 0408 	adds.w	r4, r1, r8
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	eb41 0509 	adc.w	r5, r1, r9
 8002eee:	f04f 0000 	mov.w	r0, #0
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	00e9      	lsls	r1, r5, #3
 8002ef8:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002efc:	00e0      	lsls	r0, r4, #3
 8002efe:	4604      	mov	r4, r0
 8002f00:	460d      	mov	r5, r1
 8002f02:	ebb4 0208 	subs.w	r2, r4, r8
 8002f06:	eb65 0309 	sbc.w	r3, r5, r9
 8002f0a:	f04f 0000 	mov.w	r0, #0
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	0119      	lsls	r1, r3, #4
 8002f14:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002f18:	0110      	lsls	r0, r2, #4
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	eb12 0a08 	adds.w	sl, r2, r8
 8002f22:	eb43 0b09 	adc.w	fp, r3, r9
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	ea4f 334b 	mov.w	r3, fp, lsl #13
 8002f32:	ea43 43da 	orr.w	r3, r3, sl, lsr #19
 8002f36:	ea4f 324a 	mov.w	r2, sl, lsl #13
 8002f3a:	4692      	mov	sl, r2
 8002f3c:	469b      	mov	fp, r3
 8002f3e:	4650      	mov	r0, sl
 8002f40:	4659      	mov	r1, fp
 8002f42:	f240 7253 	movw	r2, #1875	@ 0x753
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	f7fd fd37 	bl	80009bc <__aeabi_ldivmod>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(TargetSpeedRes, dec);
 8002f56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f58:	f107 0310 	add.w	r3, r7, #16
 8002f5c:	490d      	ldr	r1, [pc, #52]	@ (8002f94 <SetSpeed+0xf4>)
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fd08 	bl	8002974 <CreateMessage>
 8002f64:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002f68:	f107 0510 	add.w	r5, r7, #16
 8002f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	6023      	str	r3, [r4, #0]
	Cankinco.Can_txHeader.StdId = TPDO;
 8002f74:	4a08      	ldr	r2, [pc, #32]	@ (8002f98 <SetSpeed+0xf8>)
 8002f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f78:	62d3      	str	r3, [r2, #44]	@ 0x2c
	Can_Write(&Cankinco, temp.value, DATA_BYTE_4);
 8002f7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f7e:	3306      	adds	r3, #6
 8002f80:	2204      	movs	r2, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	4804      	ldr	r0, [pc, #16]	@ (8002f98 <SetSpeed+0xf8>)
 8002f86:	f7ff f9a7 	bl	80022d8 <Can_Write>

}
 8002f8a:	bf00      	nop
 8002f8c:	3754      	adds	r7, #84	@ 0x54
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f94:	60ff0020 	.word	0x60ff0020
 8002f98:	200002a0 	.word	0x200002a0

08002f9c <NMTmanagement>:

bool NMTmanagement (NMT_Command cmd, uint32_t MotorID)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[3] = {cmd, MotorID };
 8002fa8:	f107 0308 	add.w	r3, r7, #8
 8002fac:	2100      	movs	r1, #0
 8002fae:	460a      	mov	r2, r1
 8002fb0:	801a      	strh	r2, [r3, #0]
 8002fb2:	460a      	mov	r2, r1
 8002fb4:	709a      	strb	r2, [r3, #2]
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	723b      	strb	r3, [r7, #8]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	727b      	strb	r3, [r7, #9]
	Cankinco.Can_txHeader.StdId = 0x0000;
 8002fc0:	4b16      	ldr	r3, [pc, #88]	@ (800301c <NMTmanagement+0x80>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
	uint16_t timeout = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	81fb      	strh	r3, [r7, #14]
	do {
		Can_Write(&Cankinco, buf, DATA_BYTE_2);
 8002fca:	f107 0308 	add.w	r3, r7, #8
 8002fce:	2202      	movs	r2, #2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4812      	ldr	r0, [pc, #72]	@ (800301c <NMTmanagement+0x80>)
 8002fd4:	f7ff f980 	bl	80022d8 <Can_Write>
		timeout++;
 8002fd8:	89fb      	ldrh	r3, [r7, #14]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	81fb      	strh	r3, [r7, #14]
		osDelay(50);
 8002fde:	2032      	movs	r0, #50	@ 0x32
 8002fe0:	f002 ffec 	bl	8005fbc <osDelay>
	} while (MesRx.Canid != EncoderID[MotorID-1] && timeout < 10);
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8003020 <NMTmanagement+0x84>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	490d      	ldr	r1, [pc, #52]	@ (8003024 <NMTmanagement+0x88>)
 8002fee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d002      	beq.n	8002ffc <NMTmanagement+0x60>
 8002ff6:	89fb      	ldrh	r3, [r7, #14]
 8002ff8:	2b09      	cmp	r3, #9
 8002ffa:	d9e6      	bls.n	8002fca <NMTmanagement+0x2e>

	return MesRx.Canid == EncoderID[MotorID-1]? false : true ;
 8002ffc:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <NMTmanagement+0x84>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	4907      	ldr	r1, [pc, #28]	@ (8003024 <NMTmanagement+0x88>)
 8003006:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800300a:	429a      	cmp	r2, r3
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200002a0 	.word	0x200002a0
 8003020:	20000320 	.word	0x20000320
 8003024:	20000040 	.word	0x20000040

08003028 <readParameter>:

void readParameter()
{
 8003028:	b490      	push	{r4, r7}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
	for(int i=0; i<MNum; i++)
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	e05f      	b.n	80030f4 <readParameter+0xcc>
	{
		if(MesRx.Canid == EncoderID[i])
 8003034:	4b34      	ldr	r3, [pc, #208]	@ (8003108 <readParameter+0xe0>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4934      	ldr	r1, [pc, #208]	@ (800310c <readParameter+0xe4>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003040:	429a      	cmp	r2, r3
 8003042:	d116      	bne.n	8003072 <readParameter+0x4a>
		{
			Kincoparam[i].SpeedReal = Kincoparameter.SpeedReal;
 8003044:	4b32      	ldr	r3, [pc, #200]	@ (8003110 <readParameter+0xe8>)
 8003046:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003048:	4832      	ldr	r0, [pc, #200]	@ (8003114 <readParameter+0xec>)
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4403      	add	r3, r0
 8003056:	3324      	adds	r3, #36	@ 0x24
 8003058:	6019      	str	r1, [r3, #0]
			Kincoparam[i].PosActual = Kincoparameter.PosActual;
 800305a:	4b2d      	ldr	r3, [pc, #180]	@ (8003110 <readParameter+0xe8>)
 800305c:	6a19      	ldr	r1, [r3, #32]
 800305e:	482d      	ldr	r0, [pc, #180]	@ (8003114 <readParameter+0xec>)
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4403      	add	r3, r0
 800306c:	3320      	adds	r3, #32
 800306e:	6019      	str	r1, [r3, #0]
 8003070:	e03d      	b.n	80030ee <readParameter+0xc6>
		} else if (MesRx.Canid == CurrentID[i])
 8003072:	4b25      	ldr	r3, [pc, #148]	@ (8003108 <readParameter+0xe0>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4928      	ldr	r1, [pc, #160]	@ (8003118 <readParameter+0xf0>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800307e:	429a      	cmp	r2, r3
 8003080:	d135      	bne.n	80030ee <readParameter+0xc6>
		{
			Kincoparam[i].Error_code   = Kincoparameter.Error_code ;
 8003082:	4b23      	ldr	r3, [pc, #140]	@ (8003110 <readParameter+0xe8>)
 8003084:	8898      	ldrh	r0, [r3, #4]
 8003086:	4923      	ldr	r1, [pc, #140]	@ (8003114 <readParameter+0xec>)
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	3304      	adds	r3, #4
 8003096:	4602      	mov	r2, r0
 8003098:	801a      	strh	r2, [r3, #0]
			Kincoparam[i].Error_status = Kincoparameter.Error_status;
 800309a:	491e      	ldr	r1, [pc, #120]	@ (8003114 <readParameter+0xec>)
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	440b      	add	r3, r1
 80030a8:	4a19      	ldr	r2, [pc, #100]	@ (8003110 <readParameter+0xe8>)
 80030aa:	3306      	adds	r3, #6
 80030ac:	3206      	adds	r2, #6
 80030ae:	6814      	ldr	r4, [r2, #0]
 80030b0:	6850      	ldr	r0, [r2, #4]
 80030b2:	6891      	ldr	r1, [r2, #8]
 80030b4:	68d2      	ldr	r2, [r2, #12]
 80030b6:	601c      	str	r4, [r3, #0]
 80030b8:	6058      	str	r0, [r3, #4]
 80030ba:	6099      	str	r1, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
			Kincoparam[i].I_q          = Kincoparameter.I_q;
 80030be:	4b14      	ldr	r3, [pc, #80]	@ (8003110 <readParameter+0xe8>)
 80030c0:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80030c4:	4913      	ldr	r1, [pc, #76]	@ (8003114 <readParameter+0xec>)
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	3302      	adds	r3, #2
 80030d4:	4602      	mov	r2, r0
 80030d6:	801a      	strh	r2, [r3, #0]
			Kincoparam[i].motorconnect = Kincoparameter.motorconnect;
 80030d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <readParameter+0xe8>)
 80030da:	7818      	ldrb	r0, [r3, #0]
 80030dc:	490d      	ldr	r1, [pc, #52]	@ (8003114 <readParameter+0xec>)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	4602      	mov	r2, r0
 80030ec:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MNum; i++)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3301      	adds	r3, #1
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	dd9c      	ble.n	8003034 <readParameter+0xc>
		}

	}
}
 80030fa:	bf00      	nop
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bc90      	pop	{r4, r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000320 	.word	0x20000320
 800310c:	20000040 	.word	0x20000040
 8003110:	20000334 	.word	0x20000334
 8003114:	2000035c 	.word	0x2000035c
 8003118:	20000048 	.word	0x20000048

0800311c <motorControl>:

void motorControl( bool en, bool error, uint8_t dir, double speed )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	ed87 0b00 	vstr	d0, [r7]
 8003128:	73fb      	strb	r3, [r7, #15]
 800312a:	460b      	mov	r3, r1
 800312c:	73bb      	strb	r3, [r7, #14]
 800312e:	4613      	mov	r3, r2
 8003130:	737b      	strb	r3, [r7, #13]
	static bool isStop;
	if ((!en || error) && isStop == false)
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	f083 0301 	eor.w	r3, r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <motorControl+0x28>
 800313e:	7bbb      	ldrb	r3, [r7, #14]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d016      	beq.n	8003172 <motorControl+0x56>
 8003144:	4b2d      	ldr	r3, [pc, #180]	@ (80031fc <motorControl+0xe0>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	f083 0301 	eor.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00f      	beq.n	8003172 <motorControl+0x56>
	{
		Kincoparameter.TargetSpeed = 0 ;
 8003152:	4b2b      	ldr	r3, [pc, #172]	@ (8003200 <motorControl+0xe4>)
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
		SetControlWord(ControlWord_DIS, MotorID[0]); // disable motor
 8003158:	4b2a      	ldr	r3, [pc, #168]	@ (8003204 <motorControl+0xe8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	2006      	movs	r0, #6
 8003160:	f7ff fcfc 	bl	8002b5c <SetControlWord>
		isStop = true ;
 8003164:	4b25      	ldr	r3, [pc, #148]	@ (80031fc <motorControl+0xe0>)
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
		printf("admin stop/////////////////////////\n");
 800316a:	4827      	ldr	r0, [pc, #156]	@ (8003208 <motorControl+0xec>)
 800316c:	f005 fce4 	bl	8008b38 <puts>
			Kincoparameter.TargetSpeed = 0 ;
		}
		SetSpeed(Kincoparameter.TargetSpeed, SetSpeedPDO[0]);
	}

}
 8003170:	e040      	b.n	80031f4 <motorControl+0xd8>
	} else if(en && !error)
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d03d      	beq.n	80031f4 <motorControl+0xd8>
 8003178:	7bbb      	ldrb	r3, [r7, #14]
 800317a:	f083 0301 	eor.w	r3, r3, #1
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d037      	beq.n	80031f4 <motorControl+0xd8>
		if(isStop)
 8003184:	4b1d      	ldr	r3, [pc, #116]	@ (80031fc <motorControl+0xe0>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <motorControl+0x88>
			SetControlWord(ControlWord_EN, MotorID[0]); // enable motor
 800318c:	4b1d      	ldr	r3, [pc, #116]	@ (8003204 <motorControl+0xe8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4619      	mov	r1, r3
 8003192:	200f      	movs	r0, #15
 8003194:	f7ff fce2 	bl	8002b5c <SetControlWord>
			isStop = false;
 8003198:	4b18      	ldr	r3, [pc, #96]	@ (80031fc <motorControl+0xe0>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
			printf("admin disstop/////////////////////////\n");
 800319e:	481b      	ldr	r0, [pc, #108]	@ (800320c <motorControl+0xf0>)
 80031a0:	f005 fcca 	bl	8008b38 <puts>
		if(dir == 1 || dir == 2)
 80031a4:	7b7b      	ldrb	r3, [r7, #13]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d002      	beq.n	80031b0 <motorControl+0x94>
 80031aa:	7b7b      	ldrb	r3, [r7, #13]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d107      	bne.n	80031c0 <motorControl+0xa4>
			Kincoparameter.TargetSpeed = speedToRpm(speed);
 80031b0:	ed97 0b00 	vldr	d0, [r7]
 80031b4:	f000 f82e 	bl	8003214 <speedToRpm>
 80031b8:	4603      	mov	r3, r0
 80031ba:	4a11      	ldr	r2, [pc, #68]	@ (8003200 <motorControl+0xe4>)
 80031bc:	6193      	str	r3, [r2, #24]
 80031be:	e011      	b.n	80031e4 <motorControl+0xc8>
		}else if(dir == 3 || dir == 4)
 80031c0:	7b7b      	ldrb	r3, [r7, #13]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d002      	beq.n	80031cc <motorControl+0xb0>
 80031c6:	7b7b      	ldrb	r3, [r7, #13]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d108      	bne.n	80031de <motorControl+0xc2>
			Kincoparameter.TargetSpeed = -speedToRpm(speed);
 80031cc:	ed97 0b00 	vldr	d0, [r7]
 80031d0:	f000 f820 	bl	8003214 <speedToRpm>
 80031d4:	4603      	mov	r3, r0
 80031d6:	425b      	negs	r3, r3
 80031d8:	4a09      	ldr	r2, [pc, #36]	@ (8003200 <motorControl+0xe4>)
 80031da:	6193      	str	r3, [r2, #24]
 80031dc:	e002      	b.n	80031e4 <motorControl+0xc8>
			Kincoparameter.TargetSpeed = 0 ;
 80031de:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <motorControl+0xe4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	619a      	str	r2, [r3, #24]
		SetSpeed(Kincoparameter.TargetSpeed, SetSpeedPDO[0]);
 80031e4:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <motorControl+0xe4>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a09      	ldr	r2, [pc, #36]	@ (8003210 <motorControl+0xf4>)
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fe56 	bl	8002ea0 <SetSpeed>
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	200003ad 	.word	0x200003ad
 8003200:	20000334 	.word	0x20000334
 8003204:	20000030 	.word	0x20000030
 8003208:	080092dc 	.word	0x080092dc
 800320c:	08009300 	.word	0x08009300
 8003210:	20000038 	.word	0x20000038

08003214 <speedToRpm>:
    // Calculate speed (m/s)
    double speed = (wheelCircumference * wheelRPM) / 60.0;
	return speed ;
}
int speedToRpm (double speed)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	ed87 0b00 	vstr	d0, [r7]
    // Calculate Circumference (C = pi * D)
    double wheelCircumference =  whellConfig.PI * whellConfig.wheelDiameter;
 800321e:	4b1a      	ldr	r3, [pc, #104]	@ (8003288 <speedToRpm+0x74>)
 8003220:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003224:	4b18      	ldr	r3, [pc, #96]	@ (8003288 <speedToRpm+0x74>)
 8003226:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800322a:	f7fd f98d 	bl	8000548 <__aeabi_dmul>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// Calculate rpm
	double wheelRPM = (speed*60)/wheelCircumference;
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	4b14      	ldr	r3, [pc, #80]	@ (800328c <speedToRpm+0x78>)
 800323c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003240:	f7fd f982 	bl	8000548 <__aeabi_dmul>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003250:	f7fd faa4 	bl	800079c <__aeabi_ddiv>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int rpm = wheelRPM * whellConfig.ratio ;
 800325c:	4b0a      	ldr	r3, [pc, #40]	@ (8003288 <speedToRpm+0x74>)
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd f907 	bl	8000474 <__aeabi_i2d>
 8003266:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800326a:	f7fd f96d 	bl	8000548 <__aeabi_dmul>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	f7fd fb79 	bl	800096c <__aeabi_d2iz>
 800327a:	4603      	mov	r3, r0
 800327c:	60fb      	str	r3, [r7, #12]
	return rpm ;
 800327e:	68fb      	ldr	r3, [r7, #12]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000018 	.word	0x20000018
 800328c:	404e0000 	.word	0x404e0000

08003290 <speedToRps>:

int speedToRps (double speed)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	ed87 0b00 	vstr	d0, [r7]
	return (speedToRpm(speed)/60);
 800329a:	ed97 0b00 	vldr	d0, [r7]
 800329e:	f7ff ffb9 	bl	8003214 <speedToRpm>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4a05      	ldr	r2, [pc, #20]	@ (80032bc <speedToRps+0x2c>)
 80032a6:	fb82 1203 	smull	r1, r2, r2, r3
 80032aa:	441a      	add	r2, r3
 80032ac:	1152      	asrs	r2, r2, #5
 80032ae:	17db      	asrs	r3, r3, #31
 80032b0:	1ad3      	subs	r3, r2, r3
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	88888889 	.word	0x88888889

080032c0 <hydraulicSetState>:
/**
 * @brief    Xuất tín hiệu điều khiển xylanh.
 * @param state: bảng trạng thái điều khiển xylanh
 */

void hydraulicSetState(struct HydraulicTableControl state) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, (GPIO_PinState) state.valve2);
 80032c8:	797b      	ldrb	r3, [r7, #5]
 80032ca:	461a      	mov	r2, r3
 80032cc:	2120      	movs	r1, #32
 80032ce:	481d      	ldr	r0, [pc, #116]	@ (8003344 <hydraulicSetState+0x84>)
 80032d0:	f001 f9dc 	bl	800468c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, (GPIO_PinState) state.valve3);
 80032d4:	79bb      	ldrb	r3, [r7, #6]
 80032d6:	461a      	mov	r2, r3
 80032d8:	2140      	movs	r1, #64	@ 0x40
 80032da:	481a      	ldr	r0, [pc, #104]	@ (8003344 <hydraulicSetState+0x84>)
 80032dc:	f001 f9d6 	bl	800468c <HAL_GPIO_WritePin>

	if (state.pump == 1) {
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d114      	bne.n	8003310 <hydraulicSetState+0x50>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, (GPIO_PinState) state.valve1);
 80032e6:	793b      	ldrb	r3, [r7, #4]
 80032e8:	461a      	mov	r2, r3
 80032ea:	2110      	movs	r1, #16
 80032ec:	4815      	ldr	r0, [pc, #84]	@ (8003344 <hydraulicSetState+0x84>)
 80032ee:	f001 f9cd 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, (GPIO_PinState) state.pump);
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	461a      	mov	r2, r3
 80032f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032fa:	4812      	ldr	r0, [pc, #72]	@ (8003344 <hydraulicSetState+0x84>)
 80032fc:	f001 f9c6 	bl	800468c <HAL_GPIO_WritePin>
		mcp4922.setDAC(1024, 1024);
 8003300:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <hydraulicSetState+0x88>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003308:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800330c:	4798      	blx	r3
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, (GPIO_PinState) state.valve1);
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, (GPIO_PinState) state.pump);
		mcp4922.setDAC(0, 0);

	}
}
 800330e:	e014      	b.n	800333a <hydraulicSetState+0x7a>
		osDelay(100);
 8003310:	2064      	movs	r0, #100	@ 0x64
 8003312:	f002 fe53 	bl	8005fbc <osDelay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, (GPIO_PinState) state.valve1);
 8003316:	793b      	ldrb	r3, [r7, #4]
 8003318:	461a      	mov	r2, r3
 800331a:	2110      	movs	r1, #16
 800331c:	4809      	ldr	r0, [pc, #36]	@ (8003344 <hydraulicSetState+0x84>)
 800331e:	f001 f9b5 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, (GPIO_PinState) state.pump);
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	461a      	mov	r2, r3
 8003326:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800332a:	4806      	ldr	r0, [pc, #24]	@ (8003344 <hydraulicSetState+0x84>)
 800332c:	f001 f9ae 	bl	800468c <HAL_GPIO_WritePin>
		mcp4922.setDAC(0, 0);
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <hydraulicSetState+0x88>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2100      	movs	r1, #0
 8003336:	2000      	movs	r0, #0
 8003338:	4798      	blx	r3
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40021800 	.word	0x40021800
 8003348:	2000000c 	.word	0x2000000c

0800334c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003350:	4b0e      	ldr	r3, [pc, #56]	@ (800338c <HAL_Init+0x40>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0d      	ldr	r2, [pc, #52]	@ (800338c <HAL_Init+0x40>)
 8003356:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800335a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800335c:	4b0b      	ldr	r3, [pc, #44]	@ (800338c <HAL_Init+0x40>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0a      	ldr	r2, [pc, #40]	@ (800338c <HAL_Init+0x40>)
 8003362:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003368:	4b08      	ldr	r3, [pc, #32]	@ (800338c <HAL_Init+0x40>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a07      	ldr	r2, [pc, #28]	@ (800338c <HAL_Init+0x40>)
 800336e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003374:	2003      	movs	r0, #3
 8003376:	f000 ff93 	bl	80042a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800337a:	200f      	movs	r0, #15
 800337c:	f000 f808 	bl	8003390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003380:	f7fe fc76 	bl	8001c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023c00 	.word	0x40023c00

08003390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003398:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <HAL_InitTick+0x54>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b12      	ldr	r3, [pc, #72]	@ (80033e8 <HAL_InitTick+0x58>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	4619      	mov	r1, r3
 80033a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 ffab 	bl	800430a <HAL_SYSTICK_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00e      	b.n	80033dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b0f      	cmp	r3, #15
 80033c2:	d80a      	bhi.n	80033da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c4:	2200      	movs	r2, #0
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	f000 ff73 	bl	80042b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033d0:	4a06      	ldr	r2, [pc, #24]	@ (80033ec <HAL_InitTick+0x5c>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000054 	.word	0x20000054
 80033ec:	20000050 	.word	0x20000050

080033f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f4:	4b06      	ldr	r3, [pc, #24]	@ (8003410 <HAL_IncTick+0x20>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <HAL_IncTick+0x24>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4413      	add	r3, r2
 8003400:	4a04      	ldr	r2, [pc, #16]	@ (8003414 <HAL_IncTick+0x24>)
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000054 	.word	0x20000054
 8003414:	200003b0 	.word	0x200003b0

08003418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return uwTick;
 800341c:	4b03      	ldr	r3, [pc, #12]	@ (800342c <HAL_GetTick+0x14>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	200003b0 	.word	0x200003b0

08003430 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0ed      	b.n	800361e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe fc3a 	bl	8001cc8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003464:	f7ff ffd8 	bl	8003418 <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800346a:	e012      	b.n	8003492 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800346c:	f7ff ffd4 	bl	8003418 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b0a      	cmp	r3, #10
 8003478:	d90b      	bls.n	8003492 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2205      	movs	r2, #5
 800348a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e0c5      	b.n	800361e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0e5      	beq.n	800346c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0202 	bic.w	r2, r2, #2
 80034ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034b0:	f7ff ffb2 	bl	8003418 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034b6:	e012      	b.n	80034de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034b8:	f7ff ffae 	bl	8003418 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b0a      	cmp	r3, #10
 80034c4:	d90b      	bls.n	80034de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2205      	movs	r2, #5
 80034d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e09f      	b.n	800361e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e5      	bne.n	80034b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7e1b      	ldrb	r3, [r3, #24]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d108      	bne.n	8003506 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e007      	b.n	8003516 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003514:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7e5b      	ldrb	r3, [r3, #25]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d108      	bne.n	8003530 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e007      	b.n	8003540 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800353e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7e9b      	ldrb	r3, [r3, #26]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d108      	bne.n	800355a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0220 	orr.w	r2, r2, #32
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e007      	b.n	800356a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0220 	bic.w	r2, r2, #32
 8003568:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7edb      	ldrb	r3, [r3, #27]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d108      	bne.n	8003584 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0210 	bic.w	r2, r2, #16
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e007      	b.n	8003594 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0210 	orr.w	r2, r2, #16
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7f1b      	ldrb	r3, [r3, #28]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d108      	bne.n	80035ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0208 	orr.w	r2, r2, #8
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	e007      	b.n	80035be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0208 	bic.w	r2, r2, #8
 80035bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7f5b      	ldrb	r3, [r3, #29]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d108      	bne.n	80035d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0204 	orr.w	r2, r2, #4
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e007      	b.n	80035e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0204 	bic.w	r2, r2, #4
 80035e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	ea42 0103 	orr.w	r1, r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	1e5a      	subs	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800363e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d003      	beq.n	800364e <HAL_CAN_ConfigFilter+0x26>
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	2b02      	cmp	r3, #2
 800364a:	f040 80be 	bne.w	80037ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800364e:	4b65      	ldr	r3, [pc, #404]	@ (80037e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8003650:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003668:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	431a      	orrs	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	2201      	movs	r2, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43db      	mvns	r3, r3
 80036a0:	401a      	ands	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d123      	bne.n	80036f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	401a      	ands	r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80036d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3248      	adds	r2, #72	@ 0x48
 80036d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036ee:	6979      	ldr	r1, [r7, #20]
 80036f0:	3348      	adds	r3, #72	@ 0x48
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	440b      	add	r3, r1
 80036f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d122      	bne.n	8003746 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	431a      	orrs	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003720:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	3248      	adds	r2, #72	@ 0x48
 8003726:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800373a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800373c:	6979      	ldr	r1, [r7, #20]
 800373e:	3348      	adds	r3, #72	@ 0x48
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	440b      	add	r3, r1
 8003744:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43db      	mvns	r3, r3
 8003758:	401a      	ands	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003760:	e007      	b.n	8003772 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	431a      	orrs	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	401a      	ands	r2, r3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800378c:	e007      	b.n	800379e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	431a      	orrs	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d107      	bne.n	80037b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80037bc:	f023 0201 	bic.w	r2, r3, #1
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e006      	b.n	80037d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
  }
}
 80037d8:	4618      	mov	r0, r3
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	40006400 	.word	0x40006400

080037e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d12e      	bne.n	800385a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003814:	f7ff fe00 	bl	8003418 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800381a:	e012      	b.n	8003842 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800381c:	f7ff fdfc 	bl	8003418 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b0a      	cmp	r3, #10
 8003828:	d90b      	bls.n	8003842 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2205      	movs	r2, #5
 800383a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e012      	b.n	8003868 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e5      	bne.n	800381c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e006      	b.n	8003868 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	@ 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003884:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800388e:	7ffb      	ldrb	r3, [r7, #31]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d003      	beq.n	800389c <HAL_CAN_AddTxMessage+0x2c>
 8003894:	7ffb      	ldrb	r3, [r7, #31]
 8003896:	2b02      	cmp	r3, #2
 8003898:	f040 80ad 	bne.w	80039f6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8095 	beq.w	80039e6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	0e1b      	lsrs	r3, r3, #24
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80038c6:	2201      	movs	r2, #1
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	409a      	lsls	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10d      	bne.n	80038f4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80038e2:	68f9      	ldr	r1, [r7, #12]
 80038e4:	6809      	ldr	r1, [r1, #0]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	3318      	adds	r3, #24
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	440b      	add	r3, r1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e00f      	b.n	8003914 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038fe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003904:	68f9      	ldr	r1, [r7, #12]
 8003906:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003908:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	3318      	adds	r3, #24
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	440b      	add	r3, r1
 8003912:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3318      	adds	r3, #24
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	440b      	add	r3, r1
 8003924:	3304      	adds	r3, #4
 8003926:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	7d1b      	ldrb	r3, [r3, #20]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d111      	bne.n	8003954 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	3318      	adds	r3, #24
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	4413      	add	r3, r2
 800393c:	3304      	adds	r3, #4
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	6811      	ldr	r1, [r2, #0]
 8003944:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3318      	adds	r3, #24
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	440b      	add	r3, r1
 8003950:	3304      	adds	r3, #4
 8003952:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3307      	adds	r3, #7
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	061a      	lsls	r2, r3, #24
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3306      	adds	r3, #6
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	041b      	lsls	r3, r3, #16
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3305      	adds	r3, #5
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	4313      	orrs	r3, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	3204      	adds	r2, #4
 8003974:	7812      	ldrb	r2, [r2, #0]
 8003976:	4610      	mov	r0, r2
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	6811      	ldr	r1, [r2, #0]
 800397c:	ea43 0200 	orr.w	r2, r3, r0
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	440b      	add	r3, r1
 8003986:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800398a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3303      	adds	r3, #3
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	061a      	lsls	r2, r3, #24
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3302      	adds	r3, #2
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3301      	adds	r3, #1
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	4313      	orrs	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	7812      	ldrb	r2, [r2, #0]
 80039ac:	4610      	mov	r0, r2
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	6811      	ldr	r1, [r2, #0]
 80039b2:	ea43 0200 	orr.w	r2, r3, r0
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	440b      	add	r3, r1
 80039bc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80039c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	3318      	adds	r3, #24
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	4413      	add	r3, r2
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	6811      	ldr	r1, [r2, #0]
 80039d4:	f043 0201 	orr.w	r2, r3, #1
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3318      	adds	r3, #24
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	440b      	add	r3, r1
 80039e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e00e      	b.n	8003a04 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e006      	b.n	8003a04 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3724      	adds	r7, #36	@ 0x24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a24:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d003      	beq.n	8003a34 <HAL_CAN_GetRxMessage+0x24>
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	f040 8103 	bne.w	8003c3a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10e      	bne.n	8003a58 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d116      	bne.n	8003a76 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0f7      	b.n	8003c48 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d107      	bne.n	8003a76 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e0e8      	b.n	8003c48 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	331b      	adds	r3, #27
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	4413      	add	r3, r2
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0204 	and.w	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10c      	bne.n	8003aae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	331b      	adds	r3, #27
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	4413      	add	r3, r2
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	0d5b      	lsrs	r3, r3, #21
 8003aa4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	e00b      	b.n	8003ac6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	331b      	adds	r3, #27
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	4413      	add	r3, r2
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	331b      	adds	r3, #27
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	4413      	add	r3, r2
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0202 	and.w	r2, r3, #2
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	331b      	adds	r3, #27
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3304      	adds	r3, #4
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2208      	movs	r2, #8
 8003af8:	611a      	str	r2, [r3, #16]
 8003afa:	e00b      	b.n	8003b14 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	331b      	adds	r3, #27
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 020f 	and.w	r2, r3, #15
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	331b      	adds	r3, #27
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	4413      	add	r3, r2
 8003b20:	3304      	adds	r3, #4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	331b      	adds	r3, #27
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	4413      	add	r3, r2
 8003b38:	3304      	adds	r3, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	0a1a      	lsrs	r2, r3, #8
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	0c1a      	lsrs	r2, r3, #16
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	3302      	adds	r3, #2
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	0e1a      	lsrs	r2, r3, #24
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	3303      	adds	r3, #3
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0a1a      	lsrs	r2, r3, #8
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	3305      	adds	r3, #5
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	0c1a      	lsrs	r2, r3, #16
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	3306      	adds	r3, #6
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	0e1a      	lsrs	r2, r3, #24
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	3307      	adds	r3, #7
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d108      	bne.n	8003c26 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0220 	orr.w	r2, r2, #32
 8003c22:	60da      	str	r2, [r3, #12]
 8003c24:	e007      	b.n	8003c36 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0220 	orr.w	r2, r2, #32
 8003c34:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e006      	b.n	8003c48 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
  }
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c64:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d002      	beq.n	8003c72 <HAL_CAN_ActivateNotification+0x1e>
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d109      	bne.n	8003c86 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6959      	ldr	r1, [r3, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e006      	b.n	8003c94 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	@ 0x28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d07c      	beq.n	8003de0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d023      	beq.n	8003d38 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f983 	bl	800400e <HAL_CAN_TxMailbox0CompleteCallback>
 8003d08:	e016      	b.n	8003d38 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d004      	beq.n	8003d1e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1c:	e00c      	b.n	8003d38 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d30:	e002      	b.n	8003d38 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f989 	bl	800404a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d024      	beq.n	8003d8c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f963 	bl	8004022 <HAL_CAN_TxMailbox1CompleteCallback>
 8003d5c:	e016      	b.n	8003d8c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d004      	beq.n	8003d72 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d70:	e00c      	b.n	8003d8c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d84:	e002      	b.n	8003d8c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f969 	bl	800405e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d024      	beq.n	8003de0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003d9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f943 	bl	8004036 <HAL_CAN_TxMailbox2CompleteCallback>
 8003db0:	e016      	b.n	8003de0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc4:	e00c      	b.n	8003de0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd8:	e002      	b.n	8003de0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f949 	bl	8004072 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00c      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dfa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2210      	movs	r2, #16
 8003e02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d006      	beq.n	8003e26 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f930 	bl	8004086 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fe fa18 	bl	8002274 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00c      	beq.n	8003e68 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2210      	movs	r2, #16
 8003e66:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2208      	movs	r2, #8
 8003e82:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f912 	bl	80040ae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d009      	beq.n	8003ea8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f8f9 	bl	800409a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d006      	beq.n	8003eca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f8fc 	bl	80040c2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d006      	beq.n	8003eec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8f5 	bl	80040d6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d07b      	beq.n	8003fee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d072      	beq.n	8003fe6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	f043 0302 	orr.w	r3, r3, #2
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	f043 0304 	orr.w	r3, r3, #4
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d043      	beq.n	8003fe6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d03e      	beq.n	8003fe6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f6e:	2b60      	cmp	r3, #96	@ 0x60
 8003f70:	d02b      	beq.n	8003fca <HAL_CAN_IRQHandler+0x32a>
 8003f72:	2b60      	cmp	r3, #96	@ 0x60
 8003f74:	d82e      	bhi.n	8003fd4 <HAL_CAN_IRQHandler+0x334>
 8003f76:	2b50      	cmp	r3, #80	@ 0x50
 8003f78:	d022      	beq.n	8003fc0 <HAL_CAN_IRQHandler+0x320>
 8003f7a:	2b50      	cmp	r3, #80	@ 0x50
 8003f7c:	d82a      	bhi.n	8003fd4 <HAL_CAN_IRQHandler+0x334>
 8003f7e:	2b40      	cmp	r3, #64	@ 0x40
 8003f80:	d019      	beq.n	8003fb6 <HAL_CAN_IRQHandler+0x316>
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d826      	bhi.n	8003fd4 <HAL_CAN_IRQHandler+0x334>
 8003f86:	2b30      	cmp	r3, #48	@ 0x30
 8003f88:	d010      	beq.n	8003fac <HAL_CAN_IRQHandler+0x30c>
 8003f8a:	2b30      	cmp	r3, #48	@ 0x30
 8003f8c:	d822      	bhi.n	8003fd4 <HAL_CAN_IRQHandler+0x334>
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d002      	beq.n	8003f98 <HAL_CAN_IRQHandler+0x2f8>
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d005      	beq.n	8003fa2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f96:	e01d      	b.n	8003fd4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	f043 0308 	orr.w	r3, r3, #8
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003fa0:	e019      	b.n	8003fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	f043 0310 	orr.w	r3, r3, #16
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003faa:	e014      	b.n	8003fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	f043 0320 	orr.w	r3, r3, #32
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003fb4:	e00f      	b.n	8003fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003fbe:	e00a      	b.n	8003fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003fc8:	e005      	b.n	8003fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003fd2:	e000      	b.n	8003fd6 <HAL_CAN_IRQHandler+0x336>
            break;
 8003fd4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003fe4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2204      	movs	r2, #4
 8003fec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f872 	bl	80040ea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004006:	bf00      	nop
 8004008:	3728      	adds	r7, #40	@ 0x28
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004110:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800411c:	4013      	ands	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800412c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004132:	4a04      	ldr	r2, [pc, #16]	@ (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	60d3      	str	r3, [r2, #12]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800414c:	4b04      	ldr	r3, [pc, #16]	@ (8004160 <__NVIC_GetPriorityGrouping+0x18>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	f003 0307 	and.w	r3, r3, #7
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	2b00      	cmp	r3, #0
 8004174:	db0b      	blt.n	800418e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	4907      	ldr	r1, [pc, #28]	@ (800419c <__NVIC_EnableIRQ+0x38>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2001      	movs	r0, #1
 8004186:	fa00 f202 	lsl.w	r2, r0, r2
 800418a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000e100 	.word	0xe000e100

080041a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	6039      	str	r1, [r7, #0]
 80041aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db0a      	blt.n	80041ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	490c      	ldr	r1, [pc, #48]	@ (80041ec <__NVIC_SetPriority+0x4c>)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	0112      	lsls	r2, r2, #4
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	440b      	add	r3, r1
 80041c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041c8:	e00a      	b.n	80041e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	4908      	ldr	r1, [pc, #32]	@ (80041f0 <__NVIC_SetPriority+0x50>)
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	3b04      	subs	r3, #4
 80041d8:	0112      	lsls	r2, r2, #4
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	440b      	add	r3, r1
 80041de:	761a      	strb	r2, [r3, #24]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000e100 	.word	0xe000e100
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	@ 0x24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f1c3 0307 	rsb	r3, r3, #7
 800420e:	2b04      	cmp	r3, #4
 8004210:	bf28      	it	cs
 8004212:	2304      	movcs	r3, #4
 8004214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3304      	adds	r3, #4
 800421a:	2b06      	cmp	r3, #6
 800421c:	d902      	bls.n	8004224 <NVIC_EncodePriority+0x30>
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3b03      	subs	r3, #3
 8004222:	e000      	b.n	8004226 <NVIC_EncodePriority+0x32>
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004228:	f04f 32ff 	mov.w	r2, #4294967295
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43da      	mvns	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	401a      	ands	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800423c:	f04f 31ff 	mov.w	r1, #4294967295
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	43d9      	mvns	r1, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800424c:	4313      	orrs	r3, r2
         );
}
 800424e:	4618      	mov	r0, r3
 8004250:	3724      	adds	r7, #36	@ 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3b01      	subs	r3, #1
 8004268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800426c:	d301      	bcc.n	8004272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800426e:	2301      	movs	r3, #1
 8004270:	e00f      	b.n	8004292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004272:	4a0a      	ldr	r2, [pc, #40]	@ (800429c <SysTick_Config+0x40>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3b01      	subs	r3, #1
 8004278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800427a:	210f      	movs	r1, #15
 800427c:	f04f 30ff 	mov.w	r0, #4294967295
 8004280:	f7ff ff8e 	bl	80041a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004284:	4b05      	ldr	r3, [pc, #20]	@ (800429c <SysTick_Config+0x40>)
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800428a:	4b04      	ldr	r3, [pc, #16]	@ (800429c <SysTick_Config+0x40>)
 800428c:	2207      	movs	r2, #7
 800428e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	e000e010 	.word	0xe000e010

080042a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff29 	bl	8004100 <__NVIC_SetPriorityGrouping>
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	4603      	mov	r3, r0
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042c8:	f7ff ff3e 	bl	8004148 <__NVIC_GetPriorityGrouping>
 80042cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	6978      	ldr	r0, [r7, #20]
 80042d4:	f7ff ff8e 	bl	80041f4 <NVIC_EncodePriority>
 80042d8:	4602      	mov	r2, r0
 80042da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ff5d 	bl	80041a0 <__NVIC_SetPriority>
}
 80042e6:	bf00      	nop
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	4603      	mov	r3, r0
 80042f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff31 	bl	8004164 <__NVIC_EnableIRQ>
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff ffa2 	bl	800425c <SysTick_Config>
 8004318:	4603      	mov	r3, r0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004324:	b480      	push	{r7}
 8004326:	b089      	sub	sp, #36	@ 0x24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e16b      	b.n	8004618 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004340:	2201      	movs	r2, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	429a      	cmp	r2, r3
 800435a:	f040 815a 	bne.w	8004612 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d005      	beq.n	8004376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004372:	2b02      	cmp	r3, #2
 8004374:	d130      	bne.n	80043d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	2203      	movs	r2, #3
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043ac:	2201      	movs	r2, #1
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4013      	ands	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 0201 	and.w	r2, r3, #1
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d017      	beq.n	8004414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	2203      	movs	r2, #3
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d123      	bne.n	8004468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	08da      	lsrs	r2, r3, #3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3208      	adds	r2, #8
 8004428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	220f      	movs	r2, #15
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	08da      	lsrs	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3208      	adds	r2, #8
 8004462:	69b9      	ldr	r1, [r7, #24]
 8004464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	2203      	movs	r2, #3
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 0203 	and.w	r2, r3, #3
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4313      	orrs	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80b4 	beq.w	8004612 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	4b60      	ldr	r3, [pc, #384]	@ (8004630 <HAL_GPIO_Init+0x30c>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	4a5f      	ldr	r2, [pc, #380]	@ (8004630 <HAL_GPIO_Init+0x30c>)
 80044b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004630 <HAL_GPIO_Init+0x30c>)
 80044bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004634 <HAL_GPIO_Init+0x310>)
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	3302      	adds	r3, #2
 80044ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	220f      	movs	r2, #15
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a52      	ldr	r2, [pc, #328]	@ (8004638 <HAL_GPIO_Init+0x314>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d02b      	beq.n	800454a <HAL_GPIO_Init+0x226>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a51      	ldr	r2, [pc, #324]	@ (800463c <HAL_GPIO_Init+0x318>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d025      	beq.n	8004546 <HAL_GPIO_Init+0x222>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a50      	ldr	r2, [pc, #320]	@ (8004640 <HAL_GPIO_Init+0x31c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01f      	beq.n	8004542 <HAL_GPIO_Init+0x21e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a4f      	ldr	r2, [pc, #316]	@ (8004644 <HAL_GPIO_Init+0x320>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d019      	beq.n	800453e <HAL_GPIO_Init+0x21a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a4e      	ldr	r2, [pc, #312]	@ (8004648 <HAL_GPIO_Init+0x324>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_GPIO_Init+0x216>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4d      	ldr	r2, [pc, #308]	@ (800464c <HAL_GPIO_Init+0x328>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00d      	beq.n	8004536 <HAL_GPIO_Init+0x212>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4c      	ldr	r2, [pc, #304]	@ (8004650 <HAL_GPIO_Init+0x32c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <HAL_GPIO_Init+0x20e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4b      	ldr	r2, [pc, #300]	@ (8004654 <HAL_GPIO_Init+0x330>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <HAL_GPIO_Init+0x20a>
 800452a:	2307      	movs	r3, #7
 800452c:	e00e      	b.n	800454c <HAL_GPIO_Init+0x228>
 800452e:	2308      	movs	r3, #8
 8004530:	e00c      	b.n	800454c <HAL_GPIO_Init+0x228>
 8004532:	2306      	movs	r3, #6
 8004534:	e00a      	b.n	800454c <HAL_GPIO_Init+0x228>
 8004536:	2305      	movs	r3, #5
 8004538:	e008      	b.n	800454c <HAL_GPIO_Init+0x228>
 800453a:	2304      	movs	r3, #4
 800453c:	e006      	b.n	800454c <HAL_GPIO_Init+0x228>
 800453e:	2303      	movs	r3, #3
 8004540:	e004      	b.n	800454c <HAL_GPIO_Init+0x228>
 8004542:	2302      	movs	r3, #2
 8004544:	e002      	b.n	800454c <HAL_GPIO_Init+0x228>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <HAL_GPIO_Init+0x228>
 800454a:	2300      	movs	r3, #0
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	f002 0203 	and.w	r2, r2, #3
 8004552:	0092      	lsls	r2, r2, #2
 8004554:	4093      	lsls	r3, r2
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800455c:	4935      	ldr	r1, [pc, #212]	@ (8004634 <HAL_GPIO_Init+0x310>)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	3302      	adds	r3, #2
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800456a:	4b3b      	ldr	r3, [pc, #236]	@ (8004658 <HAL_GPIO_Init+0x334>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800458e:	4a32      	ldr	r2, [pc, #200]	@ (8004658 <HAL_GPIO_Init+0x334>)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004594:	4b30      	ldr	r3, [pc, #192]	@ (8004658 <HAL_GPIO_Init+0x334>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045b8:	4a27      	ldr	r2, [pc, #156]	@ (8004658 <HAL_GPIO_Init+0x334>)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045be:	4b26      	ldr	r3, [pc, #152]	@ (8004658 <HAL_GPIO_Init+0x334>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004658 <HAL_GPIO_Init+0x334>)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004658 <HAL_GPIO_Init+0x334>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800460c:	4a12      	ldr	r2, [pc, #72]	@ (8004658 <HAL_GPIO_Init+0x334>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3301      	adds	r3, #1
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b0f      	cmp	r3, #15
 800461c:	f67f ae90 	bls.w	8004340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	3724      	adds	r7, #36	@ 0x24
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40023800 	.word	0x40023800
 8004634:	40013800 	.word	0x40013800
 8004638:	40020000 	.word	0x40020000
 800463c:	40020400 	.word	0x40020400
 8004640:	40020800 	.word	0x40020800
 8004644:	40020c00 	.word	0x40020c00
 8004648:	40021000 	.word	0x40021000
 800464c:	40021400 	.word	0x40021400
 8004650:	40021800 	.word	0x40021800
 8004654:	40021c00 	.word	0x40021c00
 8004658:	40013c00 	.word	0x40013c00

0800465c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	887b      	ldrh	r3, [r7, #2]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	e001      	b.n	800467e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	807b      	strh	r3, [r7, #2]
 8004698:	4613      	mov	r3, r2
 800469a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800469c:	787b      	ldrb	r3, [r7, #1]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046a8:	e003      	b.n	80046b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046aa:	887b      	ldrh	r3, [r7, #2]
 80046ac:	041a      	lsls	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	619a      	str	r2, [r3, #24]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e267      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d075      	beq.n	80047ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046de:	4b88      	ldr	r3, [pc, #544]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d00c      	beq.n	8004704 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ea:	4b85      	ldr	r3, [pc, #532]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d112      	bne.n	800471c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f6:	4b82      	ldr	r3, [pc, #520]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004702:	d10b      	bne.n	800471c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004704:	4b7e      	ldr	r3, [pc, #504]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d05b      	beq.n	80047c8 <HAL_RCC_OscConfig+0x108>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d157      	bne.n	80047c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e242      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004724:	d106      	bne.n	8004734 <HAL_RCC_OscConfig+0x74>
 8004726:	4b76      	ldr	r3, [pc, #472]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a75      	ldr	r2, [pc, #468]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 800472c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	e01d      	b.n	8004770 <HAL_RCC_OscConfig+0xb0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800473c:	d10c      	bne.n	8004758 <HAL_RCC_OscConfig+0x98>
 800473e:	4b70      	ldr	r3, [pc, #448]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a6f      	ldr	r2, [pc, #444]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 8004744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	4b6d      	ldr	r3, [pc, #436]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6c      	ldr	r2, [pc, #432]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 8004750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	e00b      	b.n	8004770 <HAL_RCC_OscConfig+0xb0>
 8004758:	4b69      	ldr	r3, [pc, #420]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a68      	ldr	r2, [pc, #416]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 800475e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	4b66      	ldr	r3, [pc, #408]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a65      	ldr	r2, [pc, #404]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 800476a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800476e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fe fe4e 	bl	8003418 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004780:	f7fe fe4a 	bl	8003418 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	@ 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e207      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	4b5b      	ldr	r3, [pc, #364]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0xc0>
 800479e:	e014      	b.n	80047ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fe fe3a 	bl	8003418 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fe fe36 	bl	8003418 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	@ 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e1f3      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ba:	4b51      	ldr	r3, [pc, #324]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0xe8>
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d063      	beq.n	800489e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e2:	4b47      	ldr	r3, [pc, #284]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d11c      	bne.n	8004828 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b44      	ldr	r3, [pc, #272]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d116      	bne.n	8004828 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fa:	4b41      	ldr	r3, [pc, #260]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_RCC_OscConfig+0x152>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d001      	beq.n	8004812 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e1c7      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004812:	4b3b      	ldr	r3, [pc, #236]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4937      	ldr	r1, [pc, #220]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004826:	e03a      	b.n	800489e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d020      	beq.n	8004872 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004830:	4b34      	ldr	r3, [pc, #208]	@ (8004904 <HAL_RCC_OscConfig+0x244>)
 8004832:	2201      	movs	r2, #1
 8004834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fe fdef 	bl	8003418 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483e:	f7fe fdeb 	bl	8003418 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e1a8      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004850:	4b2b      	ldr	r3, [pc, #172]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485c:	4b28      	ldr	r3, [pc, #160]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4925      	ldr	r1, [pc, #148]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
 8004870:	e015      	b.n	800489e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004872:	4b24      	ldr	r3, [pc, #144]	@ (8004904 <HAL_RCC_OscConfig+0x244>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fe fdce 	bl	8003418 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004880:	f7fe fdca 	bl	8003418 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e187      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004892:	4b1b      	ldr	r3, [pc, #108]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d036      	beq.n	8004918 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b2:	4b15      	ldr	r3, [pc, #84]	@ (8004908 <HAL_RCC_OscConfig+0x248>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fe fdae 	bl	8003418 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c0:	f7fe fdaa 	bl	8003418 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e167      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004900 <HAL_RCC_OscConfig+0x240>)
 80048d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x200>
 80048de:	e01b      	b.n	8004918 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e0:	4b09      	ldr	r3, [pc, #36]	@ (8004908 <HAL_RCC_OscConfig+0x248>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e6:	f7fe fd97 	bl	8003418 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	e00e      	b.n	800490c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ee:	f7fe fd93 	bl	8003418 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d907      	bls.n	800490c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e150      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
 8004900:	40023800 	.word	0x40023800
 8004904:	42470000 	.word	0x42470000
 8004908:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800490c:	4b88      	ldr	r3, [pc, #544]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 800490e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ea      	bne.n	80048ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8097 	beq.w	8004a54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004926:	2300      	movs	r3, #0
 8004928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492a:	4b81      	ldr	r3, [pc, #516]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10f      	bne.n	8004956 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	4b7d      	ldr	r3, [pc, #500]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004944:	6413      	str	r3, [r2, #64]	@ 0x40
 8004946:	4b7a      	ldr	r3, [pc, #488]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004952:	2301      	movs	r3, #1
 8004954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004956:	4b77      	ldr	r3, [pc, #476]	@ (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d118      	bne.n	8004994 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004962:	4b74      	ldr	r3, [pc, #464]	@ (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a73      	ldr	r2, [pc, #460]	@ (8004b34 <HAL_RCC_OscConfig+0x474>)
 8004968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800496e:	f7fe fd53 	bl	8003418 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004976:	f7fe fd4f 	bl	8003418 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e10c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004988:	4b6a      	ldr	r3, [pc, #424]	@ (8004b34 <HAL_RCC_OscConfig+0x474>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d106      	bne.n	80049aa <HAL_RCC_OscConfig+0x2ea>
 800499c:	4b64      	ldr	r3, [pc, #400]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a0:	4a63      	ldr	r2, [pc, #396]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a8:	e01c      	b.n	80049e4 <HAL_RCC_OscConfig+0x324>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d10c      	bne.n	80049cc <HAL_RCC_OscConfig+0x30c>
 80049b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b6:	4a5e      	ldr	r2, [pc, #376]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049b8:	f043 0304 	orr.w	r3, r3, #4
 80049bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80049be:	4b5c      	ldr	r3, [pc, #368]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ca:	e00b      	b.n	80049e4 <HAL_RCC_OscConfig+0x324>
 80049cc:	4b58      	ldr	r3, [pc, #352]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d0:	4a57      	ldr	r2, [pc, #348]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d8:	4b55      	ldr	r3, [pc, #340]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049dc:	4a54      	ldr	r2, [pc, #336]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fe fd14 	bl	8003418 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fe fd10 	bl	8003418 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0cb      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0a:	4b49      	ldr	r3, [pc, #292]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0ee      	beq.n	80049f4 <HAL_RCC_OscConfig+0x334>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a18:	f7fe fcfe 	bl	8003418 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fe fcfa 	bl	8003418 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e0b5      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a36:	4b3e      	ldr	r3, [pc, #248]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1ee      	bne.n	8004a20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a48:	4b39      	ldr	r3, [pc, #228]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	4a38      	ldr	r2, [pc, #224]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a1 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a5e:	4b34      	ldr	r3, [pc, #208]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d05c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d141      	bne.n	8004af6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a72:	4b31      	ldr	r3, [pc, #196]	@ (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a78:	f7fe fcce 	bl	8003418 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fe fcca 	bl	8003418 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e087      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a92:	4b27      	ldr	r3, [pc, #156]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	491b      	ldr	r1, [pc, #108]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ace:	f7fe fca3 	bl	8003418 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad6:	f7fe fc9f 	bl	8003418 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e05c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae8:	4b11      	ldr	r3, [pc, #68]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x416>
 8004af4:	e054      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af6:	4b10      	ldr	r3, [pc, #64]	@ (8004b38 <HAL_RCC_OscConfig+0x478>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fe fc8c 	bl	8003418 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b04:	f7fe fc88 	bl	8003418 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e045      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b16:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <HAL_RCC_OscConfig+0x470>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x444>
 8004b22:	e03d      	b.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d107      	bne.n	8004b3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e038      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
 8004b30:	40023800 	.word	0x40023800
 8004b34:	40007000 	.word	0x40007000
 8004b38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bac <HAL_RCC_OscConfig+0x4ec>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d028      	beq.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d121      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d11a      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d111      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	3b01      	subs	r3, #1
 8004b86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800

08004bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0cc      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b68      	ldr	r3, [pc, #416]	@ (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d90c      	bls.n	8004bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b65      	ldr	r3, [pc, #404]	@ (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b63      	ldr	r3, [pc, #396]	@ (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0b8      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c04:	4b59      	ldr	r3, [pc, #356]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4a58      	ldr	r2, [pc, #352]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c1c:	4b53      	ldr	r3, [pc, #332]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4a52      	ldr	r2, [pc, #328]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c28:	4b50      	ldr	r3, [pc, #320]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	494d      	ldr	r1, [pc, #308]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d044      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4e:	4b47      	ldr	r3, [pc, #284]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d119      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e07f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d003      	beq.n	8004c6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e06f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e067      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c8e:	4b37      	ldr	r3, [pc, #220]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f023 0203 	bic.w	r2, r3, #3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4934      	ldr	r1, [pc, #208]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ca0:	f7fe fbba 	bl	8003418 <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca8:	f7fe fbb6 	bl	8003418 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e04f      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 020c 	and.w	r2, r3, #12
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d1eb      	bne.n	8004ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd0:	4b25      	ldr	r3, [pc, #148]	@ (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d20c      	bcs.n	8004cf8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cde:	4b22      	ldr	r3, [pc, #136]	@ (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e032      	b.n	8004d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d04:	4b19      	ldr	r3, [pc, #100]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4916      	ldr	r1, [pc, #88]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d22:	4b12      	ldr	r3, [pc, #72]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	490e      	ldr	r1, [pc, #56]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d36:	f000 f821 	bl	8004d7c <HAL_RCC_GetSysClockFreq>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	490a      	ldr	r1, [pc, #40]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c0>)
 8004d48:	5ccb      	ldrb	r3, [r1, r3]
 8004d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4e:	4a09      	ldr	r2, [pc, #36]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d52:	4b09      	ldr	r3, [pc, #36]	@ (8004d78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe fb1a 	bl	8003390 <HAL_InitTick>

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023c00 	.word	0x40023c00
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	080093ac 	.word	0x080093ac
 8004d74:	20000000 	.word	0x20000000
 8004d78:	20000050 	.word	0x20000050

08004d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d80:	b090      	sub	sp, #64	@ 0x40
 8004d82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d94:	4b59      	ldr	r3, [pc, #356]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 030c 	and.w	r3, r3, #12
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d00d      	beq.n	8004dbc <HAL_RCC_GetSysClockFreq+0x40>
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	f200 80a1 	bhi.w	8004ee8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x34>
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d003      	beq.n	8004db6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dae:	e09b      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004db0:	4b53      	ldr	r3, [pc, #332]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8004db2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004db4:	e09b      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004db6:	4b53      	ldr	r3, [pc, #332]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8004db8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dba:	e098      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dc4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d028      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	2200      	movs	r2, #0
 8004dda:	623b      	str	r3, [r7, #32]
 8004ddc:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004de4:	2100      	movs	r1, #0
 8004de6:	4b47      	ldr	r3, [pc, #284]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8004de8:	fb03 f201 	mul.w	r2, r3, r1
 8004dec:	2300      	movs	r3, #0
 8004dee:	fb00 f303 	mul.w	r3, r0, r3
 8004df2:	4413      	add	r3, r2
 8004df4:	4a43      	ldr	r2, [pc, #268]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x188>)
 8004df6:	fba0 1202 	umull	r1, r2, r0, r2
 8004dfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dfc:	460a      	mov	r2, r1
 8004dfe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e02:	4413      	add	r3, r2
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e08:	2200      	movs	r2, #0
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	61fa      	str	r2, [r7, #28]
 8004e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e16:	f7fb fe21 	bl	8000a5c <__aeabi_uldivmod>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4613      	mov	r3, r2
 8004e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e22:	e053      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e24:	4b35      	ldr	r3, [pc, #212]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	099b      	lsrs	r3, r3, #6
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	617a      	str	r2, [r7, #20]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e36:	f04f 0b00 	mov.w	fp, #0
 8004e3a:	4652      	mov	r2, sl
 8004e3c:	465b      	mov	r3, fp
 8004e3e:	f04f 0000 	mov.w	r0, #0
 8004e42:	f04f 0100 	mov.w	r1, #0
 8004e46:	0159      	lsls	r1, r3, #5
 8004e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e4c:	0150      	lsls	r0, r2, #5
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	ebb2 080a 	subs.w	r8, r2, sl
 8004e56:	eb63 090b 	sbc.w	r9, r3, fp
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e6e:	ebb2 0408 	subs.w	r4, r2, r8
 8004e72:	eb63 0509 	sbc.w	r5, r3, r9
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	00eb      	lsls	r3, r5, #3
 8004e80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e84:	00e2      	lsls	r2, r4, #3
 8004e86:	4614      	mov	r4, r2
 8004e88:	461d      	mov	r5, r3
 8004e8a:	eb14 030a 	adds.w	r3, r4, sl
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	eb45 030b 	adc.w	r3, r5, fp
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	028b      	lsls	r3, r1, #10
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eac:	4621      	mov	r1, r4
 8004eae:	028a      	lsls	r2, r1, #10
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	60fa      	str	r2, [r7, #12]
 8004ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ec0:	f7fb fdcc 	bl	8000a5c <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4613      	mov	r3, r2
 8004eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004edc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ee6:	e002      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee8:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x184>)
 8004eea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3740      	adds	r7, #64	@ 0x40
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004efa:	bf00      	nop
 8004efc:	40023800 	.word	0x40023800
 8004f00:	00f42400 	.word	0x00f42400
 8004f04:	017d7840 	.word	0x017d7840

08004f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f0c:	4b03      	ldr	r3, [pc, #12]	@ (8004f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000000 	.word	0x20000000

08004f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f24:	f7ff fff0 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	4b05      	ldr	r3, [pc, #20]	@ (8004f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	0a9b      	lsrs	r3, r3, #10
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	4903      	ldr	r1, [pc, #12]	@ (8004f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f36:	5ccb      	ldrb	r3, [r1, r3]
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40023800 	.word	0x40023800
 8004f44:	080093bc 	.word	0x080093bc

08004f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f4c:	f7ff ffdc 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	4b05      	ldr	r3, [pc, #20]	@ (8004f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	0b5b      	lsrs	r3, r3, #13
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	4903      	ldr	r1, [pc, #12]	@ (8004f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f5e:	5ccb      	ldrb	r3, [r1, r3]
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	080093bc 	.word	0x080093bc

08004f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e07b      	b.n	800507a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d108      	bne.n	8004f9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f92:	d009      	beq.n	8004fa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	61da      	str	r2, [r3, #28]
 8004f9a:	e005      	b.n	8004fa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fc ff30 	bl	8001e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502c:	ea42 0103 	orr.w	r1, r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005034:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	f003 0104 	and.w	r1, r3, #4
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	f003 0210 	and.w	r2, r3, #16
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005068:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b088      	sub	sp, #32
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	603b      	str	r3, [r7, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005092:	f7fe f9c1 	bl	8003418 <HAL_GetTick>
 8005096:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005098:	88fb      	ldrh	r3, [r7, #6]
 800509a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d001      	beq.n	80050ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80050a8:	2302      	movs	r3, #2
 80050aa:	e12a      	b.n	8005302 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_SPI_Transmit+0x36>
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e122      	b.n	8005302 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_SPI_Transmit+0x48>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e11b      	b.n	8005302 <HAL_SPI_Transmit+0x280>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2203      	movs	r2, #3
 80050d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	88fa      	ldrh	r2, [r7, #6]
 80050ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	88fa      	ldrh	r2, [r7, #6]
 80050f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005118:	d10f      	bne.n	800513a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005138:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005144:	2b40      	cmp	r3, #64	@ 0x40
 8005146:	d007      	beq.n	8005158 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005160:	d152      	bne.n	8005208 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_SPI_Transmit+0xee>
 800516a:	8b7b      	ldrh	r3, [r7, #26]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d145      	bne.n	80051fc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005174:	881a      	ldrh	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005180:	1c9a      	adds	r2, r3, #2
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005194:	e032      	b.n	80051fc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d112      	bne.n	80051ca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a8:	881a      	ldrh	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b4:	1c9a      	adds	r2, r3, #2
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051c8:	e018      	b.n	80051fc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ca:	f7fe f925 	bl	8003418 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d803      	bhi.n	80051e2 <HAL_SPI_Transmit+0x160>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d102      	bne.n	80051e8 <HAL_SPI_Transmit+0x166>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e082      	b.n	8005302 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1c7      	bne.n	8005196 <HAL_SPI_Transmit+0x114>
 8005206:	e053      	b.n	80052b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_SPI_Transmit+0x194>
 8005210:	8b7b      	ldrh	r3, [r7, #26]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d147      	bne.n	80052a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	7812      	ldrb	r2, [r2, #0]
 8005222:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800523c:	e033      	b.n	80052a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b02      	cmp	r3, #2
 800524a:	d113      	bne.n	8005274 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005272:	e018      	b.n	80052a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005274:	f7fe f8d0 	bl	8003418 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d803      	bhi.n	800528c <HAL_SPI_Transmit+0x20a>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d102      	bne.n	8005292 <HAL_SPI_Transmit+0x210>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d109      	bne.n	80052a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e02d      	b.n	8005302 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1c6      	bne.n	800523e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	6839      	ldr	r1, [r7, #0]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fa59 	bl	800576c <SPI_EndRxTxTransaction>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005300:	2300      	movs	r3, #0
  }
}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b08a      	sub	sp, #40	@ 0x28
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005318:	2301      	movs	r3, #1
 800531a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800531c:	f7fe f87c 	bl	8003418 <HAL_GetTick>
 8005320:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005328:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005330:	887b      	ldrh	r3, [r7, #2]
 8005332:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005334:	7ffb      	ldrb	r3, [r7, #31]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d00c      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x4a>
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005340:	d106      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x46>
 800534a:	7ffb      	ldrb	r3, [r7, #31]
 800534c:	2b04      	cmp	r3, #4
 800534e:	d001      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005350:	2302      	movs	r3, #2
 8005352:	e17f      	b.n	8005654 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x5c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x5c>
 8005360:	887b      	ldrh	r3, [r7, #2]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e174      	b.n	8005654 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x6e>
 8005374:	2302      	movs	r3, #2
 8005376:	e16d      	b.n	8005654 <HAL_SPI_TransmitReceive+0x34a>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b04      	cmp	r3, #4
 800538a:	d003      	beq.n	8005394 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2205      	movs	r2, #5
 8005390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	887a      	ldrh	r2, [r7, #2]
 80053a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	887a      	ldrh	r2, [r7, #2]
 80053aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	887a      	ldrh	r2, [r7, #2]
 80053b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d4:	2b40      	cmp	r3, #64	@ 0x40
 80053d6:	d007      	beq.n	80053e8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053f0:	d17e      	bne.n	80054f0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_SPI_TransmitReceive+0xf6>
 80053fa:	8afb      	ldrh	r3, [r7, #22]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d16c      	bne.n	80054da <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005404:	881a      	ldrh	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005410:	1c9a      	adds	r2, r3, #2
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005424:	e059      	b.n	80054da <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b02      	cmp	r3, #2
 8005432:	d11b      	bne.n	800546c <HAL_SPI_TransmitReceive+0x162>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d016      	beq.n	800546c <HAL_SPI_TransmitReceive+0x162>
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	2b01      	cmp	r3, #1
 8005442:	d113      	bne.n	800546c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005448:	881a      	ldrh	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005454:	1c9a      	adds	r2, r3, #2
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d119      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x1a4>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d014      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548e:	b292      	uxth	r2, r2
 8005490:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054aa:	2301      	movs	r3, #1
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054ae:	f7fd ffb3 	bl	8003418 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d80d      	bhi.n	80054da <HAL_SPI_TransmitReceive+0x1d0>
 80054be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d009      	beq.n	80054da <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0bc      	b.n	8005654 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054de:	b29b      	uxth	r3, r3
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1a0      	bne.n	8005426 <HAL_SPI_TransmitReceive+0x11c>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d19b      	bne.n	8005426 <HAL_SPI_TransmitReceive+0x11c>
 80054ee:	e082      	b.n	80055f6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_SPI_TransmitReceive+0x1f4>
 80054f8:	8afb      	ldrh	r3, [r7, #22]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d171      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	7812      	ldrb	r2, [r2, #0]
 800550a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005524:	e05d      	b.n	80055e2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b02      	cmp	r3, #2
 8005532:	d11c      	bne.n	800556e <HAL_SPI_TransmitReceive+0x264>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d017      	beq.n	800556e <HAL_SPI_TransmitReceive+0x264>
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	2b01      	cmp	r3, #1
 8005542:	d114      	bne.n	800556e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	7812      	ldrb	r2, [r2, #0]
 8005550:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b01      	cmp	r3, #1
 800557a:	d119      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x2a6>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d014      	beq.n	80055b0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055ac:	2301      	movs	r3, #1
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055b0:	f7fd ff32 	bl	8003418 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055bc:	429a      	cmp	r2, r3
 80055be:	d803      	bhi.n	80055c8 <HAL_SPI_TransmitReceive+0x2be>
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d102      	bne.n	80055ce <HAL_SPI_TransmitReceive+0x2c4>
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e038      	b.n	8005654 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d19c      	bne.n	8005526 <HAL_SPI_TransmitReceive+0x21c>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d197      	bne.n	8005526 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055f6:	6a3a      	ldr	r2, [r7, #32]
 80055f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f8b6 	bl	800576c <SPI_EndRxTxTransaction>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e01d      	b.n	8005654 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005620:	2300      	movs	r3, #0
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005652:	2300      	movs	r3, #0
  }
}
 8005654:	4618      	mov	r0, r3
 8005656:	3728      	adds	r7, #40	@ 0x28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800566c:	f7fd fed4 	bl	8003418 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	4413      	add	r3, r2
 800567a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800567c:	f7fd fecc 	bl	8003418 <HAL_GetTick>
 8005680:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005682:	4b39      	ldr	r3, [pc, #228]	@ (8005768 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	015b      	lsls	r3, r3, #5
 8005688:	0d1b      	lsrs	r3, r3, #20
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	fb02 f303 	mul.w	r3, r2, r3
 8005690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005692:	e054      	b.n	800573e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569a:	d050      	beq.n	800573e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800569c:	f7fd febc 	bl	8003418 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d902      	bls.n	80056b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d13d      	bne.n	800572e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ca:	d111      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d4:	d004      	beq.n	80056e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056de:	d107      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f8:	d10f      	bne.n	800571a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e017      	b.n	800575e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	3b01      	subs	r3, #1
 800573c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4013      	ands	r3, r2
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	429a      	cmp	r2, r3
 800574c:	bf0c      	ite	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	2300      	movne	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	429a      	cmp	r2, r3
 800575a:	d19b      	bne.n	8005694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000000 	.word	0x20000000

0800576c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2201      	movs	r2, #1
 8005780:	2102      	movs	r1, #2
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff ff6a 	bl	800565c <SPI_WaitFlagStateUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005792:	f043 0220 	orr.w	r2, r3, #32
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e032      	b.n	8005804 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800579e:	4b1b      	ldr	r3, [pc, #108]	@ (800580c <SPI_EndRxTxTransaction+0xa0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005810 <SPI_EndRxTxTransaction+0xa4>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	0d5b      	lsrs	r3, r3, #21
 80057aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057bc:	d112      	bne.n	80057e4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2200      	movs	r2, #0
 80057c6:	2180      	movs	r1, #128	@ 0x80
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f7ff ff47 	bl	800565c <SPI_WaitFlagStateUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d016      	beq.n	8005802 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d8:	f043 0220 	orr.w	r2, r3, #32
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e00f      	b.n	8005804 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fa:	2b80      	cmp	r3, #128	@ 0x80
 80057fc:	d0f2      	beq.n	80057e4 <SPI_EndRxTxTransaction+0x78>
 80057fe:	e000      	b.n	8005802 <SPI_EndRxTxTransaction+0x96>
        break;
 8005800:	bf00      	nop
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000000 	.word	0x20000000
 8005810:	165e9f81 	.word	0x165e9f81

08005814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e042      	b.n	80058ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fc fb90 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2224      	movs	r2, #36	@ 0x24
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f82b 	bl	80058b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800586c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695a      	ldr	r2, [r3, #20]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800587c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800588c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058b8:	b0c0      	sub	sp, #256	@ 0x100
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d0:	68d9      	ldr	r1, [r3, #12]
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	ea40 0301 	orr.w	r3, r0, r1
 80058dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800590c:	f021 010c 	bic.w	r1, r1, #12
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800591a:	430b      	orrs	r3, r1
 800591c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	6999      	ldr	r1, [r3, #24]
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	ea40 0301 	orr.w	r3, r0, r1
 800593a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b8f      	ldr	r3, [pc, #572]	@ (8005b80 <UART_SetConfig+0x2cc>)
 8005944:	429a      	cmp	r2, r3
 8005946:	d005      	beq.n	8005954 <UART_SetConfig+0xa0>
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b84 <UART_SetConfig+0x2d0>)
 8005950:	429a      	cmp	r2, r3
 8005952:	d104      	bne.n	800595e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005954:	f7ff faf8 	bl	8004f48 <HAL_RCC_GetPCLK2Freq>
 8005958:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800595c:	e003      	b.n	8005966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800595e:	f7ff fadf 	bl	8004f20 <HAL_RCC_GetPCLK1Freq>
 8005962:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005970:	f040 810c 	bne.w	8005b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005978:	2200      	movs	r2, #0
 800597a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800597e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005986:	4622      	mov	r2, r4
 8005988:	462b      	mov	r3, r5
 800598a:	1891      	adds	r1, r2, r2
 800598c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800598e:	415b      	adcs	r3, r3
 8005990:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005996:	4621      	mov	r1, r4
 8005998:	eb12 0801 	adds.w	r8, r2, r1
 800599c:	4629      	mov	r1, r5
 800599e:	eb43 0901 	adc.w	r9, r3, r1
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059b6:	4690      	mov	r8, r2
 80059b8:	4699      	mov	r9, r3
 80059ba:	4623      	mov	r3, r4
 80059bc:	eb18 0303 	adds.w	r3, r8, r3
 80059c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059c4:	462b      	mov	r3, r5
 80059c6:	eb49 0303 	adc.w	r3, r9, r3
 80059ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059e2:	460b      	mov	r3, r1
 80059e4:	18db      	adds	r3, r3, r3
 80059e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059e8:	4613      	mov	r3, r2
 80059ea:	eb42 0303 	adc.w	r3, r2, r3
 80059ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80059f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059f8:	f7fb f830 	bl	8000a5c <__aeabi_uldivmod>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4b61      	ldr	r3, [pc, #388]	@ (8005b88 <UART_SetConfig+0x2d4>)
 8005a02:	fba3 2302 	umull	r2, r3, r3, r2
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	011c      	lsls	r4, r3, #4
 8005a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	464b      	mov	r3, r9
 8005a20:	1891      	adds	r1, r2, r2
 8005a22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a24:	415b      	adcs	r3, r3
 8005a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a2c:	4641      	mov	r1, r8
 8005a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8005a32:	4649      	mov	r1, r9
 8005a34:	eb43 0b01 	adc.w	fp, r3, r1
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a4c:	4692      	mov	sl, r2
 8005a4e:	469b      	mov	fp, r3
 8005a50:	4643      	mov	r3, r8
 8005a52:	eb1a 0303 	adds.w	r3, sl, r3
 8005a56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8005a60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	18db      	adds	r3, r3, r3
 8005a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a7e:	4613      	mov	r3, r2
 8005a80:	eb42 0303 	adc.w	r3, r2, r3
 8005a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a8e:	f7fa ffe5 	bl	8000a5c <__aeabi_uldivmod>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	4b3b      	ldr	r3, [pc, #236]	@ (8005b88 <UART_SetConfig+0x2d4>)
 8005a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	2264      	movs	r2, #100	@ 0x64
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	1acb      	subs	r3, r1, r3
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005aae:	4b36      	ldr	r3, [pc, #216]	@ (8005b88 <UART_SetConfig+0x2d4>)
 8005ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005abc:	441c      	add	r4, r3
 8005abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ad0:	4642      	mov	r2, r8
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	1891      	adds	r1, r2, r2
 8005ad6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ad8:	415b      	adcs	r3, r3
 8005ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ae0:	4641      	mov	r1, r8
 8005ae2:	1851      	adds	r1, r2, r1
 8005ae4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	414b      	adcs	r3, r1
 8005aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005af8:	4659      	mov	r1, fp
 8005afa:	00cb      	lsls	r3, r1, #3
 8005afc:	4651      	mov	r1, sl
 8005afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b02:	4651      	mov	r1, sl
 8005b04:	00ca      	lsls	r2, r1, #3
 8005b06:	4610      	mov	r0, r2
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	189b      	adds	r3, r3, r2
 8005b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b14:	464b      	mov	r3, r9
 8005b16:	460a      	mov	r2, r1
 8005b18:	eb42 0303 	adc.w	r3, r2, r3
 8005b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b34:	460b      	mov	r3, r1
 8005b36:	18db      	adds	r3, r3, r3
 8005b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	eb42 0303 	adc.w	r3, r2, r3
 8005b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b4a:	f7fa ff87 	bl	8000a5c <__aeabi_uldivmod>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <UART_SetConfig+0x2d4>)
 8005b54:	fba3 1302 	umull	r1, r3, r3, r2
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	2164      	movs	r1, #100	@ 0x64
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	3332      	adds	r3, #50	@ 0x32
 8005b66:	4a08      	ldr	r2, [pc, #32]	@ (8005b88 <UART_SetConfig+0x2d4>)
 8005b68:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	f003 0207 	and.w	r2, r3, #7
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4422      	add	r2, r4
 8005b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b7c:	e106      	b.n	8005d8c <UART_SetConfig+0x4d8>
 8005b7e:	bf00      	nop
 8005b80:	40011000 	.word	0x40011000
 8005b84:	40011400 	.word	0x40011400
 8005b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b9e:	4642      	mov	r2, r8
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	1891      	adds	r1, r2, r2
 8005ba4:	6239      	str	r1, [r7, #32]
 8005ba6:	415b      	adcs	r3, r3
 8005ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bae:	4641      	mov	r1, r8
 8005bb0:	1854      	adds	r4, r2, r1
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	eb43 0501 	adc.w	r5, r3, r1
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	00eb      	lsls	r3, r5, #3
 8005bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc6:	00e2      	lsls	r2, r4, #3
 8005bc8:	4614      	mov	r4, r2
 8005bca:	461d      	mov	r5, r3
 8005bcc:	4643      	mov	r3, r8
 8005bce:	18e3      	adds	r3, r4, r3
 8005bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	eb45 0303 	adc.w	r3, r5, r3
 8005bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	008b      	lsls	r3, r1, #2
 8005bfe:	4621      	mov	r1, r4
 8005c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c04:	4621      	mov	r1, r4
 8005c06:	008a      	lsls	r2, r1, #2
 8005c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c0c:	f7fa ff26 	bl	8000a5c <__aeabi_uldivmod>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4b60      	ldr	r3, [pc, #384]	@ (8005d98 <UART_SetConfig+0x4e4>)
 8005c16:	fba3 2302 	umull	r2, r3, r3, r2
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	011c      	lsls	r4, r3, #4
 8005c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c30:	4642      	mov	r2, r8
 8005c32:	464b      	mov	r3, r9
 8005c34:	1891      	adds	r1, r2, r2
 8005c36:	61b9      	str	r1, [r7, #24]
 8005c38:	415b      	adcs	r3, r3
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c40:	4641      	mov	r1, r8
 8005c42:	1851      	adds	r1, r2, r1
 8005c44:	6139      	str	r1, [r7, #16]
 8005c46:	4649      	mov	r1, r9
 8005c48:	414b      	adcs	r3, r1
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c58:	4659      	mov	r1, fp
 8005c5a:	00cb      	lsls	r3, r1, #3
 8005c5c:	4651      	mov	r1, sl
 8005c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c62:	4651      	mov	r1, sl
 8005c64:	00ca      	lsls	r2, r1, #3
 8005c66:	4610      	mov	r0, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	189b      	adds	r3, r3, r2
 8005c70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c74:	464b      	mov	r3, r9
 8005c76:	460a      	mov	r2, r1
 8005c78:	eb42 0303 	adc.w	r3, r2, r3
 8005c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c98:	4649      	mov	r1, r9
 8005c9a:	008b      	lsls	r3, r1, #2
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ca2:	4641      	mov	r1, r8
 8005ca4:	008a      	lsls	r2, r1, #2
 8005ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005caa:	f7fa fed7 	bl	8000a5c <__aeabi_uldivmod>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4b38      	ldr	r3, [pc, #224]	@ (8005d98 <UART_SetConfig+0x4e4>)
 8005cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	2264      	movs	r2, #100	@ 0x64
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	1acb      	subs	r3, r1, r3
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	3332      	adds	r3, #50	@ 0x32
 8005cc8:	4a33      	ldr	r2, [pc, #204]	@ (8005d98 <UART_SetConfig+0x4e4>)
 8005cca:	fba2 2303 	umull	r2, r3, r2, r3
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cd4:	441c      	add	r4, r3
 8005cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cda:	2200      	movs	r2, #0
 8005cdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cde:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ce0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ce4:	4642      	mov	r2, r8
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	1891      	adds	r1, r2, r2
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	415b      	adcs	r3, r3
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	1851      	adds	r1, r2, r1
 8005cf8:	6039      	str	r1, [r7, #0]
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	414b      	adcs	r3, r1
 8005cfe:	607b      	str	r3, [r7, #4]
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d0c:	4659      	mov	r1, fp
 8005d0e:	00cb      	lsls	r3, r1, #3
 8005d10:	4651      	mov	r1, sl
 8005d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d16:	4651      	mov	r1, sl
 8005d18:	00ca      	lsls	r2, r1, #3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	4642      	mov	r2, r8
 8005d22:	189b      	adds	r3, r3, r2
 8005d24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d26:	464b      	mov	r3, r9
 8005d28:	460a      	mov	r2, r1
 8005d2a:	eb42 0303 	adc.w	r3, r2, r3
 8005d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d48:	4649      	mov	r1, r9
 8005d4a:	008b      	lsls	r3, r1, #2
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d52:	4641      	mov	r1, r8
 8005d54:	008a      	lsls	r2, r1, #2
 8005d56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d5a:	f7fa fe7f 	bl	8000a5c <__aeabi_uldivmod>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	4b0d      	ldr	r3, [pc, #52]	@ (8005d98 <UART_SetConfig+0x4e4>)
 8005d64:	fba3 1302 	umull	r1, r3, r3, r2
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	2164      	movs	r1, #100	@ 0x64
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	3332      	adds	r3, #50	@ 0x32
 8005d76:	4a08      	ldr	r2, [pc, #32]	@ (8005d98 <UART_SetConfig+0x4e4>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	f003 020f 	and.w	r2, r3, #15
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4422      	add	r2, r4
 8005d8a:	609a      	str	r2, [r3, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d92:	46bd      	mov	sp, r7
 8005d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d98:	51eb851f 	.word	0x51eb851f

08005d9c <__NVIC_SetPriority>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	6039      	str	r1, [r7, #0]
 8005da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	db0a      	blt.n	8005dc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	490c      	ldr	r1, [pc, #48]	@ (8005de8 <__NVIC_SetPriority+0x4c>)
 8005db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dba:	0112      	lsls	r2, r2, #4
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005dc4:	e00a      	b.n	8005ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	4908      	ldr	r1, [pc, #32]	@ (8005dec <__NVIC_SetPriority+0x50>)
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	3b04      	subs	r3, #4
 8005dd4:	0112      	lsls	r2, r2, #4
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	440b      	add	r3, r1
 8005dda:	761a      	strb	r2, [r3, #24]
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	e000e100 	.word	0xe000e100
 8005dec:	e000ed00 	.word	0xe000ed00

08005df0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005df4:	2100      	movs	r1, #0
 8005df6:	f06f 0004 	mvn.w	r0, #4
 8005dfa:	f7ff ffcf 	bl	8005d9c <__NVIC_SetPriority>
#endif
}
 8005dfe:	bf00      	nop
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e0a:	f3ef 8305 	mrs	r3, IPSR
 8005e0e:	603b      	str	r3, [r7, #0]
  return(result);
 8005e10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005e16:	f06f 0305 	mvn.w	r3, #5
 8005e1a:	607b      	str	r3, [r7, #4]
 8005e1c:	e00c      	b.n	8005e38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e48 <osKernelInitialize+0x44>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d105      	bne.n	8005e32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e26:	4b08      	ldr	r3, [pc, #32]	@ (8005e48 <osKernelInitialize+0x44>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	607b      	str	r3, [r7, #4]
 8005e30:	e002      	b.n	8005e38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e32:	f04f 33ff 	mov.w	r3, #4294967295
 8005e36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e38:	687b      	ldr	r3, [r7, #4]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	200003b4 	.word	0x200003b4

08005e4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e52:	f3ef 8305 	mrs	r3, IPSR
 8005e56:	603b      	str	r3, [r7, #0]
  return(result);
 8005e58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e5e:	f06f 0305 	mvn.w	r3, #5
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	e010      	b.n	8005e88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e66:	4b0b      	ldr	r3, [pc, #44]	@ (8005e94 <osKernelStart+0x48>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d109      	bne.n	8005e82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e6e:	f7ff ffbf 	bl	8005df0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e72:	4b08      	ldr	r3, [pc, #32]	@ (8005e94 <osKernelStart+0x48>)
 8005e74:	2202      	movs	r2, #2
 8005e76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e78:	f001 f87a 	bl	8006f70 <vTaskStartScheduler>
      stat = osOK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	607b      	str	r3, [r7, #4]
 8005e80:	e002      	b.n	8005e88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e82:	f04f 33ff 	mov.w	r3, #4294967295
 8005e86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e88:	687b      	ldr	r3, [r7, #4]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	200003b4 	.word	0x200003b4

08005e98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	@ 0x38
 8005e9c:	af04      	add	r7, sp, #16
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ea8:	f3ef 8305 	mrs	r3, IPSR
 8005eac:	617b      	str	r3, [r7, #20]
  return(result);
 8005eae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d17e      	bne.n	8005fb2 <osThreadNew+0x11a>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d07b      	beq.n	8005fb2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005eba:	2380      	movs	r3, #128	@ 0x80
 8005ebc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ebe:	2318      	movs	r3, #24
 8005ec0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d045      	beq.n	8005f5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <osThreadNew+0x48>
        name = attr->name;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <osThreadNew+0x6e>
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	2b38      	cmp	r3, #56	@ 0x38
 8005ef8:	d805      	bhi.n	8005f06 <osThreadNew+0x6e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <osThreadNew+0x72>
        return (NULL);
 8005f06:	2300      	movs	r3, #0
 8005f08:	e054      	b.n	8005fb4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	089b      	lsrs	r3, r3, #2
 8005f18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <osThreadNew+0xa8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b5b      	cmp	r3, #91	@ 0x5b
 8005f28:	d90a      	bls.n	8005f40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d006      	beq.n	8005f40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <osThreadNew+0xa8>
        mem = 1;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	e010      	b.n	8005f62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10c      	bne.n	8005f62 <osThreadNew+0xca>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d108      	bne.n	8005f62 <osThreadNew+0xca>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d104      	bne.n	8005f62 <osThreadNew+0xca>
          mem = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e001      	b.n	8005f62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d110      	bne.n	8005f8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f70:	9202      	str	r2, [sp, #8]
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6a3a      	ldr	r2, [r7, #32]
 8005f7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 fe1a 	bl	8006bb8 <xTaskCreateStatic>
 8005f84:	4603      	mov	r3, r0
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	e013      	b.n	8005fb2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d110      	bne.n	8005fb2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	f107 0310 	add.w	r3, r7, #16
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 fe68 	bl	8006c78 <xTaskCreate>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d001      	beq.n	8005fb2 <osThreadNew+0x11a>
            hTask = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fb2:	693b      	ldr	r3, [r7, #16]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3728      	adds	r7, #40	@ 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fc4:	f3ef 8305 	mrs	r3, IPSR
 8005fc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <osDelay+0x1c>
    stat = osErrorISR;
 8005fd0:	f06f 0305 	mvn.w	r3, #5
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	e007      	b.n	8005fe8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 ff8e 	bl	8006f04 <vTaskDelay>
    }
  }

  return (stat);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4a07      	ldr	r2, [pc, #28]	@ (8006020 <vApplicationGetIdleTaskMemory+0x2c>)
 8006004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4a06      	ldr	r2, [pc, #24]	@ (8006024 <vApplicationGetIdleTaskMemory+0x30>)
 800600a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2280      	movs	r2, #128	@ 0x80
 8006010:	601a      	str	r2, [r3, #0]
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	200003b8 	.word	0x200003b8
 8006024:	20000414 	.word	0x20000414

08006028 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4a07      	ldr	r2, [pc, #28]	@ (8006054 <vApplicationGetTimerTaskMemory+0x2c>)
 8006038:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	4a06      	ldr	r2, [pc, #24]	@ (8006058 <vApplicationGetTimerTaskMemory+0x30>)
 800603e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006046:	601a      	str	r2, [r3, #0]
}
 8006048:	bf00      	nop
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	20000614 	.word	0x20000614
 8006058:	20000670 	.word	0x20000670

0800605c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f103 0208 	add.w	r2, r3, #8
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f04f 32ff 	mov.w	r2, #4294967295
 8006074:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f103 0208 	add.w	r2, r3, #8
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f103 0208 	add.w	r2, r3, #8
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	601a      	str	r2, [r3, #0]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d103      	bne.n	800611e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	e00c      	b.n	8006138 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3308      	adds	r3, #8
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	e002      	b.n	800612c <vListInsert+0x2e>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	429a      	cmp	r2, r3
 8006136:	d2f6      	bcs.n	8006126 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]
}
 8006164:	bf00      	nop
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6892      	ldr	r2, [r2, #8]
 8006186:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6852      	ldr	r2, [r2, #4]
 8006190:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	429a      	cmp	r2, r3
 800619a:	d103      	bne.n	80061a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	1e5a      	subs	r2, r3, #1
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10b      	bne.n	80061f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061ea:	bf00      	nop
 80061ec:	bf00      	nop
 80061ee:	e7fd      	b.n	80061ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061f0:	f002 f87a 	bl	80082e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fc:	68f9      	ldr	r1, [r7, #12]
 80061fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	441a      	add	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006220:	3b01      	subs	r3, #1
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006226:	fb01 f303 	mul.w	r3, r1, r3
 800622a:	441a      	add	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	22ff      	movs	r2, #255	@ 0xff
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	22ff      	movs	r2, #255	@ 0xff
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d114      	bne.n	8006270 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d01a      	beq.n	8006284 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3310      	adds	r3, #16
 8006252:	4618      	mov	r0, r3
 8006254:	f001 f91a 	bl	800748c <xTaskRemoveFromEventList>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d012      	beq.n	8006284 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800625e:	4b0d      	ldr	r3, [pc, #52]	@ (8006294 <xQueueGenericReset+0xd0>)
 8006260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	e009      	b.n	8006284 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3310      	adds	r3, #16
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fef1 	bl	800605c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3324      	adds	r3, #36	@ 0x24
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff feec 	bl	800605c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006284:	f002 f862 	bl	800834c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006288:	2301      	movs	r3, #1
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	e000ed04 	.word	0xe000ed04

08006298 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08e      	sub	sp, #56	@ 0x38
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10b      	bne.n	80062c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062be:	bf00      	nop
 80062c0:	bf00      	nop
 80062c2:	e7fd      	b.n	80062c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10b      	bne.n	80062e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	e7fd      	b.n	80062de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <xQueueGenericCreateStatic+0x56>
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <xQueueGenericCreateStatic+0x5a>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <xQueueGenericCreateStatic+0x5c>
 80062f2:	2300      	movs	r3, #0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10b      	bne.n	8006310 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	623b      	str	r3, [r7, #32]
}
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	e7fd      	b.n	800630c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <xQueueGenericCreateStatic+0x84>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <xQueueGenericCreateStatic+0x88>
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <xQueueGenericCreateStatic+0x8a>
 8006320:	2300      	movs	r3, #0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10b      	bne.n	800633e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	61fb      	str	r3, [r7, #28]
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	e7fd      	b.n	800633a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800633e:	2350      	movs	r3, #80	@ 0x50
 8006340:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b50      	cmp	r3, #80	@ 0x50
 8006346:	d00b      	beq.n	8006360 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	61bb      	str	r3, [r7, #24]
}
 800635a:	bf00      	nop
 800635c:	bf00      	nop
 800635e:	e7fd      	b.n	800635c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006360:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00d      	beq.n	8006388 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800636c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006374:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	4613      	mov	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f805 	bl	8006392 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800638a:	4618      	mov	r0, r3
 800638c:	3730      	adds	r7, #48	@ 0x30
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	607a      	str	r2, [r7, #4]
 800639e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	e002      	b.n	80063b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063c0:	2101      	movs	r1, #1
 80063c2:	69b8      	ldr	r0, [r7, #24]
 80063c4:	f7ff fefe 	bl	80061c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	78fa      	ldrb	r2, [r7, #3]
 80063cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063d0:	bf00      	nop
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08e      	sub	sp, #56	@ 0x38
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063e6:	2300      	movs	r3, #0
 80063e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10b      	bne.n	800640c <xQueueGenericSend+0x34>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	e7fd      	b.n	8006408 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d103      	bne.n	800641a <xQueueGenericSend+0x42>
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <xQueueGenericSend+0x46>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <xQueueGenericSend+0x48>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <xQueueGenericSend+0x64>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d103      	bne.n	800644a <xQueueGenericSend+0x72>
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <xQueueGenericSend+0x76>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <xQueueGenericSend+0x78>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10b      	bne.n	800646c <xQueueGenericSend+0x94>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	623b      	str	r3, [r7, #32]
}
 8006466:	bf00      	nop
 8006468:	bf00      	nop
 800646a:	e7fd      	b.n	8006468 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800646c:	f001 f9ce 	bl	800780c <xTaskGetSchedulerState>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <xQueueGenericSend+0xa4>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <xQueueGenericSend+0xa8>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <xQueueGenericSend+0xaa>
 8006480:	2300      	movs	r3, #0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10b      	bne.n	800649e <xQueueGenericSend+0xc6>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	61fb      	str	r3, [r7, #28]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800649e:	f001 ff23 	bl	80082e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d302      	bcc.n	80064b4 <xQueueGenericSend+0xdc>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d129      	bne.n	8006508 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	68b9      	ldr	r1, [r7, #8]
 80064b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064ba:	f000 fa0f 	bl	80068dc <prvCopyDataToQueue>
 80064be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d010      	beq.n	80064ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	3324      	adds	r3, #36	@ 0x24
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 ffdd 	bl	800748c <xTaskRemoveFromEventList>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d013      	beq.n	8006500 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064d8:	4b3f      	ldr	r3, [pc, #252]	@ (80065d8 <xQueueGenericSend+0x200>)
 80064da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	e00a      	b.n	8006500 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064f0:	4b39      	ldr	r3, [pc, #228]	@ (80065d8 <xQueueGenericSend+0x200>)
 80064f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006500:	f001 ff24 	bl	800834c <vPortExitCritical>
				return pdPASS;
 8006504:	2301      	movs	r3, #1
 8006506:	e063      	b.n	80065d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d103      	bne.n	8006516 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800650e:	f001 ff1d 	bl	800834c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006512:	2300      	movs	r3, #0
 8006514:	e05c      	b.n	80065d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800651c:	f107 0314 	add.w	r3, r7, #20
 8006520:	4618      	mov	r0, r3
 8006522:	f001 f817 	bl	8007554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006526:	2301      	movs	r3, #1
 8006528:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800652a:	f001 ff0f 	bl	800834c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800652e:	f000 fd87 	bl	8007040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006532:	f001 fed9 	bl	80082e8 <vPortEnterCritical>
 8006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006538:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800653c:	b25b      	sxtb	r3, r3
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006542:	d103      	bne.n	800654c <xQueueGenericSend+0x174>
 8006544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006552:	b25b      	sxtb	r3, r3
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006558:	d103      	bne.n	8006562 <xQueueGenericSend+0x18a>
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006562:	f001 fef3 	bl	800834c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006566:	1d3a      	adds	r2, r7, #4
 8006568:	f107 0314 	add.w	r3, r7, #20
 800656c:	4611      	mov	r1, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f806 	bl	8007580 <xTaskCheckForTimeOut>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d124      	bne.n	80065c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800657a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800657c:	f000 faa6 	bl	8006acc <prvIsQueueFull>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d018      	beq.n	80065b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	3310      	adds	r3, #16
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	4611      	mov	r1, r2
 800658e:	4618      	mov	r0, r3
 8006590:	f000 ff2a 	bl	80073e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006596:	f000 fa31 	bl	80069fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800659a:	f000 fd5f 	bl	800705c <xTaskResumeAll>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f47f af7c 	bne.w	800649e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80065a6:	4b0c      	ldr	r3, [pc, #48]	@ (80065d8 <xQueueGenericSend+0x200>)
 80065a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	e772      	b.n	800649e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ba:	f000 fa1f 	bl	80069fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065be:	f000 fd4d 	bl	800705c <xTaskResumeAll>
 80065c2:	e76c      	b.n	800649e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065c6:	f000 fa19 	bl	80069fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065ca:	f000 fd47 	bl	800705c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3738      	adds	r7, #56	@ 0x38
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	e000ed04 	.word	0xe000ed04

080065dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b090      	sub	sp, #64	@ 0x40
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10b      	bne.n	800660c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <xQueueGenericSendFromISR+0x3e>
 8006612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <xQueueGenericSendFromISR+0x42>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <xQueueGenericSendFromISR+0x44>
 800661e:	2300      	movs	r3, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	e7fd      	b.n	8006638 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d103      	bne.n	800664a <xQueueGenericSendFromISR+0x6e>
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <xQueueGenericSendFromISR+0x72>
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <xQueueGenericSendFromISR+0x74>
 800664e:	2300      	movs	r3, #0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	623b      	str	r3, [r7, #32]
}
 8006666:	bf00      	nop
 8006668:	bf00      	nop
 800666a:	e7fd      	b.n	8006668 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800666c:	f001 ff1c 	bl	80084a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006670:	f3ef 8211 	mrs	r2, BASEPRI
 8006674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	61fa      	str	r2, [r7, #28]
 8006686:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006688:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006694:	429a      	cmp	r2, r3
 8006696:	d302      	bcc.n	800669e <xQueueGenericSendFromISR+0xc2>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d12f      	bne.n	80066fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800669e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80066b4:	f000 f912 	bl	80068dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d112      	bne.n	80066e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d016      	beq.n	80066f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066cc:	3324      	adds	r3, #36	@ 0x24
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fedc 	bl	800748c <xTaskRemoveFromEventList>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00e      	beq.n	80066f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	e007      	b.n	80066f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066ec:	3301      	adds	r3, #1
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	b25a      	sxtb	r2, r3
 80066f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80066f8:	2301      	movs	r3, #1
 80066fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80066fc:	e001      	b.n	8006702 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006704:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800670c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800670e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006710:	4618      	mov	r0, r3
 8006712:	3740      	adds	r7, #64	@ 0x40
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08c      	sub	sp, #48	@ 0x30
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006724:	2300      	movs	r3, #0
 8006726:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800672c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10b      	bne.n	800674a <xQueueReceive+0x32>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	623b      	str	r3, [r7, #32]
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop
 8006748:	e7fd      	b.n	8006746 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <xQueueReceive+0x40>
 8006750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <xQueueReceive+0x44>
 8006758:	2301      	movs	r3, #1
 800675a:	e000      	b.n	800675e <xQueueReceive+0x46>
 800675c:	2300      	movs	r3, #0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10b      	bne.n	800677a <xQueueReceive+0x62>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	61fb      	str	r3, [r7, #28]
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	e7fd      	b.n	8006776 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800677a:	f001 f847 	bl	800780c <xTaskGetSchedulerState>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d102      	bne.n	800678a <xQueueReceive+0x72>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <xQueueReceive+0x76>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <xQueueReceive+0x78>
 800678e:	2300      	movs	r3, #0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10b      	bne.n	80067ac <xQueueReceive+0x94>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	61bb      	str	r3, [r7, #24]
}
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	e7fd      	b.n	80067a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ac:	f001 fd9c 	bl	80082e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01f      	beq.n	80067fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067c0:	f000 f8f6 	bl	80069b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	1e5a      	subs	r2, r3, #1
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00f      	beq.n	80067f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d6:	3310      	adds	r3, #16
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fe57 	bl	800748c <xTaskRemoveFromEventList>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067e4:	4b3c      	ldr	r3, [pc, #240]	@ (80068d8 <xQueueReceive+0x1c0>)
 80067e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067f4:	f001 fdaa 	bl	800834c <vPortExitCritical>
				return pdPASS;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e069      	b.n	80068d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d103      	bne.n	800680a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006802:	f001 fda3 	bl	800834c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006806:	2300      	movs	r3, #0
 8006808:	e062      	b.n	80068d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800680a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d106      	bne.n	800681e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006810:	f107 0310 	add.w	r3, r7, #16
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fe9d 	bl	8007554 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800681a:	2301      	movs	r3, #1
 800681c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800681e:	f001 fd95 	bl	800834c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006822:	f000 fc0d 	bl	8007040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006826:	f001 fd5f 	bl	80082e8 <vPortEnterCritical>
 800682a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006830:	b25b      	sxtb	r3, r3
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006836:	d103      	bne.n	8006840 <xQueueReceive+0x128>
 8006838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006846:	b25b      	sxtb	r3, r3
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d103      	bne.n	8006856 <xQueueReceive+0x13e>
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006856:	f001 fd79 	bl	800834c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800685a:	1d3a      	adds	r2, r7, #4
 800685c:	f107 0310 	add.w	r3, r7, #16
 8006860:	4611      	mov	r1, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fe8c 	bl	8007580 <xTaskCheckForTimeOut>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d123      	bne.n	80068b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800686e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006870:	f000 f916 	bl	8006aa0 <prvIsQueueEmpty>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d017      	beq.n	80068aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800687a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687c:	3324      	adds	r3, #36	@ 0x24
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fdb0 	bl	80073e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800688a:	f000 f8b7 	bl	80069fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800688e:	f000 fbe5 	bl	800705c <xTaskResumeAll>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d189      	bne.n	80067ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006898:	4b0f      	ldr	r3, [pc, #60]	@ (80068d8 <xQueueReceive+0x1c0>)
 800689a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	e780      	b.n	80067ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068ac:	f000 f8a6 	bl	80069fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068b0:	f000 fbd4 	bl	800705c <xTaskResumeAll>
 80068b4:	e77a      	b.n	80067ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068b8:	f000 f8a0 	bl	80069fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068bc:	f000 fbce 	bl	800705c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068c2:	f000 f8ed 	bl	8006aa0 <prvIsQueueEmpty>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f43f af6f 	beq.w	80067ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3730      	adds	r7, #48	@ 0x30
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	e000ed04 	.word	0xe000ed04

080068dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d14d      	bne.n	800699e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 ff9e 	bl	8007848 <xTaskPriorityDisinherit>
 800690c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	609a      	str	r2, [r3, #8]
 8006914:	e043      	b.n	800699e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d119      	bne.n	8006950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6858      	ldr	r0, [r3, #4]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006924:	461a      	mov	r2, r3
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	f002 fa71 	bl	8008e0e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006934:	441a      	add	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	429a      	cmp	r2, r3
 8006944:	d32b      	bcc.n	800699e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	605a      	str	r2, [r3, #4]
 800694e:	e026      	b.n	800699e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68d8      	ldr	r0, [r3, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006958:	461a      	mov	r2, r3
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	f002 fa57 	bl	8008e0e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006968:	425b      	negs	r3, r3
 800696a:	441a      	add	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d207      	bcs.n	800698c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006984:	425b      	negs	r3, r3
 8006986:	441a      	add	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d105      	bne.n	800699e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3b01      	subs	r3, #1
 800699c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80069a6:	697b      	ldr	r3, [r7, #20]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d018      	beq.n	80069f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ca:	441a      	add	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d303      	bcc.n	80069e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68d9      	ldr	r1, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ec:	461a      	mov	r2, r3
 80069ee:	6838      	ldr	r0, [r7, #0]
 80069f0:	f002 fa0d 	bl	8008e0e <memcpy>
	}
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a04:	f001 fc70 	bl	80082e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a10:	e011      	b.n	8006a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d012      	beq.n	8006a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3324      	adds	r3, #36	@ 0x24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fd34 	bl	800748c <xTaskRemoveFromEventList>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a2a:	f000 fe0d 	bl	8007648 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	dce9      	bgt.n	8006a12 <prvUnlockQueue+0x16>
 8006a3e:	e000      	b.n	8006a42 <prvUnlockQueue+0x46>
					break;
 8006a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	22ff      	movs	r2, #255	@ 0xff
 8006a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006a4a:	f001 fc7f 	bl	800834c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a4e:	f001 fc4b 	bl	80082e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a5a:	e011      	b.n	8006a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d012      	beq.n	8006a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3310      	adds	r3, #16
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fd0f 	bl	800748c <xTaskRemoveFromEventList>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a74:	f000 fde8 	bl	8007648 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dce9      	bgt.n	8006a5c <prvUnlockQueue+0x60>
 8006a88:	e000      	b.n	8006a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	22ff      	movs	r2, #255	@ 0xff
 8006a90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a94:	f001 fc5a 	bl	800834c <vPortExitCritical>
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006aa8:	f001 fc1e 	bl	80082e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e001      	b.n	8006abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006abe:	f001 fc45 	bl	800834c <vPortExitCritical>

	return xReturn;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad4:	f001 fc08 	bl	80082e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d102      	bne.n	8006aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e001      	b.n	8006aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aee:	f001 fc2d 	bl	800834c <vPortExitCritical>

	return xReturn;
 8006af2:	68fb      	ldr	r3, [r7, #12]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	e014      	b.n	8006b36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8006b4c <vQueueAddToRegistry+0x50>)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10b      	bne.n	8006b30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b18:	490c      	ldr	r1, [pc, #48]	@ (8006b4c <vQueueAddToRegistry+0x50>)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b22:	4a0a      	ldr	r2, [pc, #40]	@ (8006b4c <vQueueAddToRegistry+0x50>)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4413      	add	r3, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b2e:	e006      	b.n	8006b3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b07      	cmp	r3, #7
 8006b3a:	d9e7      	bls.n	8006b0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20000a70 	.word	0x20000a70

08006b50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b60:	f001 fbc2 	bl	80082e8 <vPortEnterCritical>
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b6a:	b25b      	sxtb	r3, r3
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d103      	bne.n	8006b7a <vQueueWaitForMessageRestricted+0x2a>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b80:	b25b      	sxtb	r3, r3
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	d103      	bne.n	8006b90 <vQueueWaitForMessageRestricted+0x40>
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b90:	f001 fbdc 	bl	800834c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d106      	bne.n	8006baa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	3324      	adds	r3, #36	@ 0x24
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fc45 	bl	8007434 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006baa:	6978      	ldr	r0, [r7, #20]
 8006bac:	f7ff ff26 	bl	80069fc <prvUnlockQueue>
	}
 8006bb0:	bf00      	nop
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08e      	sub	sp, #56	@ 0x38
 8006bbc:	af04      	add	r7, sp, #16
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	623b      	str	r3, [r7, #32]
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	e7fd      	b.n	8006be0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	61fb      	str	r3, [r7, #28]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c02:	235c      	movs	r3, #92	@ 0x5c
 8006c04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b5c      	cmp	r3, #92	@ 0x5c
 8006c0a:	d00b      	beq.n	8006c24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	61bb      	str	r3, [r7, #24]
}
 8006c1e:	bf00      	nop
 8006c20:	bf00      	nop
 8006c22:	e7fd      	b.n	8006c20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01e      	beq.n	8006c6a <xTaskCreateStatic+0xb2>
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01b      	beq.n	8006c6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c44:	2300      	movs	r3, #0
 8006c46:	9303      	str	r3, [sp, #12]
 8006c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4a:	9302      	str	r3, [sp, #8]
 8006c4c:	f107 0314 	add.w	r3, r7, #20
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f850 	bl	8006d02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c64:	f000 f8de 	bl	8006e24 <prvAddNewTaskToReadyList>
 8006c68:	e001      	b.n	8006c6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c6e:	697b      	ldr	r3, [r7, #20]
	}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3728      	adds	r7, #40	@ 0x28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08c      	sub	sp, #48	@ 0x30
 8006c7c:	af04      	add	r7, sp, #16
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	4613      	mov	r3, r2
 8006c86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 fc4d 	bl	800852c <pvPortMalloc>
 8006c92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00e      	beq.n	8006cb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c9a:	205c      	movs	r0, #92	@ 0x5c
 8006c9c:	f001 fc46 	bl	800852c <pvPortMalloc>
 8006ca0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cae:	e005      	b.n	8006cbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cb0:	6978      	ldr	r0, [r7, #20]
 8006cb2:	f001 fd09 	bl	80086c8 <vPortFree>
 8006cb6:	e001      	b.n	8006cbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d017      	beq.n	8006cf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cca:	88fa      	ldrh	r2, [r7, #6]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9303      	str	r3, [sp, #12]
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	9302      	str	r3, [sp, #8]
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f80e 	bl	8006d02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ce6:	69f8      	ldr	r0, [r7, #28]
 8006ce8:	f000 f89c 	bl	8006e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cec:	2301      	movs	r3, #1
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	e002      	b.n	8006cf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cf8:	69bb      	ldr	r3, [r7, #24]
	}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3720      	adds	r7, #32
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b088      	sub	sp, #32
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	21a5      	movs	r1, #165	@ 0xa5
 8006d1c:	f001 fffc 	bl	8008d18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	f023 0307 	bic.w	r3, r3, #7
 8006d38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	617b      	str	r3, [r7, #20]
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	e7fd      	b.n	8006d58 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d01f      	beq.n	8006da2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d62:	2300      	movs	r3, #0
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	e012      	b.n	8006d8e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	7819      	ldrb	r1, [r3, #0]
 8006d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	3334      	adds	r3, #52	@ 0x34
 8006d78:	460a      	mov	r2, r1
 8006d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d006      	beq.n	8006d96 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	2b0f      	cmp	r3, #15
 8006d92:	d9e9      	bls.n	8006d68 <prvInitialiseNewTask+0x66>
 8006d94:	e000      	b.n	8006d98 <prvInitialiseNewTask+0x96>
			{
				break;
 8006d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006da0:	e003      	b.n	8006daa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dac:	2b37      	cmp	r3, #55	@ 0x37
 8006dae:	d901      	bls.n	8006db4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006db0:	2337      	movs	r3, #55	@ 0x37
 8006db2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006db8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff f966 	bl	800609c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	3318      	adds	r3, #24
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff f961 	bl	800609c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	2200      	movs	r2, #0
 8006df4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	68f9      	ldr	r1, [r7, #12]
 8006e02:	69b8      	ldr	r0, [r7, #24]
 8006e04:	f001 f93e 	bl	8008084 <pxPortInitialiseStack>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e1a:	bf00      	nop
 8006e1c:	3720      	adds	r7, #32
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e2c:	f001 fa5c 	bl	80082e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e30:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee8 <prvAddNewTaskToReadyList+0xc4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	4a2c      	ldr	r2, [pc, #176]	@ (8006ee8 <prvAddNewTaskToReadyList+0xc4>)
 8006e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e42:	4a2a      	ldr	r2, [pc, #168]	@ (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e48:	4b27      	ldr	r3, [pc, #156]	@ (8006ee8 <prvAddNewTaskToReadyList+0xc4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d110      	bne.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e50:	f000 fc1e 	bl	8007690 <prvInitialiseTaskLists>
 8006e54:	e00d      	b.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e56:	4b26      	ldr	r3, [pc, #152]	@ (8006ef0 <prvAddNewTaskToReadyList+0xcc>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e5e:	4b23      	ldr	r3, [pc, #140]	@ (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d802      	bhi.n	8006e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e72:	4b20      	ldr	r3, [pc, #128]	@ (8006ef4 <prvAddNewTaskToReadyList+0xd0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	4a1e      	ldr	r2, [pc, #120]	@ (8006ef4 <prvAddNewTaskToReadyList+0xd0>)
 8006e7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef4 <prvAddNewTaskToReadyList+0xd0>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e88:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef8 <prvAddNewTaskToReadyList+0xd4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d903      	bls.n	8006e98 <prvAddNewTaskToReadyList+0x74>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e94:	4a18      	ldr	r2, [pc, #96]	@ (8006ef8 <prvAddNewTaskToReadyList+0xd4>)
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4a15      	ldr	r2, [pc, #84]	@ (8006efc <prvAddNewTaskToReadyList+0xd8>)
 8006ea6:	441a      	add	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f7ff f901 	bl	80060b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006eb4:	f001 fa4a 	bl	800834c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef0 <prvAddNewTaskToReadyList+0xcc>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00e      	beq.n	8006ede <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8006eec <prvAddNewTaskToReadyList+0xc8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d207      	bcs.n	8006ede <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ece:	4b0c      	ldr	r3, [pc, #48]	@ (8006f00 <prvAddNewTaskToReadyList+0xdc>)
 8006ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000f84 	.word	0x20000f84
 8006eec:	20000ab0 	.word	0x20000ab0
 8006ef0:	20000f90 	.word	0x20000f90
 8006ef4:	20000fa0 	.word	0x20000fa0
 8006ef8:	20000f8c 	.word	0x20000f8c
 8006efc:	20000ab4 	.word	0x20000ab4
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d018      	beq.n	8006f48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f16:	4b14      	ldr	r3, [pc, #80]	@ (8006f68 <vTaskDelay+0x64>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00b      	beq.n	8006f36 <vTaskDelay+0x32>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	60bb      	str	r3, [r7, #8]
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	e7fd      	b.n	8006f32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f36:	f000 f883 	bl	8007040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fcf3 	bl	8007928 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f42:	f000 f88b 	bl	800705c <xTaskResumeAll>
 8006f46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d107      	bne.n	8006f5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006f4e:	4b07      	ldr	r3, [pc, #28]	@ (8006f6c <vTaskDelay+0x68>)
 8006f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000fac 	.word	0x20000fac
 8006f6c:	e000ed04 	.word	0xe000ed04

08006f70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08a      	sub	sp, #40	@ 0x28
 8006f74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f7e:	463a      	mov	r2, r7
 8006f80:	1d39      	adds	r1, r7, #4
 8006f82:	f107 0308 	add.w	r3, r7, #8
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff f834 	bl	8005ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	9202      	str	r2, [sp, #8]
 8006f94:	9301      	str	r3, [sp, #4]
 8006f96:	2300      	movs	r3, #0
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	460a      	mov	r2, r1
 8006f9e:	4922      	ldr	r1, [pc, #136]	@ (8007028 <vTaskStartScheduler+0xb8>)
 8006fa0:	4822      	ldr	r0, [pc, #136]	@ (800702c <vTaskStartScheduler+0xbc>)
 8006fa2:	f7ff fe09 	bl	8006bb8 <xTaskCreateStatic>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4a21      	ldr	r2, [pc, #132]	@ (8007030 <vTaskStartScheduler+0xc0>)
 8006faa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fac:	4b20      	ldr	r3, [pc, #128]	@ (8007030 <vTaskStartScheduler+0xc0>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	e001      	b.n	8006fbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d102      	bne.n	8006fca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006fc4:	f000 fd04 	bl	80079d0 <xTimerCreateTimerTask>
 8006fc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d116      	bne.n	8006ffe <vTaskStartScheduler+0x8e>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	613b      	str	r3, [r7, #16]
}
 8006fe2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fe4:	4b13      	ldr	r3, [pc, #76]	@ (8007034 <vTaskStartScheduler+0xc4>)
 8006fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fec:	4b12      	ldr	r3, [pc, #72]	@ (8007038 <vTaskStartScheduler+0xc8>)
 8006fee:	2201      	movs	r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ff2:	4b12      	ldr	r3, [pc, #72]	@ (800703c <vTaskStartScheduler+0xcc>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ff8:	f001 f8d2 	bl	80081a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ffc:	e00f      	b.n	800701e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d10b      	bne.n	800701e <vTaskStartScheduler+0xae>
	__asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	60fb      	str	r3, [r7, #12]
}
 8007018:	bf00      	nop
 800701a:	bf00      	nop
 800701c:	e7fd      	b.n	800701a <vTaskStartScheduler+0xaa>
}
 800701e:	bf00      	nop
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	08009328 	.word	0x08009328
 800702c:	08007661 	.word	0x08007661
 8007030:	20000fa8 	.word	0x20000fa8
 8007034:	20000fa4 	.word	0x20000fa4
 8007038:	20000f90 	.word	0x20000f90
 800703c:	20000f88 	.word	0x20000f88

08007040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007044:	4b04      	ldr	r3, [pc, #16]	@ (8007058 <vTaskSuspendAll+0x18>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	4a03      	ldr	r2, [pc, #12]	@ (8007058 <vTaskSuspendAll+0x18>)
 800704c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800704e:	bf00      	nop
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	20000fac 	.word	0x20000fac

0800705c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007066:	2300      	movs	r3, #0
 8007068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800706a:	4b42      	ldr	r3, [pc, #264]	@ (8007174 <xTaskResumeAll+0x118>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10b      	bne.n	800708a <xTaskResumeAll+0x2e>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	603b      	str	r3, [r7, #0]
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800708a:	f001 f92d 	bl	80082e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800708e:	4b39      	ldr	r3, [pc, #228]	@ (8007174 <xTaskResumeAll+0x118>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3b01      	subs	r3, #1
 8007094:	4a37      	ldr	r2, [pc, #220]	@ (8007174 <xTaskResumeAll+0x118>)
 8007096:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007098:	4b36      	ldr	r3, [pc, #216]	@ (8007174 <xTaskResumeAll+0x118>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d162      	bne.n	8007166 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070a0:	4b35      	ldr	r3, [pc, #212]	@ (8007178 <xTaskResumeAll+0x11c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d05e      	beq.n	8007166 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070a8:	e02f      	b.n	800710a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070aa:	4b34      	ldr	r3, [pc, #208]	@ (800717c <xTaskResumeAll+0x120>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3318      	adds	r3, #24
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff f85a 	bl	8006170 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3304      	adds	r3, #4
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff f855 	bl	8006170 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007180 <xTaskResumeAll+0x124>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d903      	bls.n	80070da <xTaskResumeAll+0x7e>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007180 <xTaskResumeAll+0x124>)
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4a27      	ldr	r2, [pc, #156]	@ (8007184 <xTaskResumeAll+0x128>)
 80070e8:	441a      	add	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3304      	adds	r3, #4
 80070ee:	4619      	mov	r1, r3
 80070f0:	4610      	mov	r0, r2
 80070f2:	f7fe ffe0 	bl	80060b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fa:	4b23      	ldr	r3, [pc, #140]	@ (8007188 <xTaskResumeAll+0x12c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	429a      	cmp	r2, r3
 8007102:	d302      	bcc.n	800710a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007104:	4b21      	ldr	r3, [pc, #132]	@ (800718c <xTaskResumeAll+0x130>)
 8007106:	2201      	movs	r2, #1
 8007108:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800710a:	4b1c      	ldr	r3, [pc, #112]	@ (800717c <xTaskResumeAll+0x120>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1cb      	bne.n	80070aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007118:	f000 fb58 	bl	80077cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800711c:	4b1c      	ldr	r3, [pc, #112]	@ (8007190 <xTaskResumeAll+0x134>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d010      	beq.n	800714a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007128:	f000 f846 	bl	80071b8 <xTaskIncrementTick>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007132:	4b16      	ldr	r3, [pc, #88]	@ (800718c <xTaskResumeAll+0x130>)
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3b01      	subs	r3, #1
 800713c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1f1      	bne.n	8007128 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007144:	4b12      	ldr	r3, [pc, #72]	@ (8007190 <xTaskResumeAll+0x134>)
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800714a:	4b10      	ldr	r3, [pc, #64]	@ (800718c <xTaskResumeAll+0x130>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007152:	2301      	movs	r3, #1
 8007154:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007156:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <xTaskResumeAll+0x138>)
 8007158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007166:	f001 f8f1 	bl	800834c <vPortExitCritical>

	return xAlreadyYielded;
 800716a:	68bb      	ldr	r3, [r7, #8]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000fac 	.word	0x20000fac
 8007178:	20000f84 	.word	0x20000f84
 800717c:	20000f44 	.word	0x20000f44
 8007180:	20000f8c 	.word	0x20000f8c
 8007184:	20000ab4 	.word	0x20000ab4
 8007188:	20000ab0 	.word	0x20000ab0
 800718c:	20000f98 	.word	0x20000f98
 8007190:	20000f94 	.word	0x20000f94
 8007194:	e000ed04 	.word	0xe000ed04

08007198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800719e:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <xTaskGetTickCount+0x1c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071a4:	687b      	ldr	r3, [r7, #4]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	20000f88 	.word	0x20000f88

080071b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007300 <xTaskIncrementTick+0x148>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f040 8090 	bne.w	80072ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071cc:	4b4d      	ldr	r3, [pc, #308]	@ (8007304 <xTaskIncrementTick+0x14c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3301      	adds	r3, #1
 80071d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071d4:	4a4b      	ldr	r2, [pc, #300]	@ (8007304 <xTaskIncrementTick+0x14c>)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d121      	bne.n	8007224 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80071e0:	4b49      	ldr	r3, [pc, #292]	@ (8007308 <xTaskIncrementTick+0x150>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00b      	beq.n	8007202 <xTaskIncrementTick+0x4a>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	603b      	str	r3, [r7, #0]
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	e7fd      	b.n	80071fe <xTaskIncrementTick+0x46>
 8007202:	4b41      	ldr	r3, [pc, #260]	@ (8007308 <xTaskIncrementTick+0x150>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	4b40      	ldr	r3, [pc, #256]	@ (800730c <xTaskIncrementTick+0x154>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a3e      	ldr	r2, [pc, #248]	@ (8007308 <xTaskIncrementTick+0x150>)
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	4a3e      	ldr	r2, [pc, #248]	@ (800730c <xTaskIncrementTick+0x154>)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	4b3e      	ldr	r3, [pc, #248]	@ (8007310 <xTaskIncrementTick+0x158>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	4a3c      	ldr	r2, [pc, #240]	@ (8007310 <xTaskIncrementTick+0x158>)
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	f000 fad4 	bl	80077cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007224:	4b3b      	ldr	r3, [pc, #236]	@ (8007314 <xTaskIncrementTick+0x15c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	429a      	cmp	r2, r3
 800722c:	d349      	bcc.n	80072c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800722e:	4b36      	ldr	r3, [pc, #216]	@ (8007308 <xTaskIncrementTick+0x150>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007238:	4b36      	ldr	r3, [pc, #216]	@ (8007314 <xTaskIncrementTick+0x15c>)
 800723a:	f04f 32ff 	mov.w	r2, #4294967295
 800723e:	601a      	str	r2, [r3, #0]
					break;
 8007240:	e03f      	b.n	80072c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007242:	4b31      	ldr	r3, [pc, #196]	@ (8007308 <xTaskIncrementTick+0x150>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	429a      	cmp	r2, r3
 8007258:	d203      	bcs.n	8007262 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800725a:	4a2e      	ldr	r2, [pc, #184]	@ (8007314 <xTaskIncrementTick+0x15c>)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007260:	e02f      	b.n	80072c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	3304      	adds	r3, #4
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe ff82 	bl	8006170 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	3318      	adds	r3, #24
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe ff79 	bl	8006170 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007282:	4b25      	ldr	r3, [pc, #148]	@ (8007318 <xTaskIncrementTick+0x160>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	429a      	cmp	r2, r3
 8007288:	d903      	bls.n	8007292 <xTaskIncrementTick+0xda>
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728e:	4a22      	ldr	r2, [pc, #136]	@ (8007318 <xTaskIncrementTick+0x160>)
 8007290:	6013      	str	r3, [r2, #0]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4a1f      	ldr	r2, [pc, #124]	@ (800731c <xTaskIncrementTick+0x164>)
 80072a0:	441a      	add	r2, r3
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4619      	mov	r1, r3
 80072a8:	4610      	mov	r0, r2
 80072aa:	f7fe ff04 	bl	80060b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007320 <xTaskIncrementTick+0x168>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d3b8      	bcc.n	800722e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80072bc:	2301      	movs	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072c0:	e7b5      	b.n	800722e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072c2:	4b17      	ldr	r3, [pc, #92]	@ (8007320 <xTaskIncrementTick+0x168>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c8:	4914      	ldr	r1, [pc, #80]	@ (800731c <xTaskIncrementTick+0x164>)
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d901      	bls.n	80072de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80072da:	2301      	movs	r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80072de:	4b11      	ldr	r3, [pc, #68]	@ (8007324 <xTaskIncrementTick+0x16c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d007      	beq.n	80072f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80072e6:	2301      	movs	r3, #1
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	e004      	b.n	80072f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80072ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007328 <xTaskIncrementTick+0x170>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3301      	adds	r3, #1
 80072f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007328 <xTaskIncrementTick+0x170>)
 80072f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80072f6:	697b      	ldr	r3, [r7, #20]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000fac 	.word	0x20000fac
 8007304:	20000f88 	.word	0x20000f88
 8007308:	20000f3c 	.word	0x20000f3c
 800730c:	20000f40 	.word	0x20000f40
 8007310:	20000f9c 	.word	0x20000f9c
 8007314:	20000fa4 	.word	0x20000fa4
 8007318:	20000f8c 	.word	0x20000f8c
 800731c:	20000ab4 	.word	0x20000ab4
 8007320:	20000ab0 	.word	0x20000ab0
 8007324:	20000f98 	.word	0x20000f98
 8007328:	20000f94 	.word	0x20000f94

0800732c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007332:	4b28      	ldr	r3, [pc, #160]	@ (80073d4 <vTaskSwitchContext+0xa8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800733a:	4b27      	ldr	r3, [pc, #156]	@ (80073d8 <vTaskSwitchContext+0xac>)
 800733c:	2201      	movs	r2, #1
 800733e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007340:	e042      	b.n	80073c8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007342:	4b25      	ldr	r3, [pc, #148]	@ (80073d8 <vTaskSwitchContext+0xac>)
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007348:	4b24      	ldr	r3, [pc, #144]	@ (80073dc <vTaskSwitchContext+0xb0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e011      	b.n	8007374 <vTaskSwitchContext+0x48>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10b      	bne.n	800736e <vTaskSwitchContext+0x42>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	607b      	str	r3, [r7, #4]
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	e7fd      	b.n	800736a <vTaskSwitchContext+0x3e>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3b01      	subs	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	491a      	ldr	r1, [pc, #104]	@ (80073e0 <vTaskSwitchContext+0xb4>)
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0e3      	beq.n	8007350 <vTaskSwitchContext+0x24>
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4a13      	ldr	r2, [pc, #76]	@ (80073e0 <vTaskSwitchContext+0xb4>)
 8007394:	4413      	add	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	605a      	str	r2, [r3, #4]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	3308      	adds	r3, #8
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d104      	bne.n	80073b8 <vTaskSwitchContext+0x8c>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	605a      	str	r2, [r3, #4]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	4a09      	ldr	r2, [pc, #36]	@ (80073e4 <vTaskSwitchContext+0xb8>)
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	4a06      	ldr	r2, [pc, #24]	@ (80073dc <vTaskSwitchContext+0xb0>)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6013      	str	r3, [r2, #0]
}
 80073c8:	bf00      	nop
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	20000fac 	.word	0x20000fac
 80073d8:	20000f98 	.word	0x20000f98
 80073dc:	20000f8c 	.word	0x20000f8c
 80073e0:	20000ab4 	.word	0x20000ab4
 80073e4:	20000ab0 	.word	0x20000ab0

080073e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10b      	bne.n	8007410 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	60fb      	str	r3, [r7, #12]
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	e7fd      	b.n	800740c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007410:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <vTaskPlaceOnEventList+0x48>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3318      	adds	r3, #24
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7fe fe70 	bl	80060fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800741e:	2101      	movs	r1, #1
 8007420:	6838      	ldr	r0, [r7, #0]
 8007422:	f000 fa81 	bl	8007928 <prvAddCurrentTaskToDelayedList>
}
 8007426:	bf00      	nop
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000ab0 	.word	0x20000ab0

08007434 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10b      	bne.n	800745e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	617b      	str	r3, [r7, #20]
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	e7fd      	b.n	800745a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800745e:	4b0a      	ldr	r3, [pc, #40]	@ (8007488 <vTaskPlaceOnEventListRestricted+0x54>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3318      	adds	r3, #24
 8007464:	4619      	mov	r1, r3
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f7fe fe25 	bl	80060b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007472:	f04f 33ff 	mov.w	r3, #4294967295
 8007476:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	68b8      	ldr	r0, [r7, #8]
 800747c:	f000 fa54 	bl	8007928 <prvAddCurrentTaskToDelayedList>
	}
 8007480:	bf00      	nop
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000ab0 	.word	0x20000ab0

0800748c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10b      	bne.n	80074ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60fb      	str	r3, [r7, #12]
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	e7fd      	b.n	80074b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	3318      	adds	r3, #24
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe fe56 	bl	8006170 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c4:	4b1d      	ldr	r3, [pc, #116]	@ (800753c <xTaskRemoveFromEventList+0xb0>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d11d      	bne.n	8007508 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	3304      	adds	r3, #4
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe fe4d 	bl	8006170 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074da:	4b19      	ldr	r3, [pc, #100]	@ (8007540 <xTaskRemoveFromEventList+0xb4>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d903      	bls.n	80074ea <xTaskRemoveFromEventList+0x5e>
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e6:	4a16      	ldr	r2, [pc, #88]	@ (8007540 <xTaskRemoveFromEventList+0xb4>)
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4a13      	ldr	r2, [pc, #76]	@ (8007544 <xTaskRemoveFromEventList+0xb8>)
 80074f8:	441a      	add	r2, r3
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f7fe fdd8 	bl	80060b6 <vListInsertEnd>
 8007506:	e005      	b.n	8007514 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	3318      	adds	r3, #24
 800750c:	4619      	mov	r1, r3
 800750e:	480e      	ldr	r0, [pc, #56]	@ (8007548 <xTaskRemoveFromEventList+0xbc>)
 8007510:	f7fe fdd1 	bl	80060b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007518:	4b0c      	ldr	r3, [pc, #48]	@ (800754c <xTaskRemoveFromEventList+0xc0>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800751e:	429a      	cmp	r2, r3
 8007520:	d905      	bls.n	800752e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007522:	2301      	movs	r3, #1
 8007524:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007526:	4b0a      	ldr	r3, [pc, #40]	@ (8007550 <xTaskRemoveFromEventList+0xc4>)
 8007528:	2201      	movs	r2, #1
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	e001      	b.n	8007532 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007532:	697b      	ldr	r3, [r7, #20]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	20000fac 	.word	0x20000fac
 8007540:	20000f8c 	.word	0x20000f8c
 8007544:	20000ab4 	.word	0x20000ab4
 8007548:	20000f44 	.word	0x20000f44
 800754c:	20000ab0 	.word	0x20000ab0
 8007550:	20000f98 	.word	0x20000f98

08007554 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800755c:	4b06      	ldr	r3, [pc, #24]	@ (8007578 <vTaskInternalSetTimeOutState+0x24>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007564:	4b05      	ldr	r3, [pc, #20]	@ (800757c <vTaskInternalSetTimeOutState+0x28>)
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	605a      	str	r2, [r3, #4]
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	20000f9c 	.word	0x20000f9c
 800757c:	20000f88 	.word	0x20000f88

08007580 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10b      	bne.n	80075a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	613b      	str	r3, [r7, #16]
}
 80075a2:	bf00      	nop
 80075a4:	bf00      	nop
 80075a6:	e7fd      	b.n	80075a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10b      	bne.n	80075c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	60fb      	str	r3, [r7, #12]
}
 80075c0:	bf00      	nop
 80075c2:	bf00      	nop
 80075c4:	e7fd      	b.n	80075c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80075c6:	f000 fe8f 	bl	80082e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007640 <xTaskCheckForTimeOut+0xc0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e2:	d102      	bne.n	80075ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	e023      	b.n	8007632 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4b15      	ldr	r3, [pc, #84]	@ (8007644 <xTaskCheckForTimeOut+0xc4>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d007      	beq.n	8007606 <xTaskCheckForTimeOut+0x86>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d302      	bcc.n	8007606 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007600:	2301      	movs	r3, #1
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	e015      	b.n	8007632 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	429a      	cmp	r2, r3
 800760e:	d20b      	bcs.n	8007628 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	1ad2      	subs	r2, r2, r3
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff ff99 	bl	8007554 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007622:	2300      	movs	r3, #0
 8007624:	61fb      	str	r3, [r7, #28]
 8007626:	e004      	b.n	8007632 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800762e:	2301      	movs	r3, #1
 8007630:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007632:	f000 fe8b 	bl	800834c <vPortExitCritical>

	return xReturn;
 8007636:	69fb      	ldr	r3, [r7, #28]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3720      	adds	r7, #32
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000f88 	.word	0x20000f88
 8007644:	20000f9c 	.word	0x20000f9c

08007648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800764c:	4b03      	ldr	r3, [pc, #12]	@ (800765c <vTaskMissedYield+0x14>)
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]
}
 8007652:	bf00      	nop
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	20000f98 	.word	0x20000f98

08007660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007668:	f000 f852 	bl	8007710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800766c:	4b06      	ldr	r3, [pc, #24]	@ (8007688 <prvIdleTask+0x28>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d9f9      	bls.n	8007668 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007674:	4b05      	ldr	r3, [pc, #20]	@ (800768c <prvIdleTask+0x2c>)
 8007676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007684:	e7f0      	b.n	8007668 <prvIdleTask+0x8>
 8007686:	bf00      	nop
 8007688:	20000ab4 	.word	0x20000ab4
 800768c:	e000ed04 	.word	0xe000ed04

08007690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007696:	2300      	movs	r3, #0
 8007698:	607b      	str	r3, [r7, #4]
 800769a:	e00c      	b.n	80076b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4a12      	ldr	r2, [pc, #72]	@ (80076f0 <prvInitialiseTaskLists+0x60>)
 80076a8:	4413      	add	r3, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fcd6 	bl	800605c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3301      	adds	r3, #1
 80076b4:	607b      	str	r3, [r7, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b37      	cmp	r3, #55	@ 0x37
 80076ba:	d9ef      	bls.n	800769c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076bc:	480d      	ldr	r0, [pc, #52]	@ (80076f4 <prvInitialiseTaskLists+0x64>)
 80076be:	f7fe fccd 	bl	800605c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076c2:	480d      	ldr	r0, [pc, #52]	@ (80076f8 <prvInitialiseTaskLists+0x68>)
 80076c4:	f7fe fcca 	bl	800605c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076c8:	480c      	ldr	r0, [pc, #48]	@ (80076fc <prvInitialiseTaskLists+0x6c>)
 80076ca:	f7fe fcc7 	bl	800605c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076ce:	480c      	ldr	r0, [pc, #48]	@ (8007700 <prvInitialiseTaskLists+0x70>)
 80076d0:	f7fe fcc4 	bl	800605c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076d4:	480b      	ldr	r0, [pc, #44]	@ (8007704 <prvInitialiseTaskLists+0x74>)
 80076d6:	f7fe fcc1 	bl	800605c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076da:	4b0b      	ldr	r3, [pc, #44]	@ (8007708 <prvInitialiseTaskLists+0x78>)
 80076dc:	4a05      	ldr	r2, [pc, #20]	@ (80076f4 <prvInitialiseTaskLists+0x64>)
 80076de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076e0:	4b0a      	ldr	r3, [pc, #40]	@ (800770c <prvInitialiseTaskLists+0x7c>)
 80076e2:	4a05      	ldr	r2, [pc, #20]	@ (80076f8 <prvInitialiseTaskLists+0x68>)
 80076e4:	601a      	str	r2, [r3, #0]
}
 80076e6:	bf00      	nop
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20000ab4 	.word	0x20000ab4
 80076f4:	20000f14 	.word	0x20000f14
 80076f8:	20000f28 	.word	0x20000f28
 80076fc:	20000f44 	.word	0x20000f44
 8007700:	20000f58 	.word	0x20000f58
 8007704:	20000f70 	.word	0x20000f70
 8007708:	20000f3c 	.word	0x20000f3c
 800770c:	20000f40 	.word	0x20000f40

08007710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007716:	e019      	b.n	800774c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007718:	f000 fde6 	bl	80082e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800771c:	4b10      	ldr	r3, [pc, #64]	@ (8007760 <prvCheckTasksWaitingTermination+0x50>)
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3304      	adds	r3, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fd21 	bl	8006170 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800772e:	4b0d      	ldr	r3, [pc, #52]	@ (8007764 <prvCheckTasksWaitingTermination+0x54>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3b01      	subs	r3, #1
 8007734:	4a0b      	ldr	r2, [pc, #44]	@ (8007764 <prvCheckTasksWaitingTermination+0x54>)
 8007736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007738:	4b0b      	ldr	r3, [pc, #44]	@ (8007768 <prvCheckTasksWaitingTermination+0x58>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3b01      	subs	r3, #1
 800773e:	4a0a      	ldr	r2, [pc, #40]	@ (8007768 <prvCheckTasksWaitingTermination+0x58>)
 8007740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007742:	f000 fe03 	bl	800834c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f810 	bl	800776c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800774c:	4b06      	ldr	r3, [pc, #24]	@ (8007768 <prvCheckTasksWaitingTermination+0x58>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e1      	bne.n	8007718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000f58 	.word	0x20000f58
 8007764:	20000f84 	.word	0x20000f84
 8007768:	20000f6c 	.word	0x20000f6c

0800776c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800777a:	2b00      	cmp	r3, #0
 800777c:	d108      	bne.n	8007790 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007782:	4618      	mov	r0, r3
 8007784:	f000 ffa0 	bl	80086c8 <vPortFree>
				vPortFree( pxTCB );
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 ff9d 	bl	80086c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800778e:	e019      	b.n	80077c4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007796:	2b01      	cmp	r3, #1
 8007798:	d103      	bne.n	80077a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 ff94 	bl	80086c8 <vPortFree>
	}
 80077a0:	e010      	b.n	80077c4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d00b      	beq.n	80077c4 <prvDeleteTCB+0x58>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	60fb      	str	r3, [r7, #12]
}
 80077be:	bf00      	nop
 80077c0:	bf00      	nop
 80077c2:	e7fd      	b.n	80077c0 <prvDeleteTCB+0x54>
	}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <prvResetNextTaskUnblockTime+0x38>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007808 <prvResetNextTaskUnblockTime+0x3c>)
 80077de:	f04f 32ff 	mov.w	r2, #4294967295
 80077e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077e4:	e008      	b.n	80077f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e6:	4b07      	ldr	r3, [pc, #28]	@ (8007804 <prvResetNextTaskUnblockTime+0x38>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	4a04      	ldr	r2, [pc, #16]	@ (8007808 <prvResetNextTaskUnblockTime+0x3c>)
 80077f6:	6013      	str	r3, [r2, #0]
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	20000f3c 	.word	0x20000f3c
 8007808:	20000fa4 	.word	0x20000fa4

0800780c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007812:	4b0b      	ldr	r3, [pc, #44]	@ (8007840 <xTaskGetSchedulerState+0x34>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d102      	bne.n	8007820 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800781a:	2301      	movs	r3, #1
 800781c:	607b      	str	r3, [r7, #4]
 800781e:	e008      	b.n	8007832 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007820:	4b08      	ldr	r3, [pc, #32]	@ (8007844 <xTaskGetSchedulerState+0x38>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d102      	bne.n	800782e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007828:	2302      	movs	r3, #2
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	e001      	b.n	8007832 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800782e:	2300      	movs	r3, #0
 8007830:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007832:	687b      	ldr	r3, [r7, #4]
	}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	20000f90 	.word	0x20000f90
 8007844:	20000fac 	.word	0x20000fac

08007848 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d058      	beq.n	8007910 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800785e:	4b2f      	ldr	r3, [pc, #188]	@ (800791c <xTaskPriorityDisinherit+0xd4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	429a      	cmp	r2, r3
 8007866:	d00b      	beq.n	8007880 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	60fb      	str	r3, [r7, #12]
}
 800787a:	bf00      	nop
 800787c:	bf00      	nop
 800787e:	e7fd      	b.n	800787c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10b      	bne.n	80078a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	60bb      	str	r3, [r7, #8]
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	e7fd      	b.n	800789c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a4:	1e5a      	subs	r2, r3, #1
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d02c      	beq.n	8007910 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d128      	bne.n	8007910 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	3304      	adds	r3, #4
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe fc54 	bl	8006170 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007920 <xTaskPriorityDisinherit+0xd8>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d903      	bls.n	80078f0 <xTaskPriorityDisinherit+0xa8>
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ec:	4a0c      	ldr	r2, [pc, #48]	@ (8007920 <xTaskPriorityDisinherit+0xd8>)
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4a09      	ldr	r2, [pc, #36]	@ (8007924 <xTaskPriorityDisinherit+0xdc>)
 80078fe:	441a      	add	r2, r3
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	3304      	adds	r3, #4
 8007904:	4619      	mov	r1, r3
 8007906:	4610      	mov	r0, r2
 8007908:	f7fe fbd5 	bl	80060b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800790c:	2301      	movs	r3, #1
 800790e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007910:	697b      	ldr	r3, [r7, #20]
	}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20000ab0 	.word	0x20000ab0
 8007920:	20000f8c 	.word	0x20000f8c
 8007924:	20000ab4 	.word	0x20000ab4

08007928 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007932:	4b21      	ldr	r3, [pc, #132]	@ (80079b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007938:	4b20      	ldr	r3, [pc, #128]	@ (80079bc <prvAddCurrentTaskToDelayedList+0x94>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3304      	adds	r3, #4
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe fc16 	bl	8006170 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794a:	d10a      	bne.n	8007962 <prvAddCurrentTaskToDelayedList+0x3a>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d007      	beq.n	8007962 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007952:	4b1a      	ldr	r3, [pc, #104]	@ (80079bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3304      	adds	r3, #4
 8007958:	4619      	mov	r1, r3
 800795a:	4819      	ldr	r0, [pc, #100]	@ (80079c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800795c:	f7fe fbab 	bl	80060b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007960:	e026      	b.n	80079b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4413      	add	r3, r2
 8007968:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800796a:	4b14      	ldr	r3, [pc, #80]	@ (80079bc <prvAddCurrentTaskToDelayedList+0x94>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	429a      	cmp	r2, r3
 8007978:	d209      	bcs.n	800798e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800797a:	4b12      	ldr	r3, [pc, #72]	@ (80079c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	4b0f      	ldr	r3, [pc, #60]	@ (80079bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3304      	adds	r3, #4
 8007984:	4619      	mov	r1, r3
 8007986:	4610      	mov	r0, r2
 8007988:	f7fe fbb9 	bl	80060fe <vListInsert>
}
 800798c:	e010      	b.n	80079b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800798e:	4b0e      	ldr	r3, [pc, #56]	@ (80079c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b0a      	ldr	r3, [pc, #40]	@ (80079bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3304      	adds	r3, #4
 8007998:	4619      	mov	r1, r3
 800799a:	4610      	mov	r0, r2
 800799c:	f7fe fbaf 	bl	80060fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079a0:	4b0a      	ldr	r3, [pc, #40]	@ (80079cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d202      	bcs.n	80079b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80079aa:	4a08      	ldr	r2, [pc, #32]	@ (80079cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	6013      	str	r3, [r2, #0]
}
 80079b0:	bf00      	nop
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	20000f88 	.word	0x20000f88
 80079bc:	20000ab0 	.word	0x20000ab0
 80079c0:	20000f70 	.word	0x20000f70
 80079c4:	20000f40 	.word	0x20000f40
 80079c8:	20000f3c 	.word	0x20000f3c
 80079cc:	20000fa4 	.word	0x20000fa4

080079d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08a      	sub	sp, #40	@ 0x28
 80079d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80079da:	f000 fb13 	bl	8008004 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80079de:	4b1d      	ldr	r3, [pc, #116]	@ (8007a54 <xTimerCreateTimerTask+0x84>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d021      	beq.n	8007a2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80079ee:	1d3a      	adds	r2, r7, #4
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	f107 030c 	add.w	r3, r7, #12
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fe fb15 	bl	8006028 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	9202      	str	r2, [sp, #8]
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	2302      	movs	r3, #2
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	460a      	mov	r2, r1
 8007a10:	4911      	ldr	r1, [pc, #68]	@ (8007a58 <xTimerCreateTimerTask+0x88>)
 8007a12:	4812      	ldr	r0, [pc, #72]	@ (8007a5c <xTimerCreateTimerTask+0x8c>)
 8007a14:	f7ff f8d0 	bl	8006bb8 <xTaskCreateStatic>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	4a11      	ldr	r2, [pc, #68]	@ (8007a60 <xTimerCreateTimerTask+0x90>)
 8007a1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a1e:	4b10      	ldr	r3, [pc, #64]	@ (8007a60 <xTimerCreateTimerTask+0x90>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a26:	2301      	movs	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10b      	bne.n	8007a48 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	613b      	str	r3, [r7, #16]
}
 8007a42:	bf00      	nop
 8007a44:	bf00      	nop
 8007a46:	e7fd      	b.n	8007a44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007a48:	697b      	ldr	r3, [r7, #20]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20000fe0 	.word	0x20000fe0
 8007a58:	08009330 	.word	0x08009330
 8007a5c:	08007b9d 	.word	0x08007b9d
 8007a60:	20000fe4 	.word	0x20000fe4

08007a64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	@ 0x28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10b      	bne.n	8007a94 <xTimerGenericCommand+0x30>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	623b      	str	r3, [r7, #32]
}
 8007a8e:	bf00      	nop
 8007a90:	bf00      	nop
 8007a92:	e7fd      	b.n	8007a90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a94:	4b19      	ldr	r3, [pc, #100]	@ (8007afc <xTimerGenericCommand+0x98>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d02a      	beq.n	8007af2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b05      	cmp	r3, #5
 8007aac:	dc18      	bgt.n	8007ae0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007aae:	f7ff fead 	bl	800780c <xTaskGetSchedulerState>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d109      	bne.n	8007acc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ab8:	4b10      	ldr	r3, [pc, #64]	@ (8007afc <xTimerGenericCommand+0x98>)
 8007aba:	6818      	ldr	r0, [r3, #0]
 8007abc:	f107 0110 	add.w	r1, r7, #16
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac4:	f7fe fc88 	bl	80063d8 <xQueueGenericSend>
 8007ac8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007aca:	e012      	b.n	8007af2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007acc:	4b0b      	ldr	r3, [pc, #44]	@ (8007afc <xTimerGenericCommand+0x98>)
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	f107 0110 	add.w	r1, r7, #16
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f7fe fc7e 	bl	80063d8 <xQueueGenericSend>
 8007adc:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ade:	e008      	b.n	8007af2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ae0:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <xTimerGenericCommand+0x98>)
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	f107 0110 	add.w	r1, r7, #16
 8007ae8:	2300      	movs	r3, #0
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	f7fe fd76 	bl	80065dc <xQueueGenericSendFromISR>
 8007af0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3728      	adds	r7, #40	@ 0x28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20000fe0 	.word	0x20000fe0

08007b00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b0a:	4b23      	ldr	r3, [pc, #140]	@ (8007b98 <prvProcessExpiredTimer+0x98>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fb29 	bl	8006170 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d023      	beq.n	8007b74 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	699a      	ldr	r2, [r3, #24]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	18d1      	adds	r1, r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	6978      	ldr	r0, [r7, #20]
 8007b3a:	f000 f8d5 	bl	8007ce8 <prvInsertTimerInActiveList>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d020      	beq.n	8007b86 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b44:	2300      	movs	r3, #0
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	6978      	ldr	r0, [r7, #20]
 8007b50:	f7ff ff88 	bl	8007a64 <xTimerGenericCommand>
 8007b54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d114      	bne.n	8007b86 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	60fb      	str	r3, [r7, #12]
}
 8007b6e:	bf00      	nop
 8007b70:	bf00      	nop
 8007b72:	e7fd      	b.n	8007b70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b7a:	f023 0301 	bic.w	r3, r3, #1
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	6978      	ldr	r0, [r7, #20]
 8007b8c:	4798      	blx	r3
}
 8007b8e:	bf00      	nop
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20000fd8 	.word	0x20000fd8

08007b9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ba4:	f107 0308 	add.w	r3, r7, #8
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 f859 	bl	8007c60 <prvGetNextExpireTime>
 8007bae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 f805 	bl	8007bc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bba:	f000 f8d7 	bl	8007d6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bbe:	bf00      	nop
 8007bc0:	e7f0      	b.n	8007ba4 <prvTimerTask+0x8>
	...

08007bc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007bce:	f7ff fa37 	bl	8007040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bd2:	f107 0308 	add.w	r3, r7, #8
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 f866 	bl	8007ca8 <prvSampleTimeNow>
 8007bdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d130      	bne.n	8007c46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <prvProcessTimerOrBlockTask+0x3c>
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d806      	bhi.n	8007c00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007bf2:	f7ff fa33 	bl	800705c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007bf6:	68f9      	ldr	r1, [r7, #12]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff ff81 	bl	8007b00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007bfe:	e024      	b.n	8007c4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d008      	beq.n	8007c18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c06:	4b13      	ldr	r3, [pc, #76]	@ (8007c54 <prvProcessTimerOrBlockTask+0x90>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <prvProcessTimerOrBlockTask+0x50>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <prvProcessTimerOrBlockTask+0x52>
 8007c14:	2300      	movs	r3, #0
 8007c16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c18:	4b0f      	ldr	r3, [pc, #60]	@ (8007c58 <prvProcessTimerOrBlockTask+0x94>)
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	4619      	mov	r1, r3
 8007c26:	f7fe ff93 	bl	8006b50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c2a:	f7ff fa17 	bl	800705c <xTaskResumeAll>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c34:	4b09      	ldr	r3, [pc, #36]	@ (8007c5c <prvProcessTimerOrBlockTask+0x98>)
 8007c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	f3bf 8f6f 	isb	sy
}
 8007c44:	e001      	b.n	8007c4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c46:	f7ff fa09 	bl	800705c <xTaskResumeAll>
}
 8007c4a:	bf00      	nop
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20000fdc 	.word	0x20000fdc
 8007c58:	20000fe0 	.word	0x20000fe0
 8007c5c:	e000ed04 	.word	0xe000ed04

08007c60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c68:	4b0e      	ldr	r3, [pc, #56]	@ (8007ca4 <prvGetNextExpireTime+0x44>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <prvGetNextExpireTime+0x16>
 8007c72:	2201      	movs	r2, #1
 8007c74:	e000      	b.n	8007c78 <prvGetNextExpireTime+0x18>
 8007c76:	2200      	movs	r2, #0
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d105      	bne.n	8007c90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c84:	4b07      	ldr	r3, [pc, #28]	@ (8007ca4 <prvGetNextExpireTime+0x44>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	e001      	b.n	8007c94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c94:	68fb      	ldr	r3, [r7, #12]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	20000fd8 	.word	0x20000fd8

08007ca8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007cb0:	f7ff fa72 	bl	8007198 <xTaskGetTickCount>
 8007cb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce4 <prvSampleTimeNow+0x3c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d205      	bcs.n	8007ccc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007cc0:	f000 f93a 	bl	8007f38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	e002      	b.n	8007cd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007cd2:	4a04      	ldr	r2, [pc, #16]	@ (8007ce4 <prvSampleTimeNow+0x3c>)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000fe8 	.word	0x20000fe8

08007ce8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d812      	bhi.n	8007d34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	1ad2      	subs	r2, r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d302      	bcc.n	8007d22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	617b      	str	r3, [r7, #20]
 8007d20:	e01b      	b.n	8007d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d22:	4b10      	ldr	r3, [pc, #64]	@ (8007d64 <prvInsertTimerInActiveList+0x7c>)
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	f7fe f9e6 	bl	80060fe <vListInsert>
 8007d32:	e012      	b.n	8007d5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d206      	bcs.n	8007d4a <prvInsertTimerInActiveList+0x62>
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d302      	bcc.n	8007d4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d44:	2301      	movs	r3, #1
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	e007      	b.n	8007d5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d4a:	4b07      	ldr	r3, [pc, #28]	@ (8007d68 <prvInsertTimerInActiveList+0x80>)
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4619      	mov	r1, r3
 8007d54:	4610      	mov	r0, r2
 8007d56:	f7fe f9d2 	bl	80060fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d5a:	697b      	ldr	r3, [r7, #20]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20000fdc 	.word	0x20000fdc
 8007d68:	20000fd8 	.word	0x20000fd8

08007d6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08e      	sub	sp, #56	@ 0x38
 8007d70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d72:	e0ce      	b.n	8007f12 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	da19      	bge.n	8007dae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d7a:	1d3b      	adds	r3, r7, #4
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10b      	bne.n	8007d9e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	61fb      	str	r3, [r7, #28]
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	e7fd      	b.n	8007d9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007da4:	6850      	ldr	r0, [r2, #4]
 8007da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007da8:	6892      	ldr	r2, [r2, #8]
 8007daa:	4611      	mov	r1, r2
 8007dac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f2c0 80ae 	blt.w	8007f12 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d004      	beq.n	8007dcc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe f9d2 	bl	8006170 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dcc:	463b      	mov	r3, r7
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff ff6a 	bl	8007ca8 <prvSampleTimeNow>
 8007dd4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b09      	cmp	r3, #9
 8007dda:	f200 8097 	bhi.w	8007f0c <prvProcessReceivedCommands+0x1a0>
 8007dde:	a201      	add	r2, pc, #4	@ (adr r2, 8007de4 <prvProcessReceivedCommands+0x78>)
 8007de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de4:	08007e0d 	.word	0x08007e0d
 8007de8:	08007e0d 	.word	0x08007e0d
 8007dec:	08007e0d 	.word	0x08007e0d
 8007df0:	08007e83 	.word	0x08007e83
 8007df4:	08007e97 	.word	0x08007e97
 8007df8:	08007ee3 	.word	0x08007ee3
 8007dfc:	08007e0d 	.word	0x08007e0d
 8007e00:	08007e0d 	.word	0x08007e0d
 8007e04:	08007e83 	.word	0x08007e83
 8007e08:	08007e97 	.word	0x08007e97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	18d1      	adds	r1, r2, r3
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e2c:	f7ff ff5c 	bl	8007ce8 <prvInsertTimerInActiveList>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d06c      	beq.n	8007f10 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d061      	beq.n	8007f10 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	441a      	add	r2, r3
 8007e54:	2300      	movs	r3, #0
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e5e:	f7ff fe01 	bl	8007a64 <xTimerGenericCommand>
 8007e62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d152      	bne.n	8007f10 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	61bb      	str	r3, [r7, #24]
}
 8007e7c:	bf00      	nop
 8007e7e:	bf00      	nop
 8007e80:	e7fd      	b.n	8007e7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e88:	f023 0301 	bic.w	r3, r3, #1
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e94:	e03d      	b.n	8007f12 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e9c:	f043 0301 	orr.w	r3, r3, #1
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10b      	bne.n	8007ece <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	617b      	str	r3, [r7, #20]
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	699a      	ldr	r2, [r3, #24]
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed4:	18d1      	adds	r1, r2, r3
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007edc:	f7ff ff04 	bl	8007ce8 <prvInsertTimerInActiveList>
					break;
 8007ee0:	e017      	b.n	8007f12 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d103      	bne.n	8007ef8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007ef0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ef2:	f000 fbe9 	bl	80086c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ef6:	e00c      	b.n	8007f12 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007efe:	f023 0301 	bic.w	r3, r3, #1
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007f0a:	e002      	b.n	8007f12 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007f0c:	bf00      	nop
 8007f0e:	e000      	b.n	8007f12 <prvProcessReceivedCommands+0x1a6>
					break;
 8007f10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f12:	4b08      	ldr	r3, [pc, #32]	@ (8007f34 <prvProcessReceivedCommands+0x1c8>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	1d39      	adds	r1, r7, #4
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fbfc 	bl	8006718 <xQueueReceive>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f47f af26 	bne.w	8007d74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	3730      	adds	r7, #48	@ 0x30
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20000fe0 	.word	0x20000fe0

08007f38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b088      	sub	sp, #32
 8007f3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f3e:	e049      	b.n	8007fd4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f40:	4b2e      	ldr	r3, [pc, #184]	@ (8007ffc <prvSwitchTimerLists+0xc4>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8007ffc <prvSwitchTimerLists+0xc4>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe f909 	bl	8006170 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d02f      	beq.n	8007fd4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d90e      	bls.n	8007fa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f92:	4b1a      	ldr	r3, [pc, #104]	@ (8007ffc <prvSwitchTimerLists+0xc4>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	f7fe f8ae 	bl	80060fe <vListInsert>
 8007fa2:	e017      	b.n	8007fd4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	2100      	movs	r1, #0
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f7ff fd58 	bl	8007a64 <xTimerGenericCommand>
 8007fb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10b      	bne.n	8007fd4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	603b      	str	r3, [r7, #0]
}
 8007fce:	bf00      	nop
 8007fd0:	bf00      	nop
 8007fd2:	e7fd      	b.n	8007fd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fd4:	4b09      	ldr	r3, [pc, #36]	@ (8007ffc <prvSwitchTimerLists+0xc4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1b0      	bne.n	8007f40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007fde:	4b07      	ldr	r3, [pc, #28]	@ (8007ffc <prvSwitchTimerLists+0xc4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007fe4:	4b06      	ldr	r3, [pc, #24]	@ (8008000 <prvSwitchTimerLists+0xc8>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a04      	ldr	r2, [pc, #16]	@ (8007ffc <prvSwitchTimerLists+0xc4>)
 8007fea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007fec:	4a04      	ldr	r2, [pc, #16]	@ (8008000 <prvSwitchTimerLists+0xc8>)
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	6013      	str	r3, [r2, #0]
}
 8007ff2:	bf00      	nop
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000fd8 	.word	0x20000fd8
 8008000:	20000fdc 	.word	0x20000fdc

08008004 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800800a:	f000 f96d 	bl	80082e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800800e:	4b15      	ldr	r3, [pc, #84]	@ (8008064 <prvCheckForValidListAndQueue+0x60>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d120      	bne.n	8008058 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008016:	4814      	ldr	r0, [pc, #80]	@ (8008068 <prvCheckForValidListAndQueue+0x64>)
 8008018:	f7fe f820 	bl	800605c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800801c:	4813      	ldr	r0, [pc, #76]	@ (800806c <prvCheckForValidListAndQueue+0x68>)
 800801e:	f7fe f81d 	bl	800605c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008022:	4b13      	ldr	r3, [pc, #76]	@ (8008070 <prvCheckForValidListAndQueue+0x6c>)
 8008024:	4a10      	ldr	r2, [pc, #64]	@ (8008068 <prvCheckForValidListAndQueue+0x64>)
 8008026:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008028:	4b12      	ldr	r3, [pc, #72]	@ (8008074 <prvCheckForValidListAndQueue+0x70>)
 800802a:	4a10      	ldr	r2, [pc, #64]	@ (800806c <prvCheckForValidListAndQueue+0x68>)
 800802c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800802e:	2300      	movs	r3, #0
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	4b11      	ldr	r3, [pc, #68]	@ (8008078 <prvCheckForValidListAndQueue+0x74>)
 8008034:	4a11      	ldr	r2, [pc, #68]	@ (800807c <prvCheckForValidListAndQueue+0x78>)
 8008036:	2110      	movs	r1, #16
 8008038:	200a      	movs	r0, #10
 800803a:	f7fe f92d 	bl	8006298 <xQueueGenericCreateStatic>
 800803e:	4603      	mov	r3, r0
 8008040:	4a08      	ldr	r2, [pc, #32]	@ (8008064 <prvCheckForValidListAndQueue+0x60>)
 8008042:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008044:	4b07      	ldr	r3, [pc, #28]	@ (8008064 <prvCheckForValidListAndQueue+0x60>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800804c:	4b05      	ldr	r3, [pc, #20]	@ (8008064 <prvCheckForValidListAndQueue+0x60>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	490b      	ldr	r1, [pc, #44]	@ (8008080 <prvCheckForValidListAndQueue+0x7c>)
 8008052:	4618      	mov	r0, r3
 8008054:	f7fe fd52 	bl	8006afc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008058:	f000 f978 	bl	800834c <vPortExitCritical>
}
 800805c:	bf00      	nop
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20000fe0 	.word	0x20000fe0
 8008068:	20000fb0 	.word	0x20000fb0
 800806c:	20000fc4 	.word	0x20000fc4
 8008070:	20000fd8 	.word	0x20000fd8
 8008074:	20000fdc 	.word	0x20000fdc
 8008078:	2000108c 	.word	0x2000108c
 800807c:	20000fec 	.word	0x20000fec
 8008080:	08009338 	.word	0x08009338

08008084 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3b04      	subs	r3, #4
 8008094:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800809c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3b04      	subs	r3, #4
 80080a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f023 0201 	bic.w	r2, r3, #1
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3b04      	subs	r3, #4
 80080b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080b4:	4a0c      	ldr	r2, [pc, #48]	@ (80080e8 <pxPortInitialiseStack+0x64>)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3b14      	subs	r3, #20
 80080be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3b04      	subs	r3, #4
 80080ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f06f 0202 	mvn.w	r2, #2
 80080d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3b20      	subs	r3, #32
 80080d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080da:	68fb      	ldr	r3, [r7, #12]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	080080ed 	.word	0x080080ed

080080ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080f6:	4b13      	ldr	r3, [pc, #76]	@ (8008144 <prvTaskExitError+0x58>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fe:	d00b      	beq.n	8008118 <prvTaskExitError+0x2c>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	60fb      	str	r3, [r7, #12]
}
 8008112:	bf00      	nop
 8008114:	bf00      	nop
 8008116:	e7fd      	b.n	8008114 <prvTaskExitError+0x28>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	60bb      	str	r3, [r7, #8]
}
 800812a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800812c:	bf00      	nop
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0fc      	beq.n	800812e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20000058 	.word	0x20000058
	...

08008150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008150:	4b07      	ldr	r3, [pc, #28]	@ (8008170 <pxCurrentTCBConst2>)
 8008152:	6819      	ldr	r1, [r3, #0]
 8008154:	6808      	ldr	r0, [r1, #0]
 8008156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	f380 8809 	msr	PSP, r0
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f04f 0000 	mov.w	r0, #0
 8008166:	f380 8811 	msr	BASEPRI, r0
 800816a:	4770      	bx	lr
 800816c:	f3af 8000 	nop.w

08008170 <pxCurrentTCBConst2>:
 8008170:	20000ab0 	.word	0x20000ab0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008178:	4808      	ldr	r0, [pc, #32]	@ (800819c <prvPortStartFirstTask+0x24>)
 800817a:	6800      	ldr	r0, [r0, #0]
 800817c:	6800      	ldr	r0, [r0, #0]
 800817e:	f380 8808 	msr	MSP, r0
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8814 	msr	CONTROL, r0
 800818a:	b662      	cpsie	i
 800818c:	b661      	cpsie	f
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	df00      	svc	0
 8008198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800819a:	bf00      	nop
 800819c:	e000ed08 	.word	0xe000ed08

080081a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081a6:	4b47      	ldr	r3, [pc, #284]	@ (80082c4 <xPortStartScheduler+0x124>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a47      	ldr	r2, [pc, #284]	@ (80082c8 <xPortStartScheduler+0x128>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d10b      	bne.n	80081c8 <xPortStartScheduler+0x28>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	60fb      	str	r3, [r7, #12]
}
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
 80081c6:	e7fd      	b.n	80081c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80081c8:	4b3e      	ldr	r3, [pc, #248]	@ (80082c4 <xPortStartScheduler+0x124>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a3f      	ldr	r2, [pc, #252]	@ (80082cc <xPortStartScheduler+0x12c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d10b      	bne.n	80081ea <xPortStartScheduler+0x4a>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	613b      	str	r3, [r7, #16]
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop
 80081e8:	e7fd      	b.n	80081e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081ea:	4b39      	ldr	r3, [pc, #228]	@ (80082d0 <xPortStartScheduler+0x130>)
 80081ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	22ff      	movs	r2, #255	@ 0xff
 80081fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008204:	78fb      	ldrb	r3, [r7, #3]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800820c:	b2da      	uxtb	r2, r3
 800820e:	4b31      	ldr	r3, [pc, #196]	@ (80082d4 <xPortStartScheduler+0x134>)
 8008210:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008212:	4b31      	ldr	r3, [pc, #196]	@ (80082d8 <xPortStartScheduler+0x138>)
 8008214:	2207      	movs	r2, #7
 8008216:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008218:	e009      	b.n	800822e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800821a:	4b2f      	ldr	r3, [pc, #188]	@ (80082d8 <xPortStartScheduler+0x138>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3b01      	subs	r3, #1
 8008220:	4a2d      	ldr	r2, [pc, #180]	@ (80082d8 <xPortStartScheduler+0x138>)
 8008222:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	b2db      	uxtb	r3, r3
 800822c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008236:	2b80      	cmp	r3, #128	@ 0x80
 8008238:	d0ef      	beq.n	800821a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800823a:	4b27      	ldr	r3, [pc, #156]	@ (80082d8 <xPortStartScheduler+0x138>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f1c3 0307 	rsb	r3, r3, #7
 8008242:	2b04      	cmp	r3, #4
 8008244:	d00b      	beq.n	800825e <xPortStartScheduler+0xbe>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	60bb      	str	r3, [r7, #8]
}
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	e7fd      	b.n	800825a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800825e:	4b1e      	ldr	r3, [pc, #120]	@ (80082d8 <xPortStartScheduler+0x138>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	021b      	lsls	r3, r3, #8
 8008264:	4a1c      	ldr	r2, [pc, #112]	@ (80082d8 <xPortStartScheduler+0x138>)
 8008266:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008268:	4b1b      	ldr	r3, [pc, #108]	@ (80082d8 <xPortStartScheduler+0x138>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008270:	4a19      	ldr	r2, [pc, #100]	@ (80082d8 <xPortStartScheduler+0x138>)
 8008272:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	b2da      	uxtb	r2, r3
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800827c:	4b17      	ldr	r3, [pc, #92]	@ (80082dc <xPortStartScheduler+0x13c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a16      	ldr	r2, [pc, #88]	@ (80082dc <xPortStartScheduler+0x13c>)
 8008282:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008288:	4b14      	ldr	r3, [pc, #80]	@ (80082dc <xPortStartScheduler+0x13c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a13      	ldr	r2, [pc, #76]	@ (80082dc <xPortStartScheduler+0x13c>)
 800828e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008292:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008294:	f000 f8da 	bl	800844c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008298:	4b11      	ldr	r3, [pc, #68]	@ (80082e0 <xPortStartScheduler+0x140>)
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800829e:	f000 f8f9 	bl	8008494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082a2:	4b10      	ldr	r3, [pc, #64]	@ (80082e4 <xPortStartScheduler+0x144>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a0f      	ldr	r2, [pc, #60]	@ (80082e4 <xPortStartScheduler+0x144>)
 80082a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80082ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082ae:	f7ff ff63 	bl	8008178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082b2:	f7ff f83b 	bl	800732c <vTaskSwitchContext>
	prvTaskExitError();
 80082b6:	f7ff ff19 	bl	80080ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	e000ed00 	.word	0xe000ed00
 80082c8:	410fc271 	.word	0x410fc271
 80082cc:	410fc270 	.word	0x410fc270
 80082d0:	e000e400 	.word	0xe000e400
 80082d4:	200010dc 	.word	0x200010dc
 80082d8:	200010e0 	.word	0x200010e0
 80082dc:	e000ed20 	.word	0xe000ed20
 80082e0:	20000058 	.word	0x20000058
 80082e4:	e000ef34 	.word	0xe000ef34

080082e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	607b      	str	r3, [r7, #4]
}
 8008300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008302:	4b10      	ldr	r3, [pc, #64]	@ (8008344 <vPortEnterCritical+0x5c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3301      	adds	r3, #1
 8008308:	4a0e      	ldr	r2, [pc, #56]	@ (8008344 <vPortEnterCritical+0x5c>)
 800830a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800830c:	4b0d      	ldr	r3, [pc, #52]	@ (8008344 <vPortEnterCritical+0x5c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d110      	bne.n	8008336 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008314:	4b0c      	ldr	r3, [pc, #48]	@ (8008348 <vPortEnterCritical+0x60>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00b      	beq.n	8008336 <vPortEnterCritical+0x4e>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	603b      	str	r3, [r7, #0]
}
 8008330:	bf00      	nop
 8008332:	bf00      	nop
 8008334:	e7fd      	b.n	8008332 <vPortEnterCritical+0x4a>
	}
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20000058 	.word	0x20000058
 8008348:	e000ed04 	.word	0xe000ed04

0800834c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008352:	4b12      	ldr	r3, [pc, #72]	@ (800839c <vPortExitCritical+0x50>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10b      	bne.n	8008372 <vPortExitCritical+0x26>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	607b      	str	r3, [r7, #4]
}
 800836c:	bf00      	nop
 800836e:	bf00      	nop
 8008370:	e7fd      	b.n	800836e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008372:	4b0a      	ldr	r3, [pc, #40]	@ (800839c <vPortExitCritical+0x50>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3b01      	subs	r3, #1
 8008378:	4a08      	ldr	r2, [pc, #32]	@ (800839c <vPortExitCritical+0x50>)
 800837a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800837c:	4b07      	ldr	r3, [pc, #28]	@ (800839c <vPortExitCritical+0x50>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d105      	bne.n	8008390 <vPortExitCritical+0x44>
 8008384:	2300      	movs	r3, #0
 8008386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f383 8811 	msr	BASEPRI, r3
}
 800838e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	20000058 	.word	0x20000058

080083a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083a0:	f3ef 8009 	mrs	r0, PSP
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	4b15      	ldr	r3, [pc, #84]	@ (8008400 <pxCurrentTCBConst>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	f01e 0f10 	tst.w	lr, #16
 80083b0:	bf08      	it	eq
 80083b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ba:	6010      	str	r0, [r2, #0]
 80083bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80083c4:	f380 8811 	msr	BASEPRI, r0
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f7fe ffac 	bl	800732c <vTaskSwitchContext>
 80083d4:	f04f 0000 	mov.w	r0, #0
 80083d8:	f380 8811 	msr	BASEPRI, r0
 80083dc:	bc09      	pop	{r0, r3}
 80083de:	6819      	ldr	r1, [r3, #0]
 80083e0:	6808      	ldr	r0, [r1, #0]
 80083e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e6:	f01e 0f10 	tst.w	lr, #16
 80083ea:	bf08      	it	eq
 80083ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083f0:	f380 8809 	msr	PSP, r0
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	f3af 8000 	nop.w

08008400 <pxCurrentTCBConst>:
 8008400:	20000ab0 	.word	0x20000ab0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop

08008408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008422:	f7fe fec9 	bl	80071b8 <xTaskIncrementTick>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800842c:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <xPortSysTickHandler+0x40>)
 800842e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	2300      	movs	r3, #0
 8008436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f383 8811 	msr	BASEPRI, r3
}
 800843e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008440:	bf00      	nop
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008450:	4b0b      	ldr	r3, [pc, #44]	@ (8008480 <vPortSetupTimerInterrupt+0x34>)
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008456:	4b0b      	ldr	r3, [pc, #44]	@ (8008484 <vPortSetupTimerInterrupt+0x38>)
 8008458:	2200      	movs	r2, #0
 800845a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800845c:	4b0a      	ldr	r3, [pc, #40]	@ (8008488 <vPortSetupTimerInterrupt+0x3c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a0a      	ldr	r2, [pc, #40]	@ (800848c <vPortSetupTimerInterrupt+0x40>)
 8008462:	fba2 2303 	umull	r2, r3, r2, r3
 8008466:	099b      	lsrs	r3, r3, #6
 8008468:	4a09      	ldr	r2, [pc, #36]	@ (8008490 <vPortSetupTimerInterrupt+0x44>)
 800846a:	3b01      	subs	r3, #1
 800846c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800846e:	4b04      	ldr	r3, [pc, #16]	@ (8008480 <vPortSetupTimerInterrupt+0x34>)
 8008470:	2207      	movs	r2, #7
 8008472:	601a      	str	r2, [r3, #0]
}
 8008474:	bf00      	nop
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	e000e010 	.word	0xe000e010
 8008484:	e000e018 	.word	0xe000e018
 8008488:	20000000 	.word	0x20000000
 800848c:	10624dd3 	.word	0x10624dd3
 8008490:	e000e014 	.word	0xe000e014

08008494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008494:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80084a4 <vPortEnableVFP+0x10>
 8008498:	6801      	ldr	r1, [r0, #0]
 800849a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800849e:	6001      	str	r1, [r0, #0]
 80084a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084a2:	bf00      	nop
 80084a4:	e000ed88 	.word	0xe000ed88

080084a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084ae:	f3ef 8305 	mrs	r3, IPSR
 80084b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b0f      	cmp	r3, #15
 80084b8:	d915      	bls.n	80084e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084ba:	4a18      	ldr	r2, [pc, #96]	@ (800851c <vPortValidateInterruptPriority+0x74>)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084c4:	4b16      	ldr	r3, [pc, #88]	@ (8008520 <vPortValidateInterruptPriority+0x78>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	7afa      	ldrb	r2, [r7, #11]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d20b      	bcs.n	80084e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	607b      	str	r3, [r7, #4]
}
 80084e0:	bf00      	nop
 80084e2:	bf00      	nop
 80084e4:	e7fd      	b.n	80084e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008524 <vPortValidateInterruptPriority+0x7c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80084ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008528 <vPortValidateInterruptPriority+0x80>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d90b      	bls.n	800850e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	603b      	str	r3, [r7, #0]
}
 8008508:	bf00      	nop
 800850a:	bf00      	nop
 800850c:	e7fd      	b.n	800850a <vPortValidateInterruptPriority+0x62>
	}
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	e000e3f0 	.word	0xe000e3f0
 8008520:	200010dc 	.word	0x200010dc
 8008524:	e000ed0c 	.word	0xe000ed0c
 8008528:	200010e0 	.word	0x200010e0

0800852c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08a      	sub	sp, #40	@ 0x28
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008534:	2300      	movs	r3, #0
 8008536:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008538:	f7fe fd82 	bl	8007040 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800853c:	4b5c      	ldr	r3, [pc, #368]	@ (80086b0 <pvPortMalloc+0x184>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008544:	f000 f924 	bl	8008790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008548:	4b5a      	ldr	r3, [pc, #360]	@ (80086b4 <pvPortMalloc+0x188>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4013      	ands	r3, r2
 8008550:	2b00      	cmp	r3, #0
 8008552:	f040 8095 	bne.w	8008680 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01e      	beq.n	800859a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800855c:	2208      	movs	r2, #8
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4413      	add	r3, r2
 8008562:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	2b00      	cmp	r3, #0
 800856c:	d015      	beq.n	800859a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f023 0307 	bic.w	r3, r3, #7
 8008574:	3308      	adds	r3, #8
 8008576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00b      	beq.n	800859a <pvPortMalloc+0x6e>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	617b      	str	r3, [r7, #20]
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	e7fd      	b.n	8008596 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d06f      	beq.n	8008680 <pvPortMalloc+0x154>
 80085a0:	4b45      	ldr	r3, [pc, #276]	@ (80086b8 <pvPortMalloc+0x18c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d86a      	bhi.n	8008680 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085aa:	4b44      	ldr	r3, [pc, #272]	@ (80086bc <pvPortMalloc+0x190>)
 80085ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085ae:	4b43      	ldr	r3, [pc, #268]	@ (80086bc <pvPortMalloc+0x190>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085b4:	e004      	b.n	80085c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d903      	bls.n	80085d2 <pvPortMalloc+0xa6>
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f1      	bne.n	80085b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085d2:	4b37      	ldr	r3, [pc, #220]	@ (80086b0 <pvPortMalloc+0x184>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085d8:	429a      	cmp	r2, r3
 80085da:	d051      	beq.n	8008680 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2208      	movs	r2, #8
 80085e2:	4413      	add	r3, r2
 80085e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	1ad2      	subs	r2, r2, r3
 80085f6:	2308      	movs	r3, #8
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d920      	bls.n	8008640 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4413      	add	r3, r2
 8008604:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <pvPortMalloc+0xfc>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	613b      	str	r3, [r7, #16]
}
 8008622:	bf00      	nop
 8008624:	bf00      	nop
 8008626:	e7fd      	b.n	8008624 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800863a:	69b8      	ldr	r0, [r7, #24]
 800863c:	f000 f90a 	bl	8008854 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008640:	4b1d      	ldr	r3, [pc, #116]	@ (80086b8 <pvPortMalloc+0x18c>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	4a1b      	ldr	r2, [pc, #108]	@ (80086b8 <pvPortMalloc+0x18c>)
 800864c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800864e:	4b1a      	ldr	r3, [pc, #104]	@ (80086b8 <pvPortMalloc+0x18c>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4b1b      	ldr	r3, [pc, #108]	@ (80086c0 <pvPortMalloc+0x194>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d203      	bcs.n	8008662 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800865a:	4b17      	ldr	r3, [pc, #92]	@ (80086b8 <pvPortMalloc+0x18c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a18      	ldr	r2, [pc, #96]	@ (80086c0 <pvPortMalloc+0x194>)
 8008660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	4b13      	ldr	r3, [pc, #76]	@ (80086b4 <pvPortMalloc+0x188>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	431a      	orrs	r2, r3
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008676:	4b13      	ldr	r3, [pc, #76]	@ (80086c4 <pvPortMalloc+0x198>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3301      	adds	r3, #1
 800867c:	4a11      	ldr	r2, [pc, #68]	@ (80086c4 <pvPortMalloc+0x198>)
 800867e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008680:	f7fe fcec 	bl	800705c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00b      	beq.n	80086a6 <pvPortMalloc+0x17a>
	__asm volatile
 800868e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008692:	f383 8811 	msr	BASEPRI, r3
 8008696:	f3bf 8f6f 	isb	sy
 800869a:	f3bf 8f4f 	dsb	sy
 800869e:	60fb      	str	r3, [r7, #12]
}
 80086a0:	bf00      	nop
 80086a2:	bf00      	nop
 80086a4:	e7fd      	b.n	80086a2 <pvPortMalloc+0x176>
	return pvReturn;
 80086a6:	69fb      	ldr	r3, [r7, #28]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3728      	adds	r7, #40	@ 0x28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20004cec 	.word	0x20004cec
 80086b4:	20004d00 	.word	0x20004d00
 80086b8:	20004cf0 	.word	0x20004cf0
 80086bc:	20004ce4 	.word	0x20004ce4
 80086c0:	20004cf4 	.word	0x20004cf4
 80086c4:	20004cf8 	.word	0x20004cf8

080086c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d04f      	beq.n	800877a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086da:	2308      	movs	r3, #8
 80086dc:	425b      	negs	r3, r3
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	4413      	add	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	4b25      	ldr	r3, [pc, #148]	@ (8008784 <vPortFree+0xbc>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4013      	ands	r3, r2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <vPortFree+0x46>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	60fb      	str	r3, [r7, #12]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00b      	beq.n	800872e <vPortFree+0x66>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	60bb      	str	r3, [r7, #8]
}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	e7fd      	b.n	800872a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	4b14      	ldr	r3, [pc, #80]	@ (8008784 <vPortFree+0xbc>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4013      	ands	r3, r2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01e      	beq.n	800877a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11a      	bne.n	800877a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	4b0e      	ldr	r3, [pc, #56]	@ (8008784 <vPortFree+0xbc>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	43db      	mvns	r3, r3
 800874e:	401a      	ands	r2, r3
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008754:	f7fe fc74 	bl	8007040 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	4b0a      	ldr	r3, [pc, #40]	@ (8008788 <vPortFree+0xc0>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4413      	add	r3, r2
 8008762:	4a09      	ldr	r2, [pc, #36]	@ (8008788 <vPortFree+0xc0>)
 8008764:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008766:	6938      	ldr	r0, [r7, #16]
 8008768:	f000 f874 	bl	8008854 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800876c:	4b07      	ldr	r3, [pc, #28]	@ (800878c <vPortFree+0xc4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3301      	adds	r3, #1
 8008772:	4a06      	ldr	r2, [pc, #24]	@ (800878c <vPortFree+0xc4>)
 8008774:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008776:	f7fe fc71 	bl	800705c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800877a:	bf00      	nop
 800877c:	3718      	adds	r7, #24
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20004d00 	.word	0x20004d00
 8008788:	20004cf0 	.word	0x20004cf0
 800878c:	20004cfc 	.word	0x20004cfc

08008790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008796:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800879a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800879c:	4b27      	ldr	r3, [pc, #156]	@ (800883c <prvHeapInit+0xac>)
 800879e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f003 0307 	and.w	r3, r3, #7
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00c      	beq.n	80087c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3307      	adds	r3, #7
 80087ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f023 0307 	bic.w	r3, r3, #7
 80087b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	4a1f      	ldr	r2, [pc, #124]	@ (800883c <prvHeapInit+0xac>)
 80087c0:	4413      	add	r3, r2
 80087c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008840 <prvHeapInit+0xb0>)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008840 <prvHeapInit+0xb0>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	4413      	add	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087dc:	2208      	movs	r2, #8
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	1a9b      	subs	r3, r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0307 	bic.w	r3, r3, #7
 80087ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4a15      	ldr	r2, [pc, #84]	@ (8008844 <prvHeapInit+0xb4>)
 80087f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087f2:	4b14      	ldr	r3, [pc, #80]	@ (8008844 <prvHeapInit+0xb4>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2200      	movs	r2, #0
 80087f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087fa:	4b12      	ldr	r3, [pc, #72]	@ (8008844 <prvHeapInit+0xb4>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	1ad2      	subs	r2, r2, r3
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008810:	4b0c      	ldr	r3, [pc, #48]	@ (8008844 <prvHeapInit+0xb4>)
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	4a0a      	ldr	r2, [pc, #40]	@ (8008848 <prvHeapInit+0xb8>)
 800881e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	4a09      	ldr	r2, [pc, #36]	@ (800884c <prvHeapInit+0xbc>)
 8008826:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008828:	4b09      	ldr	r3, [pc, #36]	@ (8008850 <prvHeapInit+0xc0>)
 800882a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800882e:	601a      	str	r2, [r3, #0]
}
 8008830:	bf00      	nop
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr
 800883c:	200010e4 	.word	0x200010e4
 8008840:	20004ce4 	.word	0x20004ce4
 8008844:	20004cec 	.word	0x20004cec
 8008848:	20004cf4 	.word	0x20004cf4
 800884c:	20004cf0 	.word	0x20004cf0
 8008850:	20004d00 	.word	0x20004d00

08008854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800885c:	4b28      	ldr	r3, [pc, #160]	@ (8008900 <prvInsertBlockIntoFreeList+0xac>)
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	e002      	b.n	8008868 <prvInsertBlockIntoFreeList+0x14>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	429a      	cmp	r2, r3
 8008870:	d8f7      	bhi.n	8008862 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	4413      	add	r3, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	429a      	cmp	r2, r3
 8008882:	d108      	bne.n	8008896 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	441a      	add	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	441a      	add	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d118      	bne.n	80088dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	4b15      	ldr	r3, [pc, #84]	@ (8008904 <prvInsertBlockIntoFreeList+0xb0>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d00d      	beq.n	80088d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	441a      	add	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	e008      	b.n	80088e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008904 <prvInsertBlockIntoFreeList+0xb0>)
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e003      	b.n	80088e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d002      	beq.n	80088f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088f2:	bf00      	nop
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	20004ce4 	.word	0x20004ce4
 8008904:	20004cec 	.word	0x20004cec

08008908 <std>:
 8008908:	2300      	movs	r3, #0
 800890a:	b510      	push	{r4, lr}
 800890c:	4604      	mov	r4, r0
 800890e:	e9c0 3300 	strd	r3, r3, [r0]
 8008912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008916:	6083      	str	r3, [r0, #8]
 8008918:	8181      	strh	r1, [r0, #12]
 800891a:	6643      	str	r3, [r0, #100]	@ 0x64
 800891c:	81c2      	strh	r2, [r0, #14]
 800891e:	6183      	str	r3, [r0, #24]
 8008920:	4619      	mov	r1, r3
 8008922:	2208      	movs	r2, #8
 8008924:	305c      	adds	r0, #92	@ 0x5c
 8008926:	f000 f9f7 	bl	8008d18 <memset>
 800892a:	4b0d      	ldr	r3, [pc, #52]	@ (8008960 <std+0x58>)
 800892c:	6263      	str	r3, [r4, #36]	@ 0x24
 800892e:	4b0d      	ldr	r3, [pc, #52]	@ (8008964 <std+0x5c>)
 8008930:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008932:	4b0d      	ldr	r3, [pc, #52]	@ (8008968 <std+0x60>)
 8008934:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008936:	4b0d      	ldr	r3, [pc, #52]	@ (800896c <std+0x64>)
 8008938:	6323      	str	r3, [r4, #48]	@ 0x30
 800893a:	4b0d      	ldr	r3, [pc, #52]	@ (8008970 <std+0x68>)
 800893c:	6224      	str	r4, [r4, #32]
 800893e:	429c      	cmp	r4, r3
 8008940:	d006      	beq.n	8008950 <std+0x48>
 8008942:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008946:	4294      	cmp	r4, r2
 8008948:	d002      	beq.n	8008950 <std+0x48>
 800894a:	33d0      	adds	r3, #208	@ 0xd0
 800894c:	429c      	cmp	r4, r3
 800894e:	d105      	bne.n	800895c <std+0x54>
 8008950:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008958:	f000 ba56 	b.w	8008e08 <__retarget_lock_init_recursive>
 800895c:	bd10      	pop	{r4, pc}
 800895e:	bf00      	nop
 8008960:	08008b49 	.word	0x08008b49
 8008964:	08008b6b 	.word	0x08008b6b
 8008968:	08008ba3 	.word	0x08008ba3
 800896c:	08008bc7 	.word	0x08008bc7
 8008970:	20004d04 	.word	0x20004d04

08008974 <stdio_exit_handler>:
 8008974:	4a02      	ldr	r2, [pc, #8]	@ (8008980 <stdio_exit_handler+0xc>)
 8008976:	4903      	ldr	r1, [pc, #12]	@ (8008984 <stdio_exit_handler+0x10>)
 8008978:	4803      	ldr	r0, [pc, #12]	@ (8008988 <stdio_exit_handler+0x14>)
 800897a:	f000 b869 	b.w	8008a50 <_fwalk_sglue>
 800897e:	bf00      	nop
 8008980:	2000005c 	.word	0x2000005c
 8008984:	08009125 	.word	0x08009125
 8008988:	2000006c 	.word	0x2000006c

0800898c <cleanup_stdio>:
 800898c:	6841      	ldr	r1, [r0, #4]
 800898e:	4b0c      	ldr	r3, [pc, #48]	@ (80089c0 <cleanup_stdio+0x34>)
 8008990:	4299      	cmp	r1, r3
 8008992:	b510      	push	{r4, lr}
 8008994:	4604      	mov	r4, r0
 8008996:	d001      	beq.n	800899c <cleanup_stdio+0x10>
 8008998:	f000 fbc4 	bl	8009124 <_fflush_r>
 800899c:	68a1      	ldr	r1, [r4, #8]
 800899e:	4b09      	ldr	r3, [pc, #36]	@ (80089c4 <cleanup_stdio+0x38>)
 80089a0:	4299      	cmp	r1, r3
 80089a2:	d002      	beq.n	80089aa <cleanup_stdio+0x1e>
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 fbbd 	bl	8009124 <_fflush_r>
 80089aa:	68e1      	ldr	r1, [r4, #12]
 80089ac:	4b06      	ldr	r3, [pc, #24]	@ (80089c8 <cleanup_stdio+0x3c>)
 80089ae:	4299      	cmp	r1, r3
 80089b0:	d004      	beq.n	80089bc <cleanup_stdio+0x30>
 80089b2:	4620      	mov	r0, r4
 80089b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089b8:	f000 bbb4 	b.w	8009124 <_fflush_r>
 80089bc:	bd10      	pop	{r4, pc}
 80089be:	bf00      	nop
 80089c0:	20004d04 	.word	0x20004d04
 80089c4:	20004d6c 	.word	0x20004d6c
 80089c8:	20004dd4 	.word	0x20004dd4

080089cc <global_stdio_init.part.0>:
 80089cc:	b510      	push	{r4, lr}
 80089ce:	4b0b      	ldr	r3, [pc, #44]	@ (80089fc <global_stdio_init.part.0+0x30>)
 80089d0:	4c0b      	ldr	r4, [pc, #44]	@ (8008a00 <global_stdio_init.part.0+0x34>)
 80089d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008a04 <global_stdio_init.part.0+0x38>)
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	4620      	mov	r0, r4
 80089d8:	2200      	movs	r2, #0
 80089da:	2104      	movs	r1, #4
 80089dc:	f7ff ff94 	bl	8008908 <std>
 80089e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80089e4:	2201      	movs	r2, #1
 80089e6:	2109      	movs	r1, #9
 80089e8:	f7ff ff8e 	bl	8008908 <std>
 80089ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089f0:	2202      	movs	r2, #2
 80089f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089f6:	2112      	movs	r1, #18
 80089f8:	f7ff bf86 	b.w	8008908 <std>
 80089fc:	20004e3c 	.word	0x20004e3c
 8008a00:	20004d04 	.word	0x20004d04
 8008a04:	08008975 	.word	0x08008975

08008a08 <__sfp_lock_acquire>:
 8008a08:	4801      	ldr	r0, [pc, #4]	@ (8008a10 <__sfp_lock_acquire+0x8>)
 8008a0a:	f000 b9fe 	b.w	8008e0a <__retarget_lock_acquire_recursive>
 8008a0e:	bf00      	nop
 8008a10:	20004e45 	.word	0x20004e45

08008a14 <__sfp_lock_release>:
 8008a14:	4801      	ldr	r0, [pc, #4]	@ (8008a1c <__sfp_lock_release+0x8>)
 8008a16:	f000 b9f9 	b.w	8008e0c <__retarget_lock_release_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	20004e45 	.word	0x20004e45

08008a20 <__sinit>:
 8008a20:	b510      	push	{r4, lr}
 8008a22:	4604      	mov	r4, r0
 8008a24:	f7ff fff0 	bl	8008a08 <__sfp_lock_acquire>
 8008a28:	6a23      	ldr	r3, [r4, #32]
 8008a2a:	b11b      	cbz	r3, 8008a34 <__sinit+0x14>
 8008a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a30:	f7ff bff0 	b.w	8008a14 <__sfp_lock_release>
 8008a34:	4b04      	ldr	r3, [pc, #16]	@ (8008a48 <__sinit+0x28>)
 8008a36:	6223      	str	r3, [r4, #32]
 8008a38:	4b04      	ldr	r3, [pc, #16]	@ (8008a4c <__sinit+0x2c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1f5      	bne.n	8008a2c <__sinit+0xc>
 8008a40:	f7ff ffc4 	bl	80089cc <global_stdio_init.part.0>
 8008a44:	e7f2      	b.n	8008a2c <__sinit+0xc>
 8008a46:	bf00      	nop
 8008a48:	0800898d 	.word	0x0800898d
 8008a4c:	20004e3c 	.word	0x20004e3c

08008a50 <_fwalk_sglue>:
 8008a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a54:	4607      	mov	r7, r0
 8008a56:	4688      	mov	r8, r1
 8008a58:	4614      	mov	r4, r2
 8008a5a:	2600      	movs	r6, #0
 8008a5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a60:	f1b9 0901 	subs.w	r9, r9, #1
 8008a64:	d505      	bpl.n	8008a72 <_fwalk_sglue+0x22>
 8008a66:	6824      	ldr	r4, [r4, #0]
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	d1f7      	bne.n	8008a5c <_fwalk_sglue+0xc>
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a72:	89ab      	ldrh	r3, [r5, #12]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d907      	bls.n	8008a88 <_fwalk_sglue+0x38>
 8008a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	d003      	beq.n	8008a88 <_fwalk_sglue+0x38>
 8008a80:	4629      	mov	r1, r5
 8008a82:	4638      	mov	r0, r7
 8008a84:	47c0      	blx	r8
 8008a86:	4306      	orrs	r6, r0
 8008a88:	3568      	adds	r5, #104	@ 0x68
 8008a8a:	e7e9      	b.n	8008a60 <_fwalk_sglue+0x10>

08008a8c <_puts_r>:
 8008a8c:	6a03      	ldr	r3, [r0, #32]
 8008a8e:	b570      	push	{r4, r5, r6, lr}
 8008a90:	6884      	ldr	r4, [r0, #8]
 8008a92:	4605      	mov	r5, r0
 8008a94:	460e      	mov	r6, r1
 8008a96:	b90b      	cbnz	r3, 8008a9c <_puts_r+0x10>
 8008a98:	f7ff ffc2 	bl	8008a20 <__sinit>
 8008a9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a9e:	07db      	lsls	r3, r3, #31
 8008aa0:	d405      	bmi.n	8008aae <_puts_r+0x22>
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	0598      	lsls	r0, r3, #22
 8008aa6:	d402      	bmi.n	8008aae <_puts_r+0x22>
 8008aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008aaa:	f000 f9ae 	bl	8008e0a <__retarget_lock_acquire_recursive>
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	0719      	lsls	r1, r3, #28
 8008ab2:	d502      	bpl.n	8008aba <_puts_r+0x2e>
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d135      	bne.n	8008b26 <_puts_r+0x9a>
 8008aba:	4621      	mov	r1, r4
 8008abc:	4628      	mov	r0, r5
 8008abe:	f000 f8c5 	bl	8008c4c <__swsetup_r>
 8008ac2:	b380      	cbz	r0, 8008b26 <_puts_r+0x9a>
 8008ac4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ac8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008aca:	07da      	lsls	r2, r3, #31
 8008acc:	d405      	bmi.n	8008ada <_puts_r+0x4e>
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	059b      	lsls	r3, r3, #22
 8008ad2:	d402      	bmi.n	8008ada <_puts_r+0x4e>
 8008ad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ad6:	f000 f999 	bl	8008e0c <__retarget_lock_release_recursive>
 8008ada:	4628      	mov	r0, r5
 8008adc:	bd70      	pop	{r4, r5, r6, pc}
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	da04      	bge.n	8008aec <_puts_r+0x60>
 8008ae2:	69a2      	ldr	r2, [r4, #24]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	dc17      	bgt.n	8008b18 <_puts_r+0x8c>
 8008ae8:	290a      	cmp	r1, #10
 8008aea:	d015      	beq.n	8008b18 <_puts_r+0x8c>
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	6022      	str	r2, [r4, #0]
 8008af2:	7019      	strb	r1, [r3, #0]
 8008af4:	68a3      	ldr	r3, [r4, #8]
 8008af6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008afa:	3b01      	subs	r3, #1
 8008afc:	60a3      	str	r3, [r4, #8]
 8008afe:	2900      	cmp	r1, #0
 8008b00:	d1ed      	bne.n	8008ade <_puts_r+0x52>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	da11      	bge.n	8008b2a <_puts_r+0x9e>
 8008b06:	4622      	mov	r2, r4
 8008b08:	210a      	movs	r1, #10
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f000 f85f 	bl	8008bce <__swbuf_r>
 8008b10:	3001      	adds	r0, #1
 8008b12:	d0d7      	beq.n	8008ac4 <_puts_r+0x38>
 8008b14:	250a      	movs	r5, #10
 8008b16:	e7d7      	b.n	8008ac8 <_puts_r+0x3c>
 8008b18:	4622      	mov	r2, r4
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	f000 f857 	bl	8008bce <__swbuf_r>
 8008b20:	3001      	adds	r0, #1
 8008b22:	d1e7      	bne.n	8008af4 <_puts_r+0x68>
 8008b24:	e7ce      	b.n	8008ac4 <_puts_r+0x38>
 8008b26:	3e01      	subs	r6, #1
 8008b28:	e7e4      	b.n	8008af4 <_puts_r+0x68>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	1c5a      	adds	r2, r3, #1
 8008b2e:	6022      	str	r2, [r4, #0]
 8008b30:	220a      	movs	r2, #10
 8008b32:	701a      	strb	r2, [r3, #0]
 8008b34:	e7ee      	b.n	8008b14 <_puts_r+0x88>
	...

08008b38 <puts>:
 8008b38:	4b02      	ldr	r3, [pc, #8]	@ (8008b44 <puts+0xc>)
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	6818      	ldr	r0, [r3, #0]
 8008b3e:	f7ff bfa5 	b.w	8008a8c <_puts_r>
 8008b42:	bf00      	nop
 8008b44:	20000068 	.word	0x20000068

08008b48 <__sread>:
 8008b48:	b510      	push	{r4, lr}
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b50:	f000 f90c 	bl	8008d6c <_read_r>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	bfab      	itete	ge
 8008b58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b5c:	181b      	addge	r3, r3, r0
 8008b5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b62:	bfac      	ite	ge
 8008b64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b66:	81a3      	strhlt	r3, [r4, #12]
 8008b68:	bd10      	pop	{r4, pc}

08008b6a <__swrite>:
 8008b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6e:	461f      	mov	r7, r3
 8008b70:	898b      	ldrh	r3, [r1, #12]
 8008b72:	05db      	lsls	r3, r3, #23
 8008b74:	4605      	mov	r5, r0
 8008b76:	460c      	mov	r4, r1
 8008b78:	4616      	mov	r6, r2
 8008b7a:	d505      	bpl.n	8008b88 <__swrite+0x1e>
 8008b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b80:	2302      	movs	r3, #2
 8008b82:	2200      	movs	r2, #0
 8008b84:	f000 f8e0 	bl	8008d48 <_lseek_r>
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b92:	81a3      	strh	r3, [r4, #12]
 8008b94:	4632      	mov	r2, r6
 8008b96:	463b      	mov	r3, r7
 8008b98:	4628      	mov	r0, r5
 8008b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9e:	f000 b8f7 	b.w	8008d90 <_write_r>

08008ba2 <__sseek>:
 8008ba2:	b510      	push	{r4, lr}
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008baa:	f000 f8cd 	bl	8008d48 <_lseek_r>
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	bf15      	itete	ne
 8008bb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bbe:	81a3      	strheq	r3, [r4, #12]
 8008bc0:	bf18      	it	ne
 8008bc2:	81a3      	strhne	r3, [r4, #12]
 8008bc4:	bd10      	pop	{r4, pc}

08008bc6 <__sclose>:
 8008bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bca:	f000 b8ad 	b.w	8008d28 <_close_r>

08008bce <__swbuf_r>:
 8008bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd0:	460e      	mov	r6, r1
 8008bd2:	4614      	mov	r4, r2
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	b118      	cbz	r0, 8008be0 <__swbuf_r+0x12>
 8008bd8:	6a03      	ldr	r3, [r0, #32]
 8008bda:	b90b      	cbnz	r3, 8008be0 <__swbuf_r+0x12>
 8008bdc:	f7ff ff20 	bl	8008a20 <__sinit>
 8008be0:	69a3      	ldr	r3, [r4, #24]
 8008be2:	60a3      	str	r3, [r4, #8]
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	071a      	lsls	r2, r3, #28
 8008be8:	d501      	bpl.n	8008bee <__swbuf_r+0x20>
 8008bea:	6923      	ldr	r3, [r4, #16]
 8008bec:	b943      	cbnz	r3, 8008c00 <__swbuf_r+0x32>
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f000 f82b 	bl	8008c4c <__swsetup_r>
 8008bf6:	b118      	cbz	r0, 8008c00 <__swbuf_r+0x32>
 8008bf8:	f04f 37ff 	mov.w	r7, #4294967295
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	6922      	ldr	r2, [r4, #16]
 8008c04:	1a98      	subs	r0, r3, r2
 8008c06:	6963      	ldr	r3, [r4, #20]
 8008c08:	b2f6      	uxtb	r6, r6
 8008c0a:	4283      	cmp	r3, r0
 8008c0c:	4637      	mov	r7, r6
 8008c0e:	dc05      	bgt.n	8008c1c <__swbuf_r+0x4e>
 8008c10:	4621      	mov	r1, r4
 8008c12:	4628      	mov	r0, r5
 8008c14:	f000 fa86 	bl	8009124 <_fflush_r>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d1ed      	bne.n	8008bf8 <__swbuf_r+0x2a>
 8008c1c:	68a3      	ldr	r3, [r4, #8]
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	60a3      	str	r3, [r4, #8]
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	1c5a      	adds	r2, r3, #1
 8008c26:	6022      	str	r2, [r4, #0]
 8008c28:	701e      	strb	r6, [r3, #0]
 8008c2a:	6962      	ldr	r2, [r4, #20]
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d004      	beq.n	8008c3c <__swbuf_r+0x6e>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	07db      	lsls	r3, r3, #31
 8008c36:	d5e1      	bpl.n	8008bfc <__swbuf_r+0x2e>
 8008c38:	2e0a      	cmp	r6, #10
 8008c3a:	d1df      	bne.n	8008bfc <__swbuf_r+0x2e>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 fa70 	bl	8009124 <_fflush_r>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d0d9      	beq.n	8008bfc <__swbuf_r+0x2e>
 8008c48:	e7d6      	b.n	8008bf8 <__swbuf_r+0x2a>
	...

08008c4c <__swsetup_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4b29      	ldr	r3, [pc, #164]	@ (8008cf4 <__swsetup_r+0xa8>)
 8008c50:	4605      	mov	r5, r0
 8008c52:	6818      	ldr	r0, [r3, #0]
 8008c54:	460c      	mov	r4, r1
 8008c56:	b118      	cbz	r0, 8008c60 <__swsetup_r+0x14>
 8008c58:	6a03      	ldr	r3, [r0, #32]
 8008c5a:	b90b      	cbnz	r3, 8008c60 <__swsetup_r+0x14>
 8008c5c:	f7ff fee0 	bl	8008a20 <__sinit>
 8008c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c64:	0719      	lsls	r1, r3, #28
 8008c66:	d422      	bmi.n	8008cae <__swsetup_r+0x62>
 8008c68:	06da      	lsls	r2, r3, #27
 8008c6a:	d407      	bmi.n	8008c7c <__swsetup_r+0x30>
 8008c6c:	2209      	movs	r2, #9
 8008c6e:	602a      	str	r2, [r5, #0]
 8008c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7a:	e033      	b.n	8008ce4 <__swsetup_r+0x98>
 8008c7c:	0758      	lsls	r0, r3, #29
 8008c7e:	d512      	bpl.n	8008ca6 <__swsetup_r+0x5a>
 8008c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c82:	b141      	cbz	r1, 8008c96 <__swsetup_r+0x4a>
 8008c84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c88:	4299      	cmp	r1, r3
 8008c8a:	d002      	beq.n	8008c92 <__swsetup_r+0x46>
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f000 f8cd 	bl	8008e2c <_free_r>
 8008c92:	2300      	movs	r3, #0
 8008c94:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	6063      	str	r3, [r4, #4]
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f043 0308 	orr.w	r3, r3, #8
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	6923      	ldr	r3, [r4, #16]
 8008cb0:	b94b      	cbnz	r3, 8008cc6 <__swsetup_r+0x7a>
 8008cb2:	89a3      	ldrh	r3, [r4, #12]
 8008cb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cbc:	d003      	beq.n	8008cc6 <__swsetup_r+0x7a>
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f000 fa7d 	bl	80091c0 <__smakebuf_r>
 8008cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cca:	f013 0201 	ands.w	r2, r3, #1
 8008cce:	d00a      	beq.n	8008ce6 <__swsetup_r+0x9a>
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	60a2      	str	r2, [r4, #8]
 8008cd4:	6962      	ldr	r2, [r4, #20]
 8008cd6:	4252      	negs	r2, r2
 8008cd8:	61a2      	str	r2, [r4, #24]
 8008cda:	6922      	ldr	r2, [r4, #16]
 8008cdc:	b942      	cbnz	r2, 8008cf0 <__swsetup_r+0xa4>
 8008cde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ce2:	d1c5      	bne.n	8008c70 <__swsetup_r+0x24>
 8008ce4:	bd38      	pop	{r3, r4, r5, pc}
 8008ce6:	0799      	lsls	r1, r3, #30
 8008ce8:	bf58      	it	pl
 8008cea:	6962      	ldrpl	r2, [r4, #20]
 8008cec:	60a2      	str	r2, [r4, #8]
 8008cee:	e7f4      	b.n	8008cda <__swsetup_r+0x8e>
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	e7f7      	b.n	8008ce4 <__swsetup_r+0x98>
 8008cf4:	20000068 	.word	0x20000068

08008cf8 <memcmp>:
 8008cf8:	b510      	push	{r4, lr}
 8008cfa:	3901      	subs	r1, #1
 8008cfc:	4402      	add	r2, r0
 8008cfe:	4290      	cmp	r0, r2
 8008d00:	d101      	bne.n	8008d06 <memcmp+0xe>
 8008d02:	2000      	movs	r0, #0
 8008d04:	e005      	b.n	8008d12 <memcmp+0x1a>
 8008d06:	7803      	ldrb	r3, [r0, #0]
 8008d08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d0c:	42a3      	cmp	r3, r4
 8008d0e:	d001      	beq.n	8008d14 <memcmp+0x1c>
 8008d10:	1b18      	subs	r0, r3, r4
 8008d12:	bd10      	pop	{r4, pc}
 8008d14:	3001      	adds	r0, #1
 8008d16:	e7f2      	b.n	8008cfe <memcmp+0x6>

08008d18 <memset>:
 8008d18:	4402      	add	r2, r0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d100      	bne.n	8008d22 <memset+0xa>
 8008d20:	4770      	bx	lr
 8008d22:	f803 1b01 	strb.w	r1, [r3], #1
 8008d26:	e7f9      	b.n	8008d1c <memset+0x4>

08008d28 <_close_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4d06      	ldr	r5, [pc, #24]	@ (8008d44 <_close_r+0x1c>)
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4604      	mov	r4, r0
 8008d30:	4608      	mov	r0, r1
 8008d32:	602b      	str	r3, [r5, #0]
 8008d34:	f7f9 f9d1 	bl	80020da <_close>
 8008d38:	1c43      	adds	r3, r0, #1
 8008d3a:	d102      	bne.n	8008d42 <_close_r+0x1a>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	b103      	cbz	r3, 8008d42 <_close_r+0x1a>
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	bd38      	pop	{r3, r4, r5, pc}
 8008d44:	20004e40 	.word	0x20004e40

08008d48 <_lseek_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d07      	ldr	r5, [pc, #28]	@ (8008d68 <_lseek_r+0x20>)
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	4608      	mov	r0, r1
 8008d50:	4611      	mov	r1, r2
 8008d52:	2200      	movs	r2, #0
 8008d54:	602a      	str	r2, [r5, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	f7f9 f9e6 	bl	8002128 <_lseek>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_lseek_r+0x1e>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_lseek_r+0x1e>
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	20004e40 	.word	0x20004e40

08008d6c <_read_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d07      	ldr	r5, [pc, #28]	@ (8008d8c <_read_r+0x20>)
 8008d70:	4604      	mov	r4, r0
 8008d72:	4608      	mov	r0, r1
 8008d74:	4611      	mov	r1, r2
 8008d76:	2200      	movs	r2, #0
 8008d78:	602a      	str	r2, [r5, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f7f9 f974 	bl	8002068 <_read>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_read_r+0x1e>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_read_r+0x1e>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20004e40 	.word	0x20004e40

08008d90 <_write_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	@ (8008db0 <_write_r+0x20>)
 8008d94:	4604      	mov	r4, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	4611      	mov	r1, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f7f9 f97f 	bl	80020a2 <_write>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_write_r+0x1e>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_write_r+0x1e>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20004e40 	.word	0x20004e40

08008db4 <__errno>:
 8008db4:	4b01      	ldr	r3, [pc, #4]	@ (8008dbc <__errno+0x8>)
 8008db6:	6818      	ldr	r0, [r3, #0]
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	20000068 	.word	0x20000068

08008dc0 <__libc_init_array>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8008df8 <__libc_init_array+0x38>)
 8008dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8008dfc <__libc_init_array+0x3c>)
 8008dc6:	1b64      	subs	r4, r4, r5
 8008dc8:	10a4      	asrs	r4, r4, #2
 8008dca:	2600      	movs	r6, #0
 8008dcc:	42a6      	cmp	r6, r4
 8008dce:	d109      	bne.n	8008de4 <__libc_init_array+0x24>
 8008dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8008e00 <__libc_init_array+0x40>)
 8008dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8008e04 <__libc_init_array+0x44>)
 8008dd4:	f000 fa62 	bl	800929c <_init>
 8008dd8:	1b64      	subs	r4, r4, r5
 8008dda:	10a4      	asrs	r4, r4, #2
 8008ddc:	2600      	movs	r6, #0
 8008dde:	42a6      	cmp	r6, r4
 8008de0:	d105      	bne.n	8008dee <__libc_init_array+0x2e>
 8008de2:	bd70      	pop	{r4, r5, r6, pc}
 8008de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de8:	4798      	blx	r3
 8008dea:	3601      	adds	r6, #1
 8008dec:	e7ee      	b.n	8008dcc <__libc_init_array+0xc>
 8008dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df2:	4798      	blx	r3
 8008df4:	3601      	adds	r6, #1
 8008df6:	e7f2      	b.n	8008dde <__libc_init_array+0x1e>
 8008df8:	080093cc 	.word	0x080093cc
 8008dfc:	080093cc 	.word	0x080093cc
 8008e00:	080093cc 	.word	0x080093cc
 8008e04:	080093d0 	.word	0x080093d0

08008e08 <__retarget_lock_init_recursive>:
 8008e08:	4770      	bx	lr

08008e0a <__retarget_lock_acquire_recursive>:
 8008e0a:	4770      	bx	lr

08008e0c <__retarget_lock_release_recursive>:
 8008e0c:	4770      	bx	lr

08008e0e <memcpy>:
 8008e0e:	440a      	add	r2, r1
 8008e10:	4291      	cmp	r1, r2
 8008e12:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e16:	d100      	bne.n	8008e1a <memcpy+0xc>
 8008e18:	4770      	bx	lr
 8008e1a:	b510      	push	{r4, lr}
 8008e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e24:	4291      	cmp	r1, r2
 8008e26:	d1f9      	bne.n	8008e1c <memcpy+0xe>
 8008e28:	bd10      	pop	{r4, pc}
	...

08008e2c <_free_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4605      	mov	r5, r0
 8008e30:	2900      	cmp	r1, #0
 8008e32:	d041      	beq.n	8008eb8 <_free_r+0x8c>
 8008e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e38:	1f0c      	subs	r4, r1, #4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bfb8      	it	lt
 8008e3e:	18e4      	addlt	r4, r4, r3
 8008e40:	f000 f8e0 	bl	8009004 <__malloc_lock>
 8008e44:	4a1d      	ldr	r2, [pc, #116]	@ (8008ebc <_free_r+0x90>)
 8008e46:	6813      	ldr	r3, [r2, #0]
 8008e48:	b933      	cbnz	r3, 8008e58 <_free_r+0x2c>
 8008e4a:	6063      	str	r3, [r4, #4]
 8008e4c:	6014      	str	r4, [r2, #0]
 8008e4e:	4628      	mov	r0, r5
 8008e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e54:	f000 b8dc 	b.w	8009010 <__malloc_unlock>
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	d908      	bls.n	8008e6e <_free_r+0x42>
 8008e5c:	6820      	ldr	r0, [r4, #0]
 8008e5e:	1821      	adds	r1, r4, r0
 8008e60:	428b      	cmp	r3, r1
 8008e62:	bf01      	itttt	eq
 8008e64:	6819      	ldreq	r1, [r3, #0]
 8008e66:	685b      	ldreq	r3, [r3, #4]
 8008e68:	1809      	addeq	r1, r1, r0
 8008e6a:	6021      	streq	r1, [r4, #0]
 8008e6c:	e7ed      	b.n	8008e4a <_free_r+0x1e>
 8008e6e:	461a      	mov	r2, r3
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	b10b      	cbz	r3, 8008e78 <_free_r+0x4c>
 8008e74:	42a3      	cmp	r3, r4
 8008e76:	d9fa      	bls.n	8008e6e <_free_r+0x42>
 8008e78:	6811      	ldr	r1, [r2, #0]
 8008e7a:	1850      	adds	r0, r2, r1
 8008e7c:	42a0      	cmp	r0, r4
 8008e7e:	d10b      	bne.n	8008e98 <_free_r+0x6c>
 8008e80:	6820      	ldr	r0, [r4, #0]
 8008e82:	4401      	add	r1, r0
 8008e84:	1850      	adds	r0, r2, r1
 8008e86:	4283      	cmp	r3, r0
 8008e88:	6011      	str	r1, [r2, #0]
 8008e8a:	d1e0      	bne.n	8008e4e <_free_r+0x22>
 8008e8c:	6818      	ldr	r0, [r3, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	6053      	str	r3, [r2, #4]
 8008e92:	4408      	add	r0, r1
 8008e94:	6010      	str	r0, [r2, #0]
 8008e96:	e7da      	b.n	8008e4e <_free_r+0x22>
 8008e98:	d902      	bls.n	8008ea0 <_free_r+0x74>
 8008e9a:	230c      	movs	r3, #12
 8008e9c:	602b      	str	r3, [r5, #0]
 8008e9e:	e7d6      	b.n	8008e4e <_free_r+0x22>
 8008ea0:	6820      	ldr	r0, [r4, #0]
 8008ea2:	1821      	adds	r1, r4, r0
 8008ea4:	428b      	cmp	r3, r1
 8008ea6:	bf04      	itt	eq
 8008ea8:	6819      	ldreq	r1, [r3, #0]
 8008eaa:	685b      	ldreq	r3, [r3, #4]
 8008eac:	6063      	str	r3, [r4, #4]
 8008eae:	bf04      	itt	eq
 8008eb0:	1809      	addeq	r1, r1, r0
 8008eb2:	6021      	streq	r1, [r4, #0]
 8008eb4:	6054      	str	r4, [r2, #4]
 8008eb6:	e7ca      	b.n	8008e4e <_free_r+0x22>
 8008eb8:	bd38      	pop	{r3, r4, r5, pc}
 8008eba:	bf00      	nop
 8008ebc:	20004e4c 	.word	0x20004e4c

08008ec0 <sbrk_aligned>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	4e0f      	ldr	r6, [pc, #60]	@ (8008f00 <sbrk_aligned+0x40>)
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	6831      	ldr	r1, [r6, #0]
 8008ec8:	4605      	mov	r5, r0
 8008eca:	b911      	cbnz	r1, 8008ed2 <sbrk_aligned+0x12>
 8008ecc:	f000 f9d6 	bl	800927c <_sbrk_r>
 8008ed0:	6030      	str	r0, [r6, #0]
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	f000 f9d1 	bl	800927c <_sbrk_r>
 8008eda:	1c43      	adds	r3, r0, #1
 8008edc:	d103      	bne.n	8008ee6 <sbrk_aligned+0x26>
 8008ede:	f04f 34ff 	mov.w	r4, #4294967295
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	bd70      	pop	{r4, r5, r6, pc}
 8008ee6:	1cc4      	adds	r4, r0, #3
 8008ee8:	f024 0403 	bic.w	r4, r4, #3
 8008eec:	42a0      	cmp	r0, r4
 8008eee:	d0f8      	beq.n	8008ee2 <sbrk_aligned+0x22>
 8008ef0:	1a21      	subs	r1, r4, r0
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 f9c2 	bl	800927c <_sbrk_r>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d1f2      	bne.n	8008ee2 <sbrk_aligned+0x22>
 8008efc:	e7ef      	b.n	8008ede <sbrk_aligned+0x1e>
 8008efe:	bf00      	nop
 8008f00:	20004e48 	.word	0x20004e48

08008f04 <_malloc_r>:
 8008f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f08:	1ccd      	adds	r5, r1, #3
 8008f0a:	f025 0503 	bic.w	r5, r5, #3
 8008f0e:	3508      	adds	r5, #8
 8008f10:	2d0c      	cmp	r5, #12
 8008f12:	bf38      	it	cc
 8008f14:	250c      	movcc	r5, #12
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	4606      	mov	r6, r0
 8008f1a:	db01      	blt.n	8008f20 <_malloc_r+0x1c>
 8008f1c:	42a9      	cmp	r1, r5
 8008f1e:	d904      	bls.n	8008f2a <_malloc_r+0x26>
 8008f20:	230c      	movs	r3, #12
 8008f22:	6033      	str	r3, [r6, #0]
 8008f24:	2000      	movs	r0, #0
 8008f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009000 <_malloc_r+0xfc>
 8008f2e:	f000 f869 	bl	8009004 <__malloc_lock>
 8008f32:	f8d8 3000 	ldr.w	r3, [r8]
 8008f36:	461c      	mov	r4, r3
 8008f38:	bb44      	cbnz	r4, 8008f8c <_malloc_r+0x88>
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7ff ffbf 	bl	8008ec0 <sbrk_aligned>
 8008f42:	1c43      	adds	r3, r0, #1
 8008f44:	4604      	mov	r4, r0
 8008f46:	d158      	bne.n	8008ffa <_malloc_r+0xf6>
 8008f48:	f8d8 4000 	ldr.w	r4, [r8]
 8008f4c:	4627      	mov	r7, r4
 8008f4e:	2f00      	cmp	r7, #0
 8008f50:	d143      	bne.n	8008fda <_malloc_r+0xd6>
 8008f52:	2c00      	cmp	r4, #0
 8008f54:	d04b      	beq.n	8008fee <_malloc_r+0xea>
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	4639      	mov	r1, r7
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	eb04 0903 	add.w	r9, r4, r3
 8008f60:	f000 f98c 	bl	800927c <_sbrk_r>
 8008f64:	4581      	cmp	r9, r0
 8008f66:	d142      	bne.n	8008fee <_malloc_r+0xea>
 8008f68:	6821      	ldr	r1, [r4, #0]
 8008f6a:	1a6d      	subs	r5, r5, r1
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7ff ffa6 	bl	8008ec0 <sbrk_aligned>
 8008f74:	3001      	adds	r0, #1
 8008f76:	d03a      	beq.n	8008fee <_malloc_r+0xea>
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	442b      	add	r3, r5
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	bb62      	cbnz	r2, 8008fe0 <_malloc_r+0xdc>
 8008f86:	f8c8 7000 	str.w	r7, [r8]
 8008f8a:	e00f      	b.n	8008fac <_malloc_r+0xa8>
 8008f8c:	6822      	ldr	r2, [r4, #0]
 8008f8e:	1b52      	subs	r2, r2, r5
 8008f90:	d420      	bmi.n	8008fd4 <_malloc_r+0xd0>
 8008f92:	2a0b      	cmp	r2, #11
 8008f94:	d917      	bls.n	8008fc6 <_malloc_r+0xc2>
 8008f96:	1961      	adds	r1, r4, r5
 8008f98:	42a3      	cmp	r3, r4
 8008f9a:	6025      	str	r5, [r4, #0]
 8008f9c:	bf18      	it	ne
 8008f9e:	6059      	strne	r1, [r3, #4]
 8008fa0:	6863      	ldr	r3, [r4, #4]
 8008fa2:	bf08      	it	eq
 8008fa4:	f8c8 1000 	streq.w	r1, [r8]
 8008fa8:	5162      	str	r2, [r4, r5]
 8008faa:	604b      	str	r3, [r1, #4]
 8008fac:	4630      	mov	r0, r6
 8008fae:	f000 f82f 	bl	8009010 <__malloc_unlock>
 8008fb2:	f104 000b 	add.w	r0, r4, #11
 8008fb6:	1d23      	adds	r3, r4, #4
 8008fb8:	f020 0007 	bic.w	r0, r0, #7
 8008fbc:	1ac2      	subs	r2, r0, r3
 8008fbe:	bf1c      	itt	ne
 8008fc0:	1a1b      	subne	r3, r3, r0
 8008fc2:	50a3      	strne	r3, [r4, r2]
 8008fc4:	e7af      	b.n	8008f26 <_malloc_r+0x22>
 8008fc6:	6862      	ldr	r2, [r4, #4]
 8008fc8:	42a3      	cmp	r3, r4
 8008fca:	bf0c      	ite	eq
 8008fcc:	f8c8 2000 	streq.w	r2, [r8]
 8008fd0:	605a      	strne	r2, [r3, #4]
 8008fd2:	e7eb      	b.n	8008fac <_malloc_r+0xa8>
 8008fd4:	4623      	mov	r3, r4
 8008fd6:	6864      	ldr	r4, [r4, #4]
 8008fd8:	e7ae      	b.n	8008f38 <_malloc_r+0x34>
 8008fda:	463c      	mov	r4, r7
 8008fdc:	687f      	ldr	r7, [r7, #4]
 8008fde:	e7b6      	b.n	8008f4e <_malloc_r+0x4a>
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	d1fb      	bne.n	8008fe0 <_malloc_r+0xdc>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	6053      	str	r3, [r2, #4]
 8008fec:	e7de      	b.n	8008fac <_malloc_r+0xa8>
 8008fee:	230c      	movs	r3, #12
 8008ff0:	6033      	str	r3, [r6, #0]
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f000 f80c 	bl	8009010 <__malloc_unlock>
 8008ff8:	e794      	b.n	8008f24 <_malloc_r+0x20>
 8008ffa:	6005      	str	r5, [r0, #0]
 8008ffc:	e7d6      	b.n	8008fac <_malloc_r+0xa8>
 8008ffe:	bf00      	nop
 8009000:	20004e4c 	.word	0x20004e4c

08009004 <__malloc_lock>:
 8009004:	4801      	ldr	r0, [pc, #4]	@ (800900c <__malloc_lock+0x8>)
 8009006:	f7ff bf00 	b.w	8008e0a <__retarget_lock_acquire_recursive>
 800900a:	bf00      	nop
 800900c:	20004e44 	.word	0x20004e44

08009010 <__malloc_unlock>:
 8009010:	4801      	ldr	r0, [pc, #4]	@ (8009018 <__malloc_unlock+0x8>)
 8009012:	f7ff befb 	b.w	8008e0c <__retarget_lock_release_recursive>
 8009016:	bf00      	nop
 8009018:	20004e44 	.word	0x20004e44

0800901c <__sflush_r>:
 800901c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009024:	0716      	lsls	r6, r2, #28
 8009026:	4605      	mov	r5, r0
 8009028:	460c      	mov	r4, r1
 800902a:	d454      	bmi.n	80090d6 <__sflush_r+0xba>
 800902c:	684b      	ldr	r3, [r1, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	dc02      	bgt.n	8009038 <__sflush_r+0x1c>
 8009032:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	dd48      	ble.n	80090ca <__sflush_r+0xae>
 8009038:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800903a:	2e00      	cmp	r6, #0
 800903c:	d045      	beq.n	80090ca <__sflush_r+0xae>
 800903e:	2300      	movs	r3, #0
 8009040:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009044:	682f      	ldr	r7, [r5, #0]
 8009046:	6a21      	ldr	r1, [r4, #32]
 8009048:	602b      	str	r3, [r5, #0]
 800904a:	d030      	beq.n	80090ae <__sflush_r+0x92>
 800904c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	0759      	lsls	r1, r3, #29
 8009052:	d505      	bpl.n	8009060 <__sflush_r+0x44>
 8009054:	6863      	ldr	r3, [r4, #4]
 8009056:	1ad2      	subs	r2, r2, r3
 8009058:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800905a:	b10b      	cbz	r3, 8009060 <__sflush_r+0x44>
 800905c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800905e:	1ad2      	subs	r2, r2, r3
 8009060:	2300      	movs	r3, #0
 8009062:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009064:	6a21      	ldr	r1, [r4, #32]
 8009066:	4628      	mov	r0, r5
 8009068:	47b0      	blx	r6
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	d106      	bne.n	800907e <__sflush_r+0x62>
 8009070:	6829      	ldr	r1, [r5, #0]
 8009072:	291d      	cmp	r1, #29
 8009074:	d82b      	bhi.n	80090ce <__sflush_r+0xb2>
 8009076:	4a2a      	ldr	r2, [pc, #168]	@ (8009120 <__sflush_r+0x104>)
 8009078:	40ca      	lsrs	r2, r1
 800907a:	07d6      	lsls	r6, r2, #31
 800907c:	d527      	bpl.n	80090ce <__sflush_r+0xb2>
 800907e:	2200      	movs	r2, #0
 8009080:	6062      	str	r2, [r4, #4]
 8009082:	04d9      	lsls	r1, r3, #19
 8009084:	6922      	ldr	r2, [r4, #16]
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	d504      	bpl.n	8009094 <__sflush_r+0x78>
 800908a:	1c42      	adds	r2, r0, #1
 800908c:	d101      	bne.n	8009092 <__sflush_r+0x76>
 800908e:	682b      	ldr	r3, [r5, #0]
 8009090:	b903      	cbnz	r3, 8009094 <__sflush_r+0x78>
 8009092:	6560      	str	r0, [r4, #84]	@ 0x54
 8009094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009096:	602f      	str	r7, [r5, #0]
 8009098:	b1b9      	cbz	r1, 80090ca <__sflush_r+0xae>
 800909a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800909e:	4299      	cmp	r1, r3
 80090a0:	d002      	beq.n	80090a8 <__sflush_r+0x8c>
 80090a2:	4628      	mov	r0, r5
 80090a4:	f7ff fec2 	bl	8008e2c <_free_r>
 80090a8:	2300      	movs	r3, #0
 80090aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ac:	e00d      	b.n	80090ca <__sflush_r+0xae>
 80090ae:	2301      	movs	r3, #1
 80090b0:	4628      	mov	r0, r5
 80090b2:	47b0      	blx	r6
 80090b4:	4602      	mov	r2, r0
 80090b6:	1c50      	adds	r0, r2, #1
 80090b8:	d1c9      	bne.n	800904e <__sflush_r+0x32>
 80090ba:	682b      	ldr	r3, [r5, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d0c6      	beq.n	800904e <__sflush_r+0x32>
 80090c0:	2b1d      	cmp	r3, #29
 80090c2:	d001      	beq.n	80090c8 <__sflush_r+0xac>
 80090c4:	2b16      	cmp	r3, #22
 80090c6:	d11e      	bne.n	8009106 <__sflush_r+0xea>
 80090c8:	602f      	str	r7, [r5, #0]
 80090ca:	2000      	movs	r0, #0
 80090cc:	e022      	b.n	8009114 <__sflush_r+0xf8>
 80090ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090d2:	b21b      	sxth	r3, r3
 80090d4:	e01b      	b.n	800910e <__sflush_r+0xf2>
 80090d6:	690f      	ldr	r7, [r1, #16]
 80090d8:	2f00      	cmp	r7, #0
 80090da:	d0f6      	beq.n	80090ca <__sflush_r+0xae>
 80090dc:	0793      	lsls	r3, r2, #30
 80090de:	680e      	ldr	r6, [r1, #0]
 80090e0:	bf08      	it	eq
 80090e2:	694b      	ldreq	r3, [r1, #20]
 80090e4:	600f      	str	r7, [r1, #0]
 80090e6:	bf18      	it	ne
 80090e8:	2300      	movne	r3, #0
 80090ea:	eba6 0807 	sub.w	r8, r6, r7
 80090ee:	608b      	str	r3, [r1, #8]
 80090f0:	f1b8 0f00 	cmp.w	r8, #0
 80090f4:	dde9      	ble.n	80090ca <__sflush_r+0xae>
 80090f6:	6a21      	ldr	r1, [r4, #32]
 80090f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090fa:	4643      	mov	r3, r8
 80090fc:	463a      	mov	r2, r7
 80090fe:	4628      	mov	r0, r5
 8009100:	47b0      	blx	r6
 8009102:	2800      	cmp	r0, #0
 8009104:	dc08      	bgt.n	8009118 <__sflush_r+0xfc>
 8009106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009118:	4407      	add	r7, r0
 800911a:	eba8 0800 	sub.w	r8, r8, r0
 800911e:	e7e7      	b.n	80090f0 <__sflush_r+0xd4>
 8009120:	20400001 	.word	0x20400001

08009124 <_fflush_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	690b      	ldr	r3, [r1, #16]
 8009128:	4605      	mov	r5, r0
 800912a:	460c      	mov	r4, r1
 800912c:	b913      	cbnz	r3, 8009134 <_fflush_r+0x10>
 800912e:	2500      	movs	r5, #0
 8009130:	4628      	mov	r0, r5
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	b118      	cbz	r0, 800913e <_fflush_r+0x1a>
 8009136:	6a03      	ldr	r3, [r0, #32]
 8009138:	b90b      	cbnz	r3, 800913e <_fflush_r+0x1a>
 800913a:	f7ff fc71 	bl	8008a20 <__sinit>
 800913e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f3      	beq.n	800912e <_fflush_r+0xa>
 8009146:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009148:	07d0      	lsls	r0, r2, #31
 800914a:	d404      	bmi.n	8009156 <_fflush_r+0x32>
 800914c:	0599      	lsls	r1, r3, #22
 800914e:	d402      	bmi.n	8009156 <_fflush_r+0x32>
 8009150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009152:	f7ff fe5a 	bl	8008e0a <__retarget_lock_acquire_recursive>
 8009156:	4628      	mov	r0, r5
 8009158:	4621      	mov	r1, r4
 800915a:	f7ff ff5f 	bl	800901c <__sflush_r>
 800915e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009160:	07da      	lsls	r2, r3, #31
 8009162:	4605      	mov	r5, r0
 8009164:	d4e4      	bmi.n	8009130 <_fflush_r+0xc>
 8009166:	89a3      	ldrh	r3, [r4, #12]
 8009168:	059b      	lsls	r3, r3, #22
 800916a:	d4e1      	bmi.n	8009130 <_fflush_r+0xc>
 800916c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800916e:	f7ff fe4d 	bl	8008e0c <__retarget_lock_release_recursive>
 8009172:	e7dd      	b.n	8009130 <_fflush_r+0xc>

08009174 <__swhatbuf_r>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	460c      	mov	r4, r1
 8009178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917c:	2900      	cmp	r1, #0
 800917e:	b096      	sub	sp, #88	@ 0x58
 8009180:	4615      	mov	r5, r2
 8009182:	461e      	mov	r6, r3
 8009184:	da0d      	bge.n	80091a2 <__swhatbuf_r+0x2e>
 8009186:	89a3      	ldrh	r3, [r4, #12]
 8009188:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800918c:	f04f 0100 	mov.w	r1, #0
 8009190:	bf14      	ite	ne
 8009192:	2340      	movne	r3, #64	@ 0x40
 8009194:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009198:	2000      	movs	r0, #0
 800919a:	6031      	str	r1, [r6, #0]
 800919c:	602b      	str	r3, [r5, #0]
 800919e:	b016      	add	sp, #88	@ 0x58
 80091a0:	bd70      	pop	{r4, r5, r6, pc}
 80091a2:	466a      	mov	r2, sp
 80091a4:	f000 f848 	bl	8009238 <_fstat_r>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	dbec      	blt.n	8009186 <__swhatbuf_r+0x12>
 80091ac:	9901      	ldr	r1, [sp, #4]
 80091ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091b6:	4259      	negs	r1, r3
 80091b8:	4159      	adcs	r1, r3
 80091ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091be:	e7eb      	b.n	8009198 <__swhatbuf_r+0x24>

080091c0 <__smakebuf_r>:
 80091c0:	898b      	ldrh	r3, [r1, #12]
 80091c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091c4:	079d      	lsls	r5, r3, #30
 80091c6:	4606      	mov	r6, r0
 80091c8:	460c      	mov	r4, r1
 80091ca:	d507      	bpl.n	80091dc <__smakebuf_r+0x1c>
 80091cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	6123      	str	r3, [r4, #16]
 80091d4:	2301      	movs	r3, #1
 80091d6:	6163      	str	r3, [r4, #20]
 80091d8:	b003      	add	sp, #12
 80091da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091dc:	ab01      	add	r3, sp, #4
 80091de:	466a      	mov	r2, sp
 80091e0:	f7ff ffc8 	bl	8009174 <__swhatbuf_r>
 80091e4:	9f00      	ldr	r7, [sp, #0]
 80091e6:	4605      	mov	r5, r0
 80091e8:	4639      	mov	r1, r7
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7ff fe8a 	bl	8008f04 <_malloc_r>
 80091f0:	b948      	cbnz	r0, 8009206 <__smakebuf_r+0x46>
 80091f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f6:	059a      	lsls	r2, r3, #22
 80091f8:	d4ee      	bmi.n	80091d8 <__smakebuf_r+0x18>
 80091fa:	f023 0303 	bic.w	r3, r3, #3
 80091fe:	f043 0302 	orr.w	r3, r3, #2
 8009202:	81a3      	strh	r3, [r4, #12]
 8009204:	e7e2      	b.n	80091cc <__smakebuf_r+0xc>
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	6020      	str	r0, [r4, #0]
 800920a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800920e:	81a3      	strh	r3, [r4, #12]
 8009210:	9b01      	ldr	r3, [sp, #4]
 8009212:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009216:	b15b      	cbz	r3, 8009230 <__smakebuf_r+0x70>
 8009218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800921c:	4630      	mov	r0, r6
 800921e:	f000 f81d 	bl	800925c <_isatty_r>
 8009222:	b128      	cbz	r0, 8009230 <__smakebuf_r+0x70>
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	f043 0301 	orr.w	r3, r3, #1
 800922e:	81a3      	strh	r3, [r4, #12]
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	431d      	orrs	r5, r3
 8009234:	81a5      	strh	r5, [r4, #12]
 8009236:	e7cf      	b.n	80091d8 <__smakebuf_r+0x18>

08009238 <_fstat_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4d07      	ldr	r5, [pc, #28]	@ (8009258 <_fstat_r+0x20>)
 800923c:	2300      	movs	r3, #0
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	602b      	str	r3, [r5, #0]
 8009246:	f7f8 ff54 	bl	80020f2 <_fstat>
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	d102      	bne.n	8009254 <_fstat_r+0x1c>
 800924e:	682b      	ldr	r3, [r5, #0]
 8009250:	b103      	cbz	r3, 8009254 <_fstat_r+0x1c>
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	bd38      	pop	{r3, r4, r5, pc}
 8009256:	bf00      	nop
 8009258:	20004e40 	.word	0x20004e40

0800925c <_isatty_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	4d06      	ldr	r5, [pc, #24]	@ (8009278 <_isatty_r+0x1c>)
 8009260:	2300      	movs	r3, #0
 8009262:	4604      	mov	r4, r0
 8009264:	4608      	mov	r0, r1
 8009266:	602b      	str	r3, [r5, #0]
 8009268:	f7f8 ff53 	bl	8002112 <_isatty>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_isatty_r+0x1a>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	b103      	cbz	r3, 8009276 <_isatty_r+0x1a>
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	20004e40 	.word	0x20004e40

0800927c <_sbrk_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d06      	ldr	r5, [pc, #24]	@ (8009298 <_sbrk_r+0x1c>)
 8009280:	2300      	movs	r3, #0
 8009282:	4604      	mov	r4, r0
 8009284:	4608      	mov	r0, r1
 8009286:	602b      	str	r3, [r5, #0]
 8009288:	f7f8 ff5c 	bl	8002144 <_sbrk>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_sbrk_r+0x1a>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_sbrk_r+0x1a>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	20004e40 	.word	0x20004e40

0800929c <_init>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr

080092a8 <_fini>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr
