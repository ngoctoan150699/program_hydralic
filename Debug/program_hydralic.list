
program_hydralic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009074  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08009204  08009204  0000a204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800932c  0800932c  0000b0b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800932c  0800932c  0000a32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009334  08009334  0000b0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009334  08009334  0000a334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009338  08009338  0000a338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800933c  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0b8  2**0
                  CONTENTS
 10 .bss          00004d90  200000b8  200000b8  0000b0b8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004e48  20004e48  0000b0b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c59  00000000  00000000  0000b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e5b  00000000  00000000  00023d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00027ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f95  00000000  00000000  00028ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000055c0  00000000  00000000  00029f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017965  00000000  00000000  0002f54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4240  00000000  00000000  00046eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b0f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c68  00000000  00000000  0011b138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00120da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091ec 	.word	0x080091ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	080091ec 	.word	0x080091ec

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_ldivmod>:
 80009bc:	b97b      	cbnz	r3, 80009de <__aeabi_ldivmod+0x22>
 80009be:	b972      	cbnz	r2, 80009de <__aeabi_ldivmod+0x22>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bfbe      	ittt	lt
 80009c4:	2000      	movlt	r0, #0
 80009c6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80009ca:	e006      	blt.n	80009da <__aeabi_ldivmod+0x1e>
 80009cc:	bf08      	it	eq
 80009ce:	2800      	cmpeq	r0, #0
 80009d0:	bf1c      	itt	ne
 80009d2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80009d6:	f04f 30ff 	movne.w	r0, #4294967295
 80009da:	f000 b9b5 	b.w	8000d48 <__aeabi_idiv0>
 80009de:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e6:	2900      	cmp	r1, #0
 80009e8:	db09      	blt.n	80009fe <__aeabi_ldivmod+0x42>
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db1a      	blt.n	8000a24 <__aeabi_ldivmod+0x68>
 80009ee:	f000 f84d 	bl	8000a8c <__udivmoddi4>
 80009f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009fa:	b004      	add	sp, #16
 80009fc:	4770      	bx	lr
 80009fe:	4240      	negs	r0, r0
 8000a00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db1b      	blt.n	8000a40 <__aeabi_ldivmod+0x84>
 8000a08:	f000 f840 	bl	8000a8c <__udivmoddi4>
 8000a0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a14:	b004      	add	sp, #16
 8000a16:	4240      	negs	r0, r0
 8000a18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a1c:	4252      	negs	r2, r2
 8000a1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a22:	4770      	bx	lr
 8000a24:	4252      	negs	r2, r2
 8000a26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a2a:	f000 f82f 	bl	8000a8c <__udivmoddi4>
 8000a2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a36:	b004      	add	sp, #16
 8000a38:	4240      	negs	r0, r0
 8000a3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a3e:	4770      	bx	lr
 8000a40:	4252      	negs	r2, r2
 8000a42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a46:	f000 f821 	bl	8000a8c <__udivmoddi4>
 8000a4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a52:	b004      	add	sp, #16
 8000a54:	4252      	negs	r2, r2
 8000a56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <u_timer_expired>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool u_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8000d4c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6178      	str	r0, [r7, #20]
 8000d56:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8000d5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d62:	eb10 0a02 	adds.w	sl, r0, r2
 8000d66:	eb41 0b03 	adc.w	fp, r1, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d70:	4592      	cmp	sl, r2
 8000d72:	eb7b 0303 	sbcs.w	r3, fp, r3
 8000d76:	d206      	bcs.n	8000d86 <u_timer_expired+0x3a>
 8000d78:	6979      	ldr	r1, [r7, #20]
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	f04f 0300 	mov.w	r3, #0
 8000d82:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	d10d      	bne.n	8000dac <u_timer_expired+0x60>
 8000d90:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000d94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d98:	1886      	adds	r6, r0, r2
 8000d9a:	603e      	str	r6, [r7, #0]
 8000d9c:	eb41 0303 	adc.w	r3, r1, r3
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000da8:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000db6:	4290      	cmp	r0, r2
 8000db8:	eb71 0303 	sbcs.w	r3, r1, r3
 8000dbc:	d201      	bcs.n	8000dc2 <u_timer_expired+0x76>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e022      	b.n	8000e08 <u_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000dcc:	ebb0 0802 	subs.w	r8, r0, r2
 8000dd0:	eb61 0903 	sbc.w	r9, r1, r3
 8000dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dd8:	4542      	cmp	r2, r8
 8000dda:	eb73 0309 	sbcs.w	r3, r3, r9
 8000dde:	d207      	bcs.n	8000df0 <u_timer_expired+0xa4>
 8000de0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000de8:	1884      	adds	r4, r0, r2
 8000dea:	eb41 0503 	adc.w	r5, r1, r3
 8000dee:	e007      	b.n	8000e00 <u_timer_expired+0xb4>
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000df6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dfa:	1884      	adds	r4, r0, r2
 8000dfc:	eb41 0503 	adc.w	r5, r1, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e12:	4770      	bx	lr

08000e14 <readGPIOInputs>:
//            }
//        }
//    }
//}

void readGPIOInputs(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
    gpioInputStates[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000e18:	2140      	movs	r1, #64	@ 0x40
 8000e1a:	4815      	ldr	r0, [pc, #84]	@ (8000e70 <readGPIOInputs+0x5c>)
 8000e1c:	f003 fbc6 	bl	80045ac <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <readGPIOInputs+0x60>)
 8000e26:	701a      	strb	r2, [r3, #0]
    gpioInputStates[1] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000e28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e2c:	4812      	ldr	r0, [pc, #72]	@ (8000e78 <readGPIOInputs+0x64>)
 8000e2e:	f003 fbbd 	bl	80045ac <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <readGPIOInputs+0x60>)
 8000e38:	705a      	strb	r2, [r3, #1]
    gpioInputStates[2] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8000e3a:	2180      	movs	r1, #128	@ 0x80
 8000e3c:	480e      	ldr	r0, [pc, #56]	@ (8000e78 <readGPIOInputs+0x64>)
 8000e3e:	f003 fbb5 	bl	80045ac <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <readGPIOInputs+0x60>)
 8000e48:	709a      	strb	r2, [r3, #2]
    gpioInputStates[3] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 8000e4a:	2140      	movs	r1, #64	@ 0x40
 8000e4c:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <readGPIOInputs+0x64>)
 8000e4e:	f003 fbad 	bl	80045ac <HAL_GPIO_ReadPin>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <readGPIOInputs+0x60>)
 8000e58:	70da      	strb	r2, [r3, #3]
    gpioInputStates[4] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000e5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e5e:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <readGPIOInputs+0x64>)
 8000e60:	f003 fba4 	bl	80045ac <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b02      	ldr	r3, [pc, #8]	@ (8000e74 <readGPIOInputs+0x60>)
 8000e6a:	711a      	strb	r2, [r3, #4]
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40020000 	.word	0x40020000
 8000e74:	200000f8 	.word	0x200000f8
 8000e78:	40021400 	.word	0x40021400

08000e7c <manualMode>:
void manualMode(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
    modeLift = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_RESET ? true : false; // TRUE: bánh xe, FALSE: pallet
 8000e82:	2104      	movs	r1, #4
 8000e84:	481a      	ldr	r0, [pc, #104]	@ (8000ef0 <manualMode+0x74>)
 8000e86:	f003 fb91 	bl	80045ac <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	bf0c      	ite	eq
 8000e90:	2301      	moveq	r3, #1
 8000e92:	2300      	movne	r3, #0
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <manualMode+0x78>)
 8000e98:	701a      	strb	r2, [r3, #0]

    bool liftPressed = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7) == GPIO_PIN_RESET ? true : false;
 8000e9a:	2180      	movs	r1, #128	@ 0x80
 8000e9c:	4816      	ldr	r0, [pc, #88]	@ (8000ef8 <manualMode+0x7c>)
 8000e9e:	f003 fb85 	bl	80045ac <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2301      	moveq	r3, #1
 8000eaa:	2300      	movne	r3, #0
 8000eac:	71fb      	strb	r3, [r7, #7]
    bool lowerPressed = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == GPIO_PIN_RESET ? true : false;
 8000eae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb2:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <manualMode+0x7c>)
 8000eb4:	f003 fb7a 	bl	80045ac <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bf0c      	ite	eq
 8000ebe:	2301      	moveq	r3, #1
 8000ec0:	2300      	movne	r3, #0
 8000ec2:	71bb      	strb	r3, [r7, #6]

    if (liftPressed) {
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <manualMode+0x56>
        buttonPressCount = 1;  // Nâng
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <manualMode+0x80>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
        buttonPressCount = 3;  // Hạ
    }
    else {
        buttonPressCount = 0;  // Tắt thủy lực
    }
}
 8000ed0:	e009      	b.n	8000ee6 <manualMode+0x6a>
    else if (lowerPressed) {
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <manualMode+0x64>
        buttonPressCount = 3;  // Hạ
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <manualMode+0x80>)
 8000eda:	2203      	movs	r2, #3
 8000edc:	701a      	strb	r2, [r3, #0]
}
 8000ede:	e002      	b.n	8000ee6 <manualMode+0x6a>
        buttonPressCount = 0;  // Tắt thủy lực
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <manualMode+0x80>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	200000d5 	.word	0x200000d5
 8000ef8:	40021400 	.word	0x40021400
 8000efc:	200000d4 	.word	0x200000d4

08000f00 <autoMode>:

void autoMode()
{
 8000f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f04:	b08c      	sub	sp, #48	@ 0x30
 8000f06:	af02      	add	r7, sp, #8
  switch (autoStep)
 8000f08:	4b9f      	ldr	r3, [pc, #636]	@ (8001188 <autoMode+0x288>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	f200 812b 	bhi.w	800116a <autoMode+0x26a>
 8000f14:	a201      	add	r2, pc, #4	@ (adr r2, 8000f1c <autoMode+0x1c>)
 8000f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1a:	bf00      	nop
 8000f1c:	08000f2d 	.word	0x08000f2d
 8000f20:	08000fc1 	.word	0x08000fc1
 8000f24:	08001055 	.word	0x08001055
 8000f28:	080010e1 	.word	0x080010e1
  {
  case 0: // nâng pallet
    buttonPressCount = 1;
 8000f2c:	4b97      	ldr	r3, [pc, #604]	@ (800118c <autoMode+0x28c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
    modeLift = false;
 8000f32:	4b97      	ldr	r3, [pc, #604]	@ (8001190 <autoMode+0x290>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LIFT_PALLET, HAL_GetTick()))
 8000f38:	f002 fa16 	bl	8003368 <HAL_GetTick>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2200      	movs	r2, #0
 8000f40:	623b      	str	r3, [r7, #32]
 8000f42:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f44:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000f48:	e9cd 3400 	strd	r3, r4, [sp]
 8000f4c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	488f      	ldr	r0, [pc, #572]	@ (8001194 <autoMode+0x294>)
 8000f56:	f7ff fef9 	bl	8000d4c <u_timer_expired>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <autoMode+0x66>
    {
      stepDone[0] = true;
 8000f60:	4b8d      	ldr	r3, [pc, #564]	@ (8001198 <autoMode+0x298>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
    }
    if (stepDone[0])
 8000f66:	4b8c      	ldr	r3, [pc, #560]	@ (8001198 <autoMode+0x298>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80ff 	beq.w	800116e <autoMode+0x26e>
    {
      buttonPressCount = 0; // off thuỷ lực
 8000f70:	4b86      	ldr	r3, [pc, #536]	@ (800118c <autoMode+0x28c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 8000f76:	f002 f9f7 	bl	8003368 <HAL_GetTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	61fa      	str	r2, [r7, #28]
 8000f82:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000f86:	e9cd 3400 	strd	r3, r4, [sp]
 8000f8a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	4882      	ldr	r0, [pc, #520]	@ (800119c <autoMode+0x29c>)
 8000f94:	f7ff feda 	bl	8000d4c <u_timer_expired>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 80e7 	beq.w	800116e <autoMode+0x26e>
      {
        stepDone[0] = false;
 8000fa0:	4b7d      	ldr	r3, [pc, #500]	@ (8001198 <autoMode+0x298>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	2100      	movs	r1, #0
 8000faa:	487a      	ldr	r0, [pc, #488]	@ (8001194 <autoMode+0x294>)
 8000fac:	f007 fe5c 	bl	8008c68 <memset>
        autoStep++;
 8000fb0:	4b75      	ldr	r3, [pc, #468]	@ (8001188 <autoMode+0x288>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b73      	ldr	r3, [pc, #460]	@ (8001188 <autoMode+0x288>)
 8000fbc:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8000fbe:	e0d6      	b.n	800116e <autoMode+0x26e>

  case 1: // hạ bánh xe
    buttonPressCount = 1;
 8000fc0:	4b72      	ldr	r3, [pc, #456]	@ (800118c <autoMode+0x28c>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
    modeLift = true;
 8000fc6:	4b72      	ldr	r3, [pc, #456]	@ (8001190 <autoMode+0x290>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LOWER_WHEEL, HAL_GetTick()))
 8000fcc:	f002 f9cc 	bl	8003368 <HAL_GetTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	617a      	str	r2, [r7, #20]
 8000fd8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000fdc:	e9cd 3400 	strd	r3, r4, [sp]
 8000fe0:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	486a      	ldr	r0, [pc, #424]	@ (8001194 <autoMode+0x294>)
 8000fea:	f7ff feaf 	bl	8000d4c <u_timer_expired>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <autoMode+0xfa>
    {
      stepDone[1] = true;
 8000ff4:	4b68      	ldr	r3, [pc, #416]	@ (8001198 <autoMode+0x298>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	705a      	strb	r2, [r3, #1]
    }
    if (stepDone[1])
 8000ffa:	4b67      	ldr	r3, [pc, #412]	@ (8001198 <autoMode+0x298>)
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80b7 	beq.w	8001172 <autoMode+0x272>
    {
      buttonPressCount = 0; // off thuỷ lực
 8001004:	4b61      	ldr	r3, [pc, #388]	@ (800118c <autoMode+0x28c>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 800100a:	f002 f9ad 	bl	8003368 <HAL_GetTick>
 800100e:	4603      	mov	r3, r0
 8001010:	2200      	movs	r2, #0
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	60fa      	str	r2, [r7, #12]
 8001016:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800101a:	e9cd 3400 	strd	r3, r4, [sp]
 800101e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	485d      	ldr	r0, [pc, #372]	@ (800119c <autoMode+0x29c>)
 8001028:	f7ff fe90 	bl	8000d4c <u_timer_expired>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 809f 	beq.w	8001172 <autoMode+0x272>
      {
        stepDone[1] = false;
 8001034:	4b58      	ldr	r3, [pc, #352]	@ (8001198 <autoMode+0x298>)
 8001036:	2200      	movs	r2, #0
 8001038:	705a      	strb	r2, [r3, #1]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 800103a:	2210      	movs	r2, #16
 800103c:	2100      	movs	r1, #0
 800103e:	4855      	ldr	r0, [pc, #340]	@ (8001194 <autoMode+0x294>)
 8001040:	f007 fe12 	bl	8008c68 <memset>
        autoStep++;
 8001044:	4b50      	ldr	r3, [pc, #320]	@ (8001188 <autoMode+0x288>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	3301      	adds	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b4e      	ldr	r3, [pc, #312]	@ (8001188 <autoMode+0x288>)
 8001050:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8001052:	e08e      	b.n	8001172 <autoMode+0x272>

  case 2: // hạ pallet
    buttonPressCount = 3;
 8001054:	4b4d      	ldr	r3, [pc, #308]	@ (800118c <autoMode+0x28c>)
 8001056:	2203      	movs	r2, #3
 8001058:	701a      	strb	r2, [r3, #0]
    modeLift = false;
 800105a:	4b4d      	ldr	r3, [pc, #308]	@ (8001190 <autoMode+0x290>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_DOWN_PALLET, HAL_GetTick()))
 8001060:	f002 f982 	bl	8003368 <HAL_GetTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2200      	movs	r2, #0
 8001068:	603b      	str	r3, [r7, #0]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001070:	e9cd 3400 	strd	r3, r4, [sp]
 8001074:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	4845      	ldr	r0, [pc, #276]	@ (8001194 <autoMode+0x294>)
 800107e:	f7ff fe65 	bl	8000d4c <u_timer_expired>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <autoMode+0x18e>
    {
      stepDone[2] = true;
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <autoMode+0x298>)
 800108a:	2201      	movs	r2, #1
 800108c:	709a      	strb	r2, [r3, #2]
    }
    if (stepDone[2])
 800108e:	4b42      	ldr	r3, [pc, #264]	@ (8001198 <autoMode+0x298>)
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d06f      	beq.n	8001176 <autoMode+0x276>
    {
      buttonPressCount = 0; // off thuỷ lực
 8001096:	4b3d      	ldr	r3, [pc, #244]	@ (800118c <autoMode+0x28c>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 800109c:	f002 f964 	bl	8003368 <HAL_GetTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2200      	movs	r2, #0
 80010a4:	469a      	mov	sl, r3
 80010a6:	4693      	mov	fp, r2
 80010a8:	e9cd ab00 	strd	sl, fp, [sp]
 80010ac:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	4839      	ldr	r0, [pc, #228]	@ (800119c <autoMode+0x29c>)
 80010b6:	f7ff fe49 	bl	8000d4c <u_timer_expired>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d05a      	beq.n	8001176 <autoMode+0x276>
      {
        stepDone[2] = false;
 80010c0:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <autoMode+0x298>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	709a      	strb	r2, [r3, #2]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 80010c6:	2210      	movs	r2, #16
 80010c8:	2100      	movs	r1, #0
 80010ca:	4832      	ldr	r0, [pc, #200]	@ (8001194 <autoMode+0x294>)
 80010cc:	f007 fdcc 	bl	8008c68 <memset>
        autoStep++;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <autoMode+0x288>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <autoMode+0x288>)
 80010dc:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 80010de:	e04a      	b.n	8001176 <autoMode+0x276>

  case 3: // nâng bánh xe
    buttonPressCount = 3;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <autoMode+0x28c>)
 80010e2:	2203      	movs	r2, #3
 80010e4:	701a      	strb	r2, [r3, #0]
    modeLift = true;
 80010e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <autoMode+0x290>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LIFT_WHEEL, HAL_GetTick()))
 80010ec:	f002 f93c 	bl	8003368 <HAL_GetTick>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2200      	movs	r2, #0
 80010f4:	4698      	mov	r8, r3
 80010f6:	4691      	mov	r9, r2
 80010f8:	e9cd 8900 	strd	r8, r9, [sp]
 80010fc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	4823      	ldr	r0, [pc, #140]	@ (8001194 <autoMode+0x294>)
 8001106:	f7ff fe21 	bl	8000d4c <u_timer_expired>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <autoMode+0x216>
    {
      stepDone[3] = true;
 8001110:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <autoMode+0x298>)
 8001112:	2201      	movs	r2, #1
 8001114:	70da      	strb	r2, [r3, #3]
    }
    if (stepDone[3])
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <autoMode+0x298>)
 8001118:	78db      	ldrb	r3, [r3, #3]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d02d      	beq.n	800117a <autoMode+0x27a>
    {
      buttonPressCount = 0; // off thuỷ lực
 800111e:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <autoMode+0x28c>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 8001124:	f002 f920 	bl	8003368 <HAL_GetTick>
 8001128:	4603      	mov	r3, r0
 800112a:	2200      	movs	r2, #0
 800112c:	461c      	mov	r4, r3
 800112e:	4615      	mov	r5, r2
 8001130:	e9cd 4500 	strd	r4, r5, [sp]
 8001134:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	4817      	ldr	r0, [pc, #92]	@ (800119c <autoMode+0x29c>)
 800113e:	f7ff fe05 	bl	8000d4c <u_timer_expired>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d018      	beq.n	800117a <autoMode+0x27a>
      {
        stepDone[3] = false;
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <autoMode+0x298>)
 800114a:	2200      	movs	r2, #0
 800114c:	70da      	strb	r2, [r3, #3]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 800114e:	2210      	movs	r2, #16
 8001150:	2100      	movs	r1, #0
 8001152:	4810      	ldr	r0, [pc, #64]	@ (8001194 <autoMode+0x294>)
 8001154:	f007 fd88 	bl	8008c68 <memset>
        autoStep = 0;
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <autoMode+0x288>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
        totalCycle++;
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <autoMode+0x2a0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	4a0e      	ldr	r2, [pc, #56]	@ (80011a0 <autoMode+0x2a0>)
 8001166:	6013      	str	r3, [r2, #0]
      }
    }
    break;
 8001168:	e007      	b.n	800117a <autoMode+0x27a>

  default:
    break;
 800116a:	bf00      	nop
 800116c:	e006      	b.n	800117c <autoMode+0x27c>
    break;
 800116e:	bf00      	nop
 8001170:	e004      	b.n	800117c <autoMode+0x27c>
    break;
 8001172:	bf00      	nop
 8001174:	e002      	b.n	800117c <autoMode+0x27c>
    break;
 8001176:	bf00      	nop
 8001178:	e000      	b.n	800117c <autoMode+0x27c>
    break;
 800117a:	bf00      	nop
  }
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	@ 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001186:	bf00      	nop
 8001188:	200000d6 	.word	0x200000d6
 800118c:	200000d4 	.word	0x200000d4
 8001190:	200000d5 	.word	0x200000d5
 8001194:	200000e8 	.word	0x200000e8
 8001198:	200000dc 	.word	0x200000dc
 800119c:	200000f0 	.word	0x200000f0
 80011a0:	200000d8 	.word	0x200000d8

080011a4 <performAction>:

void performAction(int count, bool Mode) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	switch (count) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d003      	beq.n	80011be <performAction+0x1a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d00d      	beq.n	80011d8 <performAction+0x34>
 80011bc:	e019      	b.n	80011f2 <performAction+0x4e>
	case 1:
		if (Mode) {
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <performAction+0x2a>
			hydraulicSetState(wheel_down_state);
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <performAction+0x60>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f002 f822 	bl	8003210 <hydraulicSetState>
			// Thực hiện hành động hạ bánh xe
		} else {
			hydraulicSetState(pallet_up_state);
			// Thực hiện hành động nâng pallet
		}
		break;
 80011cc:	e016      	b.n	80011fc <performAction+0x58>
			hydraulicSetState(pallet_up_state);
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <performAction+0x64>)
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	f002 f81d 	bl	8003210 <hydraulicSetState>
		break;
 80011d6:	e011      	b.n	80011fc <performAction+0x58>
	case 3:
		if (Mode) {
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d004      	beq.n	80011e8 <performAction+0x44>
			hydraulicSetState(wheel_up_state);
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <performAction+0x68>)
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	f002 f815 	bl	8003210 <hydraulicSetState>
			// Thực hiện hành động nâng bánh xe
		} else {
			hydraulicSetState(pallet_down_state);
			// Thực hiện hành động hạ pallet
		}
		break;
 80011e6:	e009      	b.n	80011fc <performAction+0x58>
			hydraulicSetState(pallet_down_state);
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <performAction+0x6c>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	f002 f810 	bl	8003210 <hydraulicSetState>
		break;
 80011f0:	e004      	b.n	80011fc <performAction+0x58>
	default:
		hydraulicSetState(free_all_state);
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <performAction+0x70>)
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	f002 f80b 	bl	8003210 <hydraulicSetState>
		// Trạng thái tự do
		break;
 80011fa:	bf00      	nop
	}
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	08009298 	.word	0x08009298
 8001208:	0800929c 	.word	0x0800929c
 800120c:	08009294 	.word	0x08009294
 8001210:	080092a0 	.word	0x080092a0
 8001214:	080092a4 	.word	0x080092a4

08001218 <map_adc_to_float>:
float map_adc_to_float(uint16_t adc) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
    if (adc < MIN_ADC) adc = MIN_ADC;
    if (adc > MAX_ADC) adc = MAX_ADC;
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001228:	d902      	bls.n	8001230 <map_adc_to_float+0x18>
 800122a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800122e:	80fb      	strh	r3, [r7, #6]
    return ((adc - MIN_ADC) / (float)(MAX_ADC - MIN_ADC)) * MAX_FLOAT;
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001254 <map_adc_to_float+0x3c>
 800123e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001242:	eef0 7a66 	vmov.f32	s15, s13
}
 8001246:	eeb0 0a67 	vmov.f32	s0, s15
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	44fa0000 	.word	0x44fa0000

08001258 <HandleAutoMode>:
        target_speed = 0;
    }
}

// Hàm xử lý chế độ Auto
void HandleAutoMode() {
 8001258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af02      	add	r7, sp, #8
    static uint64_t auto_timer = 0;  // Bộ đếm thời gian
    static int auto_state = 0;        // Trạng thái: 0 = thuận, 1 = ngược, 2 = dừng

    // Kiểm tra thời gian đã hết hạn chưa
    if (u_timer_expired(&auto_timer, (auto_state == 2) ? STOP_TIME : AUTO_TIME, HAL_GetTick())) {
 8001260:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <HandleAutoMode+0x8c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d104      	bne.n	8001272 <HandleAutoMode+0x1a>
 8001268:	f241 3488 	movw	r4, #5000	@ 0x1388
 800126c:	f04f 0500 	mov.w	r5, #0
 8001270:	e003      	b.n	800127a <HandleAutoMode+0x22>
 8001272:	f644 6420 	movw	r4, #20000	@ 0x4e20
 8001276:	f04f 0500 	mov.w	r5, #0
 800127a:	f002 f875 	bl	8003368 <HAL_GetTick>
 800127e:	4603      	mov	r3, r0
 8001280:	2200      	movs	r2, #0
 8001282:	4698      	mov	r8, r3
 8001284:	4691      	mov	r9, r2
 8001286:	e9cd 8900 	strd	r8, r9, [sp]
 800128a:	4622      	mov	r2, r4
 800128c:	462b      	mov	r3, r5
 800128e:	4816      	ldr	r0, [pc, #88]	@ (80012e8 <HandleAutoMode+0x90>)
 8001290:	f7ff fd5c 	bl	8000d4c <u_timer_expired>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d020      	beq.n	80012dc <HandleAutoMode+0x84>
        // Xử lý hành động theo trạng thái hiện tại
        if (auto_state == 0) {
 800129a:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HandleAutoMode+0x8c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d103      	bne.n	80012aa <HandleAutoMode+0x52>
            dir = 1;  // Chạy thuận
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HandleAutoMode+0x94>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	e00a      	b.n	80012c0 <HandleAutoMode+0x68>
        } else if (auto_state == 1) {
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <HandleAutoMode+0x8c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d103      	bne.n	80012ba <HandleAutoMode+0x62>
            dir = 3;  // Chạy ngược
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <HandleAutoMode+0x94>)
 80012b4:	2203      	movs	r2, #3
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e002      	b.n	80012c0 <HandleAutoMode+0x68>
        } else {
            dir = 0;  // Dừng
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <HandleAutoMode+0x94>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
        }

        // Chuyển sang trạng thái tiếp theo (0 -> 1 -> 2 -> 0)
        auto_state = (auto_state + 1) % 3;
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <HandleAutoMode+0x8c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	1c59      	adds	r1, r3, #1
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HandleAutoMode+0x98>)
 80012c8:	fb83 3201 	smull	r3, r2, r3, r1
 80012cc:	17cb      	asrs	r3, r1, #31
 80012ce:	1ad2      	subs	r2, r2, r3
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	1aca      	subs	r2, r1, r3
 80012d8:	4b02      	ldr	r3, [pc, #8]	@ (80012e4 <HandleAutoMode+0x8c>)
 80012da:	601a      	str	r2, [r3, #0]
    }
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012e4:	20000264 	.word	0x20000264
 80012e8:	20000268 	.word	0x20000268
 80012ec:	2000010c 	.word	0x2000010c
 80012f0:	55555556 	.word	0x55555556

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f8:	f001 ffd0 	bl	800329c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fc:	f000 f85a 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001300:	f000 f9c4 	bl	800168c <MX_GPIO_Init>
  MX_CAN1_Init();
 8001304:	f000 f8c0 	bl	8001488 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8001308:	f000 f996 	bl	8001638 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 800130c:	f000 f8f2 	bl	80014f4 <MX_CAN2_Init>
  MX_SPI1_Init();
 8001310:	f000 f926 	bl	8001560 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001314:	f000 f95a 	bl	80015cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  mcp4922.begin(&hspi1,GPIOA,GPIO_PIN_4);
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <main+0x80>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2210      	movs	r2, #16
 800131e:	4916      	ldr	r1, [pc, #88]	@ (8001378 <main+0x84>)
 8001320:	4816      	ldr	r0, [pc, #88]	@ (800137c <main+0x88>)
 8001322:	4798      	blx	r3
  mcp3202.begin(&hspi2,GPIOB,GPIO_PIN_9);
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <main+0x8c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800132c:	4915      	ldr	r1, [pc, #84]	@ (8001384 <main+0x90>)
 800132e:	4816      	ldr	r0, [pc, #88]	@ (8001388 <main+0x94>)
 8001330:	4798      	blx	r3

//  Can_begin(&canOpen, &hcan2, 0);
//  CanCofigfilter(&canOpen, 0x11, 0x11);
//  canOpen.CanRxIT_Callback = &canOpenCallBack;
//  Can_Start(&canOpen, MotorID[0]);
  MotorInit(&hcan2);
 8001332:	4816      	ldr	r0, [pc, #88]	@ (800138c <main+0x98>)
 8001334:	f001 fb4a 	bl	80029cc <MotorInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001338:	f004 fd0c 	bl	8005d54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800133c:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <main+0x9c>)
 800133e:	2100      	movs	r1, #0
 8001340:	4814      	ldr	r0, [pc, #80]	@ (8001394 <main+0xa0>)
 8001342:	f004 fd51 	bl	8005de8 <osThreadNew>
 8001346:	4603      	mov	r3, r0
 8001348:	4a13      	ldr	r2, [pc, #76]	@ (8001398 <main+0xa4>)
 800134a:	6013      	str	r3, [r2, #0]

  /* creation of Task_Pump */
  Task_PumpHandle = osThreadNew(StartTask_Pump, NULL, &Task_Pump_attributes);
 800134c:	4a13      	ldr	r2, [pc, #76]	@ (800139c <main+0xa8>)
 800134e:	2100      	movs	r1, #0
 8001350:	4813      	ldr	r0, [pc, #76]	@ (80013a0 <main+0xac>)
 8001352:	f004 fd49 	bl	8005de8 <osThreadNew>
 8001356:	4603      	mov	r3, r0
 8001358:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <main+0xb0>)
 800135a:	6013      	str	r3, [r2, #0]

  /* creation of Task_Motor */
  Task_MotorHandle = osThreadNew(StartTask_Motor, NULL, &Task_Motor_attributes);
 800135c:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <main+0xb4>)
 800135e:	2100      	movs	r1, #0
 8001360:	4812      	ldr	r0, [pc, #72]	@ (80013ac <main+0xb8>)
 8001362:	f004 fd41 	bl	8005de8 <osThreadNew>
 8001366:	4603      	mov	r3, r0
 8001368:	4a11      	ldr	r2, [pc, #68]	@ (80013b0 <main+0xbc>)
 800136a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800136c:	f004 fd16 	bl	8005d9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <main+0x7c>
 8001374:	2000000c 	.word	0x2000000c
 8001378:	40020000 	.word	0x40020000
 800137c:	20000160 	.word	0x20000160
 8001380:	20000004 	.word	0x20000004
 8001384:	40020400 	.word	0x40020400
 8001388:	200001b8 	.word	0x200001b8
 800138c:	20000138 	.word	0x20000138
 8001390:	080092a8 	.word	0x080092a8
 8001394:	080018a5 	.word	0x080018a5
 8001398:	20000258 	.word	0x20000258
 800139c:	080092cc 	.word	0x080092cc
 80013a0:	080018b5 	.word	0x080018b5
 80013a4:	2000025c 	.word	0x2000025c
 80013a8:	080092f0 	.word	0x080092f0
 80013ac:	08001991 	.word	0x08001991
 80013b0:	20000260 	.word	0x20000260

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	@ 0x50
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	2230      	movs	r2, #48	@ 0x30
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f007 fc50 	bl	8008c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <SystemClock_Config+0xcc>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	4a27      	ldr	r2, [pc, #156]	@ (8001480 <SystemClock_Config+0xcc>)
 80013e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e8:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <SystemClock_Config+0xcc>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <SystemClock_Config+0xd0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a21      	ldr	r2, [pc, #132]	@ (8001484 <SystemClock_Config+0xd0>)
 80013fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b1f      	ldr	r3, [pc, #124]	@ (8001484 <SystemClock_Config+0xd0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001410:	2302      	movs	r3, #2
 8001412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001418:	2310      	movs	r3, #16
 800141a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141c:	2302      	movs	r3, #2
 800141e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001420:	2300      	movs	r3, #0
 8001422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001424:	2308      	movs	r3, #8
 8001426:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001428:	23a8      	movs	r3, #168	@ 0xa8
 800142a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001430:	2304      	movs	r3, #4
 8001432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 0320 	add.w	r3, r7, #32
 8001438:	4618      	mov	r0, r3
 800143a:	f003 f8e9 	bl	8004610 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001444:	f000 fbb6 	bl	8001bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2302      	movs	r3, #2
 800144e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001454:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001458:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800145a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2105      	movs	r1, #5
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fb4a 	bl	8004b00 <HAL_RCC_ClockConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001472:	f000 fb9f 	bl	8001bb4 <Error_Handler>
  }
}
 8001476:	bf00      	nop
 8001478:	3750      	adds	r7, #80	@ 0x50
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40007000 	.word	0x40007000

08001488 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800148c:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <MX_CAN1_Init+0x64>)
 800148e:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <MX_CAN1_Init+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8001492:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <MX_CAN1_Init+0x64>)
 8001494:	2215      	movs	r2, #21
 8001496:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_CAN1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <MX_CAN1_Init+0x64>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_CAN1_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <MX_CAN1_Init+0x64>)
 80014ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014b0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <MX_CAN1_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <MX_CAN1_Init+0x64>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <MX_CAN1_Init+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <MX_CAN1_Init+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <MX_CAN1_Init+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <MX_CAN1_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_CAN1_Init+0x64>)
 80014d8:	f001 ff52 	bl	8003380 <HAL_CAN_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80014e2:	f000 fb67 	bl	8001bb4 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */
 //CanCofigfilter(&CanUser1,FilterHigh, FilterLOw);

  /* USER CODE END CAN1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000110 	.word	0x20000110
 80014f0:	40006400 	.word	0x40006400

080014f4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <MX_CAN2_Init+0x64>)
 80014fa:	4a18      	ldr	r2, [pc, #96]	@ (800155c <MX_CAN2_Init+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 80014fe:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <MX_CAN2_Init+0x64>)
 8001500:	2215      	movs	r2, #21
 8001502:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001504:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <MX_CAN2_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800150a:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <MX_CAN2_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_CAN2_Init+0x64>)
 8001512:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001516:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_CAN2_Init+0x64>)
 800151a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800151e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001520:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <MX_CAN2_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <MX_CAN2_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800152c:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <MX_CAN2_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <MX_CAN2_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <MX_CAN2_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <MX_CAN2_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001544:	4804      	ldr	r0, [pc, #16]	@ (8001558 <MX_CAN2_Init+0x64>)
 8001546:	f001 ff1b 	bl	8003380 <HAL_CAN_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001550:	f000 fb30 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000138 	.word	0x20000138
 800155c:	40006800 	.word	0x40006800

08001560 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001564:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <MX_SPI1_Init+0x64>)
 8001566:	4a18      	ldr	r2, [pc, #96]	@ (80015c8 <MX_SPI1_Init+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800156a:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <MX_SPI1_Init+0x64>)
 800156c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001572:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <MX_SPI1_Init+0x64>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <MX_SPI1_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <MX_SPI1_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <MX_SPI1_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_SPI1_Init+0x64>)
 800158c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001590:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001592:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <MX_SPI1_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001598:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <MX_SPI1_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_SPI1_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <MX_SPI1_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <MX_SPI1_Init+0x64>)
 80015ac:	220a      	movs	r2, #10
 80015ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <MX_SPI1_Init+0x64>)
 80015b2:	f003 fc85 	bl	8004ec0 <HAL_SPI_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015bc:	f000 fafa 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000160 	.word	0x20000160
 80015c8:	40013000 	.word	0x40013000

080015cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015d0:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <MX_SPI2_Init+0x64>)
 80015d2:	4a18      	ldr	r2, [pc, #96]	@ (8001634 <MX_SPI2_Init+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015d6:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <MX_SPI2_Init+0x64>)
 80015d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015de:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <MX_SPI2_Init+0x64>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MX_SPI2_Init+0x64>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_SPI2_Init+0x64>)
 80015ec:	2202      	movs	r2, #2
 80015ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_SPI2_Init+0x64>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_SPI2_Init+0x64>)
 80015f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_SPI2_Init+0x64>)
 8001600:	2228      	movs	r2, #40	@ 0x28
 8001602:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <MX_SPI2_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_SPI2_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <MX_SPI2_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_SPI2_Init+0x64>)
 8001618:	220a      	movs	r2, #10
 800161a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <MX_SPI2_Init+0x64>)
 800161e:	f003 fc4f 	bl	8004ec0 <HAL_SPI_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001628:	f000 fac4 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200001b8 	.word	0x200001b8
 8001634:	40003800 	.word	0x40003800

08001638 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_USART3_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <MX_USART3_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <MX_USART3_UART_Init+0x4c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_USART3_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <MX_USART3_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <MX_USART3_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <MX_USART3_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <MX_USART3_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <MX_USART3_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <MX_USART3_UART_Init+0x4c>)
 8001670:	f004 f878 	bl	8005764 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800167a:	f000 fa9b 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000210 	.word	0x20000210
 8001688:	40004800 	.word	0x40004800

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	@ 0x30
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	4b78      	ldr	r3, [pc, #480]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a77      	ldr	r2, [pc, #476]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 80016ac:	f043 0320 	orr.w	r3, r3, #32
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b75      	ldr	r3, [pc, #468]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	4b71      	ldr	r3, [pc, #452]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a70      	ldr	r2, [pc, #448]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b6a      	ldr	r3, [pc, #424]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a69      	ldr	r2, [pc, #420]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b67      	ldr	r3, [pc, #412]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b63      	ldr	r3, [pc, #396]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a62      	ldr	r2, [pc, #392]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b60      	ldr	r3, [pc, #384]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b5c      	ldr	r3, [pc, #368]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a5b      	ldr	r2, [pc, #364]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 800171c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b59      	ldr	r3, [pc, #356]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b55      	ldr	r3, [pc, #340]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a54      	ldr	r2, [pc, #336]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b52      	ldr	r3, [pc, #328]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b4e      	ldr	r3, [pc, #312]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a4d      	ldr	r2, [pc, #308]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b4b      	ldr	r3, [pc, #300]	@ (8001888 <MX_GPIO_Init+0x1fc>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2110      	movs	r1, #16
 800176a:	4848      	ldr	r0, [pc, #288]	@ (800188c <MX_GPIO_Init+0x200>)
 800176c:	f002 ff36 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 8001776:	4846      	ldr	r0, [pc, #280]	@ (8001890 <MX_GPIO_Init+0x204>)
 8001778:	f002 ff30 	bl	80045dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 800177c:	2200      	movs	r2, #0
 800177e:	2140      	movs	r1, #64	@ 0x40
 8001780:	4844      	ldr	r0, [pc, #272]	@ (8001894 <MX_GPIO_Init+0x208>)
 8001782:	f002 ff2b 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800178c:	4842      	ldr	r0, [pc, #264]	@ (8001898 <MX_GPIO_Init+0x20c>)
 800178e:	f002 ff25 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001792:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 8001796:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	483d      	ldr	r0, [pc, #244]	@ (800189c <MX_GPIO_Init+0x210>)
 80017a8:	f002 fd64 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ac:	230c      	movs	r3, #12
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	4838      	ldr	r0, [pc, #224]	@ (80018a0 <MX_GPIO_Init+0x214>)
 80017c0:	f002 fd58 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017c4:	2308      	movs	r3, #8
 80017c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c8:	2303      	movs	r3, #3
 80017ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	482d      	ldr	r0, [pc, #180]	@ (800188c <MX_GPIO_Init+0x200>)
 80017d8:	f002 fd4c 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017dc:	2310      	movs	r3, #16
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	4826      	ldr	r0, [pc, #152]	@ (800188c <MX_GPIO_Init+0x200>)
 80017f4:	f002 fd3e 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017f8:	2340      	movs	r3, #64	@ 0x40
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	4820      	ldr	r0, [pc, #128]	@ (800188c <MX_GPIO_Init+0x200>)
 800180c:	f002 fd32 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001810:	2303      	movs	r3, #3
 8001812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	481b      	ldr	r0, [pc, #108]	@ (8001890 <MX_GPIO_Init+0x204>)
 8001824:	f002 fd26 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG7
                           PG10 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001828:	f44f 634f 	mov.w	r3, #3312	@ 0xcf0
 800182c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4813      	ldr	r0, [pc, #76]	@ (8001890 <MX_GPIO_Init+0x204>)
 8001842:	f002 fd17 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001846:	2340      	movs	r3, #64	@ 0x40
 8001848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	480d      	ldr	r0, [pc, #52]	@ (8001894 <MX_GPIO_Init+0x208>)
 800185e:	f002 fd09 	bl	8004274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001862:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	4807      	ldr	r0, [pc, #28]	@ (8001898 <MX_GPIO_Init+0x20c>)
 800187c:	f002 fcfa 	bl	8004274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001880:	bf00      	nop
 8001882:	3730      	adds	r7, #48	@ 0x30
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000
 8001890:	40021800 	.word	0x40021800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40020400 	.word	0x40020400
 800189c:	40021400 	.word	0x40021400
 80018a0:	40020800 	.word	0x40020800

080018a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f004 fb2d 	bl	8005f0c <osDelay>
 80018b2:	e7fb      	b.n	80018ac <StartDefaultTask+0x8>

080018b4 <StartTask_Pump>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Pump */
void StartTask_Pump(void *argument)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Pump */
  /* Infinite loop */
  for (;;)
  {
	  readGPIOInputs();
 80018bc:	f7ff faaa 	bl	8000e14 <readGPIOInputs>
      // Kiểm tra nút RESET (GPIOG_PIN_2)
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)
 80018c0:	2140      	movs	r1, #64	@ 0x40
 80018c2:	4829      	ldr	r0, [pc, #164]	@ (8001968 <StartTask_Pump+0xb4>)
 80018c4:	f002 fe72 	bl	80045ac <HAL_GPIO_ReadPin>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d11d      	bne.n	800190a <StartTask_Pump+0x56>
      {
    	 // motorErrorReset();
    	  NMTmanagement(0x2, MotorID[0]);
 80018ce:	4b27      	ldr	r3, [pc, #156]	@ (800196c <StartTask_Pump+0xb8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4619      	mov	r1, r3
 80018d4:	2002      	movs	r0, #2
 80018d6:	f001 fb09 	bl	8002eec <NMTmanagement>
          hydraulicSetState(free_all_state); // Dừng mọi hoạt động
 80018da:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <StartTask_Pump+0xbc>)
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	f001 fc97 	bl	8003210 <hydraulicSetState>
          // Reset tất cả
          buttonPressCount = 0;
 80018e2:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <StartTask_Pump+0xc0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
          autoStep = 0;
 80018e8:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <StartTask_Pump+0xc4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
          modeLift = false;
 80018ee:	4b23      	ldr	r3, [pc, #140]	@ (800197c <StartTask_Pump+0xc8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
          memset(timer_hydarulic, 0, sizeof(timer_hydarulic));  // Reset timer
 80018f4:	2210      	movs	r2, #16
 80018f6:	2100      	movs	r1, #0
 80018f8:	4821      	ldr	r0, [pc, #132]	@ (8001980 <StartTask_Pump+0xcc>)
 80018fa:	f007 f9b5 	bl	8008c68 <memset>
          memset(stepDone, 0, sizeof(stepDone));  // Reset cờ chạy auto
 80018fe:	2204      	movs	r2, #4
 8001900:	2100      	movs	r1, #0
 8001902:	4820      	ldr	r0, [pc, #128]	@ (8001984 <StartTask_Pump+0xd0>)
 8001904:	f007 f9b0 	bl	8008c68 <memset>
          continue;
 8001908:	e02d      	b.n	8001966 <StartTask_Pump+0xb2>
      }



      mode = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10) == GPIO_PIN_SET ? true : false;
 800190a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800190e:	481e      	ldr	r0, [pc, #120]	@ (8001988 <StartTask_Pump+0xd4>)
 8001910:	f002 fe4c 	bl	80045ac <HAL_GPIO_ReadPin>
 8001914:	4603      	mov	r3, r0
 8001916:	2b01      	cmp	r3, #1
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b1a      	ldr	r3, [pc, #104]	@ (800198c <StartTask_Pump+0xd8>)
 8001922:	701a      	strb	r2, [r3, #0]

      if (mode) {
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <StartTask_Pump+0xd8>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <StartTask_Pump+0x7e>
          autoMode();
 800192c:	f7ff fae8 	bl	8000f00 <autoMode>
 8001930:	e00b      	b.n	800194a <StartTask_Pump+0x96>
      } else {
          manualMode();
 8001932:	f7ff faa3 	bl	8000e7c <manualMode>
          memset(timer_hydarulic, 0, sizeof(timer_hydarulic));  // Reset timer chế độ auto
 8001936:	2210      	movs	r2, #16
 8001938:	2100      	movs	r1, #0
 800193a:	4811      	ldr	r0, [pc, #68]	@ (8001980 <StartTask_Pump+0xcc>)
 800193c:	f007 f994 	bl	8008c68 <memset>
          memset(stepDone, 0, sizeof(stepDone));  // Reset cờ chạy auto
 8001940:	2204      	movs	r2, #4
 8001942:	2100      	movs	r1, #0
 8001944:	480f      	ldr	r0, [pc, #60]	@ (8001984 <StartTask_Pump+0xd0>)
 8001946:	f007 f98f 	bl	8008c68 <memset>
      }

      performAction(buttonPressCount, modeLift);
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <StartTask_Pump+0xc0>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <StartTask_Pump+0xc8>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4619      	mov	r1, r3
 800195a:	4610      	mov	r0, r2
 800195c:	f7ff fc22 	bl	80011a4 <performAction>
      osDelay(10);
 8001960:	200a      	movs	r0, #10
 8001962:	f004 fad3 	bl	8005f0c <osDelay>
	  readGPIOInputs();
 8001966:	e7a9      	b.n	80018bc <StartTask_Pump+0x8>
 8001968:	40020000 	.word	0x40020000
 800196c:	20000030 	.word	0x20000030
 8001970:	080092a4 	.word	0x080092a4
 8001974:	200000d4 	.word	0x200000d4
 8001978:	200000d6 	.word	0x200000d6
 800197c:	200000d5 	.word	0x200000d5
 8001980:	200000e8 	.word	0x200000e8
 8001984:	200000dc 	.word	0x200000dc
 8001988:	40021400 	.word	0x40021400
 800198c:	200000e0 	.word	0x200000e0

08001990 <StartTask_Motor>:
//        osDelay(50);
//    }
//    /* USER CODE END StartTask_Motor */
//}

void StartTask_Motor(void *argument) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartTask_Motor */
    osDelay(5000);
 8001998:	f241 3088 	movw	r0, #5000	@ 0x1388
 800199c:	f004 fab6 	bl	8005f0c <osDelay>
   // NMTmanagement(0x2, MotorID[0]);
    SetOperationMode(3, MotorID[0]);
 80019a0:	4b79      	ldr	r3, [pc, #484]	@ (8001b88 <StartTask_Motor+0x1f8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	2003      	movs	r0, #3
 80019a8:	f001 f832 	bl	8002a10 <SetOperationMode>
    SDOProfileAcc(speedToRps(0.25), MotorID[0]);
 80019ac:	ed9f 0b70 	vldr	d0, [pc, #448]	@ 8001b70 <StartTask_Motor+0x1e0>
 80019b0:	f001 fc16 	bl	80031e0 <speedToRps>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b74      	ldr	r3, [pc, #464]	@ (8001b88 <StartTask_Motor+0x1f8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4610      	mov	r0, r2
 80019be:	f001 f8c3 	bl	8002b48 <SDOProfileAcc>
    SDOProfileDec(speedToRps(0.3), MotorID[0]);
 80019c2:	ed9f 0b6d 	vldr	d0, [pc, #436]	@ 8001b78 <StartTask_Motor+0x1e8>
 80019c6:	f001 fc0b 	bl	80031e0 <speedToRps>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001b88 <StartTask_Motor+0x1f8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f001 f962 	bl	8002c9c <SDOProfileDec>
    SetControlWord(ControlWord_EN, MotorID[0]); // enable motor
 80019d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001b88 <StartTask_Motor+0x1f8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	200f      	movs	r0, #15
 80019e0:	f001 f864 	bl	8002aac <SetControlWord>
    NMTmanagement(0x1, MotorID[0]);
 80019e4:	4b68      	ldr	r3, [pc, #416]	@ (8001b88 <StartTask_Motor+0x1f8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	2001      	movs	r0, #1
 80019ec:	f001 fa7e 	bl	8002eec <NMTmanagement>
    static uint32_t last_change_time = 0;
    static bool stopping_phase = false; // Đánh dấu giai đoạn dừng

    /* Infinite loop */
    for (;;) {
        reset_motor = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET;
 80019f0:	2108      	movs	r1, #8
 80019f2:	4866      	ldr	r0, [pc, #408]	@ (8001b8c <StartTask_Motor+0x1fc>)
 80019f4:	f002 fdda 	bl	80045ac <HAL_GPIO_ReadPin>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bf0c      	ite	eq
 80019fe:	2301      	moveq	r3, #1
 8001a00:	2300      	movne	r3, #0
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b62      	ldr	r3, [pc, #392]	@ (8001b90 <StartTask_Motor+0x200>)
 8001a06:	701a      	strb	r2, [r3, #0]

        adc_speed = mcp3202.readChannel(0);
 8001a08:	4b62      	ldr	r3, [pc, #392]	@ (8001b94 <StartTask_Motor+0x204>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	4798      	blx	r3
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b60      	ldr	r3, [pc, #384]	@ (8001b98 <StartTask_Motor+0x208>)
 8001a16:	801a      	strh	r2, [r3, #0]
        bool m_error = false;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
        if (reset_motor == 0) {
 8001a1c:	4b5c      	ldr	r3, [pc, #368]	@ (8001b90 <StartTask_Motor+0x200>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 808d 	beq.w	8001b46 <StartTask_Motor+0x1b6>
            if (mode == 0) { // Chế độ Manual
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	@ (8001b9c <StartTask_Motor+0x20c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d064      	beq.n	8001b04 <StartTask_Motor+0x174>
                forward_pressed = (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6) == GPIO_PIN_SET);
 8001a3a:	2140      	movs	r1, #64	@ 0x40
 8001a3c:	4858      	ldr	r0, [pc, #352]	@ (8001ba0 <StartTask_Motor+0x210>)
 8001a3e:	f002 fdb5 	bl	80045ac <HAL_GPIO_ReadPin>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b55      	ldr	r3, [pc, #340]	@ (8001ba4 <StartTask_Motor+0x214>)
 8001a50:	701a      	strb	r2, [r3, #0]
                reverse_pressed = (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8) == GPIO_PIN_SET);
 8001a52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a56:	4852      	ldr	r0, [pc, #328]	@ (8001ba0 <StartTask_Motor+0x210>)
 8001a58:	f002 fda8 	bl	80045ac <HAL_GPIO_ReadPin>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	bf0c      	ite	eq
 8001a62:	2301      	moveq	r3, #1
 8001a64:	2300      	movne	r3, #0
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b4f      	ldr	r3, [pc, #316]	@ (8001ba8 <StartTask_Motor+0x218>)
 8001a6a:	701a      	strb	r2, [r3, #0]

                if (forward_pressed && reverse_pressed) {
 8001a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba4 <StartTask_Motor+0x214>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00e      	beq.n	8001a92 <StartTask_Motor+0x102>
 8001a74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba8 <StartTask_Motor+0x218>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <StartTask_Motor+0x102>
                    dir = 0; // Tránh xung đột khi nhấn cả hai nút
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001bac <StartTask_Motor+0x21c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
                    target_speed = 0;
 8001a82:	494b      	ldr	r1, [pc, #300]	@ (8001bb0 <StartTask_Motor+0x220>)
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	e9c1 2300 	strd	r2, r3, [r1]
 8001a90:	e03a      	b.n	8001b08 <StartTask_Motor+0x178>
                } else if (forward_pressed) {
 8001a92:	4b44      	ldr	r3, [pc, #272]	@ (8001ba4 <StartTask_Motor+0x214>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d012      	beq.n	8001ac0 <StartTask_Motor+0x130>
                    dir = 1;
 8001a9a:	4b44      	ldr	r3, [pc, #272]	@ (8001bac <StartTask_Motor+0x21c>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
                    target_speed = map_adc_to_float(adc_speed);
 8001aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8001b98 <StartTask_Motor+0x208>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fbb7 	bl	8001218 <map_adc_to_float>
 8001aaa:	ee10 3a10 	vmov	r3, s0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fcf2 	bl	8000498 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	493d      	ldr	r1, [pc, #244]	@ (8001bb0 <StartTask_Motor+0x220>)
 8001aba:	e9c1 2300 	strd	r2, r3, [r1]
 8001abe:	e023      	b.n	8001b08 <StartTask_Motor+0x178>
                } else if (reverse_pressed) {
 8001ac0:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <StartTask_Motor+0x218>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d012      	beq.n	8001aee <StartTask_Motor+0x15e>
                    dir = 3;
 8001ac8:	4b38      	ldr	r3, [pc, #224]	@ (8001bac <StartTask_Motor+0x21c>)
 8001aca:	2203      	movs	r2, #3
 8001acc:	601a      	str	r2, [r3, #0]
                    target_speed = map_adc_to_float(adc_speed);
 8001ace:	4b32      	ldr	r3, [pc, #200]	@ (8001b98 <StartTask_Motor+0x208>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fba0 	bl	8001218 <map_adc_to_float>
 8001ad8:	ee10 3a10 	vmov	r3, s0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fcdb 	bl	8000498 <__aeabi_f2d>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4932      	ldr	r1, [pc, #200]	@ (8001bb0 <StartTask_Motor+0x220>)
 8001ae8:	e9c1 2300 	strd	r2, r3, [r1]
 8001aec:	e00c      	b.n	8001b08 <StartTask_Motor+0x178>
                } else {
                    dir = 0;
 8001aee:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <StartTask_Motor+0x21c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
                    target_speed = 0;
 8001af4:	492e      	ldr	r1, [pc, #184]	@ (8001bb0 <StartTask_Motor+0x220>)
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9c1 2300 	strd	r2, r3, [r1]
 8001b02:	e001      	b.n	8001b08 <StartTask_Motor+0x178>
                }

            } else {
            	HandleAutoMode();
 8001b04:	f7ff fba8 	bl	8001258 <HandleAutoMode>
//                        last_change_time = current_time;
//                        dir = 0; // Dừng trước khi đổi hướng
//                    }
//                }
//            }
            target_speed = map_adc_to_float(adc_speed);
 8001b08:	4b23      	ldr	r3, [pc, #140]	@ (8001b98 <StartTask_Motor+0x208>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fb83 	bl	8001218 <map_adc_to_float>
 8001b12:	ee10 3a10 	vmov	r3, s0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fcbe 	bl	8000498 <__aeabi_f2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4923      	ldr	r1, [pc, #140]	@ (8001bb0 <StartTask_Motor+0x220>)
 8001b22:	e9c1 2300 	strd	r2, r3, [r1]
            motorControl(true, m_error, dir, target_speed);
 8001b26:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <StartTask_Motor+0x21c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <StartTask_Motor+0x220>)
 8001b2e:	ed93 7b00 	vldr	d7, [r3]
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	eeb0 0a47 	vmov.f32	s0, s14
 8001b38:	eef0 0a67 	vmov.f32	s1, s15
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f001 fa94 	bl	800306c <motorControl>
 8001b44:	e00d      	b.n	8001b62 <StartTask_Motor+0x1d2>
        } else {
        	NMTmanagement(0x1, MotorID[0]);
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <StartTask_Motor+0x1f8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f001 f9cd 	bl	8002eec <NMTmanagement>
            motorControl(true, m_error, 0, 0);
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001b80 <StartTask_Motor+0x1f0>
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f001 fa85 	bl	800306c <motorControl>
        }
        osDelay(50);
 8001b62:	2032      	movs	r0, #50	@ 0x32
 8001b64:	f004 f9d2 	bl	8005f0c <osDelay>
    for (;;) {
 8001b68:	e742      	b.n	80019f0 <StartTask_Motor+0x60>
 8001b6a:	bf00      	nop
 8001b6c:	f3af 8000 	nop.w
 8001b70:	00000000 	.word	0x00000000
 8001b74:	3fd00000 	.word	0x3fd00000
 8001b78:	33333333 	.word	0x33333333
 8001b7c:	3fd33333 	.word	0x3fd33333
	...
 8001b88:	20000030 	.word	0x20000030
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	200000e1 	.word	0x200000e1
 8001b94:	20000004 	.word	0x20000004
 8001b98:	200000fe 	.word	0x200000fe
 8001b9c:	200000e0 	.word	0x200000e0
 8001ba0:	40021400 	.word	0x40021400
 8001ba4:	20000108 	.word	0x20000108
 8001ba8:	20000109 	.word	0x20000109
 8001bac:	2000010c 	.word	0x2000010c
 8001bb0:	20000100 	.word	0x20000100

08001bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb8:	b672      	cpsid	i
}
 8001bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <Error_Handler+0x8>

08001bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_MspInit+0x54>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	4a11      	ldr	r2, [pc, #68]	@ (8001c14 <HAL_MspInit+0x54>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <HAL_MspInit+0x54>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_MspInit+0x54>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_MspInit+0x54>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <HAL_MspInit+0x54>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	210f      	movs	r1, #15
 8001c02:	f06f 0001 	mvn.w	r0, #1
 8001c06:	f002 fafe 	bl	8004206 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	@ 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a4a      	ldr	r2, [pc, #296]	@ (8001d60 <HAL_CAN_MspInit+0x148>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d13d      	bne.n	8001cb6 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d64 <HAL_CAN_MspInit+0x14c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	4a48      	ldr	r2, [pc, #288]	@ (8001d64 <HAL_CAN_MspInit+0x14c>)
 8001c42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c44:	4b47      	ldr	r3, [pc, #284]	@ (8001d64 <HAL_CAN_MspInit+0x14c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d10d      	bne.n	8001c68 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	4b45      	ldr	r3, [pc, #276]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	4a44      	ldr	r2, [pc, #272]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001c56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5c:	4b42      	ldr	r3, [pc, #264]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c70:	4a3d      	ldr	r2, [pc, #244]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c78:	4b3b      	ldr	r3, [pc, #236]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c84:	2303      	movs	r3, #3
 8001c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c94:	2309      	movs	r3, #9
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4833      	ldr	r0, [pc, #204]	@ (8001d6c <HAL_CAN_MspInit+0x154>)
 8001ca0:	f002 fae8 	bl	8004274 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2105      	movs	r1, #5
 8001ca8:	2014      	movs	r0, #20
 8001caa:	f002 faac 	bl	8004206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001cae:	2014      	movs	r0, #20
 8001cb0:	f002 fac5 	bl	800423e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001cb4:	e050      	b.n	8001d58 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a2d      	ldr	r2, [pc, #180]	@ (8001d70 <HAL_CAN_MspInit+0x158>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d14b      	bne.n	8001d58 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	4a27      	ldr	r2, [pc, #156]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001cca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd0:	4b25      	ldr	r3, [pc, #148]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cdc:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <HAL_CAN_MspInit+0x14c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	4a20      	ldr	r2, [pc, #128]	@ (8001d64 <HAL_CAN_MspInit+0x14c>)
 8001ce4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <HAL_CAN_MspInit+0x14c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d10d      	bne.n	8001d0a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001cf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	4a15      	ldr	r2, [pc, #84]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1a:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <HAL_CAN_MspInit+0x150>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d26:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001d38:	2309      	movs	r3, #9
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 031c 	add.w	r3, r7, #28
 8001d40:	4619      	mov	r1, r3
 8001d42:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <HAL_CAN_MspInit+0x15c>)
 8001d44:	f002 fa96 	bl	8004274 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2105      	movs	r1, #5
 8001d4c:	2040      	movs	r0, #64	@ 0x40
 8001d4e:	f002 fa5a 	bl	8004206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001d52:	2040      	movs	r0, #64	@ 0x40
 8001d54:	f002 fa73 	bl	800423e <HAL_NVIC_EnableIRQ>
}
 8001d58:	bf00      	nop
 8001d5a:	3730      	adds	r7, #48	@ 0x30
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40006400 	.word	0x40006400
 8001d64:	20000270 	.word	0x20000270
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40006800 	.word	0x40006800
 8001d74:	40020400 	.word	0x40020400

08001d78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	@ 0x30
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a41      	ldr	r2, [pc, #260]	@ (8001e9c <HAL_SPI_MspInit+0x124>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d14a      	bne.n	8001e30 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	4b40      	ldr	r3, [pc, #256]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001da4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001daa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	4b39      	ldr	r3, [pc, #228]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a38      	ldr	r2, [pc, #224]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b36      	ldr	r3, [pc, #216]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	4b32      	ldr	r3, [pc, #200]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	4a31      	ldr	r2, [pc, #196]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de2:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dee:	2320      	movs	r3, #32
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dfe:	2305      	movs	r3, #5
 8001e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	4619      	mov	r1, r3
 8001e08:	4826      	ldr	r0, [pc, #152]	@ (8001ea4 <HAL_SPI_MspInit+0x12c>)
 8001e0a:	f002 fa33 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	4619      	mov	r1, r3
 8001e28:	481f      	ldr	r0, [pc, #124]	@ (8001ea8 <HAL_SPI_MspInit+0x130>)
 8001e2a:	f002 fa23 	bl	8004274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e2e:	e031      	b.n	8001e94 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1d      	ldr	r2, [pc, #116]	@ (8001eac <HAL_SPI_MspInit+0x134>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d12c      	bne.n	8001e94 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	4a17      	ldr	r2, [pc, #92]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <HAL_SPI_MspInit+0x128>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001e72:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e84:	2305      	movs	r3, #5
 8001e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4806      	ldr	r0, [pc, #24]	@ (8001ea8 <HAL_SPI_MspInit+0x130>)
 8001e90:	f002 f9f0 	bl	8004274 <HAL_GPIO_Init>
}
 8001e94:	bf00      	nop
 8001e96:	3730      	adds	r7, #48	@ 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013000 	.word	0x40013000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40003800 	.word	0x40003800

08001eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	@ 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <HAL_UART_MspInit+0x84>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d12c      	bne.n	8001f2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	4a17      	ldr	r2, [pc, #92]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee2:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a10      	ldr	r2, [pc, #64]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001ef8:	f043 0308 	orr.w	r3, r3, #8
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <HAL_UART_MspInit+0x88>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4805      	ldr	r0, [pc, #20]	@ (8001f3c <HAL_UART_MspInit+0x8c>)
 8001f28:	f002 f9a4 	bl	8004274 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001f2c:	bf00      	nop
 8001f2e:	3728      	adds	r7, #40	@ 0x28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40004800 	.word	0x40004800
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020c00 	.word	0x40020c00

08001f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <NMI_Handler+0x4>

08001f48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <HardFault_Handler+0x4>

08001f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <MemManage_Handler+0x4>

08001f58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7a:	f001 f9e1 	bl	8003340 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f7e:	f005 fbed 	bl	800775c <xTaskGetSchedulerState>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d001      	beq.n	8001f8c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f88:	f006 f9e6 	bl	8008358 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f94:	4802      	ldr	r0, [pc, #8]	@ (8001fa0 <CAN1_RX0_IRQHandler+0x10>)
 8001f96:	f001 fe2b 	bl	8003bf0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000110 	.word	0x20000110

08001fa4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001fa8:	4802      	ldr	r0, [pc, #8]	@ (8001fb4 <CAN2_RX0_IRQHandler+0x10>)
 8001faa:	f001 fe21 	bl	8003bf0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000138 	.word	0x20000138

08001fb8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e00a      	b.n	8001fe0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fca:	f3af 8000 	nop.w
 8001fce:	4601      	mov	r1, r0
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	60ba      	str	r2, [r7, #8]
 8001fd6:	b2ca      	uxtb	r2, r1
 8001fd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbf0      	blt.n	8001fca <_read+0x12>
  }

  return len;
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e009      	b.n	8002018 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	60ba      	str	r2, [r7, #8]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	dbf1      	blt.n	8002004 <_write+0x12>
  }
  return len;
 8002020:	687b      	ldr	r3, [r7, #4]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_close>:

int _close(int file)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002052:	605a      	str	r2, [r3, #4]
  return 0;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_isatty>:

int _isatty(int file)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800209c:	4a14      	ldr	r2, [pc, #80]	@ (80020f0 <_sbrk+0x5c>)
 800209e:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <_sbrk+0x60>)
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a8:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <_sbrk+0x64>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <_sbrk+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d207      	bcs.n	80020d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c4:	f006 fe1e 	bl	8008d04 <__errno>
 80020c8:	4603      	mov	r3, r0
 80020ca:	220c      	movs	r2, #12
 80020cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	e009      	b.n	80020e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020da:	4b07      	ldr	r3, [pc, #28]	@ (80020f8 <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <_sbrk+0x64>)
 80020e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20020000 	.word	0x20020000
 80020f4:	00000400 	.word	0x00000400
 80020f8:	20000274 	.word	0x20000274
 80020fc:	20004e48 	.word	0x20004e48

08002100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <SystemInit+0x20>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	4a05      	ldr	r2, [pc, #20]	@ (8002120 <SystemInit+0x20>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800215c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002128:	480d      	ldr	r0, [pc, #52]	@ (8002160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800212a:	490e      	ldr	r1, [pc, #56]	@ (8002164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800212c:	4a0e      	ldr	r2, [pc, #56]	@ (8002168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213e:	4a0b      	ldr	r2, [pc, #44]	@ (800216c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002140:	4c0b      	ldr	r4, [pc, #44]	@ (8002170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800214e:	f7ff ffd7 	bl	8002100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002152:	f006 fddd 	bl	8008d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002156:	f7ff f8cd 	bl	80012f4 <main>
  bx  lr    
 800215a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800215c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002164:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002168:	0800933c 	.word	0x0800933c
  ldr r2, =_sbss
 800216c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002170:	20004e48 	.word	0x20004e48

08002174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <ADC_IRQHandler>
	...

08002178 <Can_begin>:
CAN_COM* Can_communication1;
CAN_COM* Can_communication2;
void (*rxDataITcallback)() = NULL;

void Can_begin(CAN_COM* canhandle, CAN_HandleTypeDef* Handle, uint8_t Idmode)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	71fb      	strb	r3, [r7, #7]
	canhandle->CanHandle = Handle;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	629a      	str	r2, [r3, #40]	@ 0x28
	canhandle->IDMode = Idmode;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	79fa      	ldrb	r2, [r7, #7]
 8002190:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	if(Handle == &hcan1)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4a08      	ldr	r2, [pc, #32]	@ (80021b8 <Can_begin+0x40>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d103      	bne.n	80021a4 <Can_begin+0x2c>
	Can_communication1 = canhandle;
 800219c:	4a07      	ldr	r2, [pc, #28]	@ (80021bc <Can_begin+0x44>)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6013      	str	r3, [r2, #0]
	else
		Can_communication2 = canhandle;
}
 80021a2:	e002      	b.n	80021aa <Can_begin+0x32>
		Can_communication2 = canhandle;
 80021a4:	4a06      	ldr	r2, [pc, #24]	@ (80021c0 <Can_begin+0x48>)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6013      	str	r3, [r2, #0]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000110 	.word	0x20000110
 80021bc:	20000278 	.word	0x20000278
 80021c0:	2000027c 	.word	0x2000027c

080021c4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a13      	ldr	r2, [pc, #76]	@ (800221c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d10f      	bne.n	80021f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	{
	HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication1->Can_rxHeader, Can_communication1->Can_rxData);
 80021d4:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80021dc:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3364      	adds	r3, #100	@ 0x64
 80021e2:	2100      	movs	r1, #0
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f001 fbbb 	bl	8003960 <HAL_CAN_GetRxMessage>
	Can_communication1->CanRxIT_Callback();
 80021ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021f0:	4798      	blx	r3
	} else
	{
		HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication2->Can_rxHeader, Can_communication2->Can_rxData);
		Can_communication2->CanRxIT_Callback();
	}
}
 80021f2:	e00e      	b.n	8002212 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication2->Can_rxHeader, Can_communication2->Can_rxData);
 80021f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3364      	adds	r3, #100	@ 0x64
 8002202:	2100      	movs	r1, #0
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f001 fbab 	bl	8003960 <HAL_CAN_GetRxMessage>
		Can_communication2->CanRxIT_Callback();
 800220a:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002210:	4798      	blx	r3
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000110 	.word	0x20000110
 8002220:	20000278 	.word	0x20000278
 8002224:	2000027c 	.word	0x2000027c

08002228 <Can_Write>:
void Can_Write(CAN_COM* canhandle, uint8_t* data, size_t size)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
		canhandle->Can_txHeader.DLC = size;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	63da      	str	r2, [r3, #60]	@ 0x3c
		if(HAL_CAN_AddTxMessage(canhandle->CanHandle, &canhandle->Can_txHeader, data, &canhandle->tx_mailBox) != HAL_OK)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3370      	adds	r3, #112	@ 0x70
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	f001 fab9 	bl	80037c0 <HAL_CAN_AddTxMessage>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <Can_Write+0x30>
		{
			Error_Handler();
 8002254:	f7ff fcae 	bl	8001bb4 <Error_Handler>
		}
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <CanCofigfilter>:
#endif

/* CONFIG FILLTER */
void CanCofigfilter(CAN_COM* canhandle, uint32_t FilterHigh , uint32_t FilterLow)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
	if(HAL_FDCAN_ConfigFilter(canhandle->CanHandle, &canhandle->CanfilterTypedef) != HAL_OK)
	{
		Error_Handler();
	}
#else
		canhandle->CanfilterTypedef.FilterActivation = CAN_FILTER_ENABLE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	621a      	str	r2, [r3, #32]
		canhandle->CanfilterTypedef.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
		canhandle->CanfilterTypedef.FilterIdHigh = FilterHigh;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	601a      	str	r2, [r3, #0]
		canhandle->CanfilterTypedef.FilterIdLow = FilterLow;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	605a      	str	r2, [r3, #4]
		canhandle->CanfilterTypedef.FilterMaskIdHigh = FilterHigh;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	609a      	str	r2, [r3, #8]
		canhandle->CanfilterTypedef.FilterMaskIdLow = FilterLow;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]
		canhandle->CanfilterTypedef.FilterMode = CAN_FILTERMODE_IDMASK;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	619a      	str	r2, [r3, #24]
		canhandle->CanfilterTypedef.FilterScale = CAN_FILTERSCALE_32BIT;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	61da      	str	r2, [r3, #28]
		if(canhandle->CanHandle == &hcan1)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	4a09      	ldr	r2, [pc, #36]	@ (80022c8 <CanCofigfilter+0x68>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d105      	bne.n	80022b2 <CanCofigfilter+0x52>
		{
			canhandle->CanfilterTypedef.FilterBank = 0; // which filter bank to use from the assigned ones
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	615a      	str	r2, [r3, #20]
			canhandle->CanfilterTypedef.SlaveStartFilterBank = 13;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	220d      	movs	r2, #13
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24
		}
		HAL_CAN_ConfigFilter(canhandle->CanHandle, &canhandle->CanfilterTypedef);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 f95c 	bl	8003578 <HAL_CAN_ConfigFilter>
#endif
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000110 	.word	0x20000110

080022cc <Can_Start>:

/*  CONFIG DATA TRANSMIT*/
void Can_Start(CAN_COM* canhandle, uint32_t CanID)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
	  canhandle->TxHeader.FDFormat = FDCAN_FD_CAN;
	  canhandle->TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	  canhandle->TxHeader.MessageMarker = 0;
#else

	canhandle->Can_id =  CanID;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	675a      	str	r2, [r3, #116]	@ 0x74
	HAL_CAN_Start(canhandle->CanHandle);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 fa29 	bl	8003738 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(canhandle->CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	2102      	movs	r1, #2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 fc59 	bl	8003ba4 <HAL_CAN_ActivateNotification>
	canhandle->Can_txHeader.DLC = 3;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2203      	movs	r2, #3
 80022f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	canhandle->Can_txHeader.RTR = CAN_RTR_DATA;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	639a      	str	r2, [r3, #56]	@ 0x38
	if(canhandle->IDMode)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <Can_Start+0x4c>
	{
		canhandle->Can_txHeader.IDE = CAN_ID_EXT;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2204      	movs	r2, #4
 800230c:	635a      	str	r2, [r3, #52]	@ 0x34
		canhandle->Can_txHeader.ExtId = canhandle->Can_id;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	631a      	str	r2, [r3, #48]	@ 0x30
	{
		canhandle->Can_txHeader.IDE = CAN_ID_STD;
		canhandle->Can_txHeader.StdId = canhandle->Can_id;
	}
#endif
}
 8002316:	e006      	b.n	8002326 <Can_Start+0x5a>
		canhandle->Can_txHeader.IDE = CAN_ID_STD;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	635a      	str	r2, [r3, #52]	@ 0x34
		canhandle->Can_txHeader.StdId = canhandle->Can_id;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <_begin>:
 *      Author: ADMIN-HPZ2
 */
#include "MCP3202.h"
mcp3202_pin spiPin;
void _begin (SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	4613      	mov	r3, r2
 800233c:	80fb      	strh	r3, [r7, #6]
	spiPin._hspi = hspi;
 800233e:	4a07      	ldr	r2, [pc, #28]	@ (800235c <_begin+0x2c>)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6093      	str	r3, [r2, #8]
	spiPin.GPIO_p = GPIOx;
 8002344:	4a05      	ldr	r2, [pc, #20]	@ (800235c <_begin+0x2c>)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	6013      	str	r3, [r2, #0]
	spiPin.GPIO_pin = GPIO_Pin;
 800234a:	4a04      	ldr	r2, [pc, #16]	@ (800235c <_begin+0x2c>)
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	8093      	strh	r3, [r2, #4]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	20000280 	.word	0x20000280

08002360 <_readChannel>:

uint16_t _readChannel(uint8_t thisCh) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
	uint8_t txData[3] = { 0b00000001, 0, 0 }; // Khởi tạo mảng txData để truyền dữ liệu
 800236a:	4a22      	ldr	r2, [pc, #136]	@ (80023f4 <_readChannel+0x94>)
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	4611      	mov	r1, r2
 8002374:	8019      	strh	r1, [r3, #0]
 8002376:	3302      	adds	r3, #2
 8002378:	0c12      	lsrs	r2, r2, #16
 800237a:	701a      	strb	r2, [r3, #0]
	uint8_t rxData[3] = { 0, 0, 0 }; // Khởi tạo mảng rxData để nhận dữ liệu
 800237c:	4a1e      	ldr	r2, [pc, #120]	@ (80023f8 <_readChannel+0x98>)
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	4611      	mov	r1, r2
 8002386:	8019      	strh	r1, [r3, #0]
 8002388:	3302      	adds	r3, #2
 800238a:	0c12      	lsrs	r2, r2, #16
 800238c:	701a      	strb	r2, [r3, #0]
	uint16_t result;
	// Gán giá trị bit đầu tiên của txData[0] để chọn kênh đọc dữ liệu
	txData[1] = (thisCh == 0) ? 0b10100000 : 0b11100000;
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <_readChannel+0x38>
 8002394:	23a0      	movs	r3, #160	@ 0xa0
 8002396:	e000      	b.n	800239a <_readChannel+0x3a>
 8002398:	23e0      	movs	r3, #224	@ 0xe0
 800239a:	747b      	strb	r3, [r7, #17]
	// Truyền và nhận dữ liệu qua SPI
	HAL_GPIO_WritePin(spiPin.GPIO_p, spiPin.GPIO_pin, GPIO_PIN_RESET); // Thiết lập tín hiệu CS để bắt đầu truyền nhận
 800239c:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <_readChannel+0x9c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <_readChannel+0x9c>)
 80023a2:	8891      	ldrh	r1, [r2, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 f918 	bl	80045dc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spiPin._hspi, txData, rxData, 3, 100); // Truyền nhận dữ liệu
 80023ac:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <_readChannel+0x9c>)
 80023ae:	6898      	ldr	r0, [r3, #8]
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	f107 0110 	add.w	r1, r7, #16
 80023b8:	2364      	movs	r3, #100	@ 0x64
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2303      	movs	r3, #3
 80023be:	f002 ff4c 	bl	800525a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(spiPin.GPIO_p, spiPin.GPIO_pin, GPIO_PIN_SET); // Thiết lập tín hiệu CS để kết thúc truyền nhận
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <_readChannel+0x9c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a0d      	ldr	r2, [pc, #52]	@ (80023fc <_readChannel+0x9c>)
 80023c8:	8891      	ldrh	r1, [r2, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f002 f905 	bl	80045dc <HAL_GPIO_WritePin>

	// Gộp 2 byte đầu tiên nhận được thành giá trị 12-bit
	//rxData[1] -=1;
	result = ((rxData[1] & 0x0F) << 8) | rxData[2];
 80023d2:	7b7b      	ldrb	r3, [r7, #13]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80023dc:	b21a      	sxth	r2, r3
 80023de:	7bbb      	ldrb	r3, [r7, #14]
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	4313      	orrs	r3, r2
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	82fb      	strh	r3, [r7, #22]

	return result;
 80023e8:	8afb      	ldrh	r3, [r7, #22]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	08009228 	.word	0x08009228
 80023f8:	0800922c 	.word	0x0800922c
 80023fc:	20000280 	.word	0x20000280

08002400 <DAC_begin>:

#define ADC0_5V
mcp4922_pin spiPinDAC ;

void DAC_begin (SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	4613      	mov	r3, r2
 800240c:	80fb      	strh	r3, [r7, #6]
	spiPinDAC._hspi = hspi ;
 800240e:	4a07      	ldr	r2, [pc, #28]	@ (800242c <DAC_begin+0x2c>)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6093      	str	r3, [r2, #8]
	spiPinDAC.GPIO_p = GPIOx;
 8002414:	4a05      	ldr	r2, [pc, #20]	@ (800242c <DAC_begin+0x2c>)
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	6013      	str	r3, [r2, #0]
	spiPinDAC.GPIO_pin = GPIO_Pin;
 800241a:	4a04      	ldr	r2, [pc, #16]	@ (800242c <DAC_begin+0x2c>)
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	8093      	strh	r3, [r2, #4]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	2000028c 	.word	0x2000028c

08002430 <highByte>:
bit 11 down to bit 0

 */
//************************************************************************

uint8_t highByte(uint16_t value) {
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]
  return (uint8_t)(value >> 8);
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	b29b      	uxth	r3, r3
 8002440:	b2db      	uxtb	r3, r3
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LowByte>:
uint8_t LowByte(uint16_t value) {
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	80fb      	strh	r3, [r7, #6]
  return (uint8_t)(value & 0xFF);
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	b2db      	uxtb	r3, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <sendIntValueSPI>:

void sendIntValueSPI(int A ,int B) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
int channelA = A | 0b0111000000000000;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8002478:	617b      	str	r3, [r7, #20]
int channelB = B | 0b1111000000000000;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8002480:	613b      	str	r3, [r7, #16]
uint8_t hightByteA = highByte(channelA);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	b29b      	uxth	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ffd2 	bl	8002430 <highByte>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
uint8_t lowByteA = LowByte(channelA);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	b29b      	uxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ffda 	bl	800244e <LowByte>
 800249a:	4603      	mov	r3, r0
 800249c:	73bb      	strb	r3, [r7, #14]
uint8_t hightByteB = highByte(channelB);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ffc4 	bl	8002430 <highByte>
 80024a8:	4603      	mov	r3, r0
 80024aa:	737b      	strb	r3, [r7, #13]
uint8_t lowByteB = LowByte(channelB);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ffcc 	bl	800244e <LowByte>
 80024b6:	4603      	mov	r3, r0
 80024b8:	733b      	strb	r3, [r7, #12]
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_RESET);
 80024ba:	4b23      	ldr	r3, [pc, #140]	@ (8002548 <sendIntValueSPI+0xe0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a22      	ldr	r2, [pc, #136]	@ (8002548 <sendIntValueSPI+0xe0>)
 80024c0:	8891      	ldrh	r1, [r2, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 f889 	bl	80045dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(spiPinDAC._hspi, &hightByteA,sizeof(hightByteA), 100);
 80024ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002548 <sendIntValueSPI+0xe0>)
 80024cc:	6898      	ldr	r0, [r3, #8]
 80024ce:	f107 010f 	add.w	r1, r7, #15
 80024d2:	2364      	movs	r3, #100	@ 0x64
 80024d4:	2201      	movs	r2, #1
 80024d6:	f002 fd7c 	bl	8004fd2 <HAL_SPI_Transmit>
HAL_SPI_Transmit(spiPinDAC._hspi, &lowByteA,sizeof(lowByteA), 100);
 80024da:	4b1b      	ldr	r3, [pc, #108]	@ (8002548 <sendIntValueSPI+0xe0>)
 80024dc:	6898      	ldr	r0, [r3, #8]
 80024de:	f107 010e 	add.w	r1, r7, #14
 80024e2:	2364      	movs	r3, #100	@ 0x64
 80024e4:	2201      	movs	r2, #1
 80024e6:	f002 fd74 	bl	8004fd2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_SET);
 80024ea:	4b17      	ldr	r3, [pc, #92]	@ (8002548 <sendIntValueSPI+0xe0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a16      	ldr	r2, [pc, #88]	@ (8002548 <sendIntValueSPI+0xe0>)
 80024f0:	8891      	ldrh	r1, [r2, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 f871 	bl	80045dc <HAL_GPIO_WritePin>
__asm__("nop\n\t");
 80024fa:	bf00      	nop
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_RESET);
 80024fc:	4b12      	ldr	r3, [pc, #72]	@ (8002548 <sendIntValueSPI+0xe0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a11      	ldr	r2, [pc, #68]	@ (8002548 <sendIntValueSPI+0xe0>)
 8002502:	8891      	ldrh	r1, [r2, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f002 f868 	bl	80045dc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(spiPinDAC._hspi, &hightByteB, sizeof(hightByteB), 100);
 800250c:	4b0e      	ldr	r3, [pc, #56]	@ (8002548 <sendIntValueSPI+0xe0>)
 800250e:	6898      	ldr	r0, [r3, #8]
 8002510:	f107 010d 	add.w	r1, r7, #13
 8002514:	2364      	movs	r3, #100	@ 0x64
 8002516:	2201      	movs	r2, #1
 8002518:	f002 fd5b 	bl	8004fd2 <HAL_SPI_Transmit>
HAL_SPI_Transmit(spiPinDAC._hspi, &lowByteB,sizeof(lowByteB), 100);
 800251c:	4b0a      	ldr	r3, [pc, #40]	@ (8002548 <sendIntValueSPI+0xe0>)
 800251e:	6898      	ldr	r0, [r3, #8]
 8002520:	f107 010c 	add.w	r1, r7, #12
 8002524:	2364      	movs	r3, #100	@ 0x64
 8002526:	2201      	movs	r2, #1
 8002528:	f002 fd53 	bl	8004fd2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_SET);
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <sendIntValueSPI+0xe0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a05      	ldr	r2, [pc, #20]	@ (8002548 <sendIntValueSPI+0xe0>)
 8002532:	8891      	ldrh	r1, [r2, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f002 f850 	bl	80045dc <HAL_GPIO_WritePin>
__asm__("nop\n\t");
 800253c:	bf00      	nop
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	2000028c 	.word	0x2000028c

0800254c <SetDAC>:

void SetDAC(uint16_t channelA, uint16_t channelB) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	460a      	mov	r2, r1
 8002556:	80fb      	strh	r3, [r7, #6]
 8002558:	4613      	mov	r3, r2
 800255a:	80bb      	strh	r3, [r7, #4]
#ifdef ADC0_5V
if(channelA>2048)
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002562:	d902      	bls.n	800256a <SetDAC+0x1e>
	{channelA = 2048;}
 8002564:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002568:	80fb      	strh	r3, [r7, #6]
	if(channelB>2048)
 800256a:	88bb      	ldrh	r3, [r7, #4]
 800256c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002570:	d902      	bls.n	8002578 <SetDAC+0x2c>
	{channelB=2048;}
 8002572:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002576:	80bb      	strh	r3, [r7, #4]
#endif
  sendIntValueSPI(channelA,channelB);
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	88ba      	ldrh	r2, [r7, #4]
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ff72 	bl	8002468 <sendIntValueSPI>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <setKincoErrorStatus>:
/****************Set id Current Feedback in mode PDO************/
uint32_t CurrentID[MNum] = {0x281, 0x282};
/*********************FunctionCode***********************/
void readParameter();

void setKincoErrorStatus(struct KincoErrorStatus *status, uint16_t value) {
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
    status->Extended_error = value & (1 << 0);
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf14      	ite	ne
 80025a2:	2301      	movne	r3, #1
 80025a4:	2300      	moveq	r3, #0
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	701a      	strb	r2, [r3, #0]
    status->Encoder_connected = value & (1 << 1);
 80025ac:	887b      	ldrh	r3, [r7, #2]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf14      	ite	ne
 80025b6:	2301      	movne	r3, #1
 80025b8:	2300      	moveq	r3, #0
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	705a      	strb	r2, [r3, #1]
    status->Encoder_internal = value & (1 << 2);
 80025c0:	887b      	ldrh	r3, [r7, #2]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	709a      	strb	r2, [r3, #2]
    status->Encoder_CRC = value & (1 << 3);
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf14      	ite	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	2300      	moveq	r3, #0
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	70da      	strb	r2, [r3, #3]
    status->Driver_temperature = value & (1 << 4);
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	711a      	strb	r2, [r3, #4]
    status->Over_voltage = value & (1 << 5);
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2da      	uxtb	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	715a      	strb	r2, [r3, #5]
    status->Under_voltage = value & (1 << 6);
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2da      	uxtb	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	719a      	strb	r2, [r3, #6]
    status->Over_current = value & (1 << 7);
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2da      	uxtb	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	71da      	strb	r2, [r3, #7]
    status->Chop_resistor = value & (1 << 8);
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf14      	ite	ne
 8002642:	2301      	movne	r3, #1
 8002644:	2300      	moveq	r3, #0
 8002646:	b2da      	uxtb	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	721a      	strb	r2, [r3, #8]
    status->Position_following = value & (1 << 9);
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2da      	uxtb	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	725a      	strb	r2, [r3, #9]
    status->Low_logicvoltage = value & (1 << 10);
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002666:	2b00      	cmp	r3, #0
 8002668:	bf14      	ite	ne
 800266a:	2301      	movne	r3, #1
 800266c:	2300      	moveq	r3, #0
 800266e:	b2da      	uxtb	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	729a      	strb	r2, [r3, #10]
    status->Motor_or_driver_IIt = value & (1 << 11);
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2da      	uxtb	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	72da      	strb	r2, [r3, #11]
    status->Over_frequency = value & (1 << 12);
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2da      	uxtb	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	731a      	strb	r2, [r3, #12]
    status->Motor_temperature = value & (1 << 13);
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	735a      	strb	r2, [r3, #13]
    status->Motor_communication = value & (1 << 14);
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	739a      	strb	r2, [r3, #14]
    status->EEPROM_data = value & (1 << 15);
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	73da      	strb	r2, [r3, #15]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <MotorIsConnected>:
bool motorIsConnect = false;
void MotorIsConnected(uint32_t id)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	if(id == 0x701)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f240 7201 	movw	r2, #1793	@ 0x701
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d102      	bne.n	80026fc <MotorIsConnected+0x18>
	{
		motorIsConnect = true;
 80026f6:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <MotorIsConnected+0x24>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
	}
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	200003a4 	.word	0x200003a4

0800270c <CanRecieverCallback>:
void CanRecieverCallback()
{
 800270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
	MesRx.Canid = Cankinco.Can_txHeader.StdId;
 8002714:	4967      	ldr	r1, [pc, #412]	@ (80028b4 <CanRecieverCallback+0x1a8>)
 8002716:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8002718:	4867      	ldr	r0, [pc, #412]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 800271a:	6001      	str	r1, [r0, #0]
	memcpy(MesRx.mes, Cankinco.Can_rxData,8);
 800271c:	4866      	ldr	r0, [pc, #408]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 800271e:	4965      	ldr	r1, [pc, #404]	@ (80028b4 <CanRecieverCallback+0x1a8>)
 8002720:	f100 0c0a 	add.w	ip, r0, #10
 8002724:	f101 0664 	add.w	r6, r1, #100	@ 0x64
 8002728:	ce03      	ldmia	r6!, {r0, r1}
 800272a:	f8cc 0000 	str.w	r0, [ip]
 800272e:	f8cc 1004 	str.w	r1, [ip, #4]
	if(MesRx.Canid > 0x180 && MesRx.Canid < 0x280 )
 8002732:	4961      	ldr	r1, [pc, #388]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002734:	6809      	ldr	r1, [r1, #0]
 8002736:	f5b1 7fc0 	cmp.w	r1, #384	@ 0x180
 800273a:	d960      	bls.n	80027fe <CanRecieverCallback+0xf2>
 800273c:	495e      	ldr	r1, [pc, #376]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 800273e:	6809      	ldr	r1, [r1, #0]
 8002740:	f5b1 7f20 	cmp.w	r1, #640	@ 0x280
 8002744:	d25b      	bcs.n	80027fe <CanRecieverCallback+0xf2>
	{
		UINT8_TO_INT32(MesRx.mes,3,Kincoparameter.PosActual);
 8002746:	495c      	ldr	r1, [pc, #368]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002748:	7b49      	ldrb	r1, [r1, #13]
 800274a:	0608      	lsls	r0, r1, #24
 800274c:	495a      	ldr	r1, [pc, #360]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 800274e:	7b09      	ldrb	r1, [r1, #12]
 8002750:	0409      	lsls	r1, r1, #16
 8002752:	4308      	orrs	r0, r1
 8002754:	4958      	ldr	r1, [pc, #352]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002756:	7ac9      	ldrb	r1, [r1, #11]
 8002758:	0209      	lsls	r1, r1, #8
 800275a:	4301      	orrs	r1, r0
 800275c:	4856      	ldr	r0, [pc, #344]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 800275e:	7a80      	ldrb	r0, [r0, #10]
 8002760:	4301      	orrs	r1, r0
 8002762:	4856      	ldr	r0, [pc, #344]	@ (80028bc <CanRecieverCallback+0x1b0>)
 8002764:	6201      	str	r1, [r0, #32]
		int32_t tmp;
		UINT8_TO_INT32(MesRx.mes,7,tmp);
 8002766:	4954      	ldr	r1, [pc, #336]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002768:	7c49      	ldrb	r1, [r1, #17]
 800276a:	0608      	lsls	r0, r1, #24
 800276c:	4952      	ldr	r1, [pc, #328]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 800276e:	7c09      	ldrb	r1, [r1, #16]
 8002770:	0409      	lsls	r1, r1, #16
 8002772:	4308      	orrs	r0, r1
 8002774:	4950      	ldr	r1, [pc, #320]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002776:	7bc9      	ldrb	r1, [r1, #15]
 8002778:	0209      	lsls	r1, r1, #8
 800277a:	4301      	orrs	r1, r0
 800277c:	484e      	ldr	r0, [pc, #312]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 800277e:	7b80      	ldrb	r0, [r0, #14]
 8002780:	4301      	orrs	r1, r0
 8002782:	60b9      	str	r1, [r7, #8]
		Kincoparameter.SpeedReal = DEC_TO_RPM(tmp) ;
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	17c8      	asrs	r0, r1, #31
 8002788:	4688      	mov	r8, r1
 800278a:	4681      	mov	r9, r0
 800278c:	4640      	mov	r0, r8
 800278e:	4649      	mov	r1, r9
 8002790:	f04f 0a00 	mov.w	sl, #0
 8002794:	f04f 0b00 	mov.w	fp, #0
 8002798:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800279c:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80027a0:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80027a4:	4650      	mov	r0, sl
 80027a6:	4659      	mov	r1, fp
 80027a8:	ebb0 0208 	subs.w	r2, r0, r8
 80027ac:	eb61 0309 	sbc.w	r3, r1, r9
 80027b0:	f04f 0000 	mov.w	r0, #0
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	0099      	lsls	r1, r3, #2
 80027ba:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80027be:	0090      	lsls	r0, r2, #2
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	eb12 0408 	adds.w	r4, r2, r8
 80027c8:	eb43 0509 	adc.w	r5, r3, r9
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	012b      	lsls	r3, r5, #4
 80027d6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80027da:	0122      	lsls	r2, r4, #4
 80027dc:	1b11      	subs	r1, r2, r4
 80027de:	6039      	str	r1, [r7, #0]
 80027e0:	eb63 0305 	sbc.w	r3, r3, r5
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	4a36      	ldr	r2, [pc, #216]	@ (80028c0 <CanRecieverCallback+0x1b4>)
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027f0:	f7fe f8e4 	bl	80009bc <__aeabi_ldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4b30      	ldr	r3, [pc, #192]	@ (80028bc <CanRecieverCallback+0x1b0>)
 80027fa:	625a      	str	r2, [r3, #36]	@ 0x24
	{
 80027fc:	e053      	b.n	80028a6 <CanRecieverCallback+0x19a>
	} else if (MesRx.Canid > 0x580 && MesRx.Canid < 0x600)
 80027fe:	4b2e      	ldr	r3, [pc, #184]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002806:	d919      	bls.n	800283c <CanRecieverCallback+0x130>
 8002808:	4b2b      	ldr	r3, [pc, #172]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002810:	d214      	bcs.n	800283c <CanRecieverCallback+0x130>
	{
		for(int x=4; x <8; x++)
 8002812:	2304      	movs	r3, #4
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	e00d      	b.n	8002834 <CanRecieverCallback+0x128>
		{
			MesRx.value[x-4] = Cankinco.Can_rxData[x];
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3b04      	subs	r3, #4
 800281c:	4925      	ldr	r1, [pc, #148]	@ (80028b4 <CanRecieverCallback+0x1a8>)
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	440a      	add	r2, r1
 8002822:	3264      	adds	r2, #100	@ 0x64
 8002824:	7811      	ldrb	r1, [r2, #0]
 8002826:	4a24      	ldr	r2, [pc, #144]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002828:	4413      	add	r3, r2
 800282a:	460a      	mov	r2, r1
 800282c:	719a      	strb	r2, [r3, #6]
		for(int x=4; x <8; x++)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3301      	adds	r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b07      	cmp	r3, #7
 8002838:	ddee      	ble.n	8002818 <CanRecieverCallback+0x10c>
 800283a:	e034      	b.n	80028a6 <CanRecieverCallback+0x19a>
		}
	} else if (MesRx.Canid > 0x280 && MesRx.Canid < 0x300)
 800283c:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8002844:	d925      	bls.n	8002892 <CanRecieverCallback+0x186>
 8002846:	4b1c      	ldr	r3, [pc, #112]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800284e:	d220      	bcs.n	8002892 <CanRecieverCallback+0x186>
	{
		Kincoparameter.motorconnect = true ;
 8002850:	4b1a      	ldr	r3, [pc, #104]	@ (80028bc <CanRecieverCallback+0x1b0>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
		UINT8_TO_INT16(MesRx.mes,1,Kincoparameter.I_q);
 8002856:	4b18      	ldr	r3, [pc, #96]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002858:	7adb      	ldrb	r3, [r3, #11]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	b21a      	sxth	r2, r3
 800285e:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002860:	7a9b      	ldrb	r3, [r3, #10]
 8002862:	b21b      	sxth	r3, r3
 8002864:	4313      	orrs	r3, r2
 8002866:	b21a      	sxth	r2, r3
 8002868:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <CanRecieverCallback+0x1b0>)
 800286a:	805a      	strh	r2, [r3, #2]
		UINT8_TO_INT16(MesRx.mes,3,Kincoparameter.Error_code);
 800286c:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 800286e:	7b5b      	ldrb	r3, [r3, #13]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	b21a      	sxth	r2, r3
 8002874:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002876:	7b1b      	ldrb	r3, [r3, #12]
 8002878:	b21b      	sxth	r3, r3
 800287a:	4313      	orrs	r3, r2
 800287c:	b21b      	sxth	r3, r3
 800287e:	b29a      	uxth	r2, r3
 8002880:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <CanRecieverCallback+0x1b0>)
 8002882:	809a      	strh	r2, [r3, #4]
		setKincoErrorStatus(&Kincoparameter.Error_status, Kincoparameter.Error_code);
 8002884:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <CanRecieverCallback+0x1b0>)
 8002886:	889b      	ldrh	r3, [r3, #4]
 8002888:	4619      	mov	r1, r3
 800288a:	480e      	ldr	r0, [pc, #56]	@ (80028c4 <CanRecieverCallback+0x1b8>)
 800288c:	f7ff fe7e 	bl	800258c <setKincoErrorStatus>
 8002890:	e009      	b.n	80028a6 <CanRecieverCallback+0x19a>
	}else if (MesRx.Canid > 0x700)
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800289a:	d904      	bls.n	80028a6 <CanRecieverCallback+0x19a>
	{
		MotorIsConnected(MesRx.Canid);
 800289c:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <CanRecieverCallback+0x1ac>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff1f 	bl	80026e4 <MotorIsConnected>
	}

	readParameter();
 80028a6:	f000 fb67 	bl	8002f78 <readParameter>
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028b4:	20000298 	.word	0x20000298
 80028b8:	20000318 	.word	0x20000318
 80028bc:	2000032c 	.word	0x2000032c
 80028c0:	004e2000 	.word	0x004e2000
 80028c4:	20000332 	.word	0x20000332

080028c8 <CreateMessage>:
Message_Kinco_Can CreateMessage( uint32_t Res, uint32_t value )
{
 80028c8:	b4b0      	push	{r4, r5, r7}
 80028ca:	b091      	sub	sp, #68	@ 0x44
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
	uint8_t byteAdd[4];
	uint8_t byteval[4];
	uint8_t mes[8];
	Message_Kinco_Can candata;
	//candata.Canid = motorid ;
	INT_TO_UINT8_ARRAY(Res, byteAdd);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	0e1b      	lsrs	r3, r3, #24
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	INT_TO_UINT8_ARRAY(value, byteval);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0e1b      	lsrs	r3, r3, #24
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0c1b      	lsrs	r3, r3, #16
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t ObjectSubindex = 0x23;
 8002920:	2323      	movs	r3, #35	@ 0x23
 8002922:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	mes[0] = ObjectSubindex;
 8002926:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800292a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	mes[1] = byteAdd[1];
 800292e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002932:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	mes[2] = byteAdd[0];
 8002936:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800293a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	mes[3] = byteAdd[2];
 800293e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	mes[4] = byteval[3];
 8002946:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800294a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	mes[5] = byteval[2];
 800294e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002952:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	mes[6] = byteval[1];
 8002956:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800295a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	mes[7] = byteval[0];
 800295e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
//	mes[8] = '\00';
	candata.Res = ((uint16_t)byteAdd[0]<< 8) | byteAdd[1];
 8002966:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	b21a      	sxth	r2, r3
 800296e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002972:	b21b      	sxth	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	b21b      	sxth	r3, r3
 8002978:	b29b      	uxth	r3, r3
 800297a:	833b      	strh	r3, [r7, #24]
	memcpy(candata.mes,mes,8);
 800297c:	f107 021e 	add.w	r2, r7, #30
 8002980:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002984:	cb03      	ldmia	r3!, {r0, r1}
 8002986:	6010      	str	r0, [r2, #0]
 8002988:	6051      	str	r1, [r2, #4]
	for(int x=4; x <8; x++)
 800298a:	2304      	movs	r3, #4
 800298c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800298e:	e00d      	b.n	80029ac <CreateMessage+0xe4>
	{
		candata.value[x-4] = mes[x];
 8002990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002992:	3b04      	subs	r3, #4
 8002994:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002998:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800299a:	440a      	add	r2, r1
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	3340      	adds	r3, #64	@ 0x40
 80029a0:	443b      	add	r3, r7
 80029a2:	f803 2c26 	strb.w	r2, [r3, #-38]
	for(int x=4; x <8; x++)
 80029a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a8:	3301      	adds	r3, #1
 80029aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ae:	2b07      	cmp	r3, #7
 80029b0:	ddee      	ble.n	8002990 <CreateMessage+0xc8>
	}
	return candata;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	461d      	mov	r5, r3
 80029b6:	f107 0414 	add.w	r4, r7, #20
 80029ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	602b      	str	r3, [r5, #0]
}
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	3744      	adds	r7, #68	@ 0x44
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bcb0      	pop	{r4, r5, r7}
 80029ca:	4770      	bx	lr

080029cc <MotorInit>:

void MotorInit(CAN_HandleTypeDef *hcan)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	  Can_begin(&Cankinco, hcan, 0 );
 80029d4:	2200      	movs	r2, #0
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	480a      	ldr	r0, [pc, #40]	@ (8002a04 <MotorInit+0x38>)
 80029da:	f7ff fbcd 	bl	8002178 <Can_begin>
	  CanCofigfilter(&Cankinco, FilterHigh, FilterLow);
 80029de:	2211      	movs	r2, #17
 80029e0:	2111      	movs	r1, #17
 80029e2:	4808      	ldr	r0, [pc, #32]	@ (8002a04 <MotorInit+0x38>)
 80029e4:	f7ff fc3c 	bl	8002260 <CanCofigfilter>
	  Cankinco.CanRxIT_Callback = CanRecieverCallback;
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <MotorInit+0x38>)
 80029ea:	4a07      	ldr	r2, [pc, #28]	@ (8002a08 <MotorInit+0x3c>)
 80029ec:	67da      	str	r2, [r3, #124]	@ 0x7c
	  Can_Start(&Cankinco, MotorID[0]);
 80029ee:	4b07      	ldr	r3, [pc, #28]	@ (8002a0c <MotorInit+0x40>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4619      	mov	r1, r3
 80029f4:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <MotorInit+0x38>)
 80029f6:	f7ff fc69 	bl	80022cc <Can_Start>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000298 	.word	0x20000298
 8002a08:	0800270d 	.word	0x0800270d
 8002a0c:	20000030 	.word	0x20000030

08002a10 <SetOperationMode>:

bool SetOperationMode(uint32_t vl, uint32_t id)
{
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b08e      	sub	sp, #56	@ 0x38
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	61f8      	str	r0, [r7, #28]
 8002a18:	61b9      	str	r1, [r7, #24]
    Message_Kinco_Can temp;
    Cankinco.Can_txHeader.StdId = id ;
 8002a1a:	4a21      	ldr	r2, [pc, #132]	@ (8002aa0 <SetOperationMode+0x90>)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    uint16_t timeout = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	86fb      	strh	r3, [r7, #54]	@ 0x36
    temp = CreateMessage(OperationModeRes, vl);
 8002a24:	463b      	mov	r3, r7
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	491e      	ldr	r1, [pc, #120]	@ (8002aa4 <SetOperationMode+0x94>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff4c 	bl	80028c8 <CreateMessage>
 8002a30:	f107 0420 	add.w	r4, r7, #32
 8002a34:	463d      	mov	r5, r7
 8002a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3a:	682b      	ldr	r3, [r5, #0]
 8002a3c:	6023      	str	r3, [r4, #0]
    temp.mes[0] = 0x2F;
 8002a3e:	232f      	movs	r3, #47	@ 0x2f
 8002a40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    do {
        Can_Write(&Cankinco, temp.mes, DATA_BYTE_6);
 8002a44:	f107 0320 	add.w	r3, r7, #32
 8002a48:	330a      	adds	r3, #10
 8002a4a:	2206      	movs	r2, #6
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4814      	ldr	r0, [pc, #80]	@ (8002aa0 <SetOperationMode+0x90>)
 8002a50:	f7ff fbea 	bl	8002228 <Can_Write>
        timeout++;
 8002a54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a56:	3301      	adds	r3, #1
 8002a58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        osDelay(100);
 8002a5a:	2064      	movs	r0, #100	@ 0x64
 8002a5c:	f003 fa56 	bl	8005f0c <osDelay>
    } while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 20);
 8002a60:	f107 0320 	add.w	r3, r7, #32
 8002a64:	3306      	adds	r3, #6
 8002a66:	2204      	movs	r2, #4
 8002a68:	490f      	ldr	r1, [pc, #60]	@ (8002aa8 <SetOperationMode+0x98>)
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f006 f8ec 	bl	8008c48 <memcmp>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <SetOperationMode+0x6c>
 8002a76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002a78:	2b13      	cmp	r3, #19
 8002a7a:	d9e3      	bls.n	8002a44 <SetOperationMode+0x34>

    return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true  ;
 8002a7c:	f107 0320 	add.w	r3, r7, #32
 8002a80:	3306      	adds	r3, #6
 8002a82:	2204      	movs	r2, #4
 8002a84:	4908      	ldr	r1, [pc, #32]	@ (8002aa8 <SetOperationMode+0x98>)
 8002a86:	4618      	mov	r0, r3
 8002a88:	f006 f8de 	bl	8008c48 <memcmp>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf14      	ite	ne
 8002a92:	2301      	movne	r3, #1
 8002a94:	2300      	moveq	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3738      	adds	r7, #56	@ 0x38
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa0:	20000298 	.word	0x20000298
 8002aa4:	60600008 	.word	0x60600008
 8002aa8:	2000031e 	.word	0x2000031e

08002aac <SetControlWord>:

bool SetControlWord (uint32_t vl, uint32_t id)
{
 8002aac:	b5b0      	push	{r4, r5, r7, lr}
 8002aae:	b08e      	sub	sp, #56	@ 0x38
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	61f8      	str	r0, [r7, #28]
 8002ab4:	61b9      	str	r1, [r7, #24]
	Message_Kinco_Can temp ;
	Cankinco.Can_txHeader.StdId = id ;
 8002ab6:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <SetControlWord+0x90>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	62d3      	str	r3, [r2, #44]	@ 0x2c
	uint16_t timeout = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	86fb      	strh	r3, [r7, #54]	@ 0x36
	temp = CreateMessage(ControlWordRes, vl);
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	491e      	ldr	r1, [pc, #120]	@ (8002b40 <SetControlWord+0x94>)
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fefe 	bl	80028c8 <CreateMessage>
 8002acc:	f107 0420 	add.w	r4, r7, #32
 8002ad0:	463d      	mov	r5, r7
 8002ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad6:	682b      	ldr	r3, [r5, #0]
 8002ad8:	6023      	str	r3, [r4, #0]
	temp.mes[0] = 0x2B;
 8002ada:	232b      	movs	r3, #43	@ 0x2b
 8002adc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	do {
		Can_Write(&Cankinco, temp.mes, DATA_BYTE_6);
 8002ae0:	f107 0320 	add.w	r3, r7, #32
 8002ae4:	330a      	adds	r3, #10
 8002ae6:	2206      	movs	r2, #6
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4814      	ldr	r0, [pc, #80]	@ (8002b3c <SetControlWord+0x90>)
 8002aec:	f7ff fb9c 	bl	8002228 <Can_Write>
		timeout ++ ;
 8002af0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002af2:	3301      	adds	r3, #1
 8002af4:	86fb      	strh	r3, [r7, #54]	@ 0x36
		osDelay(100);
 8002af6:	2064      	movs	r0, #100	@ 0x64
 8002af8:	f003 fa08 	bl	8005f0c <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 20);
 8002afc:	f107 0320 	add.w	r3, r7, #32
 8002b00:	3306      	adds	r3, #6
 8002b02:	2204      	movs	r2, #4
 8002b04:	490f      	ldr	r1, [pc, #60]	@ (8002b44 <SetControlWord+0x98>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	f006 f89e 	bl	8008c48 <memcmp>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <SetControlWord+0x6c>
 8002b12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b14:	2b13      	cmp	r3, #19
 8002b16:	d9e3      	bls.n	8002ae0 <SetControlWord+0x34>

    return memcmp(temp.value, MesRx.value, 4) == 0 ? false :  true ;
 8002b18:	f107 0320 	add.w	r3, r7, #32
 8002b1c:	3306      	adds	r3, #6
 8002b1e:	2204      	movs	r2, #4
 8002b20:	4908      	ldr	r1, [pc, #32]	@ (8002b44 <SetControlWord+0x98>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f006 f890 	bl	8008c48 <memcmp>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf14      	ite	ne
 8002b2e:	2301      	movne	r3, #1
 8002b30:	2300      	moveq	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3738      	adds	r7, #56	@ 0x38
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3c:	20000298 	.word	0x20000298
 8002b40:	60400010 	.word	0x60400010
 8002b44:	2000031e 	.word	0x2000031e

08002b48 <SDOProfileAcc>:
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
}
bool SDOProfileAcc(int vl, uint32_t id)
{
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	b097      	sub	sp, #92	@ 0x5c
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002b52:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	Cankinco.Can_txHeader.StdId = id ;
 8002b54:	484d      	ldr	r0, [pc, #308]	@ (8002c8c <SDOProfileAcc+0x144>)
 8002b56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b58:	62c1      	str	r1, [r0, #44]	@ 0x2c
	int64_t dec = RPS_TO_DEC(vl);
 8002b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b5c:	17c8      	asrs	r0, r1, #31
 8002b5e:	4688      	mov	r8, r1
 8002b60:	4681      	mov	r9, r0
 8002b62:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002b66:	f04f 0000 	mov.w	r0, #0
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	e9c7 0100 	strd	r0, r1, [r7]
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	008e      	lsls	r6, r1, #2
 8002b76:	607e      	str	r6, [r7, #4]
 8002b78:	687e      	ldr	r6, [r7, #4]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8002b80:	607e      	str	r6, [r7, #4]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	0089      	lsls	r1, r1, #2
 8002b86:	6039      	str	r1, [r7, #0]
 8002b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b8c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002b90:	4601      	mov	r1, r0
 8002b92:	eb11 0408 	adds.w	r4, r1, r8
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	eb41 0509 	adc.w	r5, r1, r9
 8002b9c:	f04f 0000 	mov.w	r0, #0
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	00e9      	lsls	r1, r5, #3
 8002ba6:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002baa:	00e0      	lsls	r0, r4, #3
 8002bac:	4604      	mov	r4, r0
 8002bae:	460d      	mov	r5, r1
 8002bb0:	ebb4 0208 	subs.w	r2, r4, r8
 8002bb4:	eb65 0309 	sbc.w	r3, r5, r9
 8002bb8:	f04f 0000 	mov.w	r0, #0
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	0119      	lsls	r1, r3, #4
 8002bc2:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002bc6:	0110      	lsls	r0, r2, #4
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	eb12 0a08 	adds.w	sl, r2, r8
 8002bd0:	eb43 0b09 	adc.w	fp, r3, r9
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	ea4f 530b 	mov.w	r3, fp, lsl #20
 8002be0:	ea43 331a 	orr.w	r3, r3, sl, lsr #12
 8002be4:	ea4f 520a 	mov.w	r2, sl, lsl #20
 8002be8:	4692      	mov	sl, r2
 8002bea:	469b      	mov	fp, r3
 8002bec:	4650      	mov	r0, sl
 8002bee:	4659      	mov	r1, fp
 8002bf0:	4a27      	ldr	r2, [pc, #156]	@ (8002c90 <SDOProfileAcc+0x148>)
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	f7fd fee1 	bl	80009bc <__aeabi_ldivmod>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(ProfileAccRes, dec);
 8002c02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c04:	f107 0310 	add.w	r3, r7, #16
 8002c08:	4922      	ldr	r1, [pc, #136]	@ (8002c94 <SDOProfileAcc+0x14c>)
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fe5c 	bl	80028c8 <CreateMessage>
 8002c10:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002c14:	f107 0510 	add.w	r5, r7, #16
 8002c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	6023      	str	r3, [r4, #0]
	uint16_t timeout = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	do {
		Can_Write(&Cankinco, temp.mes, DATA_BYTE_8);
 8002c26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c2a:	330a      	adds	r3, #10
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4816      	ldr	r0, [pc, #88]	@ (8002c8c <SDOProfileAcc+0x144>)
 8002c32:	f7ff faf9 	bl	8002228 <Can_Write>
		timeout++;
 8002c36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		osDelay(20);
 8002c40:	2014      	movs	r0, #20
 8002c42:	f003 f963 	bl	8005f0c <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);
 8002c46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c4a:	3306      	adds	r3, #6
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	4912      	ldr	r1, [pc, #72]	@ (8002c98 <SDOProfileAcc+0x150>)
 8002c50:	4618      	mov	r0, r3
 8002c52:	f005 fff9 	bl	8008c48 <memcmp>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <SDOProfileAcc+0x11c>
 8002c5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002c60:	2b63      	cmp	r3, #99	@ 0x63
 8002c62:	d9e0      	bls.n	8002c26 <SDOProfileAcc+0xde>

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
 8002c64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c68:	3306      	adds	r3, #6
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	490a      	ldr	r1, [pc, #40]	@ (8002c98 <SDOProfileAcc+0x150>)
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f005 ffea 	bl	8008c48 <memcmp>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	375c      	adds	r7, #92	@ 0x5c
 8002c84:	46bd      	mov	sp, r7
 8002c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000298 	.word	0x20000298
 8002c90:	003d0900 	.word	0x003d0900
 8002c94:	60830020 	.word	0x60830020
 8002c98:	2000031e 	.word	0x2000031e

08002c9c <SDOProfileDec>:
bool SDOProfileDec(int vl, uint32_t id)
{
 8002c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca0:	b097      	sub	sp, #92	@ 0x5c
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002ca6:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	Cankinco.Can_txHeader.StdId = id ;
 8002ca8:	484d      	ldr	r0, [pc, #308]	@ (8002de0 <SDOProfileDec+0x144>)
 8002caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cac:	62c1      	str	r1, [r0, #44]	@ 0x2c
	int64_t dec = RPS_TO_DEC(vl);
 8002cae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cb0:	17c8      	asrs	r0, r1, #31
 8002cb2:	4688      	mov	r8, r1
 8002cb4:	4681      	mov	r9, r0
 8002cb6:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002cba:	f04f 0000 	mov.w	r0, #0
 8002cbe:	f04f 0100 	mov.w	r1, #0
 8002cc2:	e9c7 0100 	strd	r0, r1, [r7]
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	008e      	lsls	r6, r1, #2
 8002cca:	607e      	str	r6, [r7, #4]
 8002ccc:	687e      	ldr	r6, [r7, #4]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8002cd4:	607e      	str	r6, [r7, #4]
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	0089      	lsls	r1, r1, #2
 8002cda:	6039      	str	r1, [r7, #0]
 8002cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ce0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002ce4:	4601      	mov	r1, r0
 8002ce6:	eb11 0408 	adds.w	r4, r1, r8
 8002cea:	68f9      	ldr	r1, [r7, #12]
 8002cec:	eb41 0509 	adc.w	r5, r1, r9
 8002cf0:	f04f 0000 	mov.w	r0, #0
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	00e9      	lsls	r1, r5, #3
 8002cfa:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002cfe:	00e0      	lsls	r0, r4, #3
 8002d00:	4604      	mov	r4, r0
 8002d02:	460d      	mov	r5, r1
 8002d04:	ebb4 0208 	subs.w	r2, r4, r8
 8002d08:	eb65 0309 	sbc.w	r3, r5, r9
 8002d0c:	f04f 0000 	mov.w	r0, #0
 8002d10:	f04f 0100 	mov.w	r1, #0
 8002d14:	0119      	lsls	r1, r3, #4
 8002d16:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002d1a:	0110      	lsls	r0, r2, #4
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	eb12 0a08 	adds.w	sl, r2, r8
 8002d24:	eb43 0b09 	adc.w	fp, r3, r9
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	ea4f 530b 	mov.w	r3, fp, lsl #20
 8002d34:	ea43 331a 	orr.w	r3, r3, sl, lsr #12
 8002d38:	ea4f 520a 	mov.w	r2, sl, lsl #20
 8002d3c:	4692      	mov	sl, r2
 8002d3e:	469b      	mov	fp, r3
 8002d40:	4650      	mov	r0, sl
 8002d42:	4659      	mov	r1, fp
 8002d44:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <SDOProfileDec+0x148>)
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	f7fd fe37 	bl	80009bc <__aeabi_ldivmod>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(ProfileDecRes, dec);
 8002d56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d58:	f107 0310 	add.w	r3, r7, #16
 8002d5c:	4922      	ldr	r1, [pc, #136]	@ (8002de8 <SDOProfileDec+0x14c>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fdb2 	bl	80028c8 <CreateMessage>
 8002d64:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002d68:	f107 0510 	add.w	r5, r7, #16
 8002d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d70:	682b      	ldr	r3, [r5, #0]
 8002d72:	6023      	str	r3, [r4, #0]
	uint16_t timeout = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	do {
		Can_Write(&Cankinco, temp.mes, DATA_BYTE_8);
 8002d7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d7e:	330a      	adds	r3, #10
 8002d80:	2208      	movs	r2, #8
 8002d82:	4619      	mov	r1, r3
 8002d84:	4816      	ldr	r0, [pc, #88]	@ (8002de0 <SDOProfileDec+0x144>)
 8002d86:	f7ff fa4f 	bl	8002228 <Can_Write>
		timeout++;
 8002d8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		osDelay(20);
 8002d94:	2014      	movs	r0, #20
 8002d96:	f003 f8b9 	bl	8005f0c <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);
 8002d9a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d9e:	3306      	adds	r3, #6
 8002da0:	2204      	movs	r2, #4
 8002da2:	4912      	ldr	r1, [pc, #72]	@ (8002dec <SDOProfileDec+0x150>)
 8002da4:	4618      	mov	r0, r3
 8002da6:	f005 ff4f 	bl	8008c48 <memcmp>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <SDOProfileDec+0x11c>
 8002db0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002db4:	2b63      	cmp	r3, #99	@ 0x63
 8002db6:	d9e0      	bls.n	8002d7a <SDOProfileDec+0xde>

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
 8002db8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002dbc:	3306      	adds	r3, #6
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	490a      	ldr	r1, [pc, #40]	@ (8002dec <SDOProfileDec+0x150>)
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f005 ff40 	bl	8008c48 <memcmp>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3

}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	375c      	adds	r7, #92	@ 0x5c
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dde:	bf00      	nop
 8002de0:	20000298 	.word	0x20000298
 8002de4:	003d0900 	.word	0x003d0900
 8002de8:	60840020 	.word	0x60840020
 8002dec:	2000031e 	.word	0x2000031e

08002df0 <SetSpeed>:

    return memcmp(temp.value, MesRx.value, 4) == 0 ? false :  true ;
}

void SetSpeed(int vl, uint32_t TPDO)
{
 8002df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df4:	b095      	sub	sp, #84	@ 0x54
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002dfa:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	int64_t dec = RPM_TO_DEC(vl);
 8002dfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dfe:	17c8      	asrs	r0, r1, #31
 8002e00:	4688      	mov	r8, r1
 8002e02:	4681      	mov	r9, r0
 8002e04:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002e08:	f04f 0000 	mov.w	r0, #0
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	e9c7 0100 	strd	r0, r1, [r7]
 8002e14:	68f9      	ldr	r1, [r7, #12]
 8002e16:	008e      	lsls	r6, r1, #2
 8002e18:	607e      	str	r6, [r7, #4]
 8002e1a:	687e      	ldr	r6, [r7, #4]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8002e22:	607e      	str	r6, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	0089      	lsls	r1, r1, #2
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e2e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002e32:	4601      	mov	r1, r0
 8002e34:	eb11 0408 	adds.w	r4, r1, r8
 8002e38:	68f9      	ldr	r1, [r7, #12]
 8002e3a:	eb41 0509 	adc.w	r5, r1, r9
 8002e3e:	f04f 0000 	mov.w	r0, #0
 8002e42:	f04f 0100 	mov.w	r1, #0
 8002e46:	00e9      	lsls	r1, r5, #3
 8002e48:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002e4c:	00e0      	lsls	r0, r4, #3
 8002e4e:	4604      	mov	r4, r0
 8002e50:	460d      	mov	r5, r1
 8002e52:	ebb4 0208 	subs.w	r2, r4, r8
 8002e56:	eb65 0309 	sbc.w	r3, r5, r9
 8002e5a:	f04f 0000 	mov.w	r0, #0
 8002e5e:	f04f 0100 	mov.w	r1, #0
 8002e62:	0119      	lsls	r1, r3, #4
 8002e64:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002e68:	0110      	lsls	r0, r2, #4
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	eb12 0a08 	adds.w	sl, r2, r8
 8002e72:	eb43 0b09 	adc.w	fp, r3, r9
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	ea4f 334b 	mov.w	r3, fp, lsl #13
 8002e82:	ea43 43da 	orr.w	r3, r3, sl, lsr #19
 8002e86:	ea4f 324a 	mov.w	r2, sl, lsl #13
 8002e8a:	4692      	mov	sl, r2
 8002e8c:	469b      	mov	fp, r3
 8002e8e:	4650      	mov	r0, sl
 8002e90:	4659      	mov	r1, fp
 8002e92:	f240 7253 	movw	r2, #1875	@ 0x753
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	f7fd fd8f 	bl	80009bc <__aeabi_ldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(TargetSpeedRes, dec);
 8002ea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ea8:	f107 0310 	add.w	r3, r7, #16
 8002eac:	490d      	ldr	r1, [pc, #52]	@ (8002ee4 <SetSpeed+0xf4>)
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fd0a 	bl	80028c8 <CreateMessage>
 8002eb4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002eb8:	f107 0510 	add.w	r5, r7, #16
 8002ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ec0:	682b      	ldr	r3, [r5, #0]
 8002ec2:	6023      	str	r3, [r4, #0]
	Cankinco.Can_txHeader.StdId = TPDO;
 8002ec4:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <SetSpeed+0xf8>)
 8002ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	Can_Write(&Cankinco, temp.value, DATA_BYTE_4);
 8002eca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ece:	3306      	adds	r3, #6
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4804      	ldr	r0, [pc, #16]	@ (8002ee8 <SetSpeed+0xf8>)
 8002ed6:	f7ff f9a7 	bl	8002228 <Can_Write>

}
 8002eda:	bf00      	nop
 8002edc:	3754      	adds	r7, #84	@ 0x54
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee4:	60ff0020 	.word	0x60ff0020
 8002ee8:	20000298 	.word	0x20000298

08002eec <NMTmanagement>:

bool NMTmanagement (NMT_Command cmd, uint32_t MotorID)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[3] = {cmd, MotorID };
 8002ef8:	f107 0308 	add.w	r3, r7, #8
 8002efc:	2100      	movs	r1, #0
 8002efe:	460a      	mov	r2, r1
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	460a      	mov	r2, r1
 8002f04:	709a      	strb	r2, [r3, #2]
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	723b      	strb	r3, [r7, #8]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	727b      	strb	r3, [r7, #9]
	Cankinco.Can_txHeader.StdId = 0x0000;
 8002f10:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <NMTmanagement+0x80>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	62da      	str	r2, [r3, #44]	@ 0x2c
	uint16_t timeout = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	81fb      	strh	r3, [r7, #14]
	do {
		Can_Write(&Cankinco, buf, DATA_BYTE_2);
 8002f1a:	f107 0308 	add.w	r3, r7, #8
 8002f1e:	2202      	movs	r2, #2
 8002f20:	4619      	mov	r1, r3
 8002f22:	4812      	ldr	r0, [pc, #72]	@ (8002f6c <NMTmanagement+0x80>)
 8002f24:	f7ff f980 	bl	8002228 <Can_Write>
		timeout++;
 8002f28:	89fb      	ldrh	r3, [r7, #14]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	81fb      	strh	r3, [r7, #14]
		osDelay(50);
 8002f2e:	2032      	movs	r0, #50	@ 0x32
 8002f30:	f002 ffec 	bl	8005f0c <osDelay>
	} while (MesRx.Canid != EncoderID[MotorID-1] && timeout < 10);
 8002f34:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <NMTmanagement+0x84>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	490d      	ldr	r1, [pc, #52]	@ (8002f74 <NMTmanagement+0x88>)
 8002f3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d002      	beq.n	8002f4c <NMTmanagement+0x60>
 8002f46:	89fb      	ldrh	r3, [r7, #14]
 8002f48:	2b09      	cmp	r3, #9
 8002f4a:	d9e6      	bls.n	8002f1a <NMTmanagement+0x2e>

	return MesRx.Canid == EncoderID[MotorID-1]? false : true ;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <NMTmanagement+0x84>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	4907      	ldr	r1, [pc, #28]	@ (8002f74 <NMTmanagement+0x88>)
 8002f56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000298 	.word	0x20000298
 8002f70:	20000318 	.word	0x20000318
 8002f74:	20000040 	.word	0x20000040

08002f78 <readParameter>:

void readParameter()
{
 8002f78:	b490      	push	{r4, r7}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
	for(int i=0; i<MNum; i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	e05f      	b.n	8003044 <readParameter+0xcc>
	{
		if(MesRx.Canid == EncoderID[i])
 8002f84:	4b34      	ldr	r3, [pc, #208]	@ (8003058 <readParameter+0xe0>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4934      	ldr	r1, [pc, #208]	@ (800305c <readParameter+0xe4>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d116      	bne.n	8002fc2 <readParameter+0x4a>
		{
			Kincoparam[i].SpeedReal = Kincoparameter.SpeedReal;
 8002f94:	4b32      	ldr	r3, [pc, #200]	@ (8003060 <readParameter+0xe8>)
 8002f96:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f98:	4832      	ldr	r0, [pc, #200]	@ (8003064 <readParameter+0xec>)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4403      	add	r3, r0
 8002fa6:	3324      	adds	r3, #36	@ 0x24
 8002fa8:	6019      	str	r1, [r3, #0]
			Kincoparam[i].PosActual = Kincoparameter.PosActual;
 8002faa:	4b2d      	ldr	r3, [pc, #180]	@ (8003060 <readParameter+0xe8>)
 8002fac:	6a19      	ldr	r1, [r3, #32]
 8002fae:	482d      	ldr	r0, [pc, #180]	@ (8003064 <readParameter+0xec>)
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4403      	add	r3, r0
 8002fbc:	3320      	adds	r3, #32
 8002fbe:	6019      	str	r1, [r3, #0]
 8002fc0:	e03d      	b.n	800303e <readParameter+0xc6>
		} else if (MesRx.Canid == CurrentID[i])
 8002fc2:	4b25      	ldr	r3, [pc, #148]	@ (8003058 <readParameter+0xe0>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4928      	ldr	r1, [pc, #160]	@ (8003068 <readParameter+0xf0>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d135      	bne.n	800303e <readParameter+0xc6>
		{
			Kincoparam[i].Error_code   = Kincoparameter.Error_code ;
 8002fd2:	4b23      	ldr	r3, [pc, #140]	@ (8003060 <readParameter+0xe8>)
 8002fd4:	8898      	ldrh	r0, [r3, #4]
 8002fd6:	4923      	ldr	r1, [pc, #140]	@ (8003064 <readParameter+0xec>)
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	801a      	strh	r2, [r3, #0]
			Kincoparam[i].Error_status = Kincoparameter.Error_status;
 8002fea:	491e      	ldr	r1, [pc, #120]	@ (8003064 <readParameter+0xec>)
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	4a19      	ldr	r2, [pc, #100]	@ (8003060 <readParameter+0xe8>)
 8002ffa:	3306      	adds	r3, #6
 8002ffc:	3206      	adds	r2, #6
 8002ffe:	6814      	ldr	r4, [r2, #0]
 8003000:	6850      	ldr	r0, [r2, #4]
 8003002:	6891      	ldr	r1, [r2, #8]
 8003004:	68d2      	ldr	r2, [r2, #12]
 8003006:	601c      	str	r4, [r3, #0]
 8003008:	6058      	str	r0, [r3, #4]
 800300a:	6099      	str	r1, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
			Kincoparam[i].I_q          = Kincoparameter.I_q;
 800300e:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <readParameter+0xe8>)
 8003010:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8003014:	4913      	ldr	r1, [pc, #76]	@ (8003064 <readParameter+0xec>)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	440b      	add	r3, r1
 8003022:	3302      	adds	r3, #2
 8003024:	4602      	mov	r2, r0
 8003026:	801a      	strh	r2, [r3, #0]
			Kincoparam[i].motorconnect = Kincoparameter.motorconnect;
 8003028:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <readParameter+0xe8>)
 800302a:	7818      	ldrb	r0, [r3, #0]
 800302c:	490d      	ldr	r1, [pc, #52]	@ (8003064 <readParameter+0xec>)
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	4602      	mov	r2, r0
 800303c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MNum; i++)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3301      	adds	r3, #1
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b01      	cmp	r3, #1
 8003048:	dd9c      	ble.n	8002f84 <readParameter+0xc>
		}

	}
}
 800304a:	bf00      	nop
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bc90      	pop	{r4, r7}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000318 	.word	0x20000318
 800305c:	20000040 	.word	0x20000040
 8003060:	2000032c 	.word	0x2000032c
 8003064:	20000354 	.word	0x20000354
 8003068:	20000048 	.word	0x20000048

0800306c <motorControl>:

void motorControl( bool en, bool error, uint8_t dir, double speed )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	ed87 0b00 	vstr	d0, [r7]
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	460b      	mov	r3, r1
 800307c:	73bb      	strb	r3, [r7, #14]
 800307e:	4613      	mov	r3, r2
 8003080:	737b      	strb	r3, [r7, #13]
	static bool isStop;
	if ((!en || error) && isStop == false)
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	f083 0301 	eor.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <motorControl+0x28>
 800308e:	7bbb      	ldrb	r3, [r7, #14]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d016      	beq.n	80030c2 <motorControl+0x56>
 8003094:	4b2d      	ldr	r3, [pc, #180]	@ (800314c <motorControl+0xe0>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	f083 0301 	eor.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00f      	beq.n	80030c2 <motorControl+0x56>
	{
		Kincoparameter.TargetSpeed = 0 ;
 80030a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003150 <motorControl+0xe4>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]
		SetControlWord(ControlWord_DIS, MotorID[0]); // disable motor
 80030a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003154 <motorControl+0xe8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4619      	mov	r1, r3
 80030ae:	2006      	movs	r0, #6
 80030b0:	f7ff fcfc 	bl	8002aac <SetControlWord>
		isStop = true ;
 80030b4:	4b25      	ldr	r3, [pc, #148]	@ (800314c <motorControl+0xe0>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
		printf("admin stop/////////////////////////\n");
 80030ba:	4827      	ldr	r0, [pc, #156]	@ (8003158 <motorControl+0xec>)
 80030bc:	f005 fce4 	bl	8008a88 <puts>
			Kincoparameter.TargetSpeed = 0 ;
		}
		SetSpeed(Kincoparameter.TargetSpeed, SetSpeedPDO[0]);
	}

}
 80030c0:	e040      	b.n	8003144 <motorControl+0xd8>
	} else if(en && !error)
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d03d      	beq.n	8003144 <motorControl+0xd8>
 80030c8:	7bbb      	ldrb	r3, [r7, #14]
 80030ca:	f083 0301 	eor.w	r3, r3, #1
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d037      	beq.n	8003144 <motorControl+0xd8>
		if(isStop)
 80030d4:	4b1d      	ldr	r3, [pc, #116]	@ (800314c <motorControl+0xe0>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00b      	beq.n	80030f4 <motorControl+0x88>
			SetControlWord(ControlWord_EN, MotorID[0]); // enable motor
 80030dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <motorControl+0xe8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4619      	mov	r1, r3
 80030e2:	200f      	movs	r0, #15
 80030e4:	f7ff fce2 	bl	8002aac <SetControlWord>
			isStop = false;
 80030e8:	4b18      	ldr	r3, [pc, #96]	@ (800314c <motorControl+0xe0>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
			printf("admin disstop/////////////////////////\n");
 80030ee:	481b      	ldr	r0, [pc, #108]	@ (800315c <motorControl+0xf0>)
 80030f0:	f005 fcca 	bl	8008a88 <puts>
		if(dir == 1 || dir == 2)
 80030f4:	7b7b      	ldrb	r3, [r7, #13]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d002      	beq.n	8003100 <motorControl+0x94>
 80030fa:	7b7b      	ldrb	r3, [r7, #13]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d107      	bne.n	8003110 <motorControl+0xa4>
			Kincoparameter.TargetSpeed = speedToRpm(speed);
 8003100:	ed97 0b00 	vldr	d0, [r7]
 8003104:	f000 f82e 	bl	8003164 <speedToRpm>
 8003108:	4603      	mov	r3, r0
 800310a:	4a11      	ldr	r2, [pc, #68]	@ (8003150 <motorControl+0xe4>)
 800310c:	6193      	str	r3, [r2, #24]
 800310e:	e011      	b.n	8003134 <motorControl+0xc8>
		}else if(dir == 3 || dir == 4)
 8003110:	7b7b      	ldrb	r3, [r7, #13]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d002      	beq.n	800311c <motorControl+0xb0>
 8003116:	7b7b      	ldrb	r3, [r7, #13]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d108      	bne.n	800312e <motorControl+0xc2>
			Kincoparameter.TargetSpeed = -speedToRpm(speed);
 800311c:	ed97 0b00 	vldr	d0, [r7]
 8003120:	f000 f820 	bl	8003164 <speedToRpm>
 8003124:	4603      	mov	r3, r0
 8003126:	425b      	negs	r3, r3
 8003128:	4a09      	ldr	r2, [pc, #36]	@ (8003150 <motorControl+0xe4>)
 800312a:	6193      	str	r3, [r2, #24]
 800312c:	e002      	b.n	8003134 <motorControl+0xc8>
			Kincoparameter.TargetSpeed = 0 ;
 800312e:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <motorControl+0xe4>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
		SetSpeed(Kincoparameter.TargetSpeed, SetSpeedPDO[0]);
 8003134:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <motorControl+0xe4>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	4a09      	ldr	r2, [pc, #36]	@ (8003160 <motorControl+0xf4>)
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fe56 	bl	8002df0 <SetSpeed>
}
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	200003a5 	.word	0x200003a5
 8003150:	2000032c 	.word	0x2000032c
 8003154:	20000030 	.word	0x20000030
 8003158:	08009230 	.word	0x08009230
 800315c:	08009254 	.word	0x08009254
 8003160:	20000038 	.word	0x20000038

08003164 <speedToRpm>:
    // Calculate speed (m/s)
    double speed = (wheelCircumference * wheelRPM) / 60.0;
	return speed ;
}
int speedToRpm (double speed)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	ed87 0b00 	vstr	d0, [r7]
    // Calculate Circumference (C = pi * D)
    double wheelCircumference =  whellConfig.PI * whellConfig.wheelDiameter;
 800316e:	4b1a      	ldr	r3, [pc, #104]	@ (80031d8 <speedToRpm+0x74>)
 8003170:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003174:	4b18      	ldr	r3, [pc, #96]	@ (80031d8 <speedToRpm+0x74>)
 8003176:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800317a:	f7fd f9e5 	bl	8000548 <__aeabi_dmul>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// Calculate rpm
	double wheelRPM = (speed*60)/wheelCircumference;
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <speedToRpm+0x78>)
 800318c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003190:	f7fd f9da 	bl	8000548 <__aeabi_dmul>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a0:	f7fd fafc 	bl	800079c <__aeabi_ddiv>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int rpm = wheelRPM * whellConfig.ratio ;
 80031ac:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <speedToRpm+0x74>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd f95f 	bl	8000474 <__aeabi_i2d>
 80031b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031ba:	f7fd f9c5 	bl	8000548 <__aeabi_dmul>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	f7fd fbd1 	bl	800096c <__aeabi_d2iz>
 80031ca:	4603      	mov	r3, r0
 80031cc:	60fb      	str	r3, [r7, #12]
	return rpm ;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000018 	.word	0x20000018
 80031dc:	404e0000 	.word	0x404e0000

080031e0 <speedToRps>:

int speedToRps (double speed)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	ed87 0b00 	vstr	d0, [r7]
	return (speedToRpm(speed)/60);
 80031ea:	ed97 0b00 	vldr	d0, [r7]
 80031ee:	f7ff ffb9 	bl	8003164 <speedToRpm>
 80031f2:	4603      	mov	r3, r0
 80031f4:	4a05      	ldr	r2, [pc, #20]	@ (800320c <speedToRps+0x2c>)
 80031f6:	fb82 1203 	smull	r1, r2, r2, r3
 80031fa:	441a      	add	r2, r3
 80031fc:	1152      	asrs	r2, r2, #5
 80031fe:	17db      	asrs	r3, r3, #31
 8003200:	1ad3      	subs	r3, r2, r3
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	88888889 	.word	0x88888889

08003210 <hydraulicSetState>:
/**
 * @brief    Xuất tín hiệu điều khiển xylanh.
 * @param state: bảng trạng thái điều khiển xylanh
 */

void hydraulicSetState(struct HydraulicTableControl state) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, (GPIO_PinState) state.valve2);
 8003218:	797b      	ldrb	r3, [r7, #5]
 800321a:	461a      	mov	r2, r3
 800321c:	2120      	movs	r1, #32
 800321e:	481d      	ldr	r0, [pc, #116]	@ (8003294 <hydraulicSetState+0x84>)
 8003220:	f001 f9dc 	bl	80045dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, (GPIO_PinState) state.valve3);
 8003224:	79bb      	ldrb	r3, [r7, #6]
 8003226:	461a      	mov	r2, r3
 8003228:	2140      	movs	r1, #64	@ 0x40
 800322a:	481a      	ldr	r0, [pc, #104]	@ (8003294 <hydraulicSetState+0x84>)
 800322c:	f001 f9d6 	bl	80045dc <HAL_GPIO_WritePin>

	if (state.pump == 1) {
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d114      	bne.n	8003260 <hydraulicSetState+0x50>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, (GPIO_PinState) state.valve1);
 8003236:	793b      	ldrb	r3, [r7, #4]
 8003238:	461a      	mov	r2, r3
 800323a:	2110      	movs	r1, #16
 800323c:	4815      	ldr	r0, [pc, #84]	@ (8003294 <hydraulicSetState+0x84>)
 800323e:	f001 f9cd 	bl	80045dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, (GPIO_PinState) state.pump);
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	461a      	mov	r2, r3
 8003246:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800324a:	4812      	ldr	r0, [pc, #72]	@ (8003294 <hydraulicSetState+0x84>)
 800324c:	f001 f9c6 	bl	80045dc <HAL_GPIO_WritePin>
		mcp4922.setDAC(1024, 1024);
 8003250:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <hydraulicSetState+0x88>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003258:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800325c:	4798      	blx	r3
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, (GPIO_PinState) state.valve1);
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, (GPIO_PinState) state.pump);
		mcp4922.setDAC(0, 0);

	}
}
 800325e:	e014      	b.n	800328a <hydraulicSetState+0x7a>
		osDelay(100);
 8003260:	2064      	movs	r0, #100	@ 0x64
 8003262:	f002 fe53 	bl	8005f0c <osDelay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, (GPIO_PinState) state.valve1);
 8003266:	793b      	ldrb	r3, [r7, #4]
 8003268:	461a      	mov	r2, r3
 800326a:	2110      	movs	r1, #16
 800326c:	4809      	ldr	r0, [pc, #36]	@ (8003294 <hydraulicSetState+0x84>)
 800326e:	f001 f9b5 	bl	80045dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, (GPIO_PinState) state.pump);
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	461a      	mov	r2, r3
 8003276:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800327a:	4806      	ldr	r0, [pc, #24]	@ (8003294 <hydraulicSetState+0x84>)
 800327c:	f001 f9ae 	bl	80045dc <HAL_GPIO_WritePin>
		mcp4922.setDAC(0, 0);
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <hydraulicSetState+0x88>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2100      	movs	r1, #0
 8003286:	2000      	movs	r0, #0
 8003288:	4798      	blx	r3
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40021800 	.word	0x40021800
 8003298:	2000000c 	.word	0x2000000c

0800329c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032a0:	4b0e      	ldr	r3, [pc, #56]	@ (80032dc <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0d      	ldr	r2, [pc, #52]	@ (80032dc <HAL_Init+0x40>)
 80032a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032ac:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <HAL_Init+0x40>)
 80032b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b8:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <HAL_Init+0x40>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a07      	ldr	r2, [pc, #28]	@ (80032dc <HAL_Init+0x40>)
 80032be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c4:	2003      	movs	r0, #3
 80032c6:	f000 ff93 	bl	80041f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ca:	200f      	movs	r0, #15
 80032cc:	f000 f808 	bl	80032e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d0:	f7fe fc76 	bl	8001bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023c00 	.word	0x40023c00

080032e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032e8:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <HAL_InitTick+0x54>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <HAL_InitTick+0x58>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 ffab 	bl	800425a <HAL_SYSTICK_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00e      	b.n	800332c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b0f      	cmp	r3, #15
 8003312:	d80a      	bhi.n	800332a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003314:	2200      	movs	r2, #0
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f000 ff73 	bl	8004206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003320:	4a06      	ldr	r2, [pc, #24]	@ (800333c <HAL_InitTick+0x5c>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000000 	.word	0x20000000
 8003338:	20000054 	.word	0x20000054
 800333c:	20000050 	.word	0x20000050

08003340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_IncTick+0x20>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_IncTick+0x24>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4a04      	ldr	r2, [pc, #16]	@ (8003364 <HAL_IncTick+0x24>)
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000054 	.word	0x20000054
 8003364:	200003a8 	.word	0x200003a8

08003368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return uwTick;
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <HAL_GetTick+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	200003a8 	.word	0x200003a8

08003380 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0ed      	b.n	800356e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe fc3a 	bl	8001c18 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b4:	f7ff ffd8 	bl	8003368 <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033ba:	e012      	b.n	80033e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033bc:	f7ff ffd4 	bl	8003368 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b0a      	cmp	r3, #10
 80033c8:	d90b      	bls.n	80033e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2205      	movs	r2, #5
 80033da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0c5      	b.n	800356e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0e5      	beq.n	80033bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0202 	bic.w	r2, r2, #2
 80033fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003400:	f7ff ffb2 	bl	8003368 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003406:	e012      	b.n	800342e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003408:	f7ff ffae 	bl	8003368 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b0a      	cmp	r3, #10
 8003414:	d90b      	bls.n	800342e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2205      	movs	r2, #5
 8003426:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e09f      	b.n	800356e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e5      	bne.n	8003408 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7e1b      	ldrb	r3, [r3, #24]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d108      	bne.n	8003456 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	e007      	b.n	8003466 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	7e5b      	ldrb	r3, [r3, #25]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d108      	bne.n	8003480 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e007      	b.n	8003490 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800348e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	7e9b      	ldrb	r3, [r3, #26]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d108      	bne.n	80034aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0220 	orr.w	r2, r2, #32
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e007      	b.n	80034ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0220 	bic.w	r2, r2, #32
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	7edb      	ldrb	r3, [r3, #27]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d108      	bne.n	80034d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0210 	bic.w	r2, r2, #16
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e007      	b.n	80034e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0210 	orr.w	r2, r2, #16
 80034e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	7f1b      	ldrb	r3, [r3, #28]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d108      	bne.n	80034fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0208 	orr.w	r2, r2, #8
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e007      	b.n	800350e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0208 	bic.w	r2, r2, #8
 800350c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	7f5b      	ldrb	r3, [r3, #29]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d108      	bne.n	8003528 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0204 	orr.w	r2, r2, #4
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e007      	b.n	8003538 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0204 	bic.w	r2, r2, #4
 8003536:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	ea42 0103 	orr.w	r1, r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	1e5a      	subs	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800358e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d003      	beq.n	800359e <HAL_CAN_ConfigFilter+0x26>
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	2b02      	cmp	r3, #2
 800359a:	f040 80be 	bne.w	800371a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800359e:	4b65      	ldr	r3, [pc, #404]	@ (8003734 <HAL_CAN_ConfigFilter+0x1bc>)
 80035a0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035a8:	f043 0201 	orr.w	r2, r3, #1
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035b8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	431a      	orrs	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	2201      	movs	r2, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	401a      	ands	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d123      	bne.n	8003648 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	43db      	mvns	r3, r3
 800360a:	401a      	ands	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003622:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3248      	adds	r2, #72	@ 0x48
 8003628:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800363c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800363e:	6979      	ldr	r1, [r7, #20]
 8003640:	3348      	adds	r3, #72	@ 0x48
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	440b      	add	r3, r1
 8003646:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d122      	bne.n	8003696 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	431a      	orrs	r2, r3
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003670:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	3248      	adds	r2, #72	@ 0x48
 8003676:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800368a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800368c:	6979      	ldr	r1, [r7, #20]
 800368e:	3348      	adds	r3, #72	@ 0x48
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	440b      	add	r3, r1
 8003694:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	401a      	ands	r2, r3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80036b0:	e007      	b.n	80036c2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	401a      	ands	r2, r3
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80036dc:	e007      	b.n	80036ee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d107      	bne.n	8003706 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	431a      	orrs	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800370c:	f023 0201 	bic.w	r2, r3, #1
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	e006      	b.n	8003728 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
  }
}
 8003728:	4618      	mov	r0, r3
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40006400 	.word	0x40006400

08003738 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d12e      	bne.n	80037aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003764:	f7ff fe00 	bl	8003368 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800376a:	e012      	b.n	8003792 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800376c:	f7ff fdfc 	bl	8003368 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b0a      	cmp	r3, #10
 8003778:	d90b      	bls.n	8003792 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2205      	movs	r2, #5
 800378a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e012      	b.n	80037b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e5      	bne.n	800376c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e006      	b.n	80037b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	@ 0x24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037de:	7ffb      	ldrb	r3, [r7, #31]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d003      	beq.n	80037ec <HAL_CAN_AddTxMessage+0x2c>
 80037e4:	7ffb      	ldrb	r3, [r7, #31]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	f040 80ad 	bne.w	8003946 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d105      	bne.n	800380c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8095 	beq.w	8003936 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	0e1b      	lsrs	r3, r3, #24
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003816:	2201      	movs	r2, #1
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	409a      	lsls	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003832:	68f9      	ldr	r1, [r7, #12]
 8003834:	6809      	ldr	r1, [r1, #0]
 8003836:	431a      	orrs	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3318      	adds	r3, #24
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	440b      	add	r3, r1
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e00f      	b.n	8003864 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800384e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003854:	68f9      	ldr	r1, [r7, #12]
 8003856:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003858:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	3318      	adds	r3, #24
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	440b      	add	r3, r1
 8003862:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6819      	ldr	r1, [r3, #0]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	3318      	adds	r3, #24
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	440b      	add	r3, r1
 8003874:	3304      	adds	r3, #4
 8003876:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	7d1b      	ldrb	r3, [r3, #20]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d111      	bne.n	80038a4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	3318      	adds	r3, #24
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	4413      	add	r3, r2
 800388c:	3304      	adds	r3, #4
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	6811      	ldr	r1, [r2, #0]
 8003894:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	3318      	adds	r3, #24
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	440b      	add	r3, r1
 80038a0:	3304      	adds	r3, #4
 80038a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3307      	adds	r3, #7
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	061a      	lsls	r2, r3, #24
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3306      	adds	r3, #6
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3305      	adds	r3, #5
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	4313      	orrs	r3, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	3204      	adds	r2, #4
 80038c4:	7812      	ldrb	r2, [r2, #0]
 80038c6:	4610      	mov	r0, r2
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	6811      	ldr	r1, [r2, #0]
 80038cc:	ea43 0200 	orr.w	r2, r3, r0
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	440b      	add	r3, r1
 80038d6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80038da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3303      	adds	r3, #3
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	061a      	lsls	r2, r3, #24
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3302      	adds	r3, #2
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3301      	adds	r3, #1
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	4313      	orrs	r3, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	4610      	mov	r0, r2
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	6811      	ldr	r1, [r2, #0]
 8003902:	ea43 0200 	orr.w	r2, r3, r0
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	440b      	add	r3, r1
 800390c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003910:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	3318      	adds	r3, #24
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4413      	add	r3, r2
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	6811      	ldr	r1, [r2, #0]
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3318      	adds	r3, #24
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	440b      	add	r3, r1
 8003930:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e00e      	b.n	8003954 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e006      	b.n	8003954 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	3724      	adds	r7, #36	@ 0x24
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003974:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d003      	beq.n	8003984 <HAL_CAN_GetRxMessage+0x24>
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b02      	cmp	r3, #2
 8003980:	f040 8103 	bne.w	8003b8a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10e      	bne.n	80039a8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d116      	bne.n	80039c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0f7      	b.n	8003b98 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d107      	bne.n	80039c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e0e8      	b.n	8003b98 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	331b      	adds	r3, #27
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	4413      	add	r3, r2
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0204 	and.w	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10c      	bne.n	80039fe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	331b      	adds	r3, #27
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	4413      	add	r3, r2
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	0d5b      	lsrs	r3, r3, #21
 80039f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e00b      	b.n	8003a16 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	331b      	adds	r3, #27
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	4413      	add	r3, r2
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	08db      	lsrs	r3, r3, #3
 8003a0e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	331b      	adds	r3, #27
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	4413      	add	r3, r2
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0202 	and.w	r2, r3, #2
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	331b      	adds	r3, #27
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2208      	movs	r2, #8
 8003a48:	611a      	str	r2, [r3, #16]
 8003a4a:	e00b      	b.n	8003a64 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	331b      	adds	r3, #27
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	4413      	add	r3, r2
 8003a58:	3304      	adds	r3, #4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 020f 	and.w	r2, r3, #15
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	331b      	adds	r3, #27
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	4413      	add	r3, r2
 8003a70:	3304      	adds	r3, #4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	331b      	adds	r3, #27
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	4413      	add	r3, r2
 8003a88:	3304      	adds	r3, #4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	0a1a      	lsrs	r2, r3, #8
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0c1a      	lsrs	r2, r3, #16
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	3302      	adds	r3, #2
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	0e1a      	lsrs	r2, r3, #24
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	3303      	adds	r3, #3
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0a1a      	lsrs	r2, r3, #8
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	3305      	adds	r3, #5
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	0c1a      	lsrs	r2, r3, #16
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	3306      	adds	r3, #6
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0e1a      	lsrs	r2, r3, #24
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	3307      	adds	r3, #7
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d108      	bne.n	8003b76 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0220 	orr.w	r2, r2, #32
 8003b72:	60da      	str	r2, [r3, #12]
 8003b74:	e007      	b.n	8003b86 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0220 	orr.w	r2, r2, #32
 8003b84:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e006      	b.n	8003b98 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bb4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d002      	beq.n	8003bc2 <HAL_CAN_ActivateNotification+0x1e>
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d109      	bne.n	8003bd6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6959      	ldr	r1, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e006      	b.n	8003be4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	@ 0x28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d07c      	beq.n	8003d30 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d023      	beq.n	8003c88 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f983 	bl	8003f5e <HAL_CAN_TxMailbox0CompleteCallback>
 8003c58:	e016      	b.n	8003c88 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d004      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c6c:	e00c      	b.n	8003c88 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d004      	beq.n	8003c82 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c80:	e002      	b.n	8003c88 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f989 	bl	8003f9a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d024      	beq.n	8003cdc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c9a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f963 	bl	8003f72 <HAL_CAN_TxMailbox1CompleteCallback>
 8003cac:	e016      	b.n	8003cdc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc0:	e00c      	b.n	8003cdc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd4:	e002      	b.n	8003cdc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f969 	bl	8003fae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d024      	beq.n	8003d30 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003cee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f943 	bl	8003f86 <HAL_CAN_TxMailbox2CompleteCallback>
 8003d00:	e016      	b.n	8003d30 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d14:	e00c      	b.n	8003d30 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d28:	e002      	b.n	8003d30 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f949 	bl	8003fc2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d007      	beq.n	8003d54 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2210      	movs	r2, #16
 8003d52:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d006      	beq.n	8003d76 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f930 	bl	8003fd6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fe fa18 	bl	80021c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2210      	movs	r2, #16
 8003db6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d006      	beq.n	8003dda <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f912 	bl	8003ffe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f8f9 	bl	8003fea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d006      	beq.n	8003e1a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2210      	movs	r2, #16
 8003e12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f8fc 	bl	8004012 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00b      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2208      	movs	r2, #8
 8003e34:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8f5 	bl	8004026 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d07b      	beq.n	8003f3e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d072      	beq.n	8003f36 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	f043 0302 	orr.w	r3, r3, #2
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	f043 0304 	orr.w	r3, r3, #4
 8003ea2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d043      	beq.n	8003f36 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d03e      	beq.n	8003f36 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ebe:	2b60      	cmp	r3, #96	@ 0x60
 8003ec0:	d02b      	beq.n	8003f1a <HAL_CAN_IRQHandler+0x32a>
 8003ec2:	2b60      	cmp	r3, #96	@ 0x60
 8003ec4:	d82e      	bhi.n	8003f24 <HAL_CAN_IRQHandler+0x334>
 8003ec6:	2b50      	cmp	r3, #80	@ 0x50
 8003ec8:	d022      	beq.n	8003f10 <HAL_CAN_IRQHandler+0x320>
 8003eca:	2b50      	cmp	r3, #80	@ 0x50
 8003ecc:	d82a      	bhi.n	8003f24 <HAL_CAN_IRQHandler+0x334>
 8003ece:	2b40      	cmp	r3, #64	@ 0x40
 8003ed0:	d019      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x316>
 8003ed2:	2b40      	cmp	r3, #64	@ 0x40
 8003ed4:	d826      	bhi.n	8003f24 <HAL_CAN_IRQHandler+0x334>
 8003ed6:	2b30      	cmp	r3, #48	@ 0x30
 8003ed8:	d010      	beq.n	8003efc <HAL_CAN_IRQHandler+0x30c>
 8003eda:	2b30      	cmp	r3, #48	@ 0x30
 8003edc:	d822      	bhi.n	8003f24 <HAL_CAN_IRQHandler+0x334>
 8003ede:	2b10      	cmp	r3, #16
 8003ee0:	d002      	beq.n	8003ee8 <HAL_CAN_IRQHandler+0x2f8>
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d005      	beq.n	8003ef2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ee6:	e01d      	b.n	8003f24 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	f043 0308 	orr.w	r3, r3, #8
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ef0:	e019      	b.n	8003f26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	f043 0310 	orr.w	r3, r3, #16
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003efa:	e014      	b.n	8003f26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	f043 0320 	orr.w	r3, r3, #32
 8003f02:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f04:	e00f      	b.n	8003f26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f0c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f0e:	e00a      	b.n	8003f26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f18:	e005      	b.n	8003f26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f22:	e000      	b.n	8003f26 <HAL_CAN_IRQHandler+0x336>
            break;
 8003f24:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003f34:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f872 	bl	800403a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f56:	bf00      	nop
 8003f58:	3728      	adds	r7, #40	@ 0x28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004060:	4b0c      	ldr	r3, [pc, #48]	@ (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800406c:	4013      	ands	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800407c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004082:	4a04      	ldr	r2, [pc, #16]	@ (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	60d3      	str	r3, [r2, #12]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800409c:	4b04      	ldr	r3, [pc, #16]	@ (80040b0 <__NVIC_GetPriorityGrouping+0x18>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	f003 0307 	and.w	r3, r3, #7
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	db0b      	blt.n	80040de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	f003 021f 	and.w	r2, r3, #31
 80040cc:	4907      	ldr	r1, [pc, #28]	@ (80040ec <__NVIC_EnableIRQ+0x38>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2001      	movs	r0, #1
 80040d6:	fa00 f202 	lsl.w	r2, r0, r2
 80040da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	e000e100 	.word	0xe000e100

080040f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	6039      	str	r1, [r7, #0]
 80040fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004100:	2b00      	cmp	r3, #0
 8004102:	db0a      	blt.n	800411a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	490c      	ldr	r1, [pc, #48]	@ (800413c <__NVIC_SetPriority+0x4c>)
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	0112      	lsls	r2, r2, #4
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	440b      	add	r3, r1
 8004114:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004118:	e00a      	b.n	8004130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	4908      	ldr	r1, [pc, #32]	@ (8004140 <__NVIC_SetPriority+0x50>)
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	3b04      	subs	r3, #4
 8004128:	0112      	lsls	r2, r2, #4
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	440b      	add	r3, r1
 800412e:	761a      	strb	r2, [r3, #24]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000e100 	.word	0xe000e100
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	@ 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f1c3 0307 	rsb	r3, r3, #7
 800415e:	2b04      	cmp	r3, #4
 8004160:	bf28      	it	cs
 8004162:	2304      	movcs	r3, #4
 8004164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3304      	adds	r3, #4
 800416a:	2b06      	cmp	r3, #6
 800416c:	d902      	bls.n	8004174 <NVIC_EncodePriority+0x30>
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3b03      	subs	r3, #3
 8004172:	e000      	b.n	8004176 <NVIC_EncodePriority+0x32>
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004178:	f04f 32ff 	mov.w	r2, #4294967295
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	401a      	ands	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800418c:	f04f 31ff 	mov.w	r1, #4294967295
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	fa01 f303 	lsl.w	r3, r1, r3
 8004196:	43d9      	mvns	r1, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800419c:	4313      	orrs	r3, r2
         );
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3724      	adds	r7, #36	@ 0x24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041bc:	d301      	bcc.n	80041c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041be:	2301      	movs	r3, #1
 80041c0:	e00f      	b.n	80041e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041c2:	4a0a      	ldr	r2, [pc, #40]	@ (80041ec <SysTick_Config+0x40>)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ca:	210f      	movs	r1, #15
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	f7ff ff8e 	bl	80040f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <SysTick_Config+0x40>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041da:	4b04      	ldr	r3, [pc, #16]	@ (80041ec <SysTick_Config+0x40>)
 80041dc:	2207      	movs	r2, #7
 80041de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	e000e010 	.word	0xe000e010

080041f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff ff29 	bl	8004050 <__NVIC_SetPriorityGrouping>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	4603      	mov	r3, r0
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004218:	f7ff ff3e 	bl	8004098 <__NVIC_GetPriorityGrouping>
 800421c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	6978      	ldr	r0, [r7, #20]
 8004224:	f7ff ff8e 	bl	8004144 <NVIC_EncodePriority>
 8004228:	4602      	mov	r2, r0
 800422a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff5d 	bl	80040f0 <__NVIC_SetPriority>
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	4603      	mov	r3, r0
 8004246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff ff31 	bl	80040b4 <__NVIC_EnableIRQ>
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff ffa2 	bl	80041ac <SysTick_Config>
 8004268:	4603      	mov	r3, r0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	@ 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004286:	2300      	movs	r3, #0
 8004288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	e16b      	b.n	8004568 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004290:	2201      	movs	r2, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4013      	ands	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	f040 815a 	bne.w	8004562 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d005      	beq.n	80042c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d130      	bne.n	8004328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4013      	ands	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042fc:	2201      	movs	r2, #1
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	091b      	lsrs	r3, r3, #4
 8004312:	f003 0201 	and.w	r2, r3, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4313      	orrs	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b03      	cmp	r3, #3
 8004332:	d017      	beq.n	8004364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d123      	bne.n	80043b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	08da      	lsrs	r2, r3, #3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3208      	adds	r2, #8
 8004378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	220f      	movs	r2, #15
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	08da      	lsrs	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3208      	adds	r2, #8
 80043b2:	69b9      	ldr	r1, [r7, #24]
 80043b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 0203 	and.w	r2, r3, #3
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80b4 	beq.w	8004562 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	4b60      	ldr	r3, [pc, #384]	@ (8004580 <HAL_GPIO_Init+0x30c>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	4a5f      	ldr	r2, [pc, #380]	@ (8004580 <HAL_GPIO_Init+0x30c>)
 8004404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004408:	6453      	str	r3, [r2, #68]	@ 0x44
 800440a:	4b5d      	ldr	r3, [pc, #372]	@ (8004580 <HAL_GPIO_Init+0x30c>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004416:	4a5b      	ldr	r2, [pc, #364]	@ (8004584 <HAL_GPIO_Init+0x310>)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	089b      	lsrs	r3, r3, #2
 800441c:	3302      	adds	r3, #2
 800441e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	220f      	movs	r2, #15
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a52      	ldr	r2, [pc, #328]	@ (8004588 <HAL_GPIO_Init+0x314>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d02b      	beq.n	800449a <HAL_GPIO_Init+0x226>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a51      	ldr	r2, [pc, #324]	@ (800458c <HAL_GPIO_Init+0x318>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d025      	beq.n	8004496 <HAL_GPIO_Init+0x222>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a50      	ldr	r2, [pc, #320]	@ (8004590 <HAL_GPIO_Init+0x31c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01f      	beq.n	8004492 <HAL_GPIO_Init+0x21e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a4f      	ldr	r2, [pc, #316]	@ (8004594 <HAL_GPIO_Init+0x320>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d019      	beq.n	800448e <HAL_GPIO_Init+0x21a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a4e      	ldr	r2, [pc, #312]	@ (8004598 <HAL_GPIO_Init+0x324>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <HAL_GPIO_Init+0x216>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a4d      	ldr	r2, [pc, #308]	@ (800459c <HAL_GPIO_Init+0x328>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00d      	beq.n	8004486 <HAL_GPIO_Init+0x212>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a4c      	ldr	r2, [pc, #304]	@ (80045a0 <HAL_GPIO_Init+0x32c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d007      	beq.n	8004482 <HAL_GPIO_Init+0x20e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a4b      	ldr	r2, [pc, #300]	@ (80045a4 <HAL_GPIO_Init+0x330>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d101      	bne.n	800447e <HAL_GPIO_Init+0x20a>
 800447a:	2307      	movs	r3, #7
 800447c:	e00e      	b.n	800449c <HAL_GPIO_Init+0x228>
 800447e:	2308      	movs	r3, #8
 8004480:	e00c      	b.n	800449c <HAL_GPIO_Init+0x228>
 8004482:	2306      	movs	r3, #6
 8004484:	e00a      	b.n	800449c <HAL_GPIO_Init+0x228>
 8004486:	2305      	movs	r3, #5
 8004488:	e008      	b.n	800449c <HAL_GPIO_Init+0x228>
 800448a:	2304      	movs	r3, #4
 800448c:	e006      	b.n	800449c <HAL_GPIO_Init+0x228>
 800448e:	2303      	movs	r3, #3
 8004490:	e004      	b.n	800449c <HAL_GPIO_Init+0x228>
 8004492:	2302      	movs	r3, #2
 8004494:	e002      	b.n	800449c <HAL_GPIO_Init+0x228>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <HAL_GPIO_Init+0x228>
 800449a:	2300      	movs	r3, #0
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	f002 0203 	and.w	r2, r2, #3
 80044a2:	0092      	lsls	r2, r2, #2
 80044a4:	4093      	lsls	r3, r2
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044ac:	4935      	ldr	r1, [pc, #212]	@ (8004584 <HAL_GPIO_Init+0x310>)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	3302      	adds	r3, #2
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ba:	4b3b      	ldr	r3, [pc, #236]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044de:	4a32      	ldr	r2, [pc, #200]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044e4:	4b30      	ldr	r3, [pc, #192]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004508:	4a27      	ldr	r2, [pc, #156]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800450e:	4b26      	ldr	r3, [pc, #152]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004532:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004538:	4b1b      	ldr	r3, [pc, #108]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800455c:	4a12      	ldr	r2, [pc, #72]	@ (80045a8 <HAL_GPIO_Init+0x334>)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3301      	adds	r3, #1
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b0f      	cmp	r3, #15
 800456c:	f67f ae90 	bls.w	8004290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	3724      	adds	r7, #36	@ 0x24
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	40013800 	.word	0x40013800
 8004588:	40020000 	.word	0x40020000
 800458c:	40020400 	.word	0x40020400
 8004590:	40020800 	.word	0x40020800
 8004594:	40020c00 	.word	0x40020c00
 8004598:	40021000 	.word	0x40021000
 800459c:	40021400 	.word	0x40021400
 80045a0:	40021800 	.word	0x40021800
 80045a4:	40021c00 	.word	0x40021c00
 80045a8:	40013c00 	.word	0x40013c00

080045ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	887b      	ldrh	r3, [r7, #2]
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
 80045c8:	e001      	b.n	80045ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]
 80045e8:	4613      	mov	r3, r2
 80045ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045ec:	787b      	ldrb	r3, [r7, #1]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045f2:	887a      	ldrh	r2, [r7, #2]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045f8:	e003      	b.n	8004602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045fa:	887b      	ldrh	r3, [r7, #2]
 80045fc:	041a      	lsls	r2, r3, #16
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	619a      	str	r2, [r3, #24]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e267      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d075      	beq.n	800471a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800462e:	4b88      	ldr	r3, [pc, #544]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b04      	cmp	r3, #4
 8004638:	d00c      	beq.n	8004654 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800463a:	4b85      	ldr	r3, [pc, #532]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004642:	2b08      	cmp	r3, #8
 8004644:	d112      	bne.n	800466c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004646:	4b82      	ldr	r3, [pc, #520]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004652:	d10b      	bne.n	800466c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004654:	4b7e      	ldr	r3, [pc, #504]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d05b      	beq.n	8004718 <HAL_RCC_OscConfig+0x108>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d157      	bne.n	8004718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e242      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004674:	d106      	bne.n	8004684 <HAL_RCC_OscConfig+0x74>
 8004676:	4b76      	ldr	r3, [pc, #472]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a75      	ldr	r2, [pc, #468]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800467c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	e01d      	b.n	80046c0 <HAL_RCC_OscConfig+0xb0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x98>
 800468e:	4b70      	ldr	r3, [pc, #448]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a6f      	ldr	r2, [pc, #444]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4b6d      	ldr	r3, [pc, #436]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6c      	ldr	r2, [pc, #432]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e00b      	b.n	80046c0 <HAL_RCC_OscConfig+0xb0>
 80046a8:	4b69      	ldr	r3, [pc, #420]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a68      	ldr	r2, [pc, #416]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4b66      	ldr	r3, [pc, #408]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a65      	ldr	r2, [pc, #404]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d013      	beq.n	80046f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fe fe4e 	bl	8003368 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046d0:	f7fe fe4a 	bl	8003368 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	@ 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e207      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0xc0>
 80046ee:	e014      	b.n	800471a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f0:	f7fe fe3a 	bl	8003368 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f8:	f7fe fe36 	bl	8003368 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b64      	cmp	r3, #100	@ 0x64
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e1f3      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470a:	4b51      	ldr	r3, [pc, #324]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0xe8>
 8004716:	e000      	b.n	800471a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d063      	beq.n	80047ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004726:	4b4a      	ldr	r3, [pc, #296]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004732:	4b47      	ldr	r3, [pc, #284]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800473a:	2b08      	cmp	r3, #8
 800473c:	d11c      	bne.n	8004778 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473e:	4b44      	ldr	r3, [pc, #272]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d116      	bne.n	8004778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474a:	4b41      	ldr	r3, [pc, #260]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_RCC_OscConfig+0x152>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d001      	beq.n	8004762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e1c7      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004762:	4b3b      	ldr	r3, [pc, #236]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4937      	ldr	r1, [pc, #220]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004776:	e03a      	b.n	80047ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004780:	4b34      	ldr	r3, [pc, #208]	@ (8004854 <HAL_RCC_OscConfig+0x244>)
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004786:	f7fe fdef 	bl	8003368 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478e:	f7fe fdeb 	bl	8003368 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e1a8      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ac:	4b28      	ldr	r3, [pc, #160]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4925      	ldr	r1, [pc, #148]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]
 80047c0:	e015      	b.n	80047ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c2:	4b24      	ldr	r3, [pc, #144]	@ (8004854 <HAL_RCC_OscConfig+0x244>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fe fdce 	bl	8003368 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d0:	f7fe fdca 	bl	8003368 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e187      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d036      	beq.n	8004868 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004802:	4b15      	ldr	r3, [pc, #84]	@ (8004858 <HAL_RCC_OscConfig+0x248>)
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004808:	f7fe fdae 	bl	8003368 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004810:	f7fe fdaa 	bl	8003368 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e167      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004822:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <HAL_RCC_OscConfig+0x240>)
 8004824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x200>
 800482e:	e01b      	b.n	8004868 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004830:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <HAL_RCC_OscConfig+0x248>)
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004836:	f7fe fd97 	bl	8003368 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800483c:	e00e      	b.n	800485c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483e:	f7fe fd93 	bl	8003368 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d907      	bls.n	800485c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e150      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
 8004850:	40023800 	.word	0x40023800
 8004854:	42470000 	.word	0x42470000
 8004858:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485c:	4b88      	ldr	r3, [pc, #544]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1ea      	bne.n	800483e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8097 	beq.w	80049a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004876:	2300      	movs	r3, #0
 8004878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800487a:	4b81      	ldr	r3, [pc, #516]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10f      	bne.n	80048a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004894:	6413      	str	r3, [r2, #64]	@ 0x40
 8004896:	4b7a      	ldr	r3, [pc, #488]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a6:	4b77      	ldr	r3, [pc, #476]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d118      	bne.n	80048e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048b2:	4b74      	ldr	r3, [pc, #464]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a73      	ldr	r2, [pc, #460]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048be:	f7fe fd53 	bl	8003368 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c6:	f7fe fd4f 	bl	8003368 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e10c      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a84 <HAL_RCC_OscConfig+0x474>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_OscConfig+0x2ea>
 80048ec:	4b64      	ldr	r3, [pc, #400]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f0:	4a63      	ldr	r2, [pc, #396]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048f8:	e01c      	b.n	8004934 <HAL_RCC_OscConfig+0x324>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b05      	cmp	r3, #5
 8004900:	d10c      	bne.n	800491c <HAL_RCC_OscConfig+0x30c>
 8004902:	4b5f      	ldr	r3, [pc, #380]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	4a5e      	ldr	r2, [pc, #376]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	6713      	str	r3, [r2, #112]	@ 0x70
 800490e:	4b5c      	ldr	r3, [pc, #368]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	4a5b      	ldr	r2, [pc, #364]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	6713      	str	r3, [r2, #112]	@ 0x70
 800491a:	e00b      	b.n	8004934 <HAL_RCC_OscConfig+0x324>
 800491c:	4b58      	ldr	r3, [pc, #352]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004920:	4a57      	ldr	r2, [pc, #348]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	6713      	str	r3, [r2, #112]	@ 0x70
 8004928:	4b55      	ldr	r3, [pc, #340]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492c:	4a54      	ldr	r2, [pc, #336]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800492e:	f023 0304 	bic.w	r3, r3, #4
 8004932:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d015      	beq.n	8004968 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493c:	f7fe fd14 	bl	8003368 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	e00a      	b.n	800495a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7fe fd10 	bl	8003368 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e0cb      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495a:	4b49      	ldr	r3, [pc, #292]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0ee      	beq.n	8004944 <HAL_RCC_OscConfig+0x334>
 8004966:	e014      	b.n	8004992 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004968:	f7fe fcfe 	bl	8003368 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496e:	e00a      	b.n	8004986 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004970:	f7fe fcfa 	bl	8003368 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e0b5      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004986:	4b3e      	ldr	r3, [pc, #248]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1ee      	bne.n	8004970 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004992:	7dfb      	ldrb	r3, [r7, #23]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d105      	bne.n	80049a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004998:	4b39      	ldr	r3, [pc, #228]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	4a38      	ldr	r2, [pc, #224]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 800499e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80a1 	beq.w	8004af0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ae:	4b34      	ldr	r3, [pc, #208]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d05c      	beq.n	8004a74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d141      	bne.n	8004a46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c2:	4b31      	ldr	r3, [pc, #196]	@ (8004a88 <HAL_RCC_OscConfig+0x478>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fe fcce 	bl	8003368 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fe fcca 	bl	8003368 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e087      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	4b27      	ldr	r3, [pc, #156]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	019b      	lsls	r3, r3, #6
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	3b01      	subs	r3, #1
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	061b      	lsls	r3, r3, #24
 8004a12:	491b      	ldr	r1, [pc, #108]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a18:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <HAL_RCC_OscConfig+0x478>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1e:	f7fe fca3 	bl	8003368 <HAL_GetTick>
 8004a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a26:	f7fe fc9f 	bl	8003368 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e05c      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x416>
 8004a44:	e054      	b.n	8004af0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <HAL_RCC_OscConfig+0x478>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4c:	f7fe fc8c 	bl	8003368 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fe fc88 	bl	8003368 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e045      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a66:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <HAL_RCC_OscConfig+0x470>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x444>
 8004a72:	e03d      	b.n	8004af0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e038      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40007000 	.word	0x40007000
 8004a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <HAL_RCC_OscConfig+0x4ec>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d028      	beq.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d121      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d11a      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d111      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d107      	bne.n	8004aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800

08004b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e0cc      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b14:	4b68      	ldr	r3, [pc, #416]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d90c      	bls.n	8004b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b65      	ldr	r3, [pc, #404]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b63      	ldr	r3, [pc, #396]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0b8      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d020      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b54:	4b59      	ldr	r3, [pc, #356]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a58      	ldr	r2, [pc, #352]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b6c:	4b53      	ldr	r3, [pc, #332]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a52      	ldr	r2, [pc, #328]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b78:	4b50      	ldr	r3, [pc, #320]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	494d      	ldr	r1, [pc, #308]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d044      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	4b47      	ldr	r3, [pc, #284]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d119      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e07f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d107      	bne.n	8004bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e06f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bce:	4b3b      	ldr	r3, [pc, #236]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e067      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bde:	4b37      	ldr	r3, [pc, #220]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f023 0203 	bic.w	r2, r3, #3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4934      	ldr	r1, [pc, #208]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf0:	f7fe fbba 	bl	8003368 <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf8:	f7fe fbb6 	bl	8003368 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e04f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 020c 	and.w	r2, r3, #12
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d1eb      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c20:	4b25      	ldr	r3, [pc, #148]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d20c      	bcs.n	8004c48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b22      	ldr	r3, [pc, #136]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b20      	ldr	r3, [pc, #128]	@ (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e032      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c54:	4b19      	ldr	r3, [pc, #100]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4916      	ldr	r1, [pc, #88]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c72:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	490e      	ldr	r1, [pc, #56]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c86:	f000 f821 	bl	8004ccc <HAL_RCC_GetSysClockFreq>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	490a      	ldr	r1, [pc, #40]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c98:	5ccb      	ldrb	r3, [r1, r3]
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	4a09      	ldr	r2, [pc, #36]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ca2:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe fb1a 	bl	80032e0 <HAL_InitTick>

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023c00 	.word	0x40023c00
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	08009314 	.word	0x08009314
 8004cc4:	20000000 	.word	0x20000000
 8004cc8:	20000050 	.word	0x20000050

08004ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd0:	b090      	sub	sp, #64	@ 0x40
 8004cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ce4:	4b59      	ldr	r3, [pc, #356]	@ (8004e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d00d      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x40>
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	f200 80a1 	bhi.w	8004e38 <HAL_RCC_GetSysClockFreq+0x16c>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x34>
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d003      	beq.n	8004d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cfe:	e09b      	b.n	8004e38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d00:	4b53      	ldr	r3, [pc, #332]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d04:	e09b      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d06:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d0a:	e098      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d0c:	4b4f      	ldr	r3, [pc, #316]	@ (8004e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d14:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d16:	4b4d      	ldr	r3, [pc, #308]	@ (8004e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d028      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d22:	4b4a      	ldr	r3, [pc, #296]	@ (8004e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	2200      	movs	r2, #0
 8004d2a:	623b      	str	r3, [r7, #32]
 8004d2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d34:	2100      	movs	r1, #0
 8004d36:	4b47      	ldr	r3, [pc, #284]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d38:	fb03 f201 	mul.w	r2, r3, r1
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	fb00 f303 	mul.w	r3, r0, r3
 8004d42:	4413      	add	r3, r2
 8004d44:	4a43      	ldr	r2, [pc, #268]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x188>)
 8004d46:	fba0 1202 	umull	r1, r2, r0, r2
 8004d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d4c:	460a      	mov	r2, r1
 8004d4e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004d50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d52:	4413      	add	r3, r2
 8004d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d58:	2200      	movs	r2, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	61fa      	str	r2, [r7, #28]
 8004d5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d66:	f7fb fe79 	bl	8000a5c <__aeabi_uldivmod>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4613      	mov	r3, r2
 8004d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d72:	e053      	b.n	8004e1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d74:	4b35      	ldr	r3, [pc, #212]	@ (8004e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	099b      	lsrs	r3, r3, #6
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	617a      	str	r2, [r7, #20]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d86:	f04f 0b00 	mov.w	fp, #0
 8004d8a:	4652      	mov	r2, sl
 8004d8c:	465b      	mov	r3, fp
 8004d8e:	f04f 0000 	mov.w	r0, #0
 8004d92:	f04f 0100 	mov.w	r1, #0
 8004d96:	0159      	lsls	r1, r3, #5
 8004d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d9c:	0150      	lsls	r0, r2, #5
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	ebb2 080a 	subs.w	r8, r2, sl
 8004da6:	eb63 090b 	sbc.w	r9, r3, fp
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004db6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004dba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004dbe:	ebb2 0408 	subs.w	r4, r2, r8
 8004dc2:	eb63 0509 	sbc.w	r5, r3, r9
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	00eb      	lsls	r3, r5, #3
 8004dd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dd4:	00e2      	lsls	r2, r4, #3
 8004dd6:	4614      	mov	r4, r2
 8004dd8:	461d      	mov	r5, r3
 8004dda:	eb14 030a 	adds.w	r3, r4, sl
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	eb45 030b 	adc.w	r3, r5, fp
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004df2:	4629      	mov	r1, r5
 8004df4:	028b      	lsls	r3, r1, #10
 8004df6:	4621      	mov	r1, r4
 8004df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	028a      	lsls	r2, r1, #10
 8004e00:	4610      	mov	r0, r2
 8004e02:	4619      	mov	r1, r3
 8004e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e06:	2200      	movs	r2, #0
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	60fa      	str	r2, [r7, #12]
 8004e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e10:	f7fb fe24 	bl	8000a5c <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4613      	mov	r3, r2
 8004e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	3301      	adds	r3, #1
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004e2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e36:	e002      	b.n	8004e3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e38:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3740      	adds	r7, #64	@ 0x40
 8004e44:	46bd      	mov	sp, r7
 8004e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	00f42400 	.word	0x00f42400
 8004e54:	017d7840 	.word	0x017d7840

08004e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e5c:	4b03      	ldr	r3, [pc, #12]	@ (8004e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000000 	.word	0x20000000

08004e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e74:	f7ff fff0 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	0a9b      	lsrs	r3, r3, #10
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	4903      	ldr	r1, [pc, #12]	@ (8004e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40023800 	.word	0x40023800
 8004e94:	08009324 	.word	0x08009324

08004e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e9c:	f7ff ffdc 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	0b5b      	lsrs	r3, r3, #13
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4903      	ldr	r1, [pc, #12]	@ (8004ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eae:	5ccb      	ldrb	r3, [r1, r3]
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	08009324 	.word	0x08009324

08004ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e07b      	b.n	8004fca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d108      	bne.n	8004eec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ee2:	d009      	beq.n	8004ef8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	61da      	str	r2, [r3, #28]
 8004eea:	e005      	b.n	8004ef8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fc ff30 	bl	8001d78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f7c:	ea42 0103 	orr.w	r1, r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	0c1b      	lsrs	r3, r3, #16
 8004f96:	f003 0104 	and.w	r1, r3, #4
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	f003 0210 	and.w	r2, r3, #16
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b088      	sub	sp, #32
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	603b      	str	r3, [r7, #0]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fe2:	f7fe f9c1 	bl	8003368 <HAL_GetTick>
 8004fe6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d001      	beq.n	8004ffc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e12a      	b.n	8005252 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_SPI_Transmit+0x36>
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e122      	b.n	8005252 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_SPI_Transmit+0x48>
 8005016:	2302      	movs	r3, #2
 8005018:	e11b      	b.n	8005252 <HAL_SPI_Transmit+0x280>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2203      	movs	r2, #3
 8005026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	88fa      	ldrh	r2, [r7, #6]
 800503a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	88fa      	ldrh	r2, [r7, #6]
 8005040:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005068:	d10f      	bne.n	800508a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005078:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005088:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005094:	2b40      	cmp	r3, #64	@ 0x40
 8005096:	d007      	beq.n	80050a8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050b0:	d152      	bne.n	8005158 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <HAL_SPI_Transmit+0xee>
 80050ba:	8b7b      	ldrh	r3, [r7, #26]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d145      	bne.n	800514c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c4:	881a      	ldrh	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d0:	1c9a      	adds	r2, r3, #2
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050e4:	e032      	b.n	800514c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d112      	bne.n	800511a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f8:	881a      	ldrh	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005104:	1c9a      	adds	r2, r3, #2
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005118:	e018      	b.n	800514c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800511a:	f7fe f925 	bl	8003368 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d803      	bhi.n	8005132 <HAL_SPI_Transmit+0x160>
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d102      	bne.n	8005138 <HAL_SPI_Transmit+0x166>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e082      	b.n	8005252 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1c7      	bne.n	80050e6 <HAL_SPI_Transmit+0x114>
 8005156:	e053      	b.n	8005200 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_SPI_Transmit+0x194>
 8005160:	8b7b      	ldrh	r3, [r7, #26]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d147      	bne.n	80051f6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	330c      	adds	r3, #12
 8005170:	7812      	ldrb	r2, [r2, #0]
 8005172:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800518c:	e033      	b.n	80051f6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b02      	cmp	r3, #2
 800519a:	d113      	bne.n	80051c4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	7812      	ldrb	r2, [r2, #0]
 80051a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051c2:	e018      	b.n	80051f6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051c4:	f7fe f8d0 	bl	8003368 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d803      	bhi.n	80051dc <HAL_SPI_Transmit+0x20a>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d102      	bne.n	80051e2 <HAL_SPI_Transmit+0x210>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e02d      	b.n	8005252 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1c6      	bne.n	800518e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	6839      	ldr	r1, [r7, #0]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fa59 	bl	80056bc <SPI_EndRxTxTransaction>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2220      	movs	r2, #32
 8005214:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005250:	2300      	movs	r3, #0
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b08a      	sub	sp, #40	@ 0x28
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005268:	2301      	movs	r3, #1
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800526c:	f7fe f87c 	bl	8003368 <HAL_GetTick>
 8005270:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005278:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005280:	887b      	ldrh	r3, [r7, #2]
 8005282:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005284:	7ffb      	ldrb	r3, [r7, #31]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d00c      	beq.n	80052a4 <HAL_SPI_TransmitReceive+0x4a>
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005290:	d106      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x46>
 800529a:	7ffb      	ldrb	r3, [r7, #31]
 800529c:	2b04      	cmp	r3, #4
 800529e:	d001      	beq.n	80052a4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80052a0:	2302      	movs	r3, #2
 80052a2:	e17f      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_SPI_TransmitReceive+0x5c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <HAL_SPI_TransmitReceive+0x5c>
 80052b0:	887b      	ldrh	r3, [r7, #2]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e174      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_SPI_TransmitReceive+0x6e>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e16d      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x34a>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d003      	beq.n	80052e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2205      	movs	r2, #5
 80052e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	887a      	ldrh	r2, [r7, #2]
 80052f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	887a      	ldrh	r2, [r7, #2]
 80052fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	887a      	ldrh	r2, [r7, #2]
 8005306:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	887a      	ldrh	r2, [r7, #2]
 800530c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005324:	2b40      	cmp	r3, #64	@ 0x40
 8005326:	d007      	beq.n	8005338 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005336:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005340:	d17e      	bne.n	8005440 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_SPI_TransmitReceive+0xf6>
 800534a:	8afb      	ldrh	r3, [r7, #22]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d16c      	bne.n	800542a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005354:	881a      	ldrh	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005360:	1c9a      	adds	r2, r3, #2
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005374:	e059      	b.n	800542a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b02      	cmp	r3, #2
 8005382:	d11b      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x162>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <HAL_SPI_TransmitReceive+0x162>
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	2b01      	cmp	r3, #1
 8005392:	d113      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005398:	881a      	ldrh	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a4:	1c9a      	adds	r2, r3, #2
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d119      	bne.n	80053fe <HAL_SPI_TransmitReceive+0x1a4>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d014      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053de:	b292      	uxth	r2, r2
 80053e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e6:	1c9a      	adds	r2, r3, #2
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053fa:	2301      	movs	r3, #1
 80053fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053fe:	f7fd ffb3 	bl	8003368 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800540a:	429a      	cmp	r2, r3
 800540c:	d80d      	bhi.n	800542a <HAL_SPI_TransmitReceive+0x1d0>
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d009      	beq.n	800542a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e0bc      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1a0      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x11c>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d19b      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x11c>
 800543e:	e082      	b.n	8005546 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_SPI_TransmitReceive+0x1f4>
 8005448:	8afb      	ldrh	r3, [r7, #22]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d171      	bne.n	8005532 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	330c      	adds	r3, #12
 8005458:	7812      	ldrb	r2, [r2, #0]
 800545a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005474:	e05d      	b.n	8005532 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b02      	cmp	r3, #2
 8005482:	d11c      	bne.n	80054be <HAL_SPI_TransmitReceive+0x264>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d017      	beq.n	80054be <HAL_SPI_TransmitReceive+0x264>
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	2b01      	cmp	r3, #1
 8005492:	d114      	bne.n	80054be <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	7812      	ldrb	r2, [r2, #0]
 80054a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d119      	bne.n	8005500 <HAL_SPI_TransmitReceive+0x2a6>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d014      	beq.n	8005500 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054fc:	2301      	movs	r3, #1
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005500:	f7fd ff32 	bl	8003368 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800550c:	429a      	cmp	r2, r3
 800550e:	d803      	bhi.n	8005518 <HAL_SPI_TransmitReceive+0x2be>
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d102      	bne.n	800551e <HAL_SPI_TransmitReceive+0x2c4>
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e038      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d19c      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x21c>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d197      	bne.n	8005476 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005546:	6a3a      	ldr	r2, [r7, #32]
 8005548:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f8b6 	bl	80056bc <SPI_EndRxTxTransaction>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e01d      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80055a2:	2300      	movs	r3, #0
  }
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3728      	adds	r7, #40	@ 0x28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055bc:	f7fd fed4 	bl	8003368 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	4413      	add	r3, r2
 80055ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055cc:	f7fd fecc 	bl	8003368 <HAL_GetTick>
 80055d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055d2:	4b39      	ldr	r3, [pc, #228]	@ (80056b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	015b      	lsls	r3, r3, #5
 80055d8:	0d1b      	lsrs	r3, r3, #20
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	fb02 f303 	mul.w	r3, r2, r3
 80055e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055e2:	e054      	b.n	800568e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	d050      	beq.n	800568e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055ec:	f7fd febc 	bl	8003368 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d902      	bls.n	8005602 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d13d      	bne.n	800567e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005610:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800561a:	d111      	bne.n	8005640 <SPI_WaitFlagStateUntilTimeout+0x94>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005624:	d004      	beq.n	8005630 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800562e:	d107      	bne.n	8005640 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800563e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005648:	d10f      	bne.n	800566a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005668:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e017      	b.n	80056ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	3b01      	subs	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4013      	ands	r3, r2
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d19b      	bne.n	80055e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000000 	.word	0x20000000

080056bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2201      	movs	r2, #1
 80056d0:	2102      	movs	r1, #2
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff ff6a 	bl	80055ac <SPI_WaitFlagStateUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e2:	f043 0220 	orr.w	r2, r3, #32
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e032      	b.n	8005754 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056ee:	4b1b      	ldr	r3, [pc, #108]	@ (800575c <SPI_EndRxTxTransaction+0xa0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005760 <SPI_EndRxTxTransaction+0xa4>)
 80056f4:	fba2 2303 	umull	r2, r3, r2, r3
 80056f8:	0d5b      	lsrs	r3, r3, #21
 80056fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056fe:	fb02 f303 	mul.w	r3, r2, r3
 8005702:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800570c:	d112      	bne.n	8005734 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2200      	movs	r2, #0
 8005716:	2180      	movs	r1, #128	@ 0x80
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7ff ff47 	bl	80055ac <SPI_WaitFlagStateUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d016      	beq.n	8005752 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005728:	f043 0220 	orr.w	r2, r3, #32
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e00f      	b.n	8005754 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	3b01      	subs	r3, #1
 800573e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574a:	2b80      	cmp	r3, #128	@ 0x80
 800574c:	d0f2      	beq.n	8005734 <SPI_EndRxTxTransaction+0x78>
 800574e:	e000      	b.n	8005752 <SPI_EndRxTxTransaction+0x96>
        break;
 8005750:	bf00      	nop
  }

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000000 	.word	0x20000000
 8005760:	165e9f81 	.word	0x165e9f81

08005764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e042      	b.n	80057fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fc fb90 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2224      	movs	r2, #36	@ 0x24
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f82b 	bl	8005804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695a      	ldr	r2, [r3, #20]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005808:	b0c0      	sub	sp, #256	@ 0x100
 800580a:	af00      	add	r7, sp, #0
 800580c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005820:	68d9      	ldr	r1, [r3, #12]
 8005822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	ea40 0301 	orr.w	r3, r0, r1
 800582c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	431a      	orrs	r2, r3
 800583c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	431a      	orrs	r2, r3
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800585c:	f021 010c 	bic.w	r1, r1, #12
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800586a:	430b      	orrs	r3, r1
 800586c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800586e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800587a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587e:	6999      	ldr	r1, [r3, #24]
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	ea40 0301 	orr.w	r3, r0, r1
 800588a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b8f      	ldr	r3, [pc, #572]	@ (8005ad0 <UART_SetConfig+0x2cc>)
 8005894:	429a      	cmp	r2, r3
 8005896:	d005      	beq.n	80058a4 <UART_SetConfig+0xa0>
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b8d      	ldr	r3, [pc, #564]	@ (8005ad4 <UART_SetConfig+0x2d0>)
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d104      	bne.n	80058ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058a4:	f7ff faf8 	bl	8004e98 <HAL_RCC_GetPCLK2Freq>
 80058a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058ac:	e003      	b.n	80058b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058ae:	f7ff fadf 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 80058b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058c0:	f040 810c 	bne.w	8005adc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c8:	2200      	movs	r2, #0
 80058ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058d6:	4622      	mov	r2, r4
 80058d8:	462b      	mov	r3, r5
 80058da:	1891      	adds	r1, r2, r2
 80058dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058de:	415b      	adcs	r3, r3
 80058e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058e6:	4621      	mov	r1, r4
 80058e8:	eb12 0801 	adds.w	r8, r2, r1
 80058ec:	4629      	mov	r1, r5
 80058ee:	eb43 0901 	adc.w	r9, r3, r1
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005906:	4690      	mov	r8, r2
 8005908:	4699      	mov	r9, r3
 800590a:	4623      	mov	r3, r4
 800590c:	eb18 0303 	adds.w	r3, r8, r3
 8005910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005914:	462b      	mov	r3, r5
 8005916:	eb49 0303 	adc.w	r3, r9, r3
 800591a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800592a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800592e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005932:	460b      	mov	r3, r1
 8005934:	18db      	adds	r3, r3, r3
 8005936:	653b      	str	r3, [r7, #80]	@ 0x50
 8005938:	4613      	mov	r3, r2
 800593a:	eb42 0303 	adc.w	r3, r2, r3
 800593e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005940:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005944:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005948:	f7fb f888 	bl	8000a5c <__aeabi_uldivmod>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4b61      	ldr	r3, [pc, #388]	@ (8005ad8 <UART_SetConfig+0x2d4>)
 8005952:	fba3 2302 	umull	r2, r3, r3, r2
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	011c      	lsls	r4, r3, #4
 800595a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800595e:	2200      	movs	r2, #0
 8005960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005964:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005968:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800596c:	4642      	mov	r2, r8
 800596e:	464b      	mov	r3, r9
 8005970:	1891      	adds	r1, r2, r2
 8005972:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005974:	415b      	adcs	r3, r3
 8005976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005978:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800597c:	4641      	mov	r1, r8
 800597e:	eb12 0a01 	adds.w	sl, r2, r1
 8005982:	4649      	mov	r1, r9
 8005984:	eb43 0b01 	adc.w	fp, r3, r1
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005994:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800599c:	4692      	mov	sl, r2
 800599e:	469b      	mov	fp, r3
 80059a0:	4643      	mov	r3, r8
 80059a2:	eb1a 0303 	adds.w	r3, sl, r3
 80059a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059aa:	464b      	mov	r3, r9
 80059ac:	eb4b 0303 	adc.w	r3, fp, r3
 80059b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059c8:	460b      	mov	r3, r1
 80059ca:	18db      	adds	r3, r3, r3
 80059cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ce:	4613      	mov	r3, r2
 80059d0:	eb42 0303 	adc.w	r3, r2, r3
 80059d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059de:	f7fb f83d 	bl	8000a5c <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4611      	mov	r1, r2
 80059e8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ad8 <UART_SetConfig+0x2d4>)
 80059ea:	fba3 2301 	umull	r2, r3, r3, r1
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	2264      	movs	r2, #100	@ 0x64
 80059f2:	fb02 f303 	mul.w	r3, r2, r3
 80059f6:	1acb      	subs	r3, r1, r3
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80059fe:	4b36      	ldr	r3, [pc, #216]	@ (8005ad8 <UART_SetConfig+0x2d4>)
 8005a00:	fba3 2302 	umull	r2, r3, r3, r2
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a0c:	441c      	add	r4, r3
 8005a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a20:	4642      	mov	r2, r8
 8005a22:	464b      	mov	r3, r9
 8005a24:	1891      	adds	r1, r2, r2
 8005a26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a28:	415b      	adcs	r3, r3
 8005a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a30:	4641      	mov	r1, r8
 8005a32:	1851      	adds	r1, r2, r1
 8005a34:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a36:	4649      	mov	r1, r9
 8005a38:	414b      	adcs	r3, r1
 8005a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a48:	4659      	mov	r1, fp
 8005a4a:	00cb      	lsls	r3, r1, #3
 8005a4c:	4651      	mov	r1, sl
 8005a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a52:	4651      	mov	r1, sl
 8005a54:	00ca      	lsls	r2, r1, #3
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	189b      	adds	r3, r3, r2
 8005a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a64:	464b      	mov	r3, r9
 8005a66:	460a      	mov	r2, r1
 8005a68:	eb42 0303 	adc.w	r3, r2, r3
 8005a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a84:	460b      	mov	r3, r1
 8005a86:	18db      	adds	r3, r3, r3
 8005a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	eb42 0303 	adc.w	r3, r2, r3
 8005a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a9a:	f7fa ffdf 	bl	8000a5c <__aeabi_uldivmod>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad8 <UART_SetConfig+0x2d4>)
 8005aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	2164      	movs	r1, #100	@ 0x64
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	3332      	adds	r3, #50	@ 0x32
 8005ab6:	4a08      	ldr	r2, [pc, #32]	@ (8005ad8 <UART_SetConfig+0x2d4>)
 8005ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	f003 0207 	and.w	r2, r3, #7
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4422      	add	r2, r4
 8005aca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005acc:	e106      	b.n	8005cdc <UART_SetConfig+0x4d8>
 8005ace:	bf00      	nop
 8005ad0:	40011000 	.word	0x40011000
 8005ad4:	40011400 	.word	0x40011400
 8005ad8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ae6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005aea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005aee:	4642      	mov	r2, r8
 8005af0:	464b      	mov	r3, r9
 8005af2:	1891      	adds	r1, r2, r2
 8005af4:	6239      	str	r1, [r7, #32]
 8005af6:	415b      	adcs	r3, r3
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005afe:	4641      	mov	r1, r8
 8005b00:	1854      	adds	r4, r2, r1
 8005b02:	4649      	mov	r1, r9
 8005b04:	eb43 0501 	adc.w	r5, r3, r1
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	00eb      	lsls	r3, r5, #3
 8005b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b16:	00e2      	lsls	r2, r4, #3
 8005b18:	4614      	mov	r4, r2
 8005b1a:	461d      	mov	r5, r3
 8005b1c:	4643      	mov	r3, r8
 8005b1e:	18e3      	adds	r3, r4, r3
 8005b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b24:	464b      	mov	r3, r9
 8005b26:	eb45 0303 	adc.w	r3, r5, r3
 8005b2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	008b      	lsls	r3, r1, #2
 8005b4e:	4621      	mov	r1, r4
 8005b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b54:	4621      	mov	r1, r4
 8005b56:	008a      	lsls	r2, r1, #2
 8005b58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b5c:	f7fa ff7e 	bl	8000a5c <__aeabi_uldivmod>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4b60      	ldr	r3, [pc, #384]	@ (8005ce8 <UART_SetConfig+0x4e4>)
 8005b66:	fba3 2302 	umull	r2, r3, r3, r2
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	011c      	lsls	r4, r3, #4
 8005b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b80:	4642      	mov	r2, r8
 8005b82:	464b      	mov	r3, r9
 8005b84:	1891      	adds	r1, r2, r2
 8005b86:	61b9      	str	r1, [r7, #24]
 8005b88:	415b      	adcs	r3, r3
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b90:	4641      	mov	r1, r8
 8005b92:	1851      	adds	r1, r2, r1
 8005b94:	6139      	str	r1, [r7, #16]
 8005b96:	4649      	mov	r1, r9
 8005b98:	414b      	adcs	r3, r1
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ba8:	4659      	mov	r1, fp
 8005baa:	00cb      	lsls	r3, r1, #3
 8005bac:	4651      	mov	r1, sl
 8005bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bb2:	4651      	mov	r1, sl
 8005bb4:	00ca      	lsls	r2, r1, #3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	189b      	adds	r3, r3, r2
 8005bc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	460a      	mov	r2, r1
 8005bc8:	eb42 0303 	adc.w	r3, r2, r3
 8005bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005be8:	4649      	mov	r1, r9
 8005bea:	008b      	lsls	r3, r1, #2
 8005bec:	4641      	mov	r1, r8
 8005bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bf2:	4641      	mov	r1, r8
 8005bf4:	008a      	lsls	r2, r1, #2
 8005bf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005bfa:	f7fa ff2f 	bl	8000a5c <__aeabi_uldivmod>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	4b38      	ldr	r3, [pc, #224]	@ (8005ce8 <UART_SetConfig+0x4e4>)
 8005c06:	fba3 2301 	umull	r2, r3, r3, r1
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	2264      	movs	r2, #100	@ 0x64
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	1acb      	subs	r3, r1, r3
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	3332      	adds	r3, #50	@ 0x32
 8005c18:	4a33      	ldr	r2, [pc, #204]	@ (8005ce8 <UART_SetConfig+0x4e4>)
 8005c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c24:	441c      	add	r4, r3
 8005c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	1891      	adds	r1, r2, r2
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	415b      	adcs	r3, r3
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c44:	4641      	mov	r1, r8
 8005c46:	1851      	adds	r1, r2, r1
 8005c48:	6039      	str	r1, [r7, #0]
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	414b      	adcs	r3, r1
 8005c4e:	607b      	str	r3, [r7, #4]
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	00cb      	lsls	r3, r1, #3
 8005c60:	4651      	mov	r1, sl
 8005c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c66:	4651      	mov	r1, sl
 8005c68:	00ca      	lsls	r2, r1, #3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4642      	mov	r2, r8
 8005c72:	189b      	adds	r3, r3, r2
 8005c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c76:	464b      	mov	r3, r9
 8005c78:	460a      	mov	r2, r1
 8005c7a:	eb42 0303 	adc.w	r3, r2, r3
 8005c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c98:	4649      	mov	r1, r9
 8005c9a:	008b      	lsls	r3, r1, #2
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ca2:	4641      	mov	r1, r8
 8005ca4:	008a      	lsls	r2, r1, #2
 8005ca6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005caa:	f7fa fed7 	bl	8000a5c <__aeabi_uldivmod>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <UART_SetConfig+0x4e4>)
 8005cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	2164      	movs	r1, #100	@ 0x64
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	3332      	adds	r3, #50	@ 0x32
 8005cc6:	4a08      	ldr	r2, [pc, #32]	@ (8005ce8 <UART_SetConfig+0x4e4>)
 8005cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	f003 020f 	and.w	r2, r3, #15
 8005cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4422      	add	r2, r4
 8005cda:	609a      	str	r2, [r3, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ce8:	51eb851f 	.word	0x51eb851f

08005cec <__NVIC_SetPriority>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	db0a      	blt.n	8005d16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	490c      	ldr	r1, [pc, #48]	@ (8005d38 <__NVIC_SetPriority+0x4c>)
 8005d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d0a:	0112      	lsls	r2, r2, #4
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	440b      	add	r3, r1
 8005d10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d14:	e00a      	b.n	8005d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	4908      	ldr	r1, [pc, #32]	@ (8005d3c <__NVIC_SetPriority+0x50>)
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	3b04      	subs	r3, #4
 8005d24:	0112      	lsls	r2, r2, #4
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	440b      	add	r3, r1
 8005d2a:	761a      	strb	r2, [r3, #24]
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	e000e100 	.word	0xe000e100
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d44:	2100      	movs	r1, #0
 8005d46:	f06f 0004 	mvn.w	r0, #4
 8005d4a:	f7ff ffcf 	bl	8005cec <__NVIC_SetPriority>
#endif
}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d5a:	f3ef 8305 	mrs	r3, IPSR
 8005d5e:	603b      	str	r3, [r7, #0]
  return(result);
 8005d60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d66:	f06f 0305 	mvn.w	r3, #5
 8005d6a:	607b      	str	r3, [r7, #4]
 8005d6c:	e00c      	b.n	8005d88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <osKernelInitialize+0x44>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d105      	bne.n	8005d82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d76:	4b08      	ldr	r3, [pc, #32]	@ (8005d98 <osKernelInitialize+0x44>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	607b      	str	r3, [r7, #4]
 8005d80:	e002      	b.n	8005d88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d82:	f04f 33ff 	mov.w	r3, #4294967295
 8005d86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d88:	687b      	ldr	r3, [r7, #4]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	200003ac 	.word	0x200003ac

08005d9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da2:	f3ef 8305 	mrs	r3, IPSR
 8005da6:	603b      	str	r3, [r7, #0]
  return(result);
 8005da8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005dae:	f06f 0305 	mvn.w	r3, #5
 8005db2:	607b      	str	r3, [r7, #4]
 8005db4:	e010      	b.n	8005dd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005db6:	4b0b      	ldr	r3, [pc, #44]	@ (8005de4 <osKernelStart+0x48>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d109      	bne.n	8005dd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dbe:	f7ff ffbf 	bl	8005d40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dc2:	4b08      	ldr	r3, [pc, #32]	@ (8005de4 <osKernelStart+0x48>)
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005dc8:	f001 f87a 	bl	8006ec0 <vTaskStartScheduler>
      stat = osOK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	607b      	str	r3, [r7, #4]
 8005dd0:	e002      	b.n	8005dd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005dd8:	687b      	ldr	r3, [r7, #4]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	200003ac 	.word	0x200003ac

08005de8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08e      	sub	sp, #56	@ 0x38
 8005dec:	af04      	add	r7, sp, #16
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df8:	f3ef 8305 	mrs	r3, IPSR
 8005dfc:	617b      	str	r3, [r7, #20]
  return(result);
 8005dfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d17e      	bne.n	8005f02 <osThreadNew+0x11a>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d07b      	beq.n	8005f02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e0a:	2380      	movs	r3, #128	@ 0x80
 8005e0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e0e:	2318      	movs	r3, #24
 8005e10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d045      	beq.n	8005eae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <osThreadNew+0x48>
        name = attr->name;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <osThreadNew+0x6e>
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b38      	cmp	r3, #56	@ 0x38
 8005e48:	d805      	bhi.n	8005e56 <osThreadNew+0x6e>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <osThreadNew+0x72>
        return (NULL);
 8005e56:	2300      	movs	r3, #0
 8005e58:	e054      	b.n	8005f04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	089b      	lsrs	r3, r3, #2
 8005e68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <osThreadNew+0xa8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	2b5b      	cmp	r3, #91	@ 0x5b
 8005e78:	d90a      	bls.n	8005e90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d006      	beq.n	8005e90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <osThreadNew+0xa8>
        mem = 1;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	e010      	b.n	8005eb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10c      	bne.n	8005eb2 <osThreadNew+0xca>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d108      	bne.n	8005eb2 <osThreadNew+0xca>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d104      	bne.n	8005eb2 <osThreadNew+0xca>
          mem = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61bb      	str	r3, [r7, #24]
 8005eac:	e001      	b.n	8005eb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d110      	bne.n	8005eda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ec0:	9202      	str	r2, [sp, #8]
 8005ec2:	9301      	str	r3, [sp, #4]
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6a3a      	ldr	r2, [r7, #32]
 8005ecc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 fe1a 	bl	8006b08 <xTaskCreateStatic>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	613b      	str	r3, [r7, #16]
 8005ed8:	e013      	b.n	8005f02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d110      	bne.n	8005f02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	f107 0310 	add.w	r3, r7, #16
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fe68 	bl	8006bc8 <xTaskCreate>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d001      	beq.n	8005f02 <osThreadNew+0x11a>
            hTask = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f02:	693b      	ldr	r3, [r7, #16]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3728      	adds	r7, #40	@ 0x28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f14:	f3ef 8305 	mrs	r3, IPSR
 8005f18:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <osDelay+0x1c>
    stat = osErrorISR;
 8005f20:	f06f 0305 	mvn.w	r3, #5
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e007      	b.n	8005f38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 ff8e 	bl	8006e54 <vTaskDelay>
    }
  }

  return (stat);
 8005f38:	68fb      	ldr	r3, [r7, #12]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a07      	ldr	r2, [pc, #28]	@ (8005f70 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4a06      	ldr	r2, [pc, #24]	@ (8005f74 <vApplicationGetIdleTaskMemory+0x30>)
 8005f5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2280      	movs	r2, #128	@ 0x80
 8005f60:	601a      	str	r2, [r3, #0]
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	200003b0 	.word	0x200003b0
 8005f74:	2000040c 	.word	0x2000040c

08005f78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4a07      	ldr	r2, [pc, #28]	@ (8005fa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4a06      	ldr	r2, [pc, #24]	@ (8005fa8 <vApplicationGetTimerTaskMemory+0x30>)
 8005f8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f96:	601a      	str	r2, [r3, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	2000060c 	.word	0x2000060c
 8005fa8:	20000668 	.word	0x20000668

08005fac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f103 0208 	add.w	r2, r3, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f103 0208 	add.w	r2, r3, #8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f103 0208 	add.w	r2, r3, #8
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
}
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d103      	bne.n	800606e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e00c      	b.n	8006088 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3308      	adds	r3, #8
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	e002      	b.n	800607c <vListInsert+0x2e>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	429a      	cmp	r2, r3
 8006086:	d2f6      	bcs.n	8006076 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6892      	ldr	r2, [r2, #8]
 80060d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6852      	ldr	r2, [r2, #4]
 80060e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d103      	bne.n	80060f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	1e5a      	subs	r2, r3, #1
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	e7fd      	b.n	800613c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006140:	f002 f87a 	bl	8008238 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614c:	68f9      	ldr	r1, [r7, #12]
 800614e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	441a      	add	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006170:	3b01      	subs	r3, #1
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	441a      	add	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	22ff      	movs	r2, #255	@ 0xff
 8006184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	22ff      	movs	r2, #255	@ 0xff
 800618c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d114      	bne.n	80061c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01a      	beq.n	80061d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3310      	adds	r3, #16
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 f91a 	bl	80073dc <xTaskRemoveFromEventList>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d012      	beq.n	80061d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061ae:	4b0d      	ldr	r3, [pc, #52]	@ (80061e4 <xQueueGenericReset+0xd0>)
 80061b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	e009      	b.n	80061d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3310      	adds	r3, #16
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fef1 	bl	8005fac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3324      	adds	r3, #36	@ 0x24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff feec 	bl	8005fac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061d4:	f002 f862 	bl	800829c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061d8:	2301      	movs	r3, #1
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08e      	sub	sp, #56	@ 0x38
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	e7fd      	b.n	800622e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <xQueueGenericCreateStatic+0x56>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <xQueueGenericCreateStatic+0x5a>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <xQueueGenericCreateStatic+0x5c>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	623b      	str	r3, [r7, #32]
}
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	e7fd      	b.n	800625c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d102      	bne.n	800626c <xQueueGenericCreateStatic+0x84>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <xQueueGenericCreateStatic+0x88>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <xQueueGenericCreateStatic+0x8a>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	61fb      	str	r3, [r7, #28]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800628e:	2350      	movs	r3, #80	@ 0x50
 8006290:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b50      	cmp	r3, #80	@ 0x50
 8006296:	d00b      	beq.n	80062b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	61bb      	str	r3, [r7, #24]
}
 80062aa:	bf00      	nop
 80062ac:	bf00      	nop
 80062ae:	e7fd      	b.n	80062ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80062b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00d      	beq.n	80062d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80062c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f805 	bl	80062e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80062da:	4618      	mov	r0, r3
 80062dc:	3730      	adds	r7, #48	@ 0x30
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
 80062ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d103      	bne.n	80062fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e002      	b.n	8006304 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006310:	2101      	movs	r1, #1
 8006312:	69b8      	ldr	r0, [r7, #24]
 8006314:	f7ff fefe 	bl	8006114 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006320:	bf00      	nop
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08e      	sub	sp, #56	@ 0x38
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006336:	2300      	movs	r3, #0
 8006338:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <xQueueGenericSend+0x34>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d103      	bne.n	800636a <xQueueGenericSend+0x42>
 8006362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <xQueueGenericSend+0x46>
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <xQueueGenericSend+0x48>
 800636e:	2300      	movs	r3, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10b      	bne.n	800638c <xQueueGenericSend+0x64>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006386:	bf00      	nop
 8006388:	bf00      	nop
 800638a:	e7fd      	b.n	8006388 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b02      	cmp	r3, #2
 8006390:	d103      	bne.n	800639a <xQueueGenericSend+0x72>
 8006392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <xQueueGenericSend+0x76>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <xQueueGenericSend+0x78>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <xQueueGenericSend+0x94>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	623b      	str	r3, [r7, #32]
}
 80063b6:	bf00      	nop
 80063b8:	bf00      	nop
 80063ba:	e7fd      	b.n	80063b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063bc:	f001 f9ce 	bl	800775c <xTaskGetSchedulerState>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <xQueueGenericSend+0xa4>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <xQueueGenericSend+0xa8>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <xQueueGenericSend+0xaa>
 80063d0:	2300      	movs	r3, #0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <xQueueGenericSend+0xc6>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	61fb      	str	r3, [r7, #28]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063ee:	f001 ff23 	bl	8008238 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d302      	bcc.n	8006404 <xQueueGenericSend+0xdc>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d129      	bne.n	8006458 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800640a:	f000 fa0f 	bl	800682c <prvCopyDataToQueue>
 800640e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	d010      	beq.n	800643a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	3324      	adds	r3, #36	@ 0x24
 800641c:	4618      	mov	r0, r3
 800641e:	f000 ffdd 	bl	80073dc <xTaskRemoveFromEventList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d013      	beq.n	8006450 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006428:	4b3f      	ldr	r3, [pc, #252]	@ (8006528 <xQueueGenericSend+0x200>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	e00a      	b.n	8006450 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800643a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006440:	4b39      	ldr	r3, [pc, #228]	@ (8006528 <xQueueGenericSend+0x200>)
 8006442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006450:	f001 ff24 	bl	800829c <vPortExitCritical>
				return pdPASS;
 8006454:	2301      	movs	r3, #1
 8006456:	e063      	b.n	8006520 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800645e:	f001 ff1d 	bl	800829c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006462:	2300      	movs	r3, #0
 8006464:	e05c      	b.n	8006520 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006468:	2b00      	cmp	r3, #0
 800646a:	d106      	bne.n	800647a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800646c:	f107 0314 	add.w	r3, r7, #20
 8006470:	4618      	mov	r0, r3
 8006472:	f001 f817 	bl	80074a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006476:	2301      	movs	r3, #1
 8006478:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800647a:	f001 ff0f 	bl	800829c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800647e:	f000 fd87 	bl	8006f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006482:	f001 fed9 	bl	8008238 <vPortEnterCritical>
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800648c:	b25b      	sxtb	r3, r3
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d103      	bne.n	800649c <xQueueGenericSend+0x174>
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064a2:	b25b      	sxtb	r3, r3
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x18a>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064b2:	f001 fef3 	bl	800829c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064b6:	1d3a      	adds	r2, r7, #4
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 f806 	bl	80074d0 <xTaskCheckForTimeOut>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d124      	bne.n	8006514 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064cc:	f000 faa6 	bl	8006a1c <prvIsQueueFull>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d018      	beq.n	8006508 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d8:	3310      	adds	r3, #16
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 ff2a 	bl	8007338 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064e6:	f000 fa31 	bl	800694c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064ea:	f000 fd5f 	bl	8006fac <xTaskResumeAll>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f47f af7c 	bne.w	80063ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80064f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006528 <xQueueGenericSend+0x200>)
 80064f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	e772      	b.n	80063ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800650a:	f000 fa1f 	bl	800694c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800650e:	f000 fd4d 	bl	8006fac <xTaskResumeAll>
 8006512:	e76c      	b.n	80063ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006516:	f000 fa19 	bl	800694c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800651a:	f000 fd47 	bl	8006fac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800651e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006520:	4618      	mov	r0, r3
 8006522:	3738      	adds	r7, #56	@ 0x38
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b090      	sub	sp, #64	@ 0x40
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10b      	bne.n	800655c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006556:	bf00      	nop
 8006558:	bf00      	nop
 800655a:	e7fd      	b.n	8006558 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <xQueueGenericSendFromISR+0x3e>
 8006562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <xQueueGenericSendFromISR+0x42>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <xQueueGenericSendFromISR+0x44>
 800656e:	2300      	movs	r3, #0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10b      	bne.n	800658c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006586:	bf00      	nop
 8006588:	bf00      	nop
 800658a:	e7fd      	b.n	8006588 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d103      	bne.n	800659a <xQueueGenericSendFromISR+0x6e>
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <xQueueGenericSendFromISR+0x72>
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <xQueueGenericSendFromISR+0x74>
 800659e:	2300      	movs	r3, #0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10b      	bne.n	80065bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	623b      	str	r3, [r7, #32]
}
 80065b6:	bf00      	nop
 80065b8:	bf00      	nop
 80065ba:	e7fd      	b.n	80065b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065bc:	f001 ff1c 	bl	80083f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065c0:	f3ef 8211 	mrs	r2, BASEPRI
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	61fa      	str	r2, [r7, #28]
 80065d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d302      	bcc.n	80065ee <xQueueGenericSendFromISR+0xc2>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d12f      	bne.n	800664e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006604:	f000 f912 	bl	800682c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006608:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d112      	bne.n	8006638 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006616:	2b00      	cmp	r3, #0
 8006618:	d016      	beq.n	8006648 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661c:	3324      	adds	r3, #36	@ 0x24
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fedc 	bl	80073dc <xTaskRemoveFromEventList>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	e007      	b.n	8006648 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006638:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800663c:	3301      	adds	r3, #1
 800663e:	b2db      	uxtb	r3, r3
 8006640:	b25a      	sxtb	r2, r3
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006648:	2301      	movs	r3, #1
 800664a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800664c:	e001      	b.n	8006652 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800664e:	2300      	movs	r3, #0
 8006650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006654:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800665c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800665e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006660:	4618      	mov	r0, r3
 8006662:	3740      	adds	r7, #64	@ 0x40
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	@ 0x30
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006674:	2300      	movs	r3, #0
 8006676:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10b      	bne.n	800669a <xQueueReceive+0x32>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	623b      	str	r3, [r7, #32]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d103      	bne.n	80066a8 <xQueueReceive+0x40>
 80066a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <xQueueReceive+0x44>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <xQueueReceive+0x46>
 80066ac:	2300      	movs	r3, #0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10b      	bne.n	80066ca <xQueueReceive+0x62>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	61fb      	str	r3, [r7, #28]
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop
 80066c8:	e7fd      	b.n	80066c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ca:	f001 f847 	bl	800775c <xTaskGetSchedulerState>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d102      	bne.n	80066da <xQueueReceive+0x72>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <xQueueReceive+0x76>
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <xQueueReceive+0x78>
 80066de:	2300      	movs	r3, #0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10b      	bne.n	80066fc <xQueueReceive+0x94>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	61bb      	str	r3, [r7, #24]
}
 80066f6:	bf00      	nop
 80066f8:	bf00      	nop
 80066fa:	e7fd      	b.n	80066f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066fc:	f001 fd9c 	bl	8008238 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01f      	beq.n	800674c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006710:	f000 f8f6 	bl	8006900 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	1e5a      	subs	r2, r3, #1
 8006718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00f      	beq.n	8006744 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	3310      	adds	r3, #16
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fe57 	bl	80073dc <xTaskRemoveFromEventList>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006734:	4b3c      	ldr	r3, [pc, #240]	@ (8006828 <xQueueReceive+0x1c0>)
 8006736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006744:	f001 fdaa 	bl	800829c <vPortExitCritical>
				return pdPASS;
 8006748:	2301      	movs	r3, #1
 800674a:	e069      	b.n	8006820 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d103      	bne.n	800675a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006752:	f001 fda3 	bl	800829c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006756:	2300      	movs	r3, #0
 8006758:	e062      	b.n	8006820 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800675a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006760:	f107 0310 	add.w	r3, r7, #16
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fe9d 	bl	80074a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800676a:	2301      	movs	r3, #1
 800676c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800676e:	f001 fd95 	bl	800829c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006772:	f000 fc0d 	bl	8006f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006776:	f001 fd5f 	bl	8008238 <vPortEnterCritical>
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006780:	b25b      	sxtb	r3, r3
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d103      	bne.n	8006790 <xQueueReceive+0x128>
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006792:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006796:	b25b      	sxtb	r3, r3
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d103      	bne.n	80067a6 <xQueueReceive+0x13e>
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067a6:	f001 fd79 	bl	800829c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067aa:	1d3a      	adds	r2, r7, #4
 80067ac:	f107 0310 	add.w	r3, r7, #16
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fe8c 	bl	80074d0 <xTaskCheckForTimeOut>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d123      	bne.n	8006806 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067c0:	f000 f916 	bl	80069f0 <prvIsQueueEmpty>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d017      	beq.n	80067fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067cc:	3324      	adds	r3, #36	@ 0x24
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4611      	mov	r1, r2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fdb0 	bl	8007338 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067da:	f000 f8b7 	bl	800694c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067de:	f000 fbe5 	bl	8006fac <xTaskResumeAll>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d189      	bne.n	80066fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80067e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006828 <xQueueReceive+0x1c0>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	e780      	b.n	80066fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067fc:	f000 f8a6 	bl	800694c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006800:	f000 fbd4 	bl	8006fac <xTaskResumeAll>
 8006804:	e77a      	b.n	80066fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006806:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006808:	f000 f8a0 	bl	800694c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800680c:	f000 fbce 	bl	8006fac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006810:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006812:	f000 f8ed 	bl	80069f0 <prvIsQueueEmpty>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	f43f af6f 	beq.w	80066fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800681e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006820:	4618      	mov	r0, r3
 8006822:	3730      	adds	r7, #48	@ 0x30
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006840:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10d      	bne.n	8006866 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d14d      	bne.n	80068ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 ff9e 	bl	8007798 <xTaskPriorityDisinherit>
 800685c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	e043      	b.n	80068ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d119      	bne.n	80068a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6858      	ldr	r0, [r3, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006874:	461a      	mov	r2, r3
 8006876:	68b9      	ldr	r1, [r7, #8]
 8006878:	f002 fa71 	bl	8008d5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006884:	441a      	add	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	429a      	cmp	r2, r3
 8006894:	d32b      	bcc.n	80068ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	e026      	b.n	80068ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68d8      	ldr	r0, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a8:	461a      	mov	r2, r3
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	f002 fa57 	bl	8008d5e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	425b      	negs	r3, r3
 80068ba:	441a      	add	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d207      	bcs.n	80068dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d4:	425b      	negs	r3, r3
 80068d6:	441a      	add	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d105      	bne.n	80068ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80068f6:	697b      	ldr	r3, [r7, #20]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	d018      	beq.n	8006944 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	441a      	add	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	429a      	cmp	r2, r3
 800692a:	d303      	bcc.n	8006934 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68d9      	ldr	r1, [r3, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693c:	461a      	mov	r2, r3
 800693e:	6838      	ldr	r0, [r7, #0]
 8006940:	f002 fa0d 	bl	8008d5e <memcpy>
	}
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006954:	f001 fc70 	bl	8008238 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800695e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006960:	e011      	b.n	8006986 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d012      	beq.n	8006990 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3324      	adds	r3, #36	@ 0x24
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fd34 	bl	80073dc <xTaskRemoveFromEventList>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800697a:	f000 fe0d 	bl	8007598 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	3b01      	subs	r3, #1
 8006982:	b2db      	uxtb	r3, r3
 8006984:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800698a:	2b00      	cmp	r3, #0
 800698c:	dce9      	bgt.n	8006962 <prvUnlockQueue+0x16>
 800698e:	e000      	b.n	8006992 <prvUnlockQueue+0x46>
					break;
 8006990:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	22ff      	movs	r2, #255	@ 0xff
 8006996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800699a:	f001 fc7f 	bl	800829c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800699e:	f001 fc4b 	bl	8008238 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069aa:	e011      	b.n	80069d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d012      	beq.n	80069da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3310      	adds	r3, #16
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fd0f 	bl	80073dc <xTaskRemoveFromEventList>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069c4:	f000 fde8 	bl	8007598 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	dce9      	bgt.n	80069ac <prvUnlockQueue+0x60>
 80069d8:	e000      	b.n	80069dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	22ff      	movs	r2, #255	@ 0xff
 80069e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80069e4:	f001 fc5a 	bl	800829c <vPortExitCritical>
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069f8:	f001 fc1e 	bl	8008238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d102      	bne.n	8006a0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a04:	2301      	movs	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e001      	b.n	8006a0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a0e:	f001 fc45 	bl	800829c <vPortExitCritical>

	return xReturn;
 8006a12:	68fb      	ldr	r3, [r7, #12]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a24:	f001 fc08 	bl	8008238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d102      	bne.n	8006a3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e001      	b.n	8006a3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a3e:	f001 fc2d 	bl	800829c <vPortExitCritical>

	return xReturn;
 8006a42:	68fb      	ldr	r3, [r7, #12]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	e014      	b.n	8006a86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8006a9c <vQueueAddToRegistry+0x50>)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a68:	490c      	ldr	r1, [pc, #48]	@ (8006a9c <vQueueAddToRegistry+0x50>)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a72:	4a0a      	ldr	r2, [pc, #40]	@ (8006a9c <vQueueAddToRegistry+0x50>)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	4413      	add	r3, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a7e:	e006      	b.n	8006a8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b07      	cmp	r3, #7
 8006a8a:	d9e7      	bls.n	8006a5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	20000a68 	.word	0x20000a68

08006aa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ab0:	f001 fbc2 	bl	8008238 <vPortEnterCritical>
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aba:	b25b      	sxtb	r3, r3
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac0:	d103      	bne.n	8006aca <vQueueWaitForMessageRestricted+0x2a>
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ad0:	b25b      	sxtb	r3, r3
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d103      	bne.n	8006ae0 <vQueueWaitForMessageRestricted+0x40>
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ae0:	f001 fbdc 	bl	800829c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d106      	bne.n	8006afa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	3324      	adds	r3, #36	@ 0x24
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	68b9      	ldr	r1, [r7, #8]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fc45 	bl	8007384 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006afa:	6978      	ldr	r0, [r7, #20]
 8006afc:	f7ff ff26 	bl	800694c <prvUnlockQueue>
	}
 8006b00:	bf00      	nop
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08e      	sub	sp, #56	@ 0x38
 8006b0c:	af04      	add	r7, sp, #16
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	623b      	str	r3, [r7, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	61fb      	str	r3, [r7, #28]
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b52:	235c      	movs	r3, #92	@ 0x5c
 8006b54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b5c      	cmp	r3, #92	@ 0x5c
 8006b5a:	d00b      	beq.n	8006b74 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	61bb      	str	r3, [r7, #24]
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	e7fd      	b.n	8006b70 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01e      	beq.n	8006bba <xTaskCreateStatic+0xb2>
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d01b      	beq.n	8006bba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b84:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b8a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b94:	2300      	movs	r3, #0
 8006b96:	9303      	str	r3, [sp, #12]
 8006b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9a:	9302      	str	r3, [sp, #8]
 8006b9c:	f107 0314 	add.w	r3, r7, #20
 8006ba0:	9301      	str	r3, [sp, #4]
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 f850 	bl	8006c52 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006bb4:	f000 f8de 	bl	8006d74 <prvAddNewTaskToReadyList>
 8006bb8:	e001      	b.n	8006bbe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bbe:	697b      	ldr	r3, [r7, #20]
	}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3728      	adds	r7, #40	@ 0x28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08c      	sub	sp, #48	@ 0x30
 8006bcc:	af04      	add	r7, sp, #16
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bd8:	88fb      	ldrh	r3, [r7, #6]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 fc4d 	bl	800847c <pvPortMalloc>
 8006be2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00e      	beq.n	8006c08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bea:	205c      	movs	r0, #92	@ 0x5c
 8006bec:	f001 fc46 	bl	800847c <pvPortMalloc>
 8006bf0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bfe:	e005      	b.n	8006c0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c00:	6978      	ldr	r0, [r7, #20]
 8006c02:	f001 fd09 	bl	8008618 <vPortFree>
 8006c06:	e001      	b.n	8006c0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d017      	beq.n	8006c42 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c1a:	88fa      	ldrh	r2, [r7, #6]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9303      	str	r3, [sp, #12]
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	9302      	str	r3, [sp, #8]
 8006c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f80e 	bl	8006c52 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c36:	69f8      	ldr	r0, [r7, #28]
 8006c38:	f000 f89c 	bl	8006d74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	e002      	b.n	8006c48 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c42:	f04f 33ff 	mov.w	r3, #4294967295
 8006c46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c48:	69bb      	ldr	r3, [r7, #24]
	}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b088      	sub	sp, #32
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	607a      	str	r2, [r7, #4]
 8006c5e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	461a      	mov	r2, r3
 8006c6a:	21a5      	movs	r1, #165	@ 0xa5
 8006c6c:	f001 fffc 	bl	8008c68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	f023 0307 	bic.w	r3, r3, #7
 8006c88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	617b      	str	r3, [r7, #20]
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01f      	beq.n	8006cf2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	e012      	b.n	8006cde <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	7819      	ldrb	r1, [r3, #0]
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3334      	adds	r3, #52	@ 0x34
 8006cc8:	460a      	mov	r2, r1
 8006cca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d9e9      	bls.n	8006cb8 <prvInitialiseNewTask+0x66>
 8006ce4:	e000      	b.n	8006ce8 <prvInitialiseNewTask+0x96>
			{
				break;
 8006ce6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cf0:	e003      	b.n	8006cfa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	2b37      	cmp	r3, #55	@ 0x37
 8006cfe:	d901      	bls.n	8006d04 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d00:	2337      	movs	r3, #55	@ 0x37
 8006d02:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d08:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d0e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	2200      	movs	r2, #0
 8006d14:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff f966 	bl	8005fec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	3318      	adds	r3, #24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff f961 	bl	8005fec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d3e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	2200      	movs	r2, #0
 8006d44:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	68f9      	ldr	r1, [r7, #12]
 8006d52:	69b8      	ldr	r0, [r7, #24]
 8006d54:	f001 f93e 	bl	8007fd4 <pxPortInitialiseStack>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d6a:	bf00      	nop
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d7c:	f001 fa5c 	bl	8008238 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d80:	4b2d      	ldr	r3, [pc, #180]	@ (8006e38 <prvAddNewTaskToReadyList+0xc4>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	4a2c      	ldr	r2, [pc, #176]	@ (8006e38 <prvAddNewTaskToReadyList+0xc4>)
 8006d88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d92:	4a2a      	ldr	r2, [pc, #168]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d98:	4b27      	ldr	r3, [pc, #156]	@ (8006e38 <prvAddNewTaskToReadyList+0xc4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d110      	bne.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006da0:	f000 fc1e 	bl	80075e0 <prvInitialiseTaskLists>
 8006da4:	e00d      	b.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006da6:	4b26      	ldr	r3, [pc, #152]	@ (8006e40 <prvAddNewTaskToReadyList+0xcc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dae:	4b23      	ldr	r3, [pc, #140]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d802      	bhi.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dc2:	4b20      	ldr	r3, [pc, #128]	@ (8006e44 <prvAddNewTaskToReadyList+0xd0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8006e44 <prvAddNewTaskToReadyList+0xd0>)
 8006dca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006e44 <prvAddNewTaskToReadyList+0xd0>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e48 <prvAddNewTaskToReadyList+0xd4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d903      	bls.n	8006de8 <prvAddNewTaskToReadyList+0x74>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	4a18      	ldr	r2, [pc, #96]	@ (8006e48 <prvAddNewTaskToReadyList+0xd4>)
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4a15      	ldr	r2, [pc, #84]	@ (8006e4c <prvAddNewTaskToReadyList+0xd8>)
 8006df6:	441a      	add	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f7ff f901 	bl	8006006 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e04:	f001 fa4a 	bl	800829c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e08:	4b0d      	ldr	r3, [pc, #52]	@ (8006e40 <prvAddNewTaskToReadyList+0xcc>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00e      	beq.n	8006e2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e10:	4b0a      	ldr	r3, [pc, #40]	@ (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d207      	bcs.n	8006e2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e50 <prvAddNewTaskToReadyList+0xdc>)
 8006e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000f7c 	.word	0x20000f7c
 8006e3c:	20000aa8 	.word	0x20000aa8
 8006e40:	20000f88 	.word	0x20000f88
 8006e44:	20000f98 	.word	0x20000f98
 8006e48:	20000f84 	.word	0x20000f84
 8006e4c:	20000aac 	.word	0x20000aac
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d018      	beq.n	8006e98 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e66:	4b14      	ldr	r3, [pc, #80]	@ (8006eb8 <vTaskDelay+0x64>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <vTaskDelay+0x32>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	60bb      	str	r3, [r7, #8]
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	e7fd      	b.n	8006e82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e86:	f000 f883 	bl	8006f90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fcf3 	bl	8007878 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e92:	f000 f88b 	bl	8006fac <xTaskResumeAll>
 8006e96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d107      	bne.n	8006eae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006e9e:	4b07      	ldr	r3, [pc, #28]	@ (8006ebc <vTaskDelay+0x68>)
 8006ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000fa4 	.word	0x20000fa4
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	@ 0x28
 8006ec4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ece:	463a      	mov	r2, r7
 8006ed0:	1d39      	adds	r1, r7, #4
 8006ed2:	f107 0308 	add.w	r3, r7, #8
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff f834 	bl	8005f44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	9202      	str	r2, [sp, #8]
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	2300      	movs	r3, #0
 8006eec:	460a      	mov	r2, r1
 8006eee:	4922      	ldr	r1, [pc, #136]	@ (8006f78 <vTaskStartScheduler+0xb8>)
 8006ef0:	4822      	ldr	r0, [pc, #136]	@ (8006f7c <vTaskStartScheduler+0xbc>)
 8006ef2:	f7ff fe09 	bl	8006b08 <xTaskCreateStatic>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4a21      	ldr	r2, [pc, #132]	@ (8006f80 <vTaskStartScheduler+0xc0>)
 8006efa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006efc:	4b20      	ldr	r3, [pc, #128]	@ (8006f80 <vTaskStartScheduler+0xc0>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f04:	2301      	movs	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e001      	b.n	8006f0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d102      	bne.n	8006f1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f14:	f000 fd04 	bl	8007920 <xTimerCreateTimerTask>
 8006f18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d116      	bne.n	8006f4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	613b      	str	r3, [r7, #16]
}
 8006f32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f34:	4b13      	ldr	r3, [pc, #76]	@ (8006f84 <vTaskStartScheduler+0xc4>)
 8006f36:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f3c:	4b12      	ldr	r3, [pc, #72]	@ (8006f88 <vTaskStartScheduler+0xc8>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f42:	4b12      	ldr	r3, [pc, #72]	@ (8006f8c <vTaskStartScheduler+0xcc>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f48:	f001 f8d2 	bl	80080f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f4c:	e00f      	b.n	8006f6e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d10b      	bne.n	8006f6e <vTaskStartScheduler+0xae>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60fb      	str	r3, [r7, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <vTaskStartScheduler+0xaa>
}
 8006f6e:	bf00      	nop
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	0800927c 	.word	0x0800927c
 8006f7c:	080075b1 	.word	0x080075b1
 8006f80:	20000fa0 	.word	0x20000fa0
 8006f84:	20000f9c 	.word	0x20000f9c
 8006f88:	20000f88 	.word	0x20000f88
 8006f8c:	20000f80 	.word	0x20000f80

08006f90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f94:	4b04      	ldr	r3, [pc, #16]	@ (8006fa8 <vTaskSuspendAll+0x18>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	4a03      	ldr	r2, [pc, #12]	@ (8006fa8 <vTaskSuspendAll+0x18>)
 8006f9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f9e:	bf00      	nop
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	20000fa4 	.word	0x20000fa4

08006fac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fba:	4b42      	ldr	r3, [pc, #264]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <xTaskResumeAll+0x2e>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	603b      	str	r3, [r7, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	e7fd      	b.n	8006fd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fda:	f001 f92d 	bl	8008238 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fde:	4b39      	ldr	r3, [pc, #228]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	4a37      	ldr	r2, [pc, #220]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fe6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe8:	4b36      	ldr	r3, [pc, #216]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d162      	bne.n	80070b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ff0:	4b35      	ldr	r3, [pc, #212]	@ (80070c8 <xTaskResumeAll+0x11c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d05e      	beq.n	80070b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ff8:	e02f      	b.n	800705a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffa:	4b34      	ldr	r3, [pc, #208]	@ (80070cc <xTaskResumeAll+0x120>)
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3318      	adds	r3, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff f85a 	bl	80060c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff f855 	bl	80060c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701a:	4b2d      	ldr	r3, [pc, #180]	@ (80070d0 <xTaskResumeAll+0x124>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d903      	bls.n	800702a <xTaskResumeAll+0x7e>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	4a2a      	ldr	r2, [pc, #168]	@ (80070d0 <xTaskResumeAll+0x124>)
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4a27      	ldr	r2, [pc, #156]	@ (80070d4 <xTaskResumeAll+0x128>)
 8007038:	441a      	add	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe ffe0 	bl	8006006 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704a:	4b23      	ldr	r3, [pc, #140]	@ (80070d8 <xTaskResumeAll+0x12c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	429a      	cmp	r2, r3
 8007052:	d302      	bcc.n	800705a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007054:	4b21      	ldr	r3, [pc, #132]	@ (80070dc <xTaskResumeAll+0x130>)
 8007056:	2201      	movs	r2, #1
 8007058:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800705a:	4b1c      	ldr	r3, [pc, #112]	@ (80070cc <xTaskResumeAll+0x120>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1cb      	bne.n	8006ffa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007068:	f000 fb58 	bl	800771c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800706c:	4b1c      	ldr	r3, [pc, #112]	@ (80070e0 <xTaskResumeAll+0x134>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d010      	beq.n	800709a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007078:	f000 f846 	bl	8007108 <xTaskIncrementTick>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007082:	4b16      	ldr	r3, [pc, #88]	@ (80070dc <xTaskResumeAll+0x130>)
 8007084:	2201      	movs	r2, #1
 8007086:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3b01      	subs	r3, #1
 800708c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f1      	bne.n	8007078 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007094:	4b12      	ldr	r3, [pc, #72]	@ (80070e0 <xTaskResumeAll+0x134>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800709a:	4b10      	ldr	r3, [pc, #64]	@ (80070dc <xTaskResumeAll+0x130>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070a2:	2301      	movs	r3, #1
 80070a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070a6:	4b0f      	ldr	r3, [pc, #60]	@ (80070e4 <xTaskResumeAll+0x138>)
 80070a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070b6:	f001 f8f1 	bl	800829c <vPortExitCritical>

	return xAlreadyYielded;
 80070ba:	68bb      	ldr	r3, [r7, #8]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000fa4 	.word	0x20000fa4
 80070c8:	20000f7c 	.word	0x20000f7c
 80070cc:	20000f3c 	.word	0x20000f3c
 80070d0:	20000f84 	.word	0x20000f84
 80070d4:	20000aac 	.word	0x20000aac
 80070d8:	20000aa8 	.word	0x20000aa8
 80070dc:	20000f90 	.word	0x20000f90
 80070e0:	20000f8c 	.word	0x20000f8c
 80070e4:	e000ed04 	.word	0xe000ed04

080070e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070ee:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <xTaskGetTickCount+0x1c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070f4:	687b      	ldr	r3, [r7, #4]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000f80 	.word	0x20000f80

08007108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800710e:	2300      	movs	r3, #0
 8007110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007112:	4b4f      	ldr	r3, [pc, #316]	@ (8007250 <xTaskIncrementTick+0x148>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f040 8090 	bne.w	800723c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800711c:	4b4d      	ldr	r3, [pc, #308]	@ (8007254 <xTaskIncrementTick+0x14c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3301      	adds	r3, #1
 8007122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007124:	4a4b      	ldr	r2, [pc, #300]	@ (8007254 <xTaskIncrementTick+0x14c>)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d121      	bne.n	8007174 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007130:	4b49      	ldr	r3, [pc, #292]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <xTaskIncrementTick+0x4a>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	603b      	str	r3, [r7, #0]
}
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	e7fd      	b.n	800714e <xTaskIncrementTick+0x46>
 8007152:	4b41      	ldr	r3, [pc, #260]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	4b40      	ldr	r3, [pc, #256]	@ (800725c <xTaskIncrementTick+0x154>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a3e      	ldr	r2, [pc, #248]	@ (8007258 <xTaskIncrementTick+0x150>)
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	4a3e      	ldr	r2, [pc, #248]	@ (800725c <xTaskIncrementTick+0x154>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	4b3e      	ldr	r3, [pc, #248]	@ (8007260 <xTaskIncrementTick+0x158>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	4a3c      	ldr	r2, [pc, #240]	@ (8007260 <xTaskIncrementTick+0x158>)
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	f000 fad4 	bl	800771c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007174:	4b3b      	ldr	r3, [pc, #236]	@ (8007264 <xTaskIncrementTick+0x15c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	429a      	cmp	r2, r3
 800717c:	d349      	bcc.n	8007212 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800717e:	4b36      	ldr	r3, [pc, #216]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d104      	bne.n	8007192 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007188:	4b36      	ldr	r3, [pc, #216]	@ (8007264 <xTaskIncrementTick+0x15c>)
 800718a:	f04f 32ff 	mov.w	r2, #4294967295
 800718e:	601a      	str	r2, [r3, #0]
					break;
 8007190:	e03f      	b.n	8007212 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007192:	4b31      	ldr	r3, [pc, #196]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d203      	bcs.n	80071b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071aa:	4a2e      	ldr	r2, [pc, #184]	@ (8007264 <xTaskIncrementTick+0x15c>)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071b0:	e02f      	b.n	8007212 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe ff82 	bl	80060c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	3318      	adds	r3, #24
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe ff79 	bl	80060c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d2:	4b25      	ldr	r3, [pc, #148]	@ (8007268 <xTaskIncrementTick+0x160>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d903      	bls.n	80071e2 <xTaskIncrementTick+0xda>
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	4a22      	ldr	r2, [pc, #136]	@ (8007268 <xTaskIncrementTick+0x160>)
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4a1f      	ldr	r2, [pc, #124]	@ (800726c <xTaskIncrementTick+0x164>)
 80071f0:	441a      	add	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f7fe ff04 	bl	8006006 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007202:	4b1b      	ldr	r3, [pc, #108]	@ (8007270 <xTaskIncrementTick+0x168>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	429a      	cmp	r2, r3
 800720a:	d3b8      	bcc.n	800717e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007210:	e7b5      	b.n	800717e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007212:	4b17      	ldr	r3, [pc, #92]	@ (8007270 <xTaskIncrementTick+0x168>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007218:	4914      	ldr	r1, [pc, #80]	@ (800726c <xTaskIncrementTick+0x164>)
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	440b      	add	r3, r1
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d901      	bls.n	800722e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800722a:	2301      	movs	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800722e:	4b11      	ldr	r3, [pc, #68]	@ (8007274 <xTaskIncrementTick+0x16c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007236:	2301      	movs	r3, #1
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	e004      	b.n	8007246 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800723c:	4b0e      	ldr	r3, [pc, #56]	@ (8007278 <xTaskIncrementTick+0x170>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	4a0d      	ldr	r2, [pc, #52]	@ (8007278 <xTaskIncrementTick+0x170>)
 8007244:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007246:	697b      	ldr	r3, [r7, #20]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000fa4 	.word	0x20000fa4
 8007254:	20000f80 	.word	0x20000f80
 8007258:	20000f34 	.word	0x20000f34
 800725c:	20000f38 	.word	0x20000f38
 8007260:	20000f94 	.word	0x20000f94
 8007264:	20000f9c 	.word	0x20000f9c
 8007268:	20000f84 	.word	0x20000f84
 800726c:	20000aac 	.word	0x20000aac
 8007270:	20000aa8 	.word	0x20000aa8
 8007274:	20000f90 	.word	0x20000f90
 8007278:	20000f8c 	.word	0x20000f8c

0800727c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007282:	4b28      	ldr	r3, [pc, #160]	@ (8007324 <vTaskSwitchContext+0xa8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800728a:	4b27      	ldr	r3, [pc, #156]	@ (8007328 <vTaskSwitchContext+0xac>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007290:	e042      	b.n	8007318 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007292:	4b25      	ldr	r3, [pc, #148]	@ (8007328 <vTaskSwitchContext+0xac>)
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007298:	4b24      	ldr	r3, [pc, #144]	@ (800732c <vTaskSwitchContext+0xb0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	e011      	b.n	80072c4 <vTaskSwitchContext+0x48>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10b      	bne.n	80072be <vTaskSwitchContext+0x42>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	607b      	str	r3, [r7, #4]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <vTaskSwitchContext+0x3e>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	491a      	ldr	r1, [pc, #104]	@ (8007330 <vTaskSwitchContext+0xb4>)
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	440b      	add	r3, r1
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0e3      	beq.n	80072a0 <vTaskSwitchContext+0x24>
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4a13      	ldr	r2, [pc, #76]	@ (8007330 <vTaskSwitchContext+0xb4>)
 80072e4:	4413      	add	r3, r2
 80072e6:	60bb      	str	r3, [r7, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	605a      	str	r2, [r3, #4]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	3308      	adds	r3, #8
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d104      	bne.n	8007308 <vTaskSwitchContext+0x8c>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	605a      	str	r2, [r3, #4]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	4a09      	ldr	r2, [pc, #36]	@ (8007334 <vTaskSwitchContext+0xb8>)
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	4a06      	ldr	r2, [pc, #24]	@ (800732c <vTaskSwitchContext+0xb0>)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6013      	str	r3, [r2, #0]
}
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	20000fa4 	.word	0x20000fa4
 8007328:	20000f90 	.word	0x20000f90
 800732c:	20000f84 	.word	0x20000f84
 8007330:	20000aac 	.word	0x20000aac
 8007334:	20000aa8 	.word	0x20000aa8

08007338 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10b      	bne.n	8007360 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	60fb      	str	r3, [r7, #12]
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007360:	4b07      	ldr	r3, [pc, #28]	@ (8007380 <vTaskPlaceOnEventList+0x48>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3318      	adds	r3, #24
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7fe fe70 	bl	800604e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800736e:	2101      	movs	r1, #1
 8007370:	6838      	ldr	r0, [r7, #0]
 8007372:	f000 fa81 	bl	8007878 <prvAddCurrentTaskToDelayedList>
}
 8007376:	bf00      	nop
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000aa8 	.word	0x20000aa8

08007384 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10b      	bne.n	80073ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	617b      	str	r3, [r7, #20]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073ae:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3318      	adds	r3, #24
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7fe fe25 	bl	8006006 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	68b8      	ldr	r0, [r7, #8]
 80073cc:	f000 fa54 	bl	8007878 <prvAddCurrentTaskToDelayedList>
	}
 80073d0:	bf00      	nop
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20000aa8 	.word	0x20000aa8

080073dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10b      	bne.n	800740a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	60fb      	str	r3, [r7, #12]
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	e7fd      	b.n	8007406 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3318      	adds	r3, #24
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fe56 	bl	80060c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007414:	4b1d      	ldr	r3, [pc, #116]	@ (800748c <xTaskRemoveFromEventList+0xb0>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d11d      	bne.n	8007458 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	3304      	adds	r3, #4
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fe4d 	bl	80060c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742a:	4b19      	ldr	r3, [pc, #100]	@ (8007490 <xTaskRemoveFromEventList+0xb4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d903      	bls.n	800743a <xTaskRemoveFromEventList+0x5e>
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007436:	4a16      	ldr	r2, [pc, #88]	@ (8007490 <xTaskRemoveFromEventList+0xb4>)
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4a13      	ldr	r2, [pc, #76]	@ (8007494 <xTaskRemoveFromEventList+0xb8>)
 8007448:	441a      	add	r2, r3
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fe fdd8 	bl	8006006 <vListInsertEnd>
 8007456:	e005      	b.n	8007464 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	3318      	adds	r3, #24
 800745c:	4619      	mov	r1, r3
 800745e:	480e      	ldr	r0, [pc, #56]	@ (8007498 <xTaskRemoveFromEventList+0xbc>)
 8007460:	f7fe fdd1 	bl	8006006 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007468:	4b0c      	ldr	r3, [pc, #48]	@ (800749c <xTaskRemoveFromEventList+0xc0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	429a      	cmp	r2, r3
 8007470:	d905      	bls.n	800747e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007472:	2301      	movs	r3, #1
 8007474:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007476:	4b0a      	ldr	r3, [pc, #40]	@ (80074a0 <xTaskRemoveFromEventList+0xc4>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e001      	b.n	8007482 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007482:	697b      	ldr	r3, [r7, #20]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000fa4 	.word	0x20000fa4
 8007490:	20000f84 	.word	0x20000f84
 8007494:	20000aac 	.word	0x20000aac
 8007498:	20000f3c 	.word	0x20000f3c
 800749c:	20000aa8 	.word	0x20000aa8
 80074a0:	20000f90 	.word	0x20000f90

080074a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074ac:	4b06      	ldr	r3, [pc, #24]	@ (80074c8 <vTaskInternalSetTimeOutState+0x24>)
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074b4:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <vTaskInternalSetTimeOutState+0x28>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	605a      	str	r2, [r3, #4]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20000f94 	.word	0x20000f94
 80074cc:	20000f80 	.word	0x20000f80

080074d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10b      	bne.n	80074f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	60fb      	str	r3, [r7, #12]
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	e7fd      	b.n	8007512 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007516:	f000 fe8f 	bl	8008238 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800751a:	4b1d      	ldr	r3, [pc, #116]	@ (8007590 <xTaskCheckForTimeOut+0xc0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007532:	d102      	bne.n	800753a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007534:	2300      	movs	r3, #0
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e023      	b.n	8007582 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4b15      	ldr	r3, [pc, #84]	@ (8007594 <xTaskCheckForTimeOut+0xc4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d007      	beq.n	8007556 <xTaskCheckForTimeOut+0x86>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	429a      	cmp	r2, r3
 800754e:	d302      	bcc.n	8007556 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007550:	2301      	movs	r3, #1
 8007552:	61fb      	str	r3, [r7, #28]
 8007554:	e015      	b.n	8007582 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	429a      	cmp	r2, r3
 800755e:	d20b      	bcs.n	8007578 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	1ad2      	subs	r2, r2, r3
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ff99 	bl	80074a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	e004      	b.n	8007582 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800757e:	2301      	movs	r3, #1
 8007580:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007582:	f000 fe8b 	bl	800829c <vPortExitCritical>

	return xReturn;
 8007586:	69fb      	ldr	r3, [r7, #28]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3720      	adds	r7, #32
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20000f80 	.word	0x20000f80
 8007594:	20000f94 	.word	0x20000f94

08007598 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800759c:	4b03      	ldr	r3, [pc, #12]	@ (80075ac <vTaskMissedYield+0x14>)
 800759e:	2201      	movs	r2, #1
 80075a0:	601a      	str	r2, [r3, #0]
}
 80075a2:	bf00      	nop
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	20000f90 	.word	0x20000f90

080075b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075b8:	f000 f852 	bl	8007660 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075bc:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <prvIdleTask+0x28>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d9f9      	bls.n	80075b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075c4:	4b05      	ldr	r3, [pc, #20]	@ (80075dc <prvIdleTask+0x2c>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075d4:	e7f0      	b.n	80075b8 <prvIdleTask+0x8>
 80075d6:	bf00      	nop
 80075d8:	20000aac 	.word	0x20000aac
 80075dc:	e000ed04 	.word	0xe000ed04

080075e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075e6:	2300      	movs	r3, #0
 80075e8:	607b      	str	r3, [r7, #4]
 80075ea:	e00c      	b.n	8007606 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4a12      	ldr	r2, [pc, #72]	@ (8007640 <prvInitialiseTaskLists+0x60>)
 80075f8:	4413      	add	r3, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fcd6 	bl	8005fac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3301      	adds	r3, #1
 8007604:	607b      	str	r3, [r7, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2b37      	cmp	r3, #55	@ 0x37
 800760a:	d9ef      	bls.n	80075ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800760c:	480d      	ldr	r0, [pc, #52]	@ (8007644 <prvInitialiseTaskLists+0x64>)
 800760e:	f7fe fccd 	bl	8005fac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007612:	480d      	ldr	r0, [pc, #52]	@ (8007648 <prvInitialiseTaskLists+0x68>)
 8007614:	f7fe fcca 	bl	8005fac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007618:	480c      	ldr	r0, [pc, #48]	@ (800764c <prvInitialiseTaskLists+0x6c>)
 800761a:	f7fe fcc7 	bl	8005fac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800761e:	480c      	ldr	r0, [pc, #48]	@ (8007650 <prvInitialiseTaskLists+0x70>)
 8007620:	f7fe fcc4 	bl	8005fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007624:	480b      	ldr	r0, [pc, #44]	@ (8007654 <prvInitialiseTaskLists+0x74>)
 8007626:	f7fe fcc1 	bl	8005fac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800762a:	4b0b      	ldr	r3, [pc, #44]	@ (8007658 <prvInitialiseTaskLists+0x78>)
 800762c:	4a05      	ldr	r2, [pc, #20]	@ (8007644 <prvInitialiseTaskLists+0x64>)
 800762e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007630:	4b0a      	ldr	r3, [pc, #40]	@ (800765c <prvInitialiseTaskLists+0x7c>)
 8007632:	4a05      	ldr	r2, [pc, #20]	@ (8007648 <prvInitialiseTaskLists+0x68>)
 8007634:	601a      	str	r2, [r3, #0]
}
 8007636:	bf00      	nop
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000aac 	.word	0x20000aac
 8007644:	20000f0c 	.word	0x20000f0c
 8007648:	20000f20 	.word	0x20000f20
 800764c:	20000f3c 	.word	0x20000f3c
 8007650:	20000f50 	.word	0x20000f50
 8007654:	20000f68 	.word	0x20000f68
 8007658:	20000f34 	.word	0x20000f34
 800765c:	20000f38 	.word	0x20000f38

08007660 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007666:	e019      	b.n	800769c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007668:	f000 fde6 	bl	8008238 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766c:	4b10      	ldr	r3, [pc, #64]	@ (80076b0 <prvCheckTasksWaitingTermination+0x50>)
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fd21 	bl	80060c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800767e:	4b0d      	ldr	r3, [pc, #52]	@ (80076b4 <prvCheckTasksWaitingTermination+0x54>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3b01      	subs	r3, #1
 8007684:	4a0b      	ldr	r2, [pc, #44]	@ (80076b4 <prvCheckTasksWaitingTermination+0x54>)
 8007686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007688:	4b0b      	ldr	r3, [pc, #44]	@ (80076b8 <prvCheckTasksWaitingTermination+0x58>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3b01      	subs	r3, #1
 800768e:	4a0a      	ldr	r2, [pc, #40]	@ (80076b8 <prvCheckTasksWaitingTermination+0x58>)
 8007690:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007692:	f000 fe03 	bl	800829c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f810 	bl	80076bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800769c:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <prvCheckTasksWaitingTermination+0x58>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e1      	bne.n	8007668 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20000f50 	.word	0x20000f50
 80076b4:	20000f7c 	.word	0x20000f7c
 80076b8:	20000f64 	.word	0x20000f64

080076bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d108      	bne.n	80076e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 ffa0 	bl	8008618 <vPortFree>
				vPortFree( pxTCB );
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 ff9d 	bl	8008618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076de:	e019      	b.n	8007714 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d103      	bne.n	80076f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 ff94 	bl	8008618 <vPortFree>
	}
 80076f0:	e010      	b.n	8007714 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d00b      	beq.n	8007714 <prvDeleteTCB+0x58>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	60fb      	str	r3, [r7, #12]
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	e7fd      	b.n	8007710 <prvDeleteTCB+0x54>
	}
 8007714:	bf00      	nop
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007722:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <prvResetNextTaskUnblockTime+0x38>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d104      	bne.n	8007736 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800772c:	4b0a      	ldr	r3, [pc, #40]	@ (8007758 <prvResetNextTaskUnblockTime+0x3c>)
 800772e:	f04f 32ff 	mov.w	r2, #4294967295
 8007732:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007734:	e008      	b.n	8007748 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007736:	4b07      	ldr	r3, [pc, #28]	@ (8007754 <prvResetNextTaskUnblockTime+0x38>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4a04      	ldr	r2, [pc, #16]	@ (8007758 <prvResetNextTaskUnblockTime+0x3c>)
 8007746:	6013      	str	r3, [r2, #0]
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	20000f34 	.word	0x20000f34
 8007758:	20000f9c 	.word	0x20000f9c

0800775c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007762:	4b0b      	ldr	r3, [pc, #44]	@ (8007790 <xTaskGetSchedulerState+0x34>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d102      	bne.n	8007770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800776a:	2301      	movs	r3, #1
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	e008      	b.n	8007782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007770:	4b08      	ldr	r3, [pc, #32]	@ (8007794 <xTaskGetSchedulerState+0x38>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d102      	bne.n	800777e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007778:	2302      	movs	r3, #2
 800777a:	607b      	str	r3, [r7, #4]
 800777c:	e001      	b.n	8007782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800777e:	2300      	movs	r3, #0
 8007780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007782:	687b      	ldr	r3, [r7, #4]
	}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	20000f88 	.word	0x20000f88
 8007794:	20000fa4 	.word	0x20000fa4

08007798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d058      	beq.n	8007860 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077ae:	4b2f      	ldr	r3, [pc, #188]	@ (800786c <xTaskPriorityDisinherit+0xd4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d00b      	beq.n	80077d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	60fb      	str	r3, [r7, #12]
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	e7fd      	b.n	80077cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10b      	bne.n	80077f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	60bb      	str	r3, [r7, #8]
}
 80077ea:	bf00      	nop
 80077ec:	bf00      	nop
 80077ee:	e7fd      	b.n	80077ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f4:	1e5a      	subs	r2, r3, #1
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007802:	429a      	cmp	r2, r3
 8007804:	d02c      	beq.n	8007860 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800780a:	2b00      	cmp	r3, #0
 800780c:	d128      	bne.n	8007860 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fc54 	bl	80060c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007824:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007830:	4b0f      	ldr	r3, [pc, #60]	@ (8007870 <xTaskPriorityDisinherit+0xd8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d903      	bls.n	8007840 <xTaskPriorityDisinherit+0xa8>
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	4a0c      	ldr	r2, [pc, #48]	@ (8007870 <xTaskPriorityDisinherit+0xd8>)
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4a09      	ldr	r2, [pc, #36]	@ (8007874 <xTaskPriorityDisinherit+0xdc>)
 800784e:	441a      	add	r2, r3
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	3304      	adds	r3, #4
 8007854:	4619      	mov	r1, r3
 8007856:	4610      	mov	r0, r2
 8007858:	f7fe fbd5 	bl	8006006 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800785c:	2301      	movs	r3, #1
 800785e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007860:	697b      	ldr	r3, [r7, #20]
	}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000aa8 	.word	0x20000aa8
 8007870:	20000f84 	.word	0x20000f84
 8007874:	20000aac 	.word	0x20000aac

08007878 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007882:	4b21      	ldr	r3, [pc, #132]	@ (8007908 <prvAddCurrentTaskToDelayedList+0x90>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007888:	4b20      	ldr	r3, [pc, #128]	@ (800790c <prvAddCurrentTaskToDelayedList+0x94>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3304      	adds	r3, #4
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe fc16 	bl	80060c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789a:	d10a      	bne.n	80078b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078a2:	4b1a      	ldr	r3, [pc, #104]	@ (800790c <prvAddCurrentTaskToDelayedList+0x94>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4619      	mov	r1, r3
 80078aa:	4819      	ldr	r0, [pc, #100]	@ (8007910 <prvAddCurrentTaskToDelayedList+0x98>)
 80078ac:	f7fe fbab 	bl	8006006 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078b0:	e026      	b.n	8007900 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4413      	add	r3, r2
 80078b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078ba:	4b14      	ldr	r3, [pc, #80]	@ (800790c <prvAddCurrentTaskToDelayedList+0x94>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d209      	bcs.n	80078de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ca:	4b12      	ldr	r3, [pc, #72]	@ (8007914 <prvAddCurrentTaskToDelayedList+0x9c>)
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	4b0f      	ldr	r3, [pc, #60]	@ (800790c <prvAddCurrentTaskToDelayedList+0x94>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3304      	adds	r3, #4
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f7fe fbb9 	bl	800604e <vListInsert>
}
 80078dc:	e010      	b.n	8007900 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078de:	4b0e      	ldr	r3, [pc, #56]	@ (8007918 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	4b0a      	ldr	r3, [pc, #40]	@ (800790c <prvAddCurrentTaskToDelayedList+0x94>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4619      	mov	r1, r3
 80078ea:	4610      	mov	r0, r2
 80078ec:	f7fe fbaf 	bl	800604e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078f0:	4b0a      	ldr	r3, [pc, #40]	@ (800791c <prvAddCurrentTaskToDelayedList+0xa4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d202      	bcs.n	8007900 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078fa:	4a08      	ldr	r2, [pc, #32]	@ (800791c <prvAddCurrentTaskToDelayedList+0xa4>)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	6013      	str	r3, [r2, #0]
}
 8007900:	bf00      	nop
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	20000f80 	.word	0x20000f80
 800790c:	20000aa8 	.word	0x20000aa8
 8007910:	20000f68 	.word	0x20000f68
 8007914:	20000f38 	.word	0x20000f38
 8007918:	20000f34 	.word	0x20000f34
 800791c:	20000f9c 	.word	0x20000f9c

08007920 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	@ 0x28
 8007924:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800792a:	f000 fb13 	bl	8007f54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800792e:	4b1d      	ldr	r3, [pc, #116]	@ (80079a4 <xTimerCreateTimerTask+0x84>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d021      	beq.n	800797a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800793a:	2300      	movs	r3, #0
 800793c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800793e:	1d3a      	adds	r2, r7, #4
 8007940:	f107 0108 	add.w	r1, r7, #8
 8007944:	f107 030c 	add.w	r3, r7, #12
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe fb15 	bl	8005f78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	9202      	str	r2, [sp, #8]
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	2302      	movs	r3, #2
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	2300      	movs	r3, #0
 800795e:	460a      	mov	r2, r1
 8007960:	4911      	ldr	r1, [pc, #68]	@ (80079a8 <xTimerCreateTimerTask+0x88>)
 8007962:	4812      	ldr	r0, [pc, #72]	@ (80079ac <xTimerCreateTimerTask+0x8c>)
 8007964:	f7ff f8d0 	bl	8006b08 <xTaskCreateStatic>
 8007968:	4603      	mov	r3, r0
 800796a:	4a11      	ldr	r2, [pc, #68]	@ (80079b0 <xTimerCreateTimerTask+0x90>)
 800796c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800796e:	4b10      	ldr	r3, [pc, #64]	@ (80079b0 <xTimerCreateTimerTask+0x90>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007976:	2301      	movs	r3, #1
 8007978:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10b      	bne.n	8007998 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	613b      	str	r3, [r7, #16]
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	e7fd      	b.n	8007994 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007998:	697b      	ldr	r3, [r7, #20]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20000fd8 	.word	0x20000fd8
 80079a8:	08009284 	.word	0x08009284
 80079ac:	08007aed 	.word	0x08007aed
 80079b0:	20000fdc 	.word	0x20000fdc

080079b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08a      	sub	sp, #40	@ 0x28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10b      	bne.n	80079e4 <xTimerGenericCommand+0x30>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	623b      	str	r3, [r7, #32]
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	e7fd      	b.n	80079e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079e4:	4b19      	ldr	r3, [pc, #100]	@ (8007a4c <xTimerGenericCommand+0x98>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d02a      	beq.n	8007a42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b05      	cmp	r3, #5
 80079fc:	dc18      	bgt.n	8007a30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079fe:	f7ff fead 	bl	800775c <xTaskGetSchedulerState>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d109      	bne.n	8007a1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a08:	4b10      	ldr	r3, [pc, #64]	@ (8007a4c <xTimerGenericCommand+0x98>)
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	f107 0110 	add.w	r1, r7, #16
 8007a10:	2300      	movs	r3, #0
 8007a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a14:	f7fe fc88 	bl	8006328 <xQueueGenericSend>
 8007a18:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a1a:	e012      	b.n	8007a42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a4c <xTimerGenericCommand+0x98>)
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	f107 0110 	add.w	r1, r7, #16
 8007a24:	2300      	movs	r3, #0
 8007a26:	2200      	movs	r2, #0
 8007a28:	f7fe fc7e 	bl	8006328 <xQueueGenericSend>
 8007a2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a2e:	e008      	b.n	8007a42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a30:	4b06      	ldr	r3, [pc, #24]	@ (8007a4c <xTimerGenericCommand+0x98>)
 8007a32:	6818      	ldr	r0, [r3, #0]
 8007a34:	f107 0110 	add.w	r1, r7, #16
 8007a38:	2300      	movs	r3, #0
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	f7fe fd76 	bl	800652c <xQueueGenericSendFromISR>
 8007a40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3728      	adds	r7, #40	@ 0x28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000fd8 	.word	0x20000fd8

08007a50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5a:	4b23      	ldr	r3, [pc, #140]	@ (8007ae8 <prvProcessExpiredTimer+0x98>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	3304      	adds	r3, #4
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe fb29 	bl	80060c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d023      	beq.n	8007ac4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	699a      	ldr	r2, [r3, #24]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	18d1      	adds	r1, r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	6978      	ldr	r0, [r7, #20]
 8007a8a:	f000 f8d5 	bl	8007c38 <prvInsertTimerInActiveList>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d020      	beq.n	8007ad6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a94:	2300      	movs	r3, #0
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	6978      	ldr	r0, [r7, #20]
 8007aa0:	f7ff ff88 	bl	80079b4 <xTimerGenericCommand>
 8007aa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d114      	bne.n	8007ad6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	60fb      	str	r3, [r7, #12]
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	e7fd      	b.n	8007ac0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	6978      	ldr	r0, [r7, #20]
 8007adc:	4798      	blx	r3
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000fd0 	.word	0x20000fd0

08007aec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007af4:	f107 0308 	add.w	r3, r7, #8
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 f859 	bl	8007bb0 <prvGetNextExpireTime>
 8007afe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4619      	mov	r1, r3
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f805 	bl	8007b14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b0a:	f000 f8d7 	bl	8007cbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b0e:	bf00      	nop
 8007b10:	e7f0      	b.n	8007af4 <prvTimerTask+0x8>
	...

08007b14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b1e:	f7ff fa37 	bl	8006f90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b22:	f107 0308 	add.w	r3, r7, #8
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f866 	bl	8007bf8 <prvSampleTimeNow>
 8007b2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d130      	bne.n	8007b96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <prvProcessTimerOrBlockTask+0x3c>
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d806      	bhi.n	8007b50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b42:	f7ff fa33 	bl	8006fac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b46:	68f9      	ldr	r1, [r7, #12]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff ff81 	bl	8007a50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b4e:	e024      	b.n	8007b9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d008      	beq.n	8007b68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b56:	4b13      	ldr	r3, [pc, #76]	@ (8007ba4 <prvProcessTimerOrBlockTask+0x90>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <prvProcessTimerOrBlockTask+0x50>
 8007b60:	2301      	movs	r3, #1
 8007b62:	e000      	b.n	8007b66 <prvProcessTimerOrBlockTask+0x52>
 8007b64:	2300      	movs	r3, #0
 8007b66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b68:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba8 <prvProcessTimerOrBlockTask+0x94>)
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	4619      	mov	r1, r3
 8007b76:	f7fe ff93 	bl	8006aa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b7a:	f7ff fa17 	bl	8006fac <xTaskResumeAll>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b84:	4b09      	ldr	r3, [pc, #36]	@ (8007bac <prvProcessTimerOrBlockTask+0x98>)
 8007b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	f3bf 8f6f 	isb	sy
}
 8007b94:	e001      	b.n	8007b9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b96:	f7ff fa09 	bl	8006fac <xTaskResumeAll>
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000fd4 	.word	0x20000fd4
 8007ba8:	20000fd8 	.word	0x20000fd8
 8007bac:	e000ed04 	.word	0xe000ed04

08007bb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf4 <prvGetNextExpireTime+0x44>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <prvGetNextExpireTime+0x16>
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	e000      	b.n	8007bc8 <prvGetNextExpireTime+0x18>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bd4:	4b07      	ldr	r3, [pc, #28]	@ (8007bf4 <prvGetNextExpireTime+0x44>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e001      	b.n	8007be4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007be4:	68fb      	ldr	r3, [r7, #12]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000fd0 	.word	0x20000fd0

08007bf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c00:	f7ff fa72 	bl	80070e8 <xTaskGetTickCount>
 8007c04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c06:	4b0b      	ldr	r3, [pc, #44]	@ (8007c34 <prvSampleTimeNow+0x3c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d205      	bcs.n	8007c1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c10:	f000 f93a 	bl	8007e88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	e002      	b.n	8007c22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c22:	4a04      	ldr	r2, [pc, #16]	@ (8007c34 <prvSampleTimeNow+0x3c>)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c28:	68fb      	ldr	r3, [r7, #12]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20000fe0 	.word	0x20000fe0

08007c38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d812      	bhi.n	8007c84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	1ad2      	subs	r2, r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d302      	bcc.n	8007c72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	e01b      	b.n	8007caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c72:	4b10      	ldr	r3, [pc, #64]	@ (8007cb4 <prvInsertTimerInActiveList+0x7c>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f7fe f9e6 	bl	800604e <vListInsert>
 8007c82:	e012      	b.n	8007caa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d206      	bcs.n	8007c9a <prvInsertTimerInActiveList+0x62>
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d302      	bcc.n	8007c9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c94:	2301      	movs	r3, #1
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	e007      	b.n	8007caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c9a:	4b07      	ldr	r3, [pc, #28]	@ (8007cb8 <prvInsertTimerInActiveList+0x80>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	f7fe f9d2 	bl	800604e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007caa:	697b      	ldr	r3, [r7, #20]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000fd4 	.word	0x20000fd4
 8007cb8:	20000fd0 	.word	0x20000fd0

08007cbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08e      	sub	sp, #56	@ 0x38
 8007cc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cc2:	e0ce      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	da19      	bge.n	8007cfe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cca:	1d3b      	adds	r3, r7, #4
 8007ccc:	3304      	adds	r3, #4
 8007cce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10b      	bne.n	8007cee <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	61fb      	str	r3, [r7, #28]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cf4:	6850      	ldr	r0, [r2, #4]
 8007cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cf8:	6892      	ldr	r2, [r2, #8]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f2c0 80ae 	blt.w	8007e62 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d004      	beq.n	8007d1c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d14:	3304      	adds	r3, #4
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fe f9d2 	bl	80060c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff ff6a 	bl	8007bf8 <prvSampleTimeNow>
 8007d24:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b09      	cmp	r3, #9
 8007d2a:	f200 8097 	bhi.w	8007e5c <prvProcessReceivedCommands+0x1a0>
 8007d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <prvProcessReceivedCommands+0x78>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d5d 	.word	0x08007d5d
 8007d38:	08007d5d 	.word	0x08007d5d
 8007d3c:	08007d5d 	.word	0x08007d5d
 8007d40:	08007dd3 	.word	0x08007dd3
 8007d44:	08007de7 	.word	0x08007de7
 8007d48:	08007e33 	.word	0x08007e33
 8007d4c:	08007d5d 	.word	0x08007d5d
 8007d50:	08007d5d 	.word	0x08007d5d
 8007d54:	08007dd3 	.word	0x08007dd3
 8007d58:	08007de7 	.word	0x08007de7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	18d1      	adds	r1, r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d7c:	f7ff ff5c 	bl	8007c38 <prvInsertTimerInActiveList>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d06c      	beq.n	8007e60 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d061      	beq.n	8007e60 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	441a      	add	r2, r3
 8007da4:	2300      	movs	r3, #0
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	2300      	movs	r3, #0
 8007daa:	2100      	movs	r1, #0
 8007dac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dae:	f7ff fe01 	bl	80079b4 <xTimerGenericCommand>
 8007db2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d152      	bne.n	8007e60 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	61bb      	str	r3, [r7, #24]
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	e7fd      	b.n	8007dce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007de4:	e03d      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dec:	f043 0301 	orr.w	r3, r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10b      	bne.n	8007e1e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	617b      	str	r3, [r7, #20]
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	e7fd      	b.n	8007e1a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e24:	18d1      	adds	r1, r2, r3
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e2c:	f7ff ff04 	bl	8007c38 <prvInsertTimerInActiveList>
					break;
 8007e30:	e017      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d103      	bne.n	8007e48 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007e40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e42:	f000 fbe9 	bl	8008618 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e46:	e00c      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e4e:	f023 0301 	bic.w	r3, r3, #1
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e5a:	e002      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007e5c:	bf00      	nop
 8007e5e:	e000      	b.n	8007e62 <prvProcessReceivedCommands+0x1a6>
					break;
 8007e60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e62:	4b08      	ldr	r3, [pc, #32]	@ (8007e84 <prvProcessReceivedCommands+0x1c8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	1d39      	adds	r1, r7, #4
 8007e68:	2200      	movs	r2, #0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fbfc 	bl	8006668 <xQueueReceive>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f47f af26 	bne.w	8007cc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007e78:	bf00      	nop
 8007e7a:	bf00      	nop
 8007e7c:	3730      	adds	r7, #48	@ 0x30
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20000fd8 	.word	0x20000fd8

08007e88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e8e:	e049      	b.n	8007f24 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e90:	4b2e      	ldr	r3, [pc, #184]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe f909 	bl	80060c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02f      	beq.n	8007f24 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	4413      	add	r3, r2
 8007ecc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d90e      	bls.n	8007ef4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	4619      	mov	r1, r3
 8007eec:	4610      	mov	r0, r2
 8007eee:	f7fe f8ae 	bl	800604e <vListInsert>
 8007ef2:	e017      	b.n	8007f24 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	2100      	movs	r1, #0
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7ff fd58 	bl	80079b4 <xTimerGenericCommand>
 8007f04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10b      	bne.n	8007f24 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	603b      	str	r3, [r7, #0]
}
 8007f1e:	bf00      	nop
 8007f20:	bf00      	nop
 8007f22:	e7fd      	b.n	8007f20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f24:	4b09      	ldr	r3, [pc, #36]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1b0      	bne.n	8007e90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f2e:	4b07      	ldr	r3, [pc, #28]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f34:	4b06      	ldr	r3, [pc, #24]	@ (8007f50 <prvSwitchTimerLists+0xc8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a04      	ldr	r2, [pc, #16]	@ (8007f4c <prvSwitchTimerLists+0xc4>)
 8007f3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f3c:	4a04      	ldr	r2, [pc, #16]	@ (8007f50 <prvSwitchTimerLists+0xc8>)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	6013      	str	r3, [r2, #0]
}
 8007f42:	bf00      	nop
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000fd0 	.word	0x20000fd0
 8007f50:	20000fd4 	.word	0x20000fd4

08007f54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f5a:	f000 f96d 	bl	8008238 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f5e:	4b15      	ldr	r3, [pc, #84]	@ (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d120      	bne.n	8007fa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f66:	4814      	ldr	r0, [pc, #80]	@ (8007fb8 <prvCheckForValidListAndQueue+0x64>)
 8007f68:	f7fe f820 	bl	8005fac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f6c:	4813      	ldr	r0, [pc, #76]	@ (8007fbc <prvCheckForValidListAndQueue+0x68>)
 8007f6e:	f7fe f81d 	bl	8005fac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f72:	4b13      	ldr	r3, [pc, #76]	@ (8007fc0 <prvCheckForValidListAndQueue+0x6c>)
 8007f74:	4a10      	ldr	r2, [pc, #64]	@ (8007fb8 <prvCheckForValidListAndQueue+0x64>)
 8007f76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f78:	4b12      	ldr	r3, [pc, #72]	@ (8007fc4 <prvCheckForValidListAndQueue+0x70>)
 8007f7a:	4a10      	ldr	r2, [pc, #64]	@ (8007fbc <prvCheckForValidListAndQueue+0x68>)
 8007f7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	4b11      	ldr	r3, [pc, #68]	@ (8007fc8 <prvCheckForValidListAndQueue+0x74>)
 8007f84:	4a11      	ldr	r2, [pc, #68]	@ (8007fcc <prvCheckForValidListAndQueue+0x78>)
 8007f86:	2110      	movs	r1, #16
 8007f88:	200a      	movs	r0, #10
 8007f8a:	f7fe f92d 	bl	80061e8 <xQueueGenericCreateStatic>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	4a08      	ldr	r2, [pc, #32]	@ (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f94:	4b07      	ldr	r3, [pc, #28]	@ (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f9c:	4b05      	ldr	r3, [pc, #20]	@ (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	490b      	ldr	r1, [pc, #44]	@ (8007fd0 <prvCheckForValidListAndQueue+0x7c>)
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe fd52 	bl	8006a4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fa8:	f000 f978 	bl	800829c <vPortExitCritical>
}
 8007fac:	bf00      	nop
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000fd8 	.word	0x20000fd8
 8007fb8:	20000fa8 	.word	0x20000fa8
 8007fbc:	20000fbc 	.word	0x20000fbc
 8007fc0:	20000fd0 	.word	0x20000fd0
 8007fc4:	20000fd4 	.word	0x20000fd4
 8007fc8:	20001084 	.word	0x20001084
 8007fcc:	20000fe4 	.word	0x20000fe4
 8007fd0:	0800928c 	.word	0x0800928c

08007fd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3b04      	subs	r3, #4
 8007fe4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3b04      	subs	r3, #4
 8007ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f023 0201 	bic.w	r2, r3, #1
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3b04      	subs	r3, #4
 8008002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008004:	4a0c      	ldr	r2, [pc, #48]	@ (8008038 <pxPortInitialiseStack+0x64>)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3b14      	subs	r3, #20
 800800e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3b04      	subs	r3, #4
 800801a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f06f 0202 	mvn.w	r2, #2
 8008022:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	3b20      	subs	r3, #32
 8008028:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800802a:	68fb      	ldr	r3, [r7, #12]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	0800803d 	.word	0x0800803d

0800803c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008046:	4b13      	ldr	r3, [pc, #76]	@ (8008094 <prvTaskExitError+0x58>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d00b      	beq.n	8008068 <prvTaskExitError+0x2c>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <prvTaskExitError+0x28>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	60bb      	str	r3, [r7, #8]
}
 800807a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800807c:	bf00      	nop
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0fc      	beq.n	800807e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20000058 	.word	0x20000058
	...

080080a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080a0:	4b07      	ldr	r3, [pc, #28]	@ (80080c0 <pxCurrentTCBConst2>)
 80080a2:	6819      	ldr	r1, [r3, #0]
 80080a4:	6808      	ldr	r0, [r1, #0]
 80080a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080aa:	f380 8809 	msr	PSP, r0
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f04f 0000 	mov.w	r0, #0
 80080b6:	f380 8811 	msr	BASEPRI, r0
 80080ba:	4770      	bx	lr
 80080bc:	f3af 8000 	nop.w

080080c0 <pxCurrentTCBConst2>:
 80080c0:	20000aa8 	.word	0x20000aa8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop

080080c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080c8:	4808      	ldr	r0, [pc, #32]	@ (80080ec <prvPortStartFirstTask+0x24>)
 80080ca:	6800      	ldr	r0, [r0, #0]
 80080cc:	6800      	ldr	r0, [r0, #0]
 80080ce:	f380 8808 	msr	MSP, r0
 80080d2:	f04f 0000 	mov.w	r0, #0
 80080d6:	f380 8814 	msr	CONTROL, r0
 80080da:	b662      	cpsie	i
 80080dc:	b661      	cpsie	f
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	df00      	svc	0
 80080e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ea:	bf00      	nop
 80080ec:	e000ed08 	.word	0xe000ed08

080080f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080f6:	4b47      	ldr	r3, [pc, #284]	@ (8008214 <xPortStartScheduler+0x124>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a47      	ldr	r2, [pc, #284]	@ (8008218 <xPortStartScheduler+0x128>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d10b      	bne.n	8008118 <xPortStartScheduler+0x28>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	613b      	str	r3, [r7, #16]
}
 8008112:	bf00      	nop
 8008114:	bf00      	nop
 8008116:	e7fd      	b.n	8008114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008118:	4b3e      	ldr	r3, [pc, #248]	@ (8008214 <xPortStartScheduler+0x124>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a3f      	ldr	r2, [pc, #252]	@ (800821c <xPortStartScheduler+0x12c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d10b      	bne.n	800813a <xPortStartScheduler+0x4a>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	60fb      	str	r3, [r7, #12]
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	e7fd      	b.n	8008136 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800813a:	4b39      	ldr	r3, [pc, #228]	@ (8008220 <xPortStartScheduler+0x130>)
 800813c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	22ff      	movs	r2, #255	@ 0xff
 800814a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	b2db      	uxtb	r3, r3
 8008152:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	b2db      	uxtb	r3, r3
 8008158:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800815c:	b2da      	uxtb	r2, r3
 800815e:	4b31      	ldr	r3, [pc, #196]	@ (8008224 <xPortStartScheduler+0x134>)
 8008160:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008162:	4b31      	ldr	r3, [pc, #196]	@ (8008228 <xPortStartScheduler+0x138>)
 8008164:	2207      	movs	r2, #7
 8008166:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008168:	e009      	b.n	800817e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800816a:	4b2f      	ldr	r3, [pc, #188]	@ (8008228 <xPortStartScheduler+0x138>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3b01      	subs	r3, #1
 8008170:	4a2d      	ldr	r2, [pc, #180]	@ (8008228 <xPortStartScheduler+0x138>)
 8008172:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008174:	78fb      	ldrb	r3, [r7, #3]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	b2db      	uxtb	r3, r3
 800817c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800817e:	78fb      	ldrb	r3, [r7, #3]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008186:	2b80      	cmp	r3, #128	@ 0x80
 8008188:	d0ef      	beq.n	800816a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800818a:	4b27      	ldr	r3, [pc, #156]	@ (8008228 <xPortStartScheduler+0x138>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f1c3 0307 	rsb	r3, r3, #7
 8008192:	2b04      	cmp	r3, #4
 8008194:	d00b      	beq.n	80081ae <xPortStartScheduler+0xbe>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60bb      	str	r3, [r7, #8]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008228 <xPortStartScheduler+0x138>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008228 <xPortStartScheduler+0x138>)
 80081b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008228 <xPortStartScheduler+0x138>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80081c0:	4a19      	ldr	r2, [pc, #100]	@ (8008228 <xPortStartScheduler+0x138>)
 80081c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081cc:	4b17      	ldr	r3, [pc, #92]	@ (800822c <xPortStartScheduler+0x13c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a16      	ldr	r2, [pc, #88]	@ (800822c <xPortStartScheduler+0x13c>)
 80081d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80081d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081d8:	4b14      	ldr	r3, [pc, #80]	@ (800822c <xPortStartScheduler+0x13c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a13      	ldr	r2, [pc, #76]	@ (800822c <xPortStartScheduler+0x13c>)
 80081de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80081e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081e4:	f000 f8da 	bl	800839c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081e8:	4b11      	ldr	r3, [pc, #68]	@ (8008230 <xPortStartScheduler+0x140>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081ee:	f000 f8f9 	bl	80083e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081f2:	4b10      	ldr	r3, [pc, #64]	@ (8008234 <xPortStartScheduler+0x144>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008234 <xPortStartScheduler+0x144>)
 80081f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80081fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081fe:	f7ff ff63 	bl	80080c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008202:	f7ff f83b 	bl	800727c <vTaskSwitchContext>
	prvTaskExitError();
 8008206:	f7ff ff19 	bl	800803c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	e000ed00 	.word	0xe000ed00
 8008218:	410fc271 	.word	0x410fc271
 800821c:	410fc270 	.word	0x410fc270
 8008220:	e000e400 	.word	0xe000e400
 8008224:	200010d4 	.word	0x200010d4
 8008228:	200010d8 	.word	0x200010d8
 800822c:	e000ed20 	.word	0xe000ed20
 8008230:	20000058 	.word	0x20000058
 8008234:	e000ef34 	.word	0xe000ef34

08008238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	607b      	str	r3, [r7, #4]
}
 8008250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008252:	4b10      	ldr	r3, [pc, #64]	@ (8008294 <vPortEnterCritical+0x5c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	4a0e      	ldr	r2, [pc, #56]	@ (8008294 <vPortEnterCritical+0x5c>)
 800825a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800825c:	4b0d      	ldr	r3, [pc, #52]	@ (8008294 <vPortEnterCritical+0x5c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d110      	bne.n	8008286 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008264:	4b0c      	ldr	r3, [pc, #48]	@ (8008298 <vPortEnterCritical+0x60>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00b      	beq.n	8008286 <vPortEnterCritical+0x4e>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	603b      	str	r3, [r7, #0]
}
 8008280:	bf00      	nop
 8008282:	bf00      	nop
 8008284:	e7fd      	b.n	8008282 <vPortEnterCritical+0x4a>
	}
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	20000058 	.word	0x20000058
 8008298:	e000ed04 	.word	0xe000ed04

0800829c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082a2:	4b12      	ldr	r3, [pc, #72]	@ (80082ec <vPortExitCritical+0x50>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10b      	bne.n	80082c2 <vPortExitCritical+0x26>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	607b      	str	r3, [r7, #4]
}
 80082bc:	bf00      	nop
 80082be:	bf00      	nop
 80082c0:	e7fd      	b.n	80082be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082c2:	4b0a      	ldr	r3, [pc, #40]	@ (80082ec <vPortExitCritical+0x50>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	4a08      	ldr	r2, [pc, #32]	@ (80082ec <vPortExitCritical+0x50>)
 80082ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082cc:	4b07      	ldr	r3, [pc, #28]	@ (80082ec <vPortExitCritical+0x50>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d105      	bne.n	80082e0 <vPortExitCritical+0x44>
 80082d4:	2300      	movs	r3, #0
 80082d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f383 8811 	msr	BASEPRI, r3
}
 80082de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	20000058 	.word	0x20000058

080082f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082f0:	f3ef 8009 	mrs	r0, PSP
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	4b15      	ldr	r3, [pc, #84]	@ (8008350 <pxCurrentTCBConst>)
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	f01e 0f10 	tst.w	lr, #16
 8008300:	bf08      	it	eq
 8008302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830a:	6010      	str	r0, [r2, #0]
 800830c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008310:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008314:	f380 8811 	msr	BASEPRI, r0
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f7fe ffac 	bl	800727c <vTaskSwitchContext>
 8008324:	f04f 0000 	mov.w	r0, #0
 8008328:	f380 8811 	msr	BASEPRI, r0
 800832c:	bc09      	pop	{r0, r3}
 800832e:	6819      	ldr	r1, [r3, #0]
 8008330:	6808      	ldr	r0, [r1, #0]
 8008332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008336:	f01e 0f10 	tst.w	lr, #16
 800833a:	bf08      	it	eq
 800833c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008340:	f380 8809 	msr	PSP, r0
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	f3af 8000 	nop.w

08008350 <pxCurrentTCBConst>:
 8008350:	20000aa8 	.word	0x20000aa8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop

08008358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	607b      	str	r3, [r7, #4]
}
 8008370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008372:	f7fe fec9 	bl	8007108 <xTaskIncrementTick>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800837c:	4b06      	ldr	r3, [pc, #24]	@ (8008398 <xPortSysTickHandler+0x40>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	2300      	movs	r3, #0
 8008386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f383 8811 	msr	BASEPRI, r3
}
 800838e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083a0:	4b0b      	ldr	r3, [pc, #44]	@ (80083d0 <vPortSetupTimerInterrupt+0x34>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083a6:	4b0b      	ldr	r3, [pc, #44]	@ (80083d4 <vPortSetupTimerInterrupt+0x38>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083ac:	4b0a      	ldr	r3, [pc, #40]	@ (80083d8 <vPortSetupTimerInterrupt+0x3c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a0a      	ldr	r2, [pc, #40]	@ (80083dc <vPortSetupTimerInterrupt+0x40>)
 80083b2:	fba2 2303 	umull	r2, r3, r2, r3
 80083b6:	099b      	lsrs	r3, r3, #6
 80083b8:	4a09      	ldr	r2, [pc, #36]	@ (80083e0 <vPortSetupTimerInterrupt+0x44>)
 80083ba:	3b01      	subs	r3, #1
 80083bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083be:	4b04      	ldr	r3, [pc, #16]	@ (80083d0 <vPortSetupTimerInterrupt+0x34>)
 80083c0:	2207      	movs	r2, #7
 80083c2:	601a      	str	r2, [r3, #0]
}
 80083c4:	bf00      	nop
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	e000e010 	.word	0xe000e010
 80083d4:	e000e018 	.word	0xe000e018
 80083d8:	20000000 	.word	0x20000000
 80083dc:	10624dd3 	.word	0x10624dd3
 80083e0:	e000e014 	.word	0xe000e014

080083e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80083f4 <vPortEnableVFP+0x10>
 80083e8:	6801      	ldr	r1, [r0, #0]
 80083ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80083ee:	6001      	str	r1, [r0, #0]
 80083f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083f2:	bf00      	nop
 80083f4:	e000ed88 	.word	0xe000ed88

080083f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083fe:	f3ef 8305 	mrs	r3, IPSR
 8008402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b0f      	cmp	r3, #15
 8008408:	d915      	bls.n	8008436 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800840a:	4a18      	ldr	r2, [pc, #96]	@ (800846c <vPortValidateInterruptPriority+0x74>)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008414:	4b16      	ldr	r3, [pc, #88]	@ (8008470 <vPortValidateInterruptPriority+0x78>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	7afa      	ldrb	r2, [r7, #11]
 800841a:	429a      	cmp	r2, r3
 800841c:	d20b      	bcs.n	8008436 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	607b      	str	r3, [r7, #4]
}
 8008430:	bf00      	nop
 8008432:	bf00      	nop
 8008434:	e7fd      	b.n	8008432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008436:	4b0f      	ldr	r3, [pc, #60]	@ (8008474 <vPortValidateInterruptPriority+0x7c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800843e:	4b0e      	ldr	r3, [pc, #56]	@ (8008478 <vPortValidateInterruptPriority+0x80>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d90b      	bls.n	800845e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	603b      	str	r3, [r7, #0]
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	e7fd      	b.n	800845a <vPortValidateInterruptPriority+0x62>
	}
 800845e:	bf00      	nop
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	e000e3f0 	.word	0xe000e3f0
 8008470:	200010d4 	.word	0x200010d4
 8008474:	e000ed0c 	.word	0xe000ed0c
 8008478:	200010d8 	.word	0x200010d8

0800847c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08a      	sub	sp, #40	@ 0x28
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008488:	f7fe fd82 	bl	8006f90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800848c:	4b5c      	ldr	r3, [pc, #368]	@ (8008600 <pvPortMalloc+0x184>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008494:	f000 f924 	bl	80086e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008498:	4b5a      	ldr	r3, [pc, #360]	@ (8008604 <pvPortMalloc+0x188>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4013      	ands	r3, r2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f040 8095 	bne.w	80085d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01e      	beq.n	80084ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80084ac:	2208      	movs	r2, #8
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d015      	beq.n	80084ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f023 0307 	bic.w	r3, r3, #7
 80084c4:	3308      	adds	r3, #8
 80084c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <pvPortMalloc+0x6e>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	617b      	str	r3, [r7, #20]
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop
 80084e8:	e7fd      	b.n	80084e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d06f      	beq.n	80085d0 <pvPortMalloc+0x154>
 80084f0:	4b45      	ldr	r3, [pc, #276]	@ (8008608 <pvPortMalloc+0x18c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d86a      	bhi.n	80085d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084fa:	4b44      	ldr	r3, [pc, #272]	@ (800860c <pvPortMalloc+0x190>)
 80084fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084fe:	4b43      	ldr	r3, [pc, #268]	@ (800860c <pvPortMalloc+0x190>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008504:	e004      	b.n	8008510 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	429a      	cmp	r2, r3
 8008518:	d903      	bls.n	8008522 <pvPortMalloc+0xa6>
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1f1      	bne.n	8008506 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008522:	4b37      	ldr	r3, [pc, #220]	@ (8008600 <pvPortMalloc+0x184>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008528:	429a      	cmp	r2, r3
 800852a:	d051      	beq.n	80085d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2208      	movs	r2, #8
 8008532:	4413      	add	r3, r2
 8008534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	1ad2      	subs	r2, r2, r3
 8008546:	2308      	movs	r3, #8
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	429a      	cmp	r2, r3
 800854c:	d920      	bls.n	8008590 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800854e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4413      	add	r3, r2
 8008554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	f003 0307 	and.w	r3, r3, #7
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <pvPortMalloc+0xfc>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008564:	f383 8811 	msr	BASEPRI, r3
 8008568:	f3bf 8f6f 	isb	sy
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	613b      	str	r3, [r7, #16]
}
 8008572:	bf00      	nop
 8008574:	bf00      	nop
 8008576:	e7fd      	b.n	8008574 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800858a:	69b8      	ldr	r0, [r7, #24]
 800858c:	f000 f90a 	bl	80087a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008590:	4b1d      	ldr	r3, [pc, #116]	@ (8008608 <pvPortMalloc+0x18c>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	4a1b      	ldr	r2, [pc, #108]	@ (8008608 <pvPortMalloc+0x18c>)
 800859c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800859e:	4b1a      	ldr	r3, [pc, #104]	@ (8008608 <pvPortMalloc+0x18c>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008610 <pvPortMalloc+0x194>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d203      	bcs.n	80085b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085aa:	4b17      	ldr	r3, [pc, #92]	@ (8008608 <pvPortMalloc+0x18c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a18      	ldr	r2, [pc, #96]	@ (8008610 <pvPortMalloc+0x194>)
 80085b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	4b13      	ldr	r3, [pc, #76]	@ (8008604 <pvPortMalloc+0x188>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	431a      	orrs	r2, r3
 80085bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085c6:	4b13      	ldr	r3, [pc, #76]	@ (8008614 <pvPortMalloc+0x198>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3301      	adds	r3, #1
 80085cc:	4a11      	ldr	r2, [pc, #68]	@ (8008614 <pvPortMalloc+0x198>)
 80085ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085d0:	f7fe fcec 	bl	8006fac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00b      	beq.n	80085f6 <pvPortMalloc+0x17a>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	60fb      	str	r3, [r7, #12]
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	e7fd      	b.n	80085f2 <pvPortMalloc+0x176>
	return pvReturn;
 80085f6:	69fb      	ldr	r3, [r7, #28]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3728      	adds	r7, #40	@ 0x28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	20004ce4 	.word	0x20004ce4
 8008604:	20004cf8 	.word	0x20004cf8
 8008608:	20004ce8 	.word	0x20004ce8
 800860c:	20004cdc 	.word	0x20004cdc
 8008610:	20004cec 	.word	0x20004cec
 8008614:	20004cf0 	.word	0x20004cf0

08008618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d04f      	beq.n	80086ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800862a:	2308      	movs	r3, #8
 800862c:	425b      	negs	r3, r3
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4413      	add	r3, r2
 8008632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	4b25      	ldr	r3, [pc, #148]	@ (80086d4 <vPortFree+0xbc>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4013      	ands	r3, r2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10b      	bne.n	800865e <vPortFree+0x46>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	60fb      	str	r3, [r7, #12]
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	e7fd      	b.n	800865a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00b      	beq.n	800867e <vPortFree+0x66>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	60bb      	str	r3, [r7, #8]
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	e7fd      	b.n	800867a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	4b14      	ldr	r3, [pc, #80]	@ (80086d4 <vPortFree+0xbc>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4013      	ands	r3, r2
 8008688:	2b00      	cmp	r3, #0
 800868a:	d01e      	beq.n	80086ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d11a      	bne.n	80086ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	4b0e      	ldr	r3, [pc, #56]	@ (80086d4 <vPortFree+0xbc>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	43db      	mvns	r3, r3
 800869e:	401a      	ands	r2, r3
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086a4:	f7fe fc74 	bl	8006f90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	4b0a      	ldr	r3, [pc, #40]	@ (80086d8 <vPortFree+0xc0>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4413      	add	r3, r2
 80086b2:	4a09      	ldr	r2, [pc, #36]	@ (80086d8 <vPortFree+0xc0>)
 80086b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086b6:	6938      	ldr	r0, [r7, #16]
 80086b8:	f000 f874 	bl	80087a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086bc:	4b07      	ldr	r3, [pc, #28]	@ (80086dc <vPortFree+0xc4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3301      	adds	r3, #1
 80086c2:	4a06      	ldr	r2, [pc, #24]	@ (80086dc <vPortFree+0xc4>)
 80086c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086c6:	f7fe fc71 	bl	8006fac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086ca:	bf00      	nop
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20004cf8 	.word	0x20004cf8
 80086d8:	20004ce8 	.word	0x20004ce8
 80086dc:	20004cf4 	.word	0x20004cf4

080086e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80086ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086ec:	4b27      	ldr	r3, [pc, #156]	@ (800878c <prvHeapInit+0xac>)
 80086ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00c      	beq.n	8008714 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3307      	adds	r3, #7
 80086fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 0307 	bic.w	r3, r3, #7
 8008706:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	4a1f      	ldr	r2, [pc, #124]	@ (800878c <prvHeapInit+0xac>)
 8008710:	4413      	add	r3, r2
 8008712:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008718:	4a1d      	ldr	r2, [pc, #116]	@ (8008790 <prvHeapInit+0xb0>)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800871e:	4b1c      	ldr	r3, [pc, #112]	@ (8008790 <prvHeapInit+0xb0>)
 8008720:	2200      	movs	r2, #0
 8008722:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	4413      	add	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800872c:	2208      	movs	r2, #8
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1a9b      	subs	r3, r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0307 	bic.w	r3, r3, #7
 800873a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4a15      	ldr	r2, [pc, #84]	@ (8008794 <prvHeapInit+0xb4>)
 8008740:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008742:	4b14      	ldr	r3, [pc, #80]	@ (8008794 <prvHeapInit+0xb4>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2200      	movs	r2, #0
 8008748:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800874a:	4b12      	ldr	r3, [pc, #72]	@ (8008794 <prvHeapInit+0xb4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	1ad2      	subs	r2, r2, r3
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008760:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <prvHeapInit+0xb4>)
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	4a0a      	ldr	r2, [pc, #40]	@ (8008798 <prvHeapInit+0xb8>)
 800876e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	4a09      	ldr	r2, [pc, #36]	@ (800879c <prvHeapInit+0xbc>)
 8008776:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008778:	4b09      	ldr	r3, [pc, #36]	@ (80087a0 <prvHeapInit+0xc0>)
 800877a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800877e:	601a      	str	r2, [r3, #0]
}
 8008780:	bf00      	nop
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	200010dc 	.word	0x200010dc
 8008790:	20004cdc 	.word	0x20004cdc
 8008794:	20004ce4 	.word	0x20004ce4
 8008798:	20004cec 	.word	0x20004cec
 800879c:	20004ce8 	.word	0x20004ce8
 80087a0:	20004cf8 	.word	0x20004cf8

080087a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087ac:	4b28      	ldr	r3, [pc, #160]	@ (8008850 <prvInsertBlockIntoFreeList+0xac>)
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	e002      	b.n	80087b8 <prvInsertBlockIntoFreeList+0x14>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d8f7      	bhi.n	80087b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	4413      	add	r3, r2
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d108      	bne.n	80087e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	441a      	add	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	441a      	add	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d118      	bne.n	800882c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	4b15      	ldr	r3, [pc, #84]	@ (8008854 <prvInsertBlockIntoFreeList+0xb0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d00d      	beq.n	8008822 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685a      	ldr	r2, [r3, #4]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	441a      	add	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	e008      	b.n	8008834 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008822:	4b0c      	ldr	r3, [pc, #48]	@ (8008854 <prvInsertBlockIntoFreeList+0xb0>)
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e003      	b.n	8008834 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	429a      	cmp	r2, r3
 800883a:	d002      	beq.n	8008842 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008842:	bf00      	nop
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	20004cdc 	.word	0x20004cdc
 8008854:	20004ce4 	.word	0x20004ce4

08008858 <std>:
 8008858:	2300      	movs	r3, #0
 800885a:	b510      	push	{r4, lr}
 800885c:	4604      	mov	r4, r0
 800885e:	e9c0 3300 	strd	r3, r3, [r0]
 8008862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008866:	6083      	str	r3, [r0, #8]
 8008868:	8181      	strh	r1, [r0, #12]
 800886a:	6643      	str	r3, [r0, #100]	@ 0x64
 800886c:	81c2      	strh	r2, [r0, #14]
 800886e:	6183      	str	r3, [r0, #24]
 8008870:	4619      	mov	r1, r3
 8008872:	2208      	movs	r2, #8
 8008874:	305c      	adds	r0, #92	@ 0x5c
 8008876:	f000 f9f7 	bl	8008c68 <memset>
 800887a:	4b0d      	ldr	r3, [pc, #52]	@ (80088b0 <std+0x58>)
 800887c:	6263      	str	r3, [r4, #36]	@ 0x24
 800887e:	4b0d      	ldr	r3, [pc, #52]	@ (80088b4 <std+0x5c>)
 8008880:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008882:	4b0d      	ldr	r3, [pc, #52]	@ (80088b8 <std+0x60>)
 8008884:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008886:	4b0d      	ldr	r3, [pc, #52]	@ (80088bc <std+0x64>)
 8008888:	6323      	str	r3, [r4, #48]	@ 0x30
 800888a:	4b0d      	ldr	r3, [pc, #52]	@ (80088c0 <std+0x68>)
 800888c:	6224      	str	r4, [r4, #32]
 800888e:	429c      	cmp	r4, r3
 8008890:	d006      	beq.n	80088a0 <std+0x48>
 8008892:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008896:	4294      	cmp	r4, r2
 8008898:	d002      	beq.n	80088a0 <std+0x48>
 800889a:	33d0      	adds	r3, #208	@ 0xd0
 800889c:	429c      	cmp	r4, r3
 800889e:	d105      	bne.n	80088ac <std+0x54>
 80088a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80088a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a8:	f000 ba56 	b.w	8008d58 <__retarget_lock_init_recursive>
 80088ac:	bd10      	pop	{r4, pc}
 80088ae:	bf00      	nop
 80088b0:	08008a99 	.word	0x08008a99
 80088b4:	08008abb 	.word	0x08008abb
 80088b8:	08008af3 	.word	0x08008af3
 80088bc:	08008b17 	.word	0x08008b17
 80088c0:	20004cfc 	.word	0x20004cfc

080088c4 <stdio_exit_handler>:
 80088c4:	4a02      	ldr	r2, [pc, #8]	@ (80088d0 <stdio_exit_handler+0xc>)
 80088c6:	4903      	ldr	r1, [pc, #12]	@ (80088d4 <stdio_exit_handler+0x10>)
 80088c8:	4803      	ldr	r0, [pc, #12]	@ (80088d8 <stdio_exit_handler+0x14>)
 80088ca:	f000 b869 	b.w	80089a0 <_fwalk_sglue>
 80088ce:	bf00      	nop
 80088d0:	2000005c 	.word	0x2000005c
 80088d4:	08009075 	.word	0x08009075
 80088d8:	2000006c 	.word	0x2000006c

080088dc <cleanup_stdio>:
 80088dc:	6841      	ldr	r1, [r0, #4]
 80088de:	4b0c      	ldr	r3, [pc, #48]	@ (8008910 <cleanup_stdio+0x34>)
 80088e0:	4299      	cmp	r1, r3
 80088e2:	b510      	push	{r4, lr}
 80088e4:	4604      	mov	r4, r0
 80088e6:	d001      	beq.n	80088ec <cleanup_stdio+0x10>
 80088e8:	f000 fbc4 	bl	8009074 <_fflush_r>
 80088ec:	68a1      	ldr	r1, [r4, #8]
 80088ee:	4b09      	ldr	r3, [pc, #36]	@ (8008914 <cleanup_stdio+0x38>)
 80088f0:	4299      	cmp	r1, r3
 80088f2:	d002      	beq.n	80088fa <cleanup_stdio+0x1e>
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 fbbd 	bl	8009074 <_fflush_r>
 80088fa:	68e1      	ldr	r1, [r4, #12]
 80088fc:	4b06      	ldr	r3, [pc, #24]	@ (8008918 <cleanup_stdio+0x3c>)
 80088fe:	4299      	cmp	r1, r3
 8008900:	d004      	beq.n	800890c <cleanup_stdio+0x30>
 8008902:	4620      	mov	r0, r4
 8008904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008908:	f000 bbb4 	b.w	8009074 <_fflush_r>
 800890c:	bd10      	pop	{r4, pc}
 800890e:	bf00      	nop
 8008910:	20004cfc 	.word	0x20004cfc
 8008914:	20004d64 	.word	0x20004d64
 8008918:	20004dcc 	.word	0x20004dcc

0800891c <global_stdio_init.part.0>:
 800891c:	b510      	push	{r4, lr}
 800891e:	4b0b      	ldr	r3, [pc, #44]	@ (800894c <global_stdio_init.part.0+0x30>)
 8008920:	4c0b      	ldr	r4, [pc, #44]	@ (8008950 <global_stdio_init.part.0+0x34>)
 8008922:	4a0c      	ldr	r2, [pc, #48]	@ (8008954 <global_stdio_init.part.0+0x38>)
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	4620      	mov	r0, r4
 8008928:	2200      	movs	r2, #0
 800892a:	2104      	movs	r1, #4
 800892c:	f7ff ff94 	bl	8008858 <std>
 8008930:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008934:	2201      	movs	r2, #1
 8008936:	2109      	movs	r1, #9
 8008938:	f7ff ff8e 	bl	8008858 <std>
 800893c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008940:	2202      	movs	r2, #2
 8008942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008946:	2112      	movs	r1, #18
 8008948:	f7ff bf86 	b.w	8008858 <std>
 800894c:	20004e34 	.word	0x20004e34
 8008950:	20004cfc 	.word	0x20004cfc
 8008954:	080088c5 	.word	0x080088c5

08008958 <__sfp_lock_acquire>:
 8008958:	4801      	ldr	r0, [pc, #4]	@ (8008960 <__sfp_lock_acquire+0x8>)
 800895a:	f000 b9fe 	b.w	8008d5a <__retarget_lock_acquire_recursive>
 800895e:	bf00      	nop
 8008960:	20004e3d 	.word	0x20004e3d

08008964 <__sfp_lock_release>:
 8008964:	4801      	ldr	r0, [pc, #4]	@ (800896c <__sfp_lock_release+0x8>)
 8008966:	f000 b9f9 	b.w	8008d5c <__retarget_lock_release_recursive>
 800896a:	bf00      	nop
 800896c:	20004e3d 	.word	0x20004e3d

08008970 <__sinit>:
 8008970:	b510      	push	{r4, lr}
 8008972:	4604      	mov	r4, r0
 8008974:	f7ff fff0 	bl	8008958 <__sfp_lock_acquire>
 8008978:	6a23      	ldr	r3, [r4, #32]
 800897a:	b11b      	cbz	r3, 8008984 <__sinit+0x14>
 800897c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008980:	f7ff bff0 	b.w	8008964 <__sfp_lock_release>
 8008984:	4b04      	ldr	r3, [pc, #16]	@ (8008998 <__sinit+0x28>)
 8008986:	6223      	str	r3, [r4, #32]
 8008988:	4b04      	ldr	r3, [pc, #16]	@ (800899c <__sinit+0x2c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1f5      	bne.n	800897c <__sinit+0xc>
 8008990:	f7ff ffc4 	bl	800891c <global_stdio_init.part.0>
 8008994:	e7f2      	b.n	800897c <__sinit+0xc>
 8008996:	bf00      	nop
 8008998:	080088dd 	.word	0x080088dd
 800899c:	20004e34 	.word	0x20004e34

080089a0 <_fwalk_sglue>:
 80089a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089a4:	4607      	mov	r7, r0
 80089a6:	4688      	mov	r8, r1
 80089a8:	4614      	mov	r4, r2
 80089aa:	2600      	movs	r6, #0
 80089ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089b0:	f1b9 0901 	subs.w	r9, r9, #1
 80089b4:	d505      	bpl.n	80089c2 <_fwalk_sglue+0x22>
 80089b6:	6824      	ldr	r4, [r4, #0]
 80089b8:	2c00      	cmp	r4, #0
 80089ba:	d1f7      	bne.n	80089ac <_fwalk_sglue+0xc>
 80089bc:	4630      	mov	r0, r6
 80089be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089c2:	89ab      	ldrh	r3, [r5, #12]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d907      	bls.n	80089d8 <_fwalk_sglue+0x38>
 80089c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089cc:	3301      	adds	r3, #1
 80089ce:	d003      	beq.n	80089d8 <_fwalk_sglue+0x38>
 80089d0:	4629      	mov	r1, r5
 80089d2:	4638      	mov	r0, r7
 80089d4:	47c0      	blx	r8
 80089d6:	4306      	orrs	r6, r0
 80089d8:	3568      	adds	r5, #104	@ 0x68
 80089da:	e7e9      	b.n	80089b0 <_fwalk_sglue+0x10>

080089dc <_puts_r>:
 80089dc:	6a03      	ldr	r3, [r0, #32]
 80089de:	b570      	push	{r4, r5, r6, lr}
 80089e0:	6884      	ldr	r4, [r0, #8]
 80089e2:	4605      	mov	r5, r0
 80089e4:	460e      	mov	r6, r1
 80089e6:	b90b      	cbnz	r3, 80089ec <_puts_r+0x10>
 80089e8:	f7ff ffc2 	bl	8008970 <__sinit>
 80089ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089ee:	07db      	lsls	r3, r3, #31
 80089f0:	d405      	bmi.n	80089fe <_puts_r+0x22>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	0598      	lsls	r0, r3, #22
 80089f6:	d402      	bmi.n	80089fe <_puts_r+0x22>
 80089f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089fa:	f000 f9ae 	bl	8008d5a <__retarget_lock_acquire_recursive>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	0719      	lsls	r1, r3, #28
 8008a02:	d502      	bpl.n	8008a0a <_puts_r+0x2e>
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d135      	bne.n	8008a76 <_puts_r+0x9a>
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f000 f8c5 	bl	8008b9c <__swsetup_r>
 8008a12:	b380      	cbz	r0, 8008a76 <_puts_r+0x9a>
 8008a14:	f04f 35ff 	mov.w	r5, #4294967295
 8008a18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a1a:	07da      	lsls	r2, r3, #31
 8008a1c:	d405      	bmi.n	8008a2a <_puts_r+0x4e>
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	059b      	lsls	r3, r3, #22
 8008a22:	d402      	bmi.n	8008a2a <_puts_r+0x4e>
 8008a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a26:	f000 f999 	bl	8008d5c <__retarget_lock_release_recursive>
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	bd70      	pop	{r4, r5, r6, pc}
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	da04      	bge.n	8008a3c <_puts_r+0x60>
 8008a32:	69a2      	ldr	r2, [r4, #24]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	dc17      	bgt.n	8008a68 <_puts_r+0x8c>
 8008a38:	290a      	cmp	r1, #10
 8008a3a:	d015      	beq.n	8008a68 <_puts_r+0x8c>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	7019      	strb	r1, [r3, #0]
 8008a44:	68a3      	ldr	r3, [r4, #8]
 8008a46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	60a3      	str	r3, [r4, #8]
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d1ed      	bne.n	8008a2e <_puts_r+0x52>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	da11      	bge.n	8008a7a <_puts_r+0x9e>
 8008a56:	4622      	mov	r2, r4
 8008a58:	210a      	movs	r1, #10
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f000 f85f 	bl	8008b1e <__swbuf_r>
 8008a60:	3001      	adds	r0, #1
 8008a62:	d0d7      	beq.n	8008a14 <_puts_r+0x38>
 8008a64:	250a      	movs	r5, #10
 8008a66:	e7d7      	b.n	8008a18 <_puts_r+0x3c>
 8008a68:	4622      	mov	r2, r4
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 f857 	bl	8008b1e <__swbuf_r>
 8008a70:	3001      	adds	r0, #1
 8008a72:	d1e7      	bne.n	8008a44 <_puts_r+0x68>
 8008a74:	e7ce      	b.n	8008a14 <_puts_r+0x38>
 8008a76:	3e01      	subs	r6, #1
 8008a78:	e7e4      	b.n	8008a44 <_puts_r+0x68>
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	220a      	movs	r2, #10
 8008a82:	701a      	strb	r2, [r3, #0]
 8008a84:	e7ee      	b.n	8008a64 <_puts_r+0x88>
	...

08008a88 <puts>:
 8008a88:	4b02      	ldr	r3, [pc, #8]	@ (8008a94 <puts+0xc>)
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	f7ff bfa5 	b.w	80089dc <_puts_r>
 8008a92:	bf00      	nop
 8008a94:	20000068 	.word	0x20000068

08008a98 <__sread>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa0:	f000 f90c 	bl	8008cbc <_read_r>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	bfab      	itete	ge
 8008aa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8008aac:	181b      	addge	r3, r3, r0
 8008aae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008ab2:	bfac      	ite	ge
 8008ab4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008ab6:	81a3      	strhlt	r3, [r4, #12]
 8008ab8:	bd10      	pop	{r4, pc}

08008aba <__swrite>:
 8008aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008abe:	461f      	mov	r7, r3
 8008ac0:	898b      	ldrh	r3, [r1, #12]
 8008ac2:	05db      	lsls	r3, r3, #23
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	4616      	mov	r6, r2
 8008aca:	d505      	bpl.n	8008ad8 <__swrite+0x1e>
 8008acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f000 f8e0 	bl	8008c98 <_lseek_r>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ade:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ae2:	81a3      	strh	r3, [r4, #12]
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	4628      	mov	r0, r5
 8008aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aee:	f000 b8f7 	b.w	8008ce0 <_write_r>

08008af2 <__sseek>:
 8008af2:	b510      	push	{r4, lr}
 8008af4:	460c      	mov	r4, r1
 8008af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afa:	f000 f8cd 	bl	8008c98 <_lseek_r>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	bf15      	itete	ne
 8008b04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b0e:	81a3      	strheq	r3, [r4, #12]
 8008b10:	bf18      	it	ne
 8008b12:	81a3      	strhne	r3, [r4, #12]
 8008b14:	bd10      	pop	{r4, pc}

08008b16 <__sclose>:
 8008b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b1a:	f000 b8ad 	b.w	8008c78 <_close_r>

08008b1e <__swbuf_r>:
 8008b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b20:	460e      	mov	r6, r1
 8008b22:	4614      	mov	r4, r2
 8008b24:	4605      	mov	r5, r0
 8008b26:	b118      	cbz	r0, 8008b30 <__swbuf_r+0x12>
 8008b28:	6a03      	ldr	r3, [r0, #32]
 8008b2a:	b90b      	cbnz	r3, 8008b30 <__swbuf_r+0x12>
 8008b2c:	f7ff ff20 	bl	8008970 <__sinit>
 8008b30:	69a3      	ldr	r3, [r4, #24]
 8008b32:	60a3      	str	r3, [r4, #8]
 8008b34:	89a3      	ldrh	r3, [r4, #12]
 8008b36:	071a      	lsls	r2, r3, #28
 8008b38:	d501      	bpl.n	8008b3e <__swbuf_r+0x20>
 8008b3a:	6923      	ldr	r3, [r4, #16]
 8008b3c:	b943      	cbnz	r3, 8008b50 <__swbuf_r+0x32>
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4628      	mov	r0, r5
 8008b42:	f000 f82b 	bl	8008b9c <__swsetup_r>
 8008b46:	b118      	cbz	r0, 8008b50 <__swbuf_r+0x32>
 8008b48:	f04f 37ff 	mov.w	r7, #4294967295
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b50:	6823      	ldr	r3, [r4, #0]
 8008b52:	6922      	ldr	r2, [r4, #16]
 8008b54:	1a98      	subs	r0, r3, r2
 8008b56:	6963      	ldr	r3, [r4, #20]
 8008b58:	b2f6      	uxtb	r6, r6
 8008b5a:	4283      	cmp	r3, r0
 8008b5c:	4637      	mov	r7, r6
 8008b5e:	dc05      	bgt.n	8008b6c <__swbuf_r+0x4e>
 8008b60:	4621      	mov	r1, r4
 8008b62:	4628      	mov	r0, r5
 8008b64:	f000 fa86 	bl	8009074 <_fflush_r>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d1ed      	bne.n	8008b48 <__swbuf_r+0x2a>
 8008b6c:	68a3      	ldr	r3, [r4, #8]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	60a3      	str	r3, [r4, #8]
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	6022      	str	r2, [r4, #0]
 8008b78:	701e      	strb	r6, [r3, #0]
 8008b7a:	6962      	ldr	r2, [r4, #20]
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d004      	beq.n	8008b8c <__swbuf_r+0x6e>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	07db      	lsls	r3, r3, #31
 8008b86:	d5e1      	bpl.n	8008b4c <__swbuf_r+0x2e>
 8008b88:	2e0a      	cmp	r6, #10
 8008b8a:	d1df      	bne.n	8008b4c <__swbuf_r+0x2e>
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 fa70 	bl	8009074 <_fflush_r>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d0d9      	beq.n	8008b4c <__swbuf_r+0x2e>
 8008b98:	e7d6      	b.n	8008b48 <__swbuf_r+0x2a>
	...

08008b9c <__swsetup_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	4b29      	ldr	r3, [pc, #164]	@ (8008c44 <__swsetup_r+0xa8>)
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	b118      	cbz	r0, 8008bb0 <__swsetup_r+0x14>
 8008ba8:	6a03      	ldr	r3, [r0, #32]
 8008baa:	b90b      	cbnz	r3, 8008bb0 <__swsetup_r+0x14>
 8008bac:	f7ff fee0 	bl	8008970 <__sinit>
 8008bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb4:	0719      	lsls	r1, r3, #28
 8008bb6:	d422      	bmi.n	8008bfe <__swsetup_r+0x62>
 8008bb8:	06da      	lsls	r2, r3, #27
 8008bba:	d407      	bmi.n	8008bcc <__swsetup_r+0x30>
 8008bbc:	2209      	movs	r2, #9
 8008bbe:	602a      	str	r2, [r5, #0]
 8008bc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bc4:	81a3      	strh	r3, [r4, #12]
 8008bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bca:	e033      	b.n	8008c34 <__swsetup_r+0x98>
 8008bcc:	0758      	lsls	r0, r3, #29
 8008bce:	d512      	bpl.n	8008bf6 <__swsetup_r+0x5a>
 8008bd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bd2:	b141      	cbz	r1, 8008be6 <__swsetup_r+0x4a>
 8008bd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bd8:	4299      	cmp	r1, r3
 8008bda:	d002      	beq.n	8008be2 <__swsetup_r+0x46>
 8008bdc:	4628      	mov	r0, r5
 8008bde:	f000 f8cd 	bl	8008d7c <_free_r>
 8008be2:	2300      	movs	r3, #0
 8008be4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	6063      	str	r3, [r4, #4]
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	f043 0308 	orr.w	r3, r3, #8
 8008bfc:	81a3      	strh	r3, [r4, #12]
 8008bfe:	6923      	ldr	r3, [r4, #16]
 8008c00:	b94b      	cbnz	r3, 8008c16 <__swsetup_r+0x7a>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c0c:	d003      	beq.n	8008c16 <__swsetup_r+0x7a>
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 fa7d 	bl	8009110 <__smakebuf_r>
 8008c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c1a:	f013 0201 	ands.w	r2, r3, #1
 8008c1e:	d00a      	beq.n	8008c36 <__swsetup_r+0x9a>
 8008c20:	2200      	movs	r2, #0
 8008c22:	60a2      	str	r2, [r4, #8]
 8008c24:	6962      	ldr	r2, [r4, #20]
 8008c26:	4252      	negs	r2, r2
 8008c28:	61a2      	str	r2, [r4, #24]
 8008c2a:	6922      	ldr	r2, [r4, #16]
 8008c2c:	b942      	cbnz	r2, 8008c40 <__swsetup_r+0xa4>
 8008c2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c32:	d1c5      	bne.n	8008bc0 <__swsetup_r+0x24>
 8008c34:	bd38      	pop	{r3, r4, r5, pc}
 8008c36:	0799      	lsls	r1, r3, #30
 8008c38:	bf58      	it	pl
 8008c3a:	6962      	ldrpl	r2, [r4, #20]
 8008c3c:	60a2      	str	r2, [r4, #8]
 8008c3e:	e7f4      	b.n	8008c2a <__swsetup_r+0x8e>
 8008c40:	2000      	movs	r0, #0
 8008c42:	e7f7      	b.n	8008c34 <__swsetup_r+0x98>
 8008c44:	20000068 	.word	0x20000068

08008c48 <memcmp>:
 8008c48:	b510      	push	{r4, lr}
 8008c4a:	3901      	subs	r1, #1
 8008c4c:	4402      	add	r2, r0
 8008c4e:	4290      	cmp	r0, r2
 8008c50:	d101      	bne.n	8008c56 <memcmp+0xe>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e005      	b.n	8008c62 <memcmp+0x1a>
 8008c56:	7803      	ldrb	r3, [r0, #0]
 8008c58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	d001      	beq.n	8008c64 <memcmp+0x1c>
 8008c60:	1b18      	subs	r0, r3, r4
 8008c62:	bd10      	pop	{r4, pc}
 8008c64:	3001      	adds	r0, #1
 8008c66:	e7f2      	b.n	8008c4e <memcmp+0x6>

08008c68 <memset>:
 8008c68:	4402      	add	r2, r0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d100      	bne.n	8008c72 <memset+0xa>
 8008c70:	4770      	bx	lr
 8008c72:	f803 1b01 	strb.w	r1, [r3], #1
 8008c76:	e7f9      	b.n	8008c6c <memset+0x4>

08008c78 <_close_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4d06      	ldr	r5, [pc, #24]	@ (8008c94 <_close_r+0x1c>)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	4608      	mov	r0, r1
 8008c82:	602b      	str	r3, [r5, #0]
 8008c84:	f7f9 f9d1 	bl	800202a <_close>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_close_r+0x1a>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_close_r+0x1a>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	20004e38 	.word	0x20004e38

08008c98 <_lseek_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d07      	ldr	r5, [pc, #28]	@ (8008cb8 <_lseek_r+0x20>)
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f7f9 f9e6 	bl	8002078 <_lseek>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d102      	bne.n	8008cb6 <_lseek_r+0x1e>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b103      	cbz	r3, 8008cb6 <_lseek_r+0x1e>
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	20004e38 	.word	0x20004e38

08008cbc <_read_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	4d07      	ldr	r5, [pc, #28]	@ (8008cdc <_read_r+0x20>)
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	4608      	mov	r0, r1
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	602a      	str	r2, [r5, #0]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f7f9 f974 	bl	8001fb8 <_read>
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d102      	bne.n	8008cda <_read_r+0x1e>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <_read_r+0x1e>
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	20004e38 	.word	0x20004e38

08008ce0 <_write_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4d07      	ldr	r5, [pc, #28]	@ (8008d00 <_write_r+0x20>)
 8008ce4:	4604      	mov	r4, r0
 8008ce6:	4608      	mov	r0, r1
 8008ce8:	4611      	mov	r1, r2
 8008cea:	2200      	movs	r2, #0
 8008cec:	602a      	str	r2, [r5, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f7f9 f97f 	bl	8001ff2 <_write>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d102      	bne.n	8008cfe <_write_r+0x1e>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <_write_r+0x1e>
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
 8008d00:	20004e38 	.word	0x20004e38

08008d04 <__errno>:
 8008d04:	4b01      	ldr	r3, [pc, #4]	@ (8008d0c <__errno+0x8>)
 8008d06:	6818      	ldr	r0, [r3, #0]
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	20000068 	.word	0x20000068

08008d10 <__libc_init_array>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	4d0d      	ldr	r5, [pc, #52]	@ (8008d48 <__libc_init_array+0x38>)
 8008d14:	4c0d      	ldr	r4, [pc, #52]	@ (8008d4c <__libc_init_array+0x3c>)
 8008d16:	1b64      	subs	r4, r4, r5
 8008d18:	10a4      	asrs	r4, r4, #2
 8008d1a:	2600      	movs	r6, #0
 8008d1c:	42a6      	cmp	r6, r4
 8008d1e:	d109      	bne.n	8008d34 <__libc_init_array+0x24>
 8008d20:	4d0b      	ldr	r5, [pc, #44]	@ (8008d50 <__libc_init_array+0x40>)
 8008d22:	4c0c      	ldr	r4, [pc, #48]	@ (8008d54 <__libc_init_array+0x44>)
 8008d24:	f000 fa62 	bl	80091ec <_init>
 8008d28:	1b64      	subs	r4, r4, r5
 8008d2a:	10a4      	asrs	r4, r4, #2
 8008d2c:	2600      	movs	r6, #0
 8008d2e:	42a6      	cmp	r6, r4
 8008d30:	d105      	bne.n	8008d3e <__libc_init_array+0x2e>
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d38:	4798      	blx	r3
 8008d3a:	3601      	adds	r6, #1
 8008d3c:	e7ee      	b.n	8008d1c <__libc_init_array+0xc>
 8008d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d42:	4798      	blx	r3
 8008d44:	3601      	adds	r6, #1
 8008d46:	e7f2      	b.n	8008d2e <__libc_init_array+0x1e>
 8008d48:	08009334 	.word	0x08009334
 8008d4c:	08009334 	.word	0x08009334
 8008d50:	08009334 	.word	0x08009334
 8008d54:	08009338 	.word	0x08009338

08008d58 <__retarget_lock_init_recursive>:
 8008d58:	4770      	bx	lr

08008d5a <__retarget_lock_acquire_recursive>:
 8008d5a:	4770      	bx	lr

08008d5c <__retarget_lock_release_recursive>:
 8008d5c:	4770      	bx	lr

08008d5e <memcpy>:
 8008d5e:	440a      	add	r2, r1
 8008d60:	4291      	cmp	r1, r2
 8008d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d66:	d100      	bne.n	8008d6a <memcpy+0xc>
 8008d68:	4770      	bx	lr
 8008d6a:	b510      	push	{r4, lr}
 8008d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d74:	4291      	cmp	r1, r2
 8008d76:	d1f9      	bne.n	8008d6c <memcpy+0xe>
 8008d78:	bd10      	pop	{r4, pc}
	...

08008d7c <_free_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4605      	mov	r5, r0
 8008d80:	2900      	cmp	r1, #0
 8008d82:	d041      	beq.n	8008e08 <_free_r+0x8c>
 8008d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d88:	1f0c      	subs	r4, r1, #4
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	bfb8      	it	lt
 8008d8e:	18e4      	addlt	r4, r4, r3
 8008d90:	f000 f8e0 	bl	8008f54 <__malloc_lock>
 8008d94:	4a1d      	ldr	r2, [pc, #116]	@ (8008e0c <_free_r+0x90>)
 8008d96:	6813      	ldr	r3, [r2, #0]
 8008d98:	b933      	cbnz	r3, 8008da8 <_free_r+0x2c>
 8008d9a:	6063      	str	r3, [r4, #4]
 8008d9c:	6014      	str	r4, [r2, #0]
 8008d9e:	4628      	mov	r0, r5
 8008da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008da4:	f000 b8dc 	b.w	8008f60 <__malloc_unlock>
 8008da8:	42a3      	cmp	r3, r4
 8008daa:	d908      	bls.n	8008dbe <_free_r+0x42>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	1821      	adds	r1, r4, r0
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf01      	itttt	eq
 8008db4:	6819      	ldreq	r1, [r3, #0]
 8008db6:	685b      	ldreq	r3, [r3, #4]
 8008db8:	1809      	addeq	r1, r1, r0
 8008dba:	6021      	streq	r1, [r4, #0]
 8008dbc:	e7ed      	b.n	8008d9a <_free_r+0x1e>
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	b10b      	cbz	r3, 8008dc8 <_free_r+0x4c>
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	d9fa      	bls.n	8008dbe <_free_r+0x42>
 8008dc8:	6811      	ldr	r1, [r2, #0]
 8008dca:	1850      	adds	r0, r2, r1
 8008dcc:	42a0      	cmp	r0, r4
 8008dce:	d10b      	bne.n	8008de8 <_free_r+0x6c>
 8008dd0:	6820      	ldr	r0, [r4, #0]
 8008dd2:	4401      	add	r1, r0
 8008dd4:	1850      	adds	r0, r2, r1
 8008dd6:	4283      	cmp	r3, r0
 8008dd8:	6011      	str	r1, [r2, #0]
 8008dda:	d1e0      	bne.n	8008d9e <_free_r+0x22>
 8008ddc:	6818      	ldr	r0, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	6053      	str	r3, [r2, #4]
 8008de2:	4408      	add	r0, r1
 8008de4:	6010      	str	r0, [r2, #0]
 8008de6:	e7da      	b.n	8008d9e <_free_r+0x22>
 8008de8:	d902      	bls.n	8008df0 <_free_r+0x74>
 8008dea:	230c      	movs	r3, #12
 8008dec:	602b      	str	r3, [r5, #0]
 8008dee:	e7d6      	b.n	8008d9e <_free_r+0x22>
 8008df0:	6820      	ldr	r0, [r4, #0]
 8008df2:	1821      	adds	r1, r4, r0
 8008df4:	428b      	cmp	r3, r1
 8008df6:	bf04      	itt	eq
 8008df8:	6819      	ldreq	r1, [r3, #0]
 8008dfa:	685b      	ldreq	r3, [r3, #4]
 8008dfc:	6063      	str	r3, [r4, #4]
 8008dfe:	bf04      	itt	eq
 8008e00:	1809      	addeq	r1, r1, r0
 8008e02:	6021      	streq	r1, [r4, #0]
 8008e04:	6054      	str	r4, [r2, #4]
 8008e06:	e7ca      	b.n	8008d9e <_free_r+0x22>
 8008e08:	bd38      	pop	{r3, r4, r5, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20004e44 	.word	0x20004e44

08008e10 <sbrk_aligned>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	4e0f      	ldr	r6, [pc, #60]	@ (8008e50 <sbrk_aligned+0x40>)
 8008e14:	460c      	mov	r4, r1
 8008e16:	6831      	ldr	r1, [r6, #0]
 8008e18:	4605      	mov	r5, r0
 8008e1a:	b911      	cbnz	r1, 8008e22 <sbrk_aligned+0x12>
 8008e1c:	f000 f9d6 	bl	80091cc <_sbrk_r>
 8008e20:	6030      	str	r0, [r6, #0]
 8008e22:	4621      	mov	r1, r4
 8008e24:	4628      	mov	r0, r5
 8008e26:	f000 f9d1 	bl	80091cc <_sbrk_r>
 8008e2a:	1c43      	adds	r3, r0, #1
 8008e2c:	d103      	bne.n	8008e36 <sbrk_aligned+0x26>
 8008e2e:	f04f 34ff 	mov.w	r4, #4294967295
 8008e32:	4620      	mov	r0, r4
 8008e34:	bd70      	pop	{r4, r5, r6, pc}
 8008e36:	1cc4      	adds	r4, r0, #3
 8008e38:	f024 0403 	bic.w	r4, r4, #3
 8008e3c:	42a0      	cmp	r0, r4
 8008e3e:	d0f8      	beq.n	8008e32 <sbrk_aligned+0x22>
 8008e40:	1a21      	subs	r1, r4, r0
 8008e42:	4628      	mov	r0, r5
 8008e44:	f000 f9c2 	bl	80091cc <_sbrk_r>
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d1f2      	bne.n	8008e32 <sbrk_aligned+0x22>
 8008e4c:	e7ef      	b.n	8008e2e <sbrk_aligned+0x1e>
 8008e4e:	bf00      	nop
 8008e50:	20004e40 	.word	0x20004e40

08008e54 <_malloc_r>:
 8008e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e58:	1ccd      	adds	r5, r1, #3
 8008e5a:	f025 0503 	bic.w	r5, r5, #3
 8008e5e:	3508      	adds	r5, #8
 8008e60:	2d0c      	cmp	r5, #12
 8008e62:	bf38      	it	cc
 8008e64:	250c      	movcc	r5, #12
 8008e66:	2d00      	cmp	r5, #0
 8008e68:	4606      	mov	r6, r0
 8008e6a:	db01      	blt.n	8008e70 <_malloc_r+0x1c>
 8008e6c:	42a9      	cmp	r1, r5
 8008e6e:	d904      	bls.n	8008e7a <_malloc_r+0x26>
 8008e70:	230c      	movs	r3, #12
 8008e72:	6033      	str	r3, [r6, #0]
 8008e74:	2000      	movs	r0, #0
 8008e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f50 <_malloc_r+0xfc>
 8008e7e:	f000 f869 	bl	8008f54 <__malloc_lock>
 8008e82:	f8d8 3000 	ldr.w	r3, [r8]
 8008e86:	461c      	mov	r4, r3
 8008e88:	bb44      	cbnz	r4, 8008edc <_malloc_r+0x88>
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f7ff ffbf 	bl	8008e10 <sbrk_aligned>
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	4604      	mov	r4, r0
 8008e96:	d158      	bne.n	8008f4a <_malloc_r+0xf6>
 8008e98:	f8d8 4000 	ldr.w	r4, [r8]
 8008e9c:	4627      	mov	r7, r4
 8008e9e:	2f00      	cmp	r7, #0
 8008ea0:	d143      	bne.n	8008f2a <_malloc_r+0xd6>
 8008ea2:	2c00      	cmp	r4, #0
 8008ea4:	d04b      	beq.n	8008f3e <_malloc_r+0xea>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	4630      	mov	r0, r6
 8008eac:	eb04 0903 	add.w	r9, r4, r3
 8008eb0:	f000 f98c 	bl	80091cc <_sbrk_r>
 8008eb4:	4581      	cmp	r9, r0
 8008eb6:	d142      	bne.n	8008f3e <_malloc_r+0xea>
 8008eb8:	6821      	ldr	r1, [r4, #0]
 8008eba:	1a6d      	subs	r5, r5, r1
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f7ff ffa6 	bl	8008e10 <sbrk_aligned>
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d03a      	beq.n	8008f3e <_malloc_r+0xea>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	442b      	add	r3, r5
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	bb62      	cbnz	r2, 8008f30 <_malloc_r+0xdc>
 8008ed6:	f8c8 7000 	str.w	r7, [r8]
 8008eda:	e00f      	b.n	8008efc <_malloc_r+0xa8>
 8008edc:	6822      	ldr	r2, [r4, #0]
 8008ede:	1b52      	subs	r2, r2, r5
 8008ee0:	d420      	bmi.n	8008f24 <_malloc_r+0xd0>
 8008ee2:	2a0b      	cmp	r2, #11
 8008ee4:	d917      	bls.n	8008f16 <_malloc_r+0xc2>
 8008ee6:	1961      	adds	r1, r4, r5
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	6025      	str	r5, [r4, #0]
 8008eec:	bf18      	it	ne
 8008eee:	6059      	strne	r1, [r3, #4]
 8008ef0:	6863      	ldr	r3, [r4, #4]
 8008ef2:	bf08      	it	eq
 8008ef4:	f8c8 1000 	streq.w	r1, [r8]
 8008ef8:	5162      	str	r2, [r4, r5]
 8008efa:	604b      	str	r3, [r1, #4]
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 f82f 	bl	8008f60 <__malloc_unlock>
 8008f02:	f104 000b 	add.w	r0, r4, #11
 8008f06:	1d23      	adds	r3, r4, #4
 8008f08:	f020 0007 	bic.w	r0, r0, #7
 8008f0c:	1ac2      	subs	r2, r0, r3
 8008f0e:	bf1c      	itt	ne
 8008f10:	1a1b      	subne	r3, r3, r0
 8008f12:	50a3      	strne	r3, [r4, r2]
 8008f14:	e7af      	b.n	8008e76 <_malloc_r+0x22>
 8008f16:	6862      	ldr	r2, [r4, #4]
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	bf0c      	ite	eq
 8008f1c:	f8c8 2000 	streq.w	r2, [r8]
 8008f20:	605a      	strne	r2, [r3, #4]
 8008f22:	e7eb      	b.n	8008efc <_malloc_r+0xa8>
 8008f24:	4623      	mov	r3, r4
 8008f26:	6864      	ldr	r4, [r4, #4]
 8008f28:	e7ae      	b.n	8008e88 <_malloc_r+0x34>
 8008f2a:	463c      	mov	r4, r7
 8008f2c:	687f      	ldr	r7, [r7, #4]
 8008f2e:	e7b6      	b.n	8008e9e <_malloc_r+0x4a>
 8008f30:	461a      	mov	r2, r3
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	42a3      	cmp	r3, r4
 8008f36:	d1fb      	bne.n	8008f30 <_malloc_r+0xdc>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	6053      	str	r3, [r2, #4]
 8008f3c:	e7de      	b.n	8008efc <_malloc_r+0xa8>
 8008f3e:	230c      	movs	r3, #12
 8008f40:	6033      	str	r3, [r6, #0]
 8008f42:	4630      	mov	r0, r6
 8008f44:	f000 f80c 	bl	8008f60 <__malloc_unlock>
 8008f48:	e794      	b.n	8008e74 <_malloc_r+0x20>
 8008f4a:	6005      	str	r5, [r0, #0]
 8008f4c:	e7d6      	b.n	8008efc <_malloc_r+0xa8>
 8008f4e:	bf00      	nop
 8008f50:	20004e44 	.word	0x20004e44

08008f54 <__malloc_lock>:
 8008f54:	4801      	ldr	r0, [pc, #4]	@ (8008f5c <__malloc_lock+0x8>)
 8008f56:	f7ff bf00 	b.w	8008d5a <__retarget_lock_acquire_recursive>
 8008f5a:	bf00      	nop
 8008f5c:	20004e3c 	.word	0x20004e3c

08008f60 <__malloc_unlock>:
 8008f60:	4801      	ldr	r0, [pc, #4]	@ (8008f68 <__malloc_unlock+0x8>)
 8008f62:	f7ff befb 	b.w	8008d5c <__retarget_lock_release_recursive>
 8008f66:	bf00      	nop
 8008f68:	20004e3c 	.word	0x20004e3c

08008f6c <__sflush_r>:
 8008f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f74:	0716      	lsls	r6, r2, #28
 8008f76:	4605      	mov	r5, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	d454      	bmi.n	8009026 <__sflush_r+0xba>
 8008f7c:	684b      	ldr	r3, [r1, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dc02      	bgt.n	8008f88 <__sflush_r+0x1c>
 8008f82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	dd48      	ble.n	800901a <__sflush_r+0xae>
 8008f88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f8a:	2e00      	cmp	r6, #0
 8008f8c:	d045      	beq.n	800901a <__sflush_r+0xae>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f94:	682f      	ldr	r7, [r5, #0]
 8008f96:	6a21      	ldr	r1, [r4, #32]
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	d030      	beq.n	8008ffe <__sflush_r+0x92>
 8008f9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	0759      	lsls	r1, r3, #29
 8008fa2:	d505      	bpl.n	8008fb0 <__sflush_r+0x44>
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	1ad2      	subs	r2, r2, r3
 8008fa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008faa:	b10b      	cbz	r3, 8008fb0 <__sflush_r+0x44>
 8008fac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fae:	1ad2      	subs	r2, r2, r3
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fb4:	6a21      	ldr	r1, [r4, #32]
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b0      	blx	r6
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	d106      	bne.n	8008fce <__sflush_r+0x62>
 8008fc0:	6829      	ldr	r1, [r5, #0]
 8008fc2:	291d      	cmp	r1, #29
 8008fc4:	d82b      	bhi.n	800901e <__sflush_r+0xb2>
 8008fc6:	4a2a      	ldr	r2, [pc, #168]	@ (8009070 <__sflush_r+0x104>)
 8008fc8:	410a      	asrs	r2, r1
 8008fca:	07d6      	lsls	r6, r2, #31
 8008fcc:	d427      	bmi.n	800901e <__sflush_r+0xb2>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	6062      	str	r2, [r4, #4]
 8008fd2:	04d9      	lsls	r1, r3, #19
 8008fd4:	6922      	ldr	r2, [r4, #16]
 8008fd6:	6022      	str	r2, [r4, #0]
 8008fd8:	d504      	bpl.n	8008fe4 <__sflush_r+0x78>
 8008fda:	1c42      	adds	r2, r0, #1
 8008fdc:	d101      	bne.n	8008fe2 <__sflush_r+0x76>
 8008fde:	682b      	ldr	r3, [r5, #0]
 8008fe0:	b903      	cbnz	r3, 8008fe4 <__sflush_r+0x78>
 8008fe2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fe6:	602f      	str	r7, [r5, #0]
 8008fe8:	b1b9      	cbz	r1, 800901a <__sflush_r+0xae>
 8008fea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fee:	4299      	cmp	r1, r3
 8008ff0:	d002      	beq.n	8008ff8 <__sflush_r+0x8c>
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f7ff fec2 	bl	8008d7c <_free_r>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ffc:	e00d      	b.n	800901a <__sflush_r+0xae>
 8008ffe:	2301      	movs	r3, #1
 8009000:	4628      	mov	r0, r5
 8009002:	47b0      	blx	r6
 8009004:	4602      	mov	r2, r0
 8009006:	1c50      	adds	r0, r2, #1
 8009008:	d1c9      	bne.n	8008f9e <__sflush_r+0x32>
 800900a:	682b      	ldr	r3, [r5, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0c6      	beq.n	8008f9e <__sflush_r+0x32>
 8009010:	2b1d      	cmp	r3, #29
 8009012:	d001      	beq.n	8009018 <__sflush_r+0xac>
 8009014:	2b16      	cmp	r3, #22
 8009016:	d11e      	bne.n	8009056 <__sflush_r+0xea>
 8009018:	602f      	str	r7, [r5, #0]
 800901a:	2000      	movs	r0, #0
 800901c:	e022      	b.n	8009064 <__sflush_r+0xf8>
 800901e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009022:	b21b      	sxth	r3, r3
 8009024:	e01b      	b.n	800905e <__sflush_r+0xf2>
 8009026:	690f      	ldr	r7, [r1, #16]
 8009028:	2f00      	cmp	r7, #0
 800902a:	d0f6      	beq.n	800901a <__sflush_r+0xae>
 800902c:	0793      	lsls	r3, r2, #30
 800902e:	680e      	ldr	r6, [r1, #0]
 8009030:	bf08      	it	eq
 8009032:	694b      	ldreq	r3, [r1, #20]
 8009034:	600f      	str	r7, [r1, #0]
 8009036:	bf18      	it	ne
 8009038:	2300      	movne	r3, #0
 800903a:	eba6 0807 	sub.w	r8, r6, r7
 800903e:	608b      	str	r3, [r1, #8]
 8009040:	f1b8 0f00 	cmp.w	r8, #0
 8009044:	dde9      	ble.n	800901a <__sflush_r+0xae>
 8009046:	6a21      	ldr	r1, [r4, #32]
 8009048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800904a:	4643      	mov	r3, r8
 800904c:	463a      	mov	r2, r7
 800904e:	4628      	mov	r0, r5
 8009050:	47b0      	blx	r6
 8009052:	2800      	cmp	r0, #0
 8009054:	dc08      	bgt.n	8009068 <__sflush_r+0xfc>
 8009056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009068:	4407      	add	r7, r0
 800906a:	eba8 0800 	sub.w	r8, r8, r0
 800906e:	e7e7      	b.n	8009040 <__sflush_r+0xd4>
 8009070:	dfbffffe 	.word	0xdfbffffe

08009074 <_fflush_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	690b      	ldr	r3, [r1, #16]
 8009078:	4605      	mov	r5, r0
 800907a:	460c      	mov	r4, r1
 800907c:	b913      	cbnz	r3, 8009084 <_fflush_r+0x10>
 800907e:	2500      	movs	r5, #0
 8009080:	4628      	mov	r0, r5
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	b118      	cbz	r0, 800908e <_fflush_r+0x1a>
 8009086:	6a03      	ldr	r3, [r0, #32]
 8009088:	b90b      	cbnz	r3, 800908e <_fflush_r+0x1a>
 800908a:	f7ff fc71 	bl	8008970 <__sinit>
 800908e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0f3      	beq.n	800907e <_fflush_r+0xa>
 8009096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009098:	07d0      	lsls	r0, r2, #31
 800909a:	d404      	bmi.n	80090a6 <_fflush_r+0x32>
 800909c:	0599      	lsls	r1, r3, #22
 800909e:	d402      	bmi.n	80090a6 <_fflush_r+0x32>
 80090a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090a2:	f7ff fe5a 	bl	8008d5a <__retarget_lock_acquire_recursive>
 80090a6:	4628      	mov	r0, r5
 80090a8:	4621      	mov	r1, r4
 80090aa:	f7ff ff5f 	bl	8008f6c <__sflush_r>
 80090ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090b0:	07da      	lsls	r2, r3, #31
 80090b2:	4605      	mov	r5, r0
 80090b4:	d4e4      	bmi.n	8009080 <_fflush_r+0xc>
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	059b      	lsls	r3, r3, #22
 80090ba:	d4e1      	bmi.n	8009080 <_fflush_r+0xc>
 80090bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090be:	f7ff fe4d 	bl	8008d5c <__retarget_lock_release_recursive>
 80090c2:	e7dd      	b.n	8009080 <_fflush_r+0xc>

080090c4 <__swhatbuf_r>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	460c      	mov	r4, r1
 80090c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090cc:	2900      	cmp	r1, #0
 80090ce:	b096      	sub	sp, #88	@ 0x58
 80090d0:	4615      	mov	r5, r2
 80090d2:	461e      	mov	r6, r3
 80090d4:	da0d      	bge.n	80090f2 <__swhatbuf_r+0x2e>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090dc:	f04f 0100 	mov.w	r1, #0
 80090e0:	bf14      	ite	ne
 80090e2:	2340      	movne	r3, #64	@ 0x40
 80090e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090e8:	2000      	movs	r0, #0
 80090ea:	6031      	str	r1, [r6, #0]
 80090ec:	602b      	str	r3, [r5, #0]
 80090ee:	b016      	add	sp, #88	@ 0x58
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	466a      	mov	r2, sp
 80090f4:	f000 f848 	bl	8009188 <_fstat_r>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	dbec      	blt.n	80090d6 <__swhatbuf_r+0x12>
 80090fc:	9901      	ldr	r1, [sp, #4]
 80090fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009102:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009106:	4259      	negs	r1, r3
 8009108:	4159      	adcs	r1, r3
 800910a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800910e:	e7eb      	b.n	80090e8 <__swhatbuf_r+0x24>

08009110 <__smakebuf_r>:
 8009110:	898b      	ldrh	r3, [r1, #12]
 8009112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009114:	079d      	lsls	r5, r3, #30
 8009116:	4606      	mov	r6, r0
 8009118:	460c      	mov	r4, r1
 800911a:	d507      	bpl.n	800912c <__smakebuf_r+0x1c>
 800911c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	6123      	str	r3, [r4, #16]
 8009124:	2301      	movs	r3, #1
 8009126:	6163      	str	r3, [r4, #20]
 8009128:	b003      	add	sp, #12
 800912a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800912c:	ab01      	add	r3, sp, #4
 800912e:	466a      	mov	r2, sp
 8009130:	f7ff ffc8 	bl	80090c4 <__swhatbuf_r>
 8009134:	9f00      	ldr	r7, [sp, #0]
 8009136:	4605      	mov	r5, r0
 8009138:	4639      	mov	r1, r7
 800913a:	4630      	mov	r0, r6
 800913c:	f7ff fe8a 	bl	8008e54 <_malloc_r>
 8009140:	b948      	cbnz	r0, 8009156 <__smakebuf_r+0x46>
 8009142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009146:	059a      	lsls	r2, r3, #22
 8009148:	d4ee      	bmi.n	8009128 <__smakebuf_r+0x18>
 800914a:	f023 0303 	bic.w	r3, r3, #3
 800914e:	f043 0302 	orr.w	r3, r3, #2
 8009152:	81a3      	strh	r3, [r4, #12]
 8009154:	e7e2      	b.n	800911c <__smakebuf_r+0xc>
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	6020      	str	r0, [r4, #0]
 800915a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800915e:	81a3      	strh	r3, [r4, #12]
 8009160:	9b01      	ldr	r3, [sp, #4]
 8009162:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009166:	b15b      	cbz	r3, 8009180 <__smakebuf_r+0x70>
 8009168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800916c:	4630      	mov	r0, r6
 800916e:	f000 f81d 	bl	80091ac <_isatty_r>
 8009172:	b128      	cbz	r0, 8009180 <__smakebuf_r+0x70>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f023 0303 	bic.w	r3, r3, #3
 800917a:	f043 0301 	orr.w	r3, r3, #1
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	431d      	orrs	r5, r3
 8009184:	81a5      	strh	r5, [r4, #12]
 8009186:	e7cf      	b.n	8009128 <__smakebuf_r+0x18>

08009188 <_fstat_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d07      	ldr	r5, [pc, #28]	@ (80091a8 <_fstat_r+0x20>)
 800918c:	2300      	movs	r3, #0
 800918e:	4604      	mov	r4, r0
 8009190:	4608      	mov	r0, r1
 8009192:	4611      	mov	r1, r2
 8009194:	602b      	str	r3, [r5, #0]
 8009196:	f7f8 ff54 	bl	8002042 <_fstat>
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	d102      	bne.n	80091a4 <_fstat_r+0x1c>
 800919e:	682b      	ldr	r3, [r5, #0]
 80091a0:	b103      	cbz	r3, 80091a4 <_fstat_r+0x1c>
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	bd38      	pop	{r3, r4, r5, pc}
 80091a6:	bf00      	nop
 80091a8:	20004e38 	.word	0x20004e38

080091ac <_isatty_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4d06      	ldr	r5, [pc, #24]	@ (80091c8 <_isatty_r+0x1c>)
 80091b0:	2300      	movs	r3, #0
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	602b      	str	r3, [r5, #0]
 80091b8:	f7f8 ff53 	bl	8002062 <_isatty>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_isatty_r+0x1a>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_isatty_r+0x1a>
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	20004e38 	.word	0x20004e38

080091cc <_sbrk_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4d06      	ldr	r5, [pc, #24]	@ (80091e8 <_sbrk_r+0x1c>)
 80091d0:	2300      	movs	r3, #0
 80091d2:	4604      	mov	r4, r0
 80091d4:	4608      	mov	r0, r1
 80091d6:	602b      	str	r3, [r5, #0]
 80091d8:	f7f8 ff5c 	bl	8002094 <_sbrk>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d102      	bne.n	80091e6 <_sbrk_r+0x1a>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	b103      	cbz	r3, 80091e6 <_sbrk_r+0x1a>
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	20004e38 	.word	0x20004e38

080091ec <_init>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr

080091f8 <_fini>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr
