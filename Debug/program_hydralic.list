
program_hydralic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08008fb4  08008fb4  00009fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009090  08009090  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  08009090  08009090  0000a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009098  08009098  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009098  08009098  0000a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800909c  0800909c  0000a09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080090a0  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b05c  2**0
                  CONTENTS
 10 .bss          00004c90  20000060  20000060  0000b060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004cf0  20004cf0  0000b060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ac9a  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040c4  00000000  00000000  00025d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  00029df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109d  00000000  00000000  0002b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e22  00000000  00000000  0002c41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000199fc  00000000  00000000  0003123f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfa22  00000000  00000000  0004ac3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a65d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bf8  00000000  00000000  0012a6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00130298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f9c 	.word	0x08008f9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008f9c 	.word	0x08008f9c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_ldivmod>:
 80009bc:	b97b      	cbnz	r3, 80009de <__aeabi_ldivmod+0x22>
 80009be:	b972      	cbnz	r2, 80009de <__aeabi_ldivmod+0x22>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bfbe      	ittt	lt
 80009c4:	2000      	movlt	r0, #0
 80009c6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80009ca:	e006      	blt.n	80009da <__aeabi_ldivmod+0x1e>
 80009cc:	bf08      	it	eq
 80009ce:	2800      	cmpeq	r0, #0
 80009d0:	bf1c      	itt	ne
 80009d2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80009d6:	f04f 30ff 	movne.w	r0, #4294967295
 80009da:	f000 b9b5 	b.w	8000d48 <__aeabi_idiv0>
 80009de:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e6:	2900      	cmp	r1, #0
 80009e8:	db09      	blt.n	80009fe <__aeabi_ldivmod+0x42>
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db1a      	blt.n	8000a24 <__aeabi_ldivmod+0x68>
 80009ee:	f000 f84d 	bl	8000a8c <__udivmoddi4>
 80009f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009fa:	b004      	add	sp, #16
 80009fc:	4770      	bx	lr
 80009fe:	4240      	negs	r0, r0
 8000a00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db1b      	blt.n	8000a40 <__aeabi_ldivmod+0x84>
 8000a08:	f000 f840 	bl	8000a8c <__udivmoddi4>
 8000a0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a14:	b004      	add	sp, #16
 8000a16:	4240      	negs	r0, r0
 8000a18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a1c:	4252      	negs	r2, r2
 8000a1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a22:	4770      	bx	lr
 8000a24:	4252      	negs	r2, r2
 8000a26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a2a:	f000 f82f 	bl	8000a8c <__udivmoddi4>
 8000a2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a36:	b004      	add	sp, #16
 8000a38:	4240      	negs	r0, r0
 8000a3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a3e:	4770      	bx	lr
 8000a40:	4252      	negs	r2, r2
 8000a42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a46:	f000 f821 	bl	8000a8c <__udivmoddi4>
 8000a4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a52:	b004      	add	sp, #16
 8000a54:	4252      	negs	r2, r2
 8000a56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <u_timer_expired>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool u_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8000d4c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6178      	str	r0, [r7, #20]
 8000d56:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8000d5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d62:	eb10 0a02 	adds.w	sl, r0, r2
 8000d66:	eb41 0b03 	adc.w	fp, r1, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d70:	4592      	cmp	sl, r2
 8000d72:	eb7b 0303 	sbcs.w	r3, fp, r3
 8000d76:	d206      	bcs.n	8000d86 <u_timer_expired+0x3a>
 8000d78:	6979      	ldr	r1, [r7, #20]
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	f04f 0300 	mov.w	r3, #0
 8000d82:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	d10d      	bne.n	8000dac <u_timer_expired+0x60>
 8000d90:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000d94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d98:	1886      	adds	r6, r0, r2
 8000d9a:	603e      	str	r6, [r7, #0]
 8000d9c:	eb41 0303 	adc.w	r3, r1, r3
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000da8:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000db6:	4290      	cmp	r0, r2
 8000db8:	eb71 0303 	sbcs.w	r3, r1, r3
 8000dbc:	d201      	bcs.n	8000dc2 <u_timer_expired+0x76>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e022      	b.n	8000e08 <u_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000dcc:	ebb0 0802 	subs.w	r8, r0, r2
 8000dd0:	eb61 0903 	sbc.w	r9, r1, r3
 8000dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dd8:	4542      	cmp	r2, r8
 8000dda:	eb73 0309 	sbcs.w	r3, r3, r9
 8000dde:	d207      	bcs.n	8000df0 <u_timer_expired+0xa4>
 8000de0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000de8:	1884      	adds	r4, r0, r2
 8000dea:	eb41 0503 	adc.w	r5, r1, r3
 8000dee:	e007      	b.n	8000e00 <u_timer_expired+0xb4>
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000df6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dfa:	1884      	adds	r4, r0, r2
 8000dfc:	eb41 0503 	adc.w	r5, r1, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e12:	4770      	bx	lr

08000e14 <readGPIOInputs>:
//            }
//        }
//    }
//}

void readGPIOInputs(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
    gpioInputStates[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000e18:	2140      	movs	r1, #64	@ 0x40
 8000e1a:	4815      	ldr	r0, [pc, #84]	@ (8000e70 <readGPIOInputs+0x5c>)
 8000e1c:	f004 f8c4 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <readGPIOInputs+0x60>)
 8000e26:	701a      	strb	r2, [r3, #0]
    gpioInputStates[1] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000e28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e2c:	4812      	ldr	r0, [pc, #72]	@ (8000e78 <readGPIOInputs+0x64>)
 8000e2e:	f004 f8bb 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <readGPIOInputs+0x60>)
 8000e38:	705a      	strb	r2, [r3, #1]
    gpioInputStates[2] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8000e3a:	2180      	movs	r1, #128	@ 0x80
 8000e3c:	480e      	ldr	r0, [pc, #56]	@ (8000e78 <readGPIOInputs+0x64>)
 8000e3e:	f004 f8b3 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <readGPIOInputs+0x60>)
 8000e48:	709a      	strb	r2, [r3, #2]
    gpioInputStates[3] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9);
 8000e4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e4e:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <readGPIOInputs+0x64>)
 8000e50:	f004 f8aa 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <readGPIOInputs+0x60>)
 8000e5a:	70da      	strb	r2, [r3, #3]
    gpioInputStates[4] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <readGPIOInputs+0x68>)
 8000e60:	f004 f8a2 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b02      	ldr	r3, [pc, #8]	@ (8000e74 <readGPIOInputs+0x60>)
 8000e6a:	711a      	strb	r2, [r3, #4]
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40020000 	.word	0x40020000
 8000e74:	20000120 	.word	0x20000120
 8000e78:	40021400 	.word	0x40021400
 8000e7c:	40020800 	.word	0x40020800

08000e80 <manualMode>:
void manualMode(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
    modeLift = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_RESET ? true : false; // TRUE: bánh xe, FALSE: pallet
 8000e86:	2104      	movs	r1, #4
 8000e88:	481a      	ldr	r0, [pc, #104]	@ (8000ef4 <manualMode+0x74>)
 8000e8a:	f004 f88d 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf0c      	ite	eq
 8000e94:	2301      	moveq	r3, #1
 8000e96:	2300      	movne	r3, #0
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <manualMode+0x78>)
 8000e9c:	701a      	strb	r2, [r3, #0]

    bool liftPressed = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7) == GPIO_PIN_RESET ? true : false;
 8000e9e:	2180      	movs	r1, #128	@ 0x80
 8000ea0:	4816      	ldr	r0, [pc, #88]	@ (8000efc <manualMode+0x7c>)
 8000ea2:	f004 f881 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf0c      	ite	eq
 8000eac:	2301      	moveq	r3, #1
 8000eae:	2300      	movne	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]
    bool lowerPressed = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == GPIO_PIN_RESET ? true : false;
 8000eb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb6:	4811      	ldr	r0, [pc, #68]	@ (8000efc <manualMode+0x7c>)
 8000eb8:	f004 f876 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bf0c      	ite	eq
 8000ec2:	2301      	moveq	r3, #1
 8000ec4:	2300      	movne	r3, #0
 8000ec6:	71bb      	strb	r3, [r7, #6]

    if (liftPressed) {
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <manualMode+0x56>
        buttonPressCount = 1;  // Nâng
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <manualMode+0x80>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
        buttonPressCount = 3;  // Hạ
    }
    else {
        buttonPressCount = 0;  // Tắt thủy lực
    }
}
 8000ed4:	e009      	b.n	8000eea <manualMode+0x6a>
    else if (lowerPressed) {
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <manualMode+0x64>
        buttonPressCount = 3;  // Hạ
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <manualMode+0x80>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	701a      	strb	r2, [r3, #0]
}
 8000ee2:	e002      	b.n	8000eea <manualMode+0x6a>
        buttonPressCount = 0;  // Tắt thủy lực
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <manualMode+0x80>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	200000fd 	.word	0x200000fd
 8000efc:	40021400 	.word	0x40021400
 8000f00:	200000fc 	.word	0x200000fc

08000f04 <autoMode>:

void autoMode()
{
 8000f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f08:	b08c      	sub	sp, #48	@ 0x30
 8000f0a:	af02      	add	r7, sp, #8
  switch (autoStep)
 8000f0c:	4b9f      	ldr	r3, [pc, #636]	@ (800118c <autoMode+0x288>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	f200 812b 	bhi.w	800116e <autoMode+0x26a>
 8000f18:	a201      	add	r2, pc, #4	@ (adr r2, 8000f20 <autoMode+0x1c>)
 8000f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1e:	bf00      	nop
 8000f20:	08000f31 	.word	0x08000f31
 8000f24:	08000fc5 	.word	0x08000fc5
 8000f28:	08001059 	.word	0x08001059
 8000f2c:	080010e5 	.word	0x080010e5
  {
  case 0: // nâng pallet
    buttonPressCount = 1;
 8000f30:	4b97      	ldr	r3, [pc, #604]	@ (8001190 <autoMode+0x28c>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
    modeLift = false;
 8000f36:	4b97      	ldr	r3, [pc, #604]	@ (8001194 <autoMode+0x290>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LIFT_PALLET, HAL_GetTick()))
 8000f3c:	f002 f88e 	bl	800305c <HAL_GetTick>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2200      	movs	r2, #0
 8000f44:	623b      	str	r3, [r7, #32]
 8000f46:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f48:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000f4c:	e9cd 3400 	strd	r3, r4, [sp]
 8000f50:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	488f      	ldr	r0, [pc, #572]	@ (8001198 <autoMode+0x294>)
 8000f5a:	f7ff fef7 	bl	8000d4c <u_timer_expired>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <autoMode+0x66>
    {
      stepDone[0] = true;
 8000f64:	4b8d      	ldr	r3, [pc, #564]	@ (800119c <autoMode+0x298>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
    }
    if (stepDone[0])
 8000f6a:	4b8c      	ldr	r3, [pc, #560]	@ (800119c <autoMode+0x298>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 80ff 	beq.w	8001172 <autoMode+0x26e>
    {
      buttonPressCount = 0; // off thuỷ lực
 8000f74:	4b86      	ldr	r3, [pc, #536]	@ (8001190 <autoMode+0x28c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 8000f7a:	f002 f86f 	bl	800305c <HAL_GetTick>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2200      	movs	r2, #0
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	61fa      	str	r2, [r7, #28]
 8000f86:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000f8a:	e9cd 3400 	strd	r3, r4, [sp]
 8000f8e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	4882      	ldr	r0, [pc, #520]	@ (80011a0 <autoMode+0x29c>)
 8000f98:	f7ff fed8 	bl	8000d4c <u_timer_expired>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 80e7 	beq.w	8001172 <autoMode+0x26e>
      {
        stepDone[0] = false;
 8000fa4:	4b7d      	ldr	r3, [pc, #500]	@ (800119c <autoMode+0x298>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 8000faa:	2210      	movs	r2, #16
 8000fac:	2100      	movs	r1, #0
 8000fae:	487a      	ldr	r0, [pc, #488]	@ (8001198 <autoMode+0x294>)
 8000fb0:	f007 ffba 	bl	8008f28 <memset>
        autoStep++;
 8000fb4:	4b75      	ldr	r3, [pc, #468]	@ (800118c <autoMode+0x288>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b73      	ldr	r3, [pc, #460]	@ (800118c <autoMode+0x288>)
 8000fc0:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8000fc2:	e0d6      	b.n	8001172 <autoMode+0x26e>

  case 1: // hạ bánh xe
    buttonPressCount = 1;
 8000fc4:	4b72      	ldr	r3, [pc, #456]	@ (8001190 <autoMode+0x28c>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
    modeLift = true;
 8000fca:	4b72      	ldr	r3, [pc, #456]	@ (8001194 <autoMode+0x290>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LOWER_WHEEL, HAL_GetTick()))
 8000fd0:	f002 f844 	bl	800305c <HAL_GetTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	617a      	str	r2, [r7, #20]
 8000fdc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000fe0:	e9cd 3400 	strd	r3, r4, [sp]
 8000fe4:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	486a      	ldr	r0, [pc, #424]	@ (8001198 <autoMode+0x294>)
 8000fee:	f7ff fead 	bl	8000d4c <u_timer_expired>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <autoMode+0xfa>
    {
      stepDone[1] = true;
 8000ff8:	4b68      	ldr	r3, [pc, #416]	@ (800119c <autoMode+0x298>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	705a      	strb	r2, [r3, #1]
    }
    if (stepDone[1])
 8000ffe:	4b67      	ldr	r3, [pc, #412]	@ (800119c <autoMode+0x298>)
 8001000:	785b      	ldrb	r3, [r3, #1]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 80b7 	beq.w	8001176 <autoMode+0x272>
    {
      buttonPressCount = 0; // off thuỷ lực
 8001008:	4b61      	ldr	r3, [pc, #388]	@ (8001190 <autoMode+0x28c>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 800100e:	f002 f825 	bl	800305c <HAL_GetTick>
 8001012:	4603      	mov	r3, r0
 8001014:	2200      	movs	r2, #0
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	60fa      	str	r2, [r7, #12]
 800101a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800101e:	e9cd 3400 	strd	r3, r4, [sp]
 8001022:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	485d      	ldr	r0, [pc, #372]	@ (80011a0 <autoMode+0x29c>)
 800102c:	f7ff fe8e 	bl	8000d4c <u_timer_expired>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 809f 	beq.w	8001176 <autoMode+0x272>
      {
        stepDone[1] = false;
 8001038:	4b58      	ldr	r3, [pc, #352]	@ (800119c <autoMode+0x298>)
 800103a:	2200      	movs	r2, #0
 800103c:	705a      	strb	r2, [r3, #1]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 800103e:	2210      	movs	r2, #16
 8001040:	2100      	movs	r1, #0
 8001042:	4855      	ldr	r0, [pc, #340]	@ (8001198 <autoMode+0x294>)
 8001044:	f007 ff70 	bl	8008f28 <memset>
        autoStep++;
 8001048:	4b50      	ldr	r3, [pc, #320]	@ (800118c <autoMode+0x288>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b4e      	ldr	r3, [pc, #312]	@ (800118c <autoMode+0x288>)
 8001054:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8001056:	e08e      	b.n	8001176 <autoMode+0x272>

  case 2: // hạ pallet
    buttonPressCount = 3;
 8001058:	4b4d      	ldr	r3, [pc, #308]	@ (8001190 <autoMode+0x28c>)
 800105a:	2203      	movs	r2, #3
 800105c:	701a      	strb	r2, [r3, #0]
    modeLift = false;
 800105e:	4b4d      	ldr	r3, [pc, #308]	@ (8001194 <autoMode+0x290>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_DOWN_PALLET, HAL_GetTick()))
 8001064:	f001 fffa 	bl	800305c <HAL_GetTick>
 8001068:	4603      	mov	r3, r0
 800106a:	2200      	movs	r2, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001074:	e9cd 3400 	strd	r3, r4, [sp]
 8001078:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	4845      	ldr	r0, [pc, #276]	@ (8001198 <autoMode+0x294>)
 8001082:	f7ff fe63 	bl	8000d4c <u_timer_expired>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <autoMode+0x18e>
    {
      stepDone[2] = true;
 800108c:	4b43      	ldr	r3, [pc, #268]	@ (800119c <autoMode+0x298>)
 800108e:	2201      	movs	r2, #1
 8001090:	709a      	strb	r2, [r3, #2]
    }
    if (stepDone[2])
 8001092:	4b42      	ldr	r3, [pc, #264]	@ (800119c <autoMode+0x298>)
 8001094:	789b      	ldrb	r3, [r3, #2]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d06f      	beq.n	800117a <autoMode+0x276>
    {
      buttonPressCount = 0; // off thuỷ lực
 800109a:	4b3d      	ldr	r3, [pc, #244]	@ (8001190 <autoMode+0x28c>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 80010a0:	f001 ffdc 	bl	800305c <HAL_GetTick>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2200      	movs	r2, #0
 80010a8:	469a      	mov	sl, r3
 80010aa:	4693      	mov	fp, r2
 80010ac:	e9cd ab00 	strd	sl, fp, [sp]
 80010b0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	4839      	ldr	r0, [pc, #228]	@ (80011a0 <autoMode+0x29c>)
 80010ba:	f7ff fe47 	bl	8000d4c <u_timer_expired>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d05a      	beq.n	800117a <autoMode+0x276>
      {
        stepDone[2] = false;
 80010c4:	4b35      	ldr	r3, [pc, #212]	@ (800119c <autoMode+0x298>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	709a      	strb	r2, [r3, #2]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 80010ca:	2210      	movs	r2, #16
 80010cc:	2100      	movs	r1, #0
 80010ce:	4832      	ldr	r0, [pc, #200]	@ (8001198 <autoMode+0x294>)
 80010d0:	f007 ff2a 	bl	8008f28 <memset>
        autoStep++;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	@ (800118c <autoMode+0x288>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <autoMode+0x288>)
 80010e0:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 80010e2:	e04a      	b.n	800117a <autoMode+0x276>

  case 3: // nâng bánh xe
    buttonPressCount = 3;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <autoMode+0x28c>)
 80010e6:	2203      	movs	r2, #3
 80010e8:	701a      	strb	r2, [r3, #0]
    modeLift = true;
 80010ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <autoMode+0x290>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LIFT_WHEEL, HAL_GetTick()))
 80010f0:	f001 ffb4 	bl	800305c <HAL_GetTick>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2200      	movs	r2, #0
 80010f8:	4698      	mov	r8, r3
 80010fa:	4691      	mov	r9, r2
 80010fc:	e9cd 8900 	strd	r8, r9, [sp]
 8001100:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	4823      	ldr	r0, [pc, #140]	@ (8001198 <autoMode+0x294>)
 800110a:	f7ff fe1f 	bl	8000d4c <u_timer_expired>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <autoMode+0x216>
    {
      stepDone[3] = true;
 8001114:	4b21      	ldr	r3, [pc, #132]	@ (800119c <autoMode+0x298>)
 8001116:	2201      	movs	r2, #1
 8001118:	70da      	strb	r2, [r3, #3]
    }
    if (stepDone[3])
 800111a:	4b20      	ldr	r3, [pc, #128]	@ (800119c <autoMode+0x298>)
 800111c:	78db      	ldrb	r3, [r3, #3]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d02d      	beq.n	800117e <autoMode+0x27a>
    {
      buttonPressCount = 0; // off thuỷ lực
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <autoMode+0x28c>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 8001128:	f001 ff98 	bl	800305c <HAL_GetTick>
 800112c:	4603      	mov	r3, r0
 800112e:	2200      	movs	r2, #0
 8001130:	461c      	mov	r4, r3
 8001132:	4615      	mov	r5, r2
 8001134:	e9cd 4500 	strd	r4, r5, [sp]
 8001138:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	4817      	ldr	r0, [pc, #92]	@ (80011a0 <autoMode+0x29c>)
 8001142:	f7ff fe03 	bl	8000d4c <u_timer_expired>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d018      	beq.n	800117e <autoMode+0x27a>
      {
        stepDone[3] = false;
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <autoMode+0x298>)
 800114e:	2200      	movs	r2, #0
 8001150:	70da      	strb	r2, [r3, #3]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 8001152:	2210      	movs	r2, #16
 8001154:	2100      	movs	r1, #0
 8001156:	4810      	ldr	r0, [pc, #64]	@ (8001198 <autoMode+0x294>)
 8001158:	f007 fee6 	bl	8008f28 <memset>
        autoStep = 0;
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <autoMode+0x288>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
        totalCycle++;
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <autoMode+0x2a0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <autoMode+0x2a0>)
 800116a:	6013      	str	r3, [r2, #0]
      }
    }
    break;
 800116c:	e007      	b.n	800117e <autoMode+0x27a>

  default:
    break;
 800116e:	bf00      	nop
 8001170:	e006      	b.n	8001180 <autoMode+0x27c>
    break;
 8001172:	bf00      	nop
 8001174:	e004      	b.n	8001180 <autoMode+0x27c>
    break;
 8001176:	bf00      	nop
 8001178:	e002      	b.n	8001180 <autoMode+0x27c>
    break;
 800117a:	bf00      	nop
 800117c:	e000      	b.n	8001180 <autoMode+0x27c>
    break;
 800117e:	bf00      	nop
  }
}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	@ 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800118a:	bf00      	nop
 800118c:	200000fe 	.word	0x200000fe
 8001190:	200000fc 	.word	0x200000fc
 8001194:	200000fd 	.word	0x200000fd
 8001198:	20000110 	.word	0x20000110
 800119c:	20000104 	.word	0x20000104
 80011a0:	20000118 	.word	0x20000118
 80011a4:	20000100 	.word	0x20000100

080011a8 <performAction>:

void performAction(int count, bool Mode) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	70fb      	strb	r3, [r7, #3]
	switch (count) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d003      	beq.n	80011c2 <performAction+0x1a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d00d      	beq.n	80011dc <performAction+0x34>
 80011c0:	e019      	b.n	80011f6 <performAction+0x4e>
	case 1:
		if (Mode) {
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <performAction+0x2a>
			hydraulicSetState(wheel_down_state);
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <performAction+0x60>)
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	f001 feaa 	bl	8002f24 <hydraulicSetState>
			// Thực hiện hành động hạ bánh xe
		} else {
			hydraulicSetState(pallet_up_state);
			// Thực hiện hành động nâng pallet
		}
		break;
 80011d0:	e016      	b.n	8001200 <performAction+0x58>
			hydraulicSetState(pallet_up_state);
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <performAction+0x64>)
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	f001 fea5 	bl	8002f24 <hydraulicSetState>
		break;
 80011da:	e011      	b.n	8001200 <performAction+0x58>
	case 3:
		if (Mode) {
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d004      	beq.n	80011ec <performAction+0x44>
			hydraulicSetState(wheel_up_state);
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <performAction+0x68>)
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	f001 fe9d 	bl	8002f24 <hydraulicSetState>
			// Thực hiện hành động nâng bánh xe
		} else {
			hydraulicSetState(pallet_down_state);
			// Thực hiện hành động hạ pallet
		}
		break;
 80011ea:	e009      	b.n	8001200 <performAction+0x58>
			hydraulicSetState(pallet_down_state);
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <performAction+0x6c>)
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f001 fe98 	bl	8002f24 <hydraulicSetState>
		break;
 80011f4:	e004      	b.n	8001200 <performAction+0x58>
	default:
		hydraulicSetState(free_all_state);
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <performAction+0x70>)
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	f001 fe93 	bl	8002f24 <hydraulicSetState>
		// Trạng thái tự do
		break;
 80011fe:	bf00      	nop
	}
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	08008ff4 	.word	0x08008ff4
 800120c:	08008ff8 	.word	0x08008ff8
 8001210:	08008ff0 	.word	0x08008ff0
 8001214:	08008ffc 	.word	0x08008ffc
 8001218:	08009000 	.word	0x08009000

0800121c <canOpenCallBack>:

void canOpenCallBack() {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	a++;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <canOpenCallBack+0x4c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <canOpenCallBack+0x4c>)
 8001228:	6013      	str	r3, [r2, #0]
	static uint32_t canId;
	canId = canOpen.Can_rxHeader.StdId;
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <canOpenCallBack+0x50>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	4a10      	ldr	r2, [pc, #64]	@ (8001270 <canOpenCallBack+0x54>)
 8001230:	6013      	str	r3, [r2, #0]
	memcpy(buffer_mes, canOpen.Can_rxData, 8);
 8001232:	2208      	movs	r2, #8
 8001234:	490f      	ldr	r1, [pc, #60]	@ (8001274 <canOpenCallBack+0x58>)
 8001236:	4810      	ldr	r0, [pc, #64]	@ (8001278 <canOpenCallBack+0x5c>)
 8001238:	f007 fea2 	bl	8008f80 <memcpy>
	if ((canId >= 0x018A && canId <= 0x018E) || canId == 0x70A) {
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <canOpenCallBack+0x54>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
 8001244:	d304      	bcc.n	8001250 <canOpenCallBack+0x34>
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <canOpenCallBack+0x54>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f5b3 7fc7 	cmp.w	r3, #398	@ 0x18e
 800124e:	d908      	bls.n	8001262 <canOpenCallBack+0x46>
 8001250:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <canOpenCallBack+0x54>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f240 720a 	movw	r2, #1802	@ 0x70a
 8001258:	4293      	cmp	r3, r2
 800125a:	d002      	beq.n	8001262 <canOpenCallBack+0x46>

	} else {
		CanRecieverCallback(); // hàm nhận dữ liệu của động cơ
 800125c:	f001 f92e 	bl	80024bc <CanRecieverCallback>
	}
}
 8001260:	e7ff      	b.n	8001262 <canOpenCallBack+0x46>
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000128 	.word	0x20000128
 800126c:	2000007c 	.word	0x2000007c
 8001270:	200002dc 	.word	0x200002dc
 8001274:	200000e0 	.word	0x200000e0
 8001278:	2000012c 	.word	0x2000012c

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f001 fe86 	bl	8002f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f866 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 fa0c 	bl	80016a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800128c:	f000 f9ea 	bl	8001664 <MX_DMA_Init>
  MX_CAN1_Init();
 8001290:	f000 f91c 	bl	80014cc <MX_CAN1_Init>
  MX_ADC1_Init();
 8001294:	f000 f8c8 	bl	8001428 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001298:	f000 f9ba 	bl	8001610 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 800129c:	f000 f94c 	bl	8001538 <MX_CAN2_Init>
  MX_SPI1_Init();
 80012a0:	f000 f980 	bl	80015a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  mcp4922.begin(&hspi1,GPIOA,GPIO_PIN_4);
 80012a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <main+0x98>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2210      	movs	r2, #16
 80012aa:	491b      	ldr	r1, [pc, #108]	@ (8001318 <main+0x9c>)
 80012ac:	481b      	ldr	r0, [pc, #108]	@ (800131c <main+0xa0>)
 80012ae:	4798      	blx	r3

  Can_begin(&canOpen, &hcan1, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	491b      	ldr	r1, [pc, #108]	@ (8001320 <main+0xa4>)
 80012b4:	481b      	ldr	r0, [pc, #108]	@ (8001324 <main+0xa8>)
 80012b6:	f000 fe9d 	bl	8001ff4 <Can_begin>
  CanCofigfilter(&canOpen, 0x11, 0x11);
 80012ba:	2211      	movs	r2, #17
 80012bc:	2111      	movs	r1, #17
 80012be:	4819      	ldr	r0, [pc, #100]	@ (8001324 <main+0xa8>)
 80012c0:	f000 ff0c 	bl	80020dc <CanCofigfilter>
  canOpen.CanRxIT_Callback = &canOpenCallBack;
 80012c4:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <main+0xa8>)
 80012c6:	4a18      	ldr	r2, [pc, #96]	@ (8001328 <main+0xac>)
 80012c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  Can_Start(&canOpen, MotorID[0]);
 80012ca:	4b18      	ldr	r3, [pc, #96]	@ (800132c <main+0xb0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4619      	mov	r1, r3
 80012d0:	4814      	ldr	r0, [pc, #80]	@ (8001324 <main+0xa8>)
 80012d2:	f000 ff39 	bl	8002148 <Can_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012d6:	f005 f893 	bl	8006400 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012da:	4a15      	ldr	r2, [pc, #84]	@ (8001330 <main+0xb4>)
 80012dc:	2100      	movs	r1, #0
 80012de:	4815      	ldr	r0, [pc, #84]	@ (8001334 <main+0xb8>)
 80012e0:	f005 f8d8 	bl	8006494 <osThreadNew>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <main+0xbc>)
 80012e8:	6013      	str	r3, [r2, #0]

  /* creation of Task_Pump */
  Task_PumpHandle = osThreadNew(StartTask_Pump, NULL, &Task_Pump_attributes);
 80012ea:	4a14      	ldr	r2, [pc, #80]	@ (800133c <main+0xc0>)
 80012ec:	2100      	movs	r1, #0
 80012ee:	4814      	ldr	r0, [pc, #80]	@ (8001340 <main+0xc4>)
 80012f0:	f005 f8d0 	bl	8006494 <osThreadNew>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a13      	ldr	r2, [pc, #76]	@ (8001344 <main+0xc8>)
 80012f8:	6013      	str	r3, [r2, #0]

  /* creation of Task_Motor */
  Task_MotorHandle = osThreadNew(StartTask_Motor, NULL, &Task_Motor_attributes);
 80012fa:	4a13      	ldr	r2, [pc, #76]	@ (8001348 <main+0xcc>)
 80012fc:	2100      	movs	r1, #0
 80012fe:	4813      	ldr	r0, [pc, #76]	@ (800134c <main+0xd0>)
 8001300:	f005 f8c8 	bl	8006494 <osThreadNew>
 8001304:	4603      	mov	r3, r0
 8001306:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <main+0xd4>)
 8001308:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800130a:	f005 f89d 	bl	8006448 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800130e:	bf00      	nop
 8001310:	e7fd      	b.n	800130e <main+0x92>
 8001312:	bf00      	nop
 8001314:	2000000c 	.word	0x2000000c
 8001318:	40020000 	.word	0x40020000
 800131c:	20000230 	.word	0x20000230
 8001320:	200001e0 	.word	0x200001e0
 8001324:	2000007c 	.word	0x2000007c
 8001328:	0800121d 	.word	0x0800121d
 800132c:	20000030 	.word	0x20000030
 8001330:	08009004 	.word	0x08009004
 8001334:	080018bd 	.word	0x080018bd
 8001338:	200002d0 	.word	0x200002d0
 800133c:	08009028 	.word	0x08009028
 8001340:	080018cd 	.word	0x080018cd
 8001344:	200002d4 	.word	0x200002d4
 8001348:	0800904c 	.word	0x0800904c
 800134c:	080019a1 	.word	0x080019a1
 8001350:	200002d8 	.word	0x200002d8

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	@ 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2230      	movs	r2, #48	@ 0x30
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f007 fde0 	bl	8008f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b28      	ldr	r3, [pc, #160]	@ (8001420 <SystemClock_Config+0xcc>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	4a27      	ldr	r2, [pc, #156]	@ (8001420 <SystemClock_Config+0xcc>)
 8001382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	@ 0x40
 8001388:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <SystemClock_Config+0xcc>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <SystemClock_Config+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <SystemClock_Config+0xd0>)
 800139e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001424 <SystemClock_Config+0xd0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b0:	2302      	movs	r3, #2
 80013b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b8:	2310      	movs	r3, #16
 80013ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	2302      	movs	r3, #2
 80013be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c0:	2300      	movs	r3, #0
 80013c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013c4:	2308      	movs	r3, #8
 80013c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013c8:	23a8      	movs	r3, #168	@ 0xa8
 80013ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d0:	2304      	movs	r3, #4
 80013d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d4:	f107 0320 	add.w	r3, r7, #32
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 fe17 	bl	800500c <HAL_RCC_OscConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013e4:	f000 fb68 	bl	8001ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e8:	230f      	movs	r3, #15
 80013ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ec:	2302      	movs	r3, #2
 80013ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2105      	movs	r1, #5
 8001406:	4618      	mov	r0, r3
 8001408:	f004 f878 	bl	80054fc <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001412:	f000 fb51 	bl	8001ab8 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3750      	adds	r7, #80	@ 0x50
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <MX_ADC1_Init+0x98>)
 800143c:	4a21      	ldr	r2, [pc, #132]	@ (80014c4 <MX_ADC1_Init+0x9c>)
 800143e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001440:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <MX_ADC1_Init+0x98>)
 8001442:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001446:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001448:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_ADC1_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <MX_ADC1_Init+0x98>)
 8001450:	2201      	movs	r2, #1
 8001452:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_ADC1_Init+0x98>)
 8001456:	2201      	movs	r2, #1
 8001458:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_ADC1_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001462:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <MX_ADC1_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <MX_ADC1_Init+0x98>)
 800146a:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <MX_ADC1_Init+0xa0>)
 800146c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_ADC1_Init+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <MX_ADC1_Init+0x98>)
 8001476:	2201      	movs	r2, #1
 8001478:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_ADC1_Init+0x98>)
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_ADC1_Init+0x98>)
 8001484:	2201      	movs	r2, #1
 8001486:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001488:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <MX_ADC1_Init+0x98>)
 800148a:	f001 fdf3 	bl	8003074 <HAL_ADC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001494:	f000 fb10 	bl	8001ab8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001498:	2303      	movs	r3, #3
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800149c:	2301      	movs	r3, #1
 800149e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80014a0:	2304      	movs	r3, #4
 80014a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_ADC1_Init+0x98>)
 80014aa:	f001 ff55 	bl	8003358 <HAL_ADC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014b4:	f000 fb00 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000138 	.word	0x20000138
 80014c4:	40012000 	.word	0x40012000
 80014c8:	0f000001 	.word	0x0f000001

080014cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014d0:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_CAN1_Init+0x64>)
 80014d2:	4a18      	ldr	r2, [pc, #96]	@ (8001534 <MX_CAN1_Init+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <MX_CAN1_Init+0x64>)
 80014d8:	2215      	movs	r2, #21
 80014da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_CAN1_Init+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <MX_CAN1_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_CAN1_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <MX_CAN1_Init+0x64>)
 80014f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014f4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <MX_CAN1_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <MX_CAN1_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <MX_CAN1_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <MX_CAN1_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <MX_CAN1_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <MX_CAN1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_CAN1_Init+0x64>)
 800151c:	f002 f944 	bl	80037a8 <HAL_CAN_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001526:	f000 fac7 	bl	8001ab8 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */
 //CanCofigfilter(&CanUser1,FilterHigh, FilterLOw);

  /* USER CODE END CAN1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200001e0 	.word	0x200001e0
 8001534:	40006400 	.word	0x40006400

08001538 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <MX_CAN2_Init+0x64>)
 800153e:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <MX_CAN2_Init+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 8001542:	4b16      	ldr	r3, [pc, #88]	@ (800159c <MX_CAN2_Init+0x64>)
 8001544:	2215      	movs	r2, #21
 8001546:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <MX_CAN2_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800154e:	4b13      	ldr	r3, [pc, #76]	@ (800159c <MX_CAN2_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_CAN2_Init+0x64>)
 8001556:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 800155a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_8TQ;
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <MX_CAN2_Init+0x64>)
 800155e:	f44f 02e0 	mov.w	r2, #7340032	@ 0x700000
 8001562:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <MX_CAN2_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <MX_CAN2_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001570:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <MX_CAN2_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_CAN2_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800157c:	4b07      	ldr	r3, [pc, #28]	@ (800159c <MX_CAN2_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <MX_CAN2_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	@ (800159c <MX_CAN2_Init+0x64>)
 800158a:	f002 f90d 	bl	80037a8 <HAL_CAN_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001594:	f000 fa90 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000208 	.word	0x20000208
 80015a0:	40006800 	.word	0x40006800

080015a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015a8:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015aa:	4a18      	ldr	r2, [pc, #96]	@ (800160c <MX_SPI1_Init+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015f0:	220a      	movs	r2, #10
 80015f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_SPI1_Init+0x64>)
 80015f6:	f004 f961 	bl	80058bc <HAL_SPI_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001600:	f000 fa5a 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000230 	.word	0x20000230
 800160c:	40013000 	.word	0x40013000

08001610 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_USART3_UART_Init+0x4c>)
 8001616:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <MX_USART3_UART_Init+0x50>)
 8001618:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <MX_USART3_UART_Init+0x4c>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <MX_USART3_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <MX_USART3_UART_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <MX_USART3_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <MX_USART3_UART_Init+0x4c>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <MX_USART3_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <MX_USART3_UART_Init+0x4c>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <MX_USART3_UART_Init+0x4c>)
 8001648:	f004 fbe2 	bl	8005e10 <HAL_UART_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001652:	f000 fa31 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000288 	.word	0x20000288
 8001660:	40004800 	.word	0x40004800

08001664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_DMA_Init+0x3c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <MX_DMA_Init+0x3c>)
 8001674:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_DMA_Init+0x3c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2105      	movs	r1, #5
 800168a:	2038      	movs	r0, #56	@ 0x38
 800168c:	f002 ffcf 	bl	800462e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001690:	2038      	movs	r0, #56	@ 0x38
 8001692:	f002 ffe8 	bl	8004666 <HAL_NVIC_EnableIRQ>

}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08e      	sub	sp, #56	@ 0x38
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
 80016be:	4b78      	ldr	r3, [pc, #480]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a77      	ldr	r2, [pc, #476]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 80016c4:	f043 0320 	orr.w	r3, r3, #32
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b75      	ldr	r3, [pc, #468]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0320 	and.w	r3, r3, #32
 80016d2:	623b      	str	r3, [r7, #32]
 80016d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	4b71      	ldr	r3, [pc, #452]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a70      	ldr	r2, [pc, #448]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 80016e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b6e      	ldr	r3, [pc, #440]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	4b6a      	ldr	r3, [pc, #424]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a69      	ldr	r2, [pc, #420]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b67      	ldr	r3, [pc, #412]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	4b63      	ldr	r3, [pc, #396]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a62      	ldr	r2, [pc, #392]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b60      	ldr	r3, [pc, #384]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b5c      	ldr	r3, [pc, #368]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a5b      	ldr	r2, [pc, #364]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b59      	ldr	r3, [pc, #356]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b55      	ldr	r3, [pc, #340]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a54      	ldr	r2, [pc, #336]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001750:	f043 0310 	orr.w	r3, r3, #16
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b52      	ldr	r3, [pc, #328]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b4e      	ldr	r3, [pc, #312]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a4d      	ldr	r2, [pc, #308]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b4b      	ldr	r3, [pc, #300]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b47      	ldr	r3, [pc, #284]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a46      	ldr	r2, [pc, #280]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001788:	f043 0308 	orr.w	r3, r3, #8
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b44      	ldr	r3, [pc, #272]	@ (80018a0 <MX_GPIO_Init+0x1fc>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2110      	movs	r1, #16
 800179e:	4841      	ldr	r0, [pc, #260]	@ (80018a4 <MX_GPIO_Init+0x200>)
 80017a0:	f003 fc1a 	bl	8004fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2180      	movs	r1, #128	@ 0x80
 80017a8:	483f      	ldr	r0, [pc, #252]	@ (80018a8 <MX_GPIO_Init+0x204>)
 80017aa:	f003 fc15 	bl	8004fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 80017b4:	483d      	ldr	r0, [pc, #244]	@ (80018ac <MX_GPIO_Init+0x208>)
 80017b6:	f003 fc0f 	bl	8004fd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2140      	movs	r1, #64	@ 0x40
 80017be:	483c      	ldr	r0, [pc, #240]	@ (80018b0 <MX_GPIO_Init+0x20c>)
 80017c0:	f003 fc0a 	bl	8004fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80017c4:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d6:	4619      	mov	r1, r3
 80017d8:	4836      	ldr	r0, [pc, #216]	@ (80018b4 <MX_GPIO_Init+0x210>)
 80017da:	f003 fa49 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017de:	230c      	movs	r3, #12
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	4831      	ldr	r0, [pc, #196]	@ (80018b8 <MX_GPIO_Init+0x214>)
 80017f2:	f003 fa3d 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017f6:	2310      	movs	r3, #16
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180a:	4619      	mov	r1, r3
 800180c:	4825      	ldr	r0, [pc, #148]	@ (80018a4 <MX_GPIO_Init+0x200>)
 800180e:	f003 fa2f 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001812:	2340      	movs	r3, #64	@ 0x40
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	481f      	ldr	r0, [pc, #124]	@ (80018a4 <MX_GPIO_Init+0x200>)
 8001826:	f003 fa23 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800182a:	2303      	movs	r3, #3
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	481b      	ldr	r0, [pc, #108]	@ (80018ac <MX_GPIO_Init+0x208>)
 800183e:	f003 fa17 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001842:	2380      	movs	r3, #128	@ 0x80
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	4813      	ldr	r0, [pc, #76]	@ (80018a8 <MX_GPIO_Init+0x204>)
 800185a:	f003 fa09 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG7
                           PG10 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800185e:	f44f 634f 	mov.w	r3, #3312	@ 0xcf0
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	480d      	ldr	r0, [pc, #52]	@ (80018ac <MX_GPIO_Init+0x208>)
 8001878:	f003 f9fa 	bl	8004c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800187c:	2340      	movs	r3, #64	@ 0x40
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <MX_GPIO_Init+0x20c>)
 8001894:	f003 f9ec 	bl	8004c70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001898:	bf00      	nop
 800189a:	3738      	adds	r7, #56	@ 0x38
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40021800 	.word	0x40021800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40020800 	.word	0x40020800

080018bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018c4:	2001      	movs	r0, #1
 80018c6:	f004 fe77 	bl	80065b8 <osDelay>
 80018ca:	e7fb      	b.n	80018c4 <StartDefaultTask+0x8>

080018cc <StartTask_Pump>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Pump */
void StartTask_Pump(void *argument)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Pump */
  /* Infinite loop */
  for (;;)
  {
	  readGPIOInputs();
 80018d4:	f7ff fa9e 	bl	8000e14 <readGPIOInputs>
      // Kiểm tra nút RESET (GPIOG_PIN_2)
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET)
 80018d8:	2140      	movs	r1, #64	@ 0x40
 80018da:	4827      	ldr	r0, [pc, #156]	@ (8001978 <StartTask_Pump+0xac>)
 80018dc:	f003 fb64 	bl	8004fa8 <HAL_GPIO_ReadPin>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d119      	bne.n	800191a <StartTask_Pump+0x4e>
      {
    	  motorErrorReset();
 80018e6:	f001 faa9 	bl	8002e3c <motorErrorReset>
          hydraulicSetState(free_all_state); // Dừng mọi hoạt động
 80018ea:	4b24      	ldr	r3, [pc, #144]	@ (800197c <StartTask_Pump+0xb0>)
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	f001 fb19 	bl	8002f24 <hydraulicSetState>
          // Reset tất cả
          buttonPressCount = 0;
 80018f2:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <StartTask_Pump+0xb4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
          autoStep = 0;
 80018f8:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <StartTask_Pump+0xb8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
          modeLift = false;
 80018fe:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <StartTask_Pump+0xbc>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
          memset(timer_hydarulic, 0, sizeof(timer_hydarulic));  // Reset timer
 8001904:	2210      	movs	r2, #16
 8001906:	2100      	movs	r1, #0
 8001908:	4820      	ldr	r0, [pc, #128]	@ (800198c <StartTask_Pump+0xc0>)
 800190a:	f007 fb0d 	bl	8008f28 <memset>
          memset(stepDone, 0, sizeof(stepDone));  // Reset cờ chạy auto
 800190e:	2204      	movs	r2, #4
 8001910:	2100      	movs	r1, #0
 8001912:	481f      	ldr	r0, [pc, #124]	@ (8001990 <StartTask_Pump+0xc4>)
 8001914:	f007 fb08 	bl	8008f28 <memset>
          continue;
 8001918:	e02d      	b.n	8001976 <StartTask_Pump+0xaa>
          osDelay(200);

      }

      mode = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10) == GPIO_PIN_SET ? true : false;
 800191a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800191e:	481d      	ldr	r0, [pc, #116]	@ (8001994 <StartTask_Pump+0xc8>)
 8001920:	f003 fb42 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	bf0c      	ite	eq
 800192a:	2301      	moveq	r3, #1
 800192c:	2300      	movne	r3, #0
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <StartTask_Pump+0xcc>)
 8001932:	701a      	strb	r2, [r3, #0]

      if (mode) {
 8001934:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <StartTask_Pump+0xcc>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <StartTask_Pump+0x76>
          autoMode();
 800193c:	f7ff fae2 	bl	8000f04 <autoMode>
 8001940:	e00b      	b.n	800195a <StartTask_Pump+0x8e>
      } else {
          manualMode();
 8001942:	f7ff fa9d 	bl	8000e80 <manualMode>
          memset(timer_hydarulic, 0, sizeof(timer_hydarulic));  // Reset timer chế độ auto
 8001946:	2210      	movs	r2, #16
 8001948:	2100      	movs	r1, #0
 800194a:	4810      	ldr	r0, [pc, #64]	@ (800198c <StartTask_Pump+0xc0>)
 800194c:	f007 faec 	bl	8008f28 <memset>
          memset(stepDone, 0, sizeof(stepDone));  // Reset cờ chạy auto
 8001950:	2204      	movs	r2, #4
 8001952:	2100      	movs	r1, #0
 8001954:	480e      	ldr	r0, [pc, #56]	@ (8001990 <StartTask_Pump+0xc4>)
 8001956:	f007 fae7 	bl	8008f28 <memset>
      }

      performAction(buttonPressCount, modeLift);
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <StartTask_Pump+0xb4>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <StartTask_Pump+0xbc>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f7ff fc1c 	bl	80011a8 <performAction>
      osDelay(1);
 8001970:	2001      	movs	r0, #1
 8001972:	f004 fe21 	bl	80065b8 <osDelay>
	  readGPIOInputs();
 8001976:	e7ad      	b.n	80018d4 <StartTask_Pump+0x8>
 8001978:	40020000 	.word	0x40020000
 800197c:	08009000 	.word	0x08009000
 8001980:	200000fc 	.word	0x200000fc
 8001984:	200000fe 	.word	0x200000fe
 8001988:	200000fd 	.word	0x200000fd
 800198c:	20000110 	.word	0x20000110
 8001990:	20000104 	.word	0x20000104
 8001994:	40021400 	.word	0x40021400
 8001998:	20000108 	.word	0x20000108
 800199c:	00000000 	.word	0x00000000

080019a0 <StartTask_Motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Motor */
void StartTask_Motor(void *argument)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Motor */
	SDOProfileAcc(speedToRps(0.25), MotorID[0]);
 80019a8:	ed9f 0b37 	vldr	d0, [pc, #220]	@ 8001a88 <StartTask_Motor+0xe8>
 80019ac:	f001 faa2 	bl	8002ef4 <speedToRps>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa0 <StartTask_Motor+0x100>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4619      	mov	r1, r3
 80019b8:	4610      	mov	r0, r2
 80019ba:	f000 ff2f 	bl	800281c <SDOProfileAcc>
	SDOProfileDec(speedToRps(0.3), MotorID[0]);
 80019be:	ed9f 0b34 	vldr	d0, [pc, #208]	@ 8001a90 <StartTask_Motor+0xf0>
 80019c2:	f001 fa97 	bl	8002ef4 <speedToRps>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b35      	ldr	r3, [pc, #212]	@ (8001aa0 <StartTask_Motor+0x100>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f000 ffd0 	bl	8002974 <SDOProfileDec>
	Can_Write(&canOpen, TX_ENABLE, DATA_BYTE_8);
 80019d4:	2208      	movs	r2, #8
 80019d6:	4933      	ldr	r1, [pc, #204]	@ (8001aa4 <StartTask_Motor+0x104>)
 80019d8:	4833      	ldr	r0, [pc, #204]	@ (8001aa8 <StartTask_Motor+0x108>)
 80019da:	f000 fb63 	bl	80020a4 <Can_Write>
	SetControlWord(ControlWord_EN, MotorID[0]); // enable motor
 80019de:	4b30      	ldr	r3, [pc, #192]	@ (8001aa0 <StartTask_Motor+0x100>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4619      	mov	r1, r3
 80019e4:	200f      	movs	r0, #15
 80019e6:	f000 fec9 	bl	800277c <SetControlWord>
  {
		static int dir = 0;
		static double target_speed = 0;

		// Đọc trạng thái nút nhấn
		bool forward_pressed = (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_RESET);
 80019ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ee:	482f      	ldr	r0, [pc, #188]	@ (8001aac <StartTask_Motor+0x10c>)
 80019f0:	f003 fada 	bl	8004fa8 <HAL_GPIO_ReadPin>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bf0c      	ite	eq
 80019fa:	2301      	moveq	r3, #1
 80019fc:	2300      	movne	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
		bool reverse_pressed = (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_RESET);
 8001a00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a04:	4829      	ldr	r0, [pc, #164]	@ (8001aac <StartTask_Motor+0x10c>)
 8001a06:	f003 facf 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf0c      	ite	eq
 8001a10:	2301      	moveq	r3, #1
 8001a12:	2300      	movne	r3, #0
 8001a14:	73bb      	strb	r3, [r7, #14]

		if (forward_pressed) {
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d009      	beq.n	8001a30 <StartTask_Motor+0x90>
			dir = 1;
 8001a1c:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <StartTask_Motor+0x110>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
			target_speed = 0.3;
 8001a22:	4924      	ldr	r1, [pc, #144]	@ (8001ab4 <StartTask_Motor+0x114>)
 8001a24:	a31a      	add	r3, pc, #104	@ (adr r3, 8001a90 <StartTask_Motor+0xf0>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	e9c1 2300 	strd	r2, r3, [r1]
 8001a2e:	e013      	b.n	8001a58 <StartTask_Motor+0xb8>
		} else if (reverse_pressed) {
 8001a30:	7bbb      	ldrb	r3, [r7, #14]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d009      	beq.n	8001a4a <StartTask_Motor+0xaa>
			dir = 0;
 8001a36:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <StartTask_Motor+0x110>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
			target_speed = -0.3;
 8001a3c:	491d      	ldr	r1, [pc, #116]	@ (8001ab4 <StartTask_Motor+0x114>)
 8001a3e:	a316      	add	r3, pc, #88	@ (adr r3, 8001a98 <StartTask_Motor+0xf8>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	e9c1 2300 	strd	r2, r3, [r1]
 8001a48:	e006      	b.n	8001a58 <StartTask_Motor+0xb8>
		} else {
			target_speed = 0; // Dừng động cơ nếu không nhấn nút nào
 8001a4a:	491a      	ldr	r1, [pc, #104]	@ (8001ab4 <StartTask_Motor+0x114>)
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9c1 2300 	strd	r2, r3, [r1]
		}

		bool m_error = false;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	737b      	strb	r3, [r7, #13]
		motorControl(true, m_error, dir, target_speed);
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <StartTask_Motor+0x110>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <StartTask_Motor+0x114>)
 8001a64:	ed93 7b00 	vldr	d7, [r3]
 8001a68:	7b7b      	ldrb	r3, [r7, #13]
 8001a6a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a6e:	eef0 0a67 	vmov.f32	s1, s15
 8001a72:	4619      	mov	r1, r3
 8001a74:	2001      	movs	r0, #1
 8001a76:	f001 f96f 	bl	8002d58 <motorControl>
		osDelay(50);
 8001a7a:	2032      	movs	r0, #50	@ 0x32
 8001a7c:	f004 fd9c 	bl	80065b8 <osDelay>
  {
 8001a80:	e7b3      	b.n	80019ea <StartTask_Motor+0x4a>
 8001a82:	bf00      	nop
 8001a84:	f3af 8000 	nop.w
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	3fd00000 	.word	0x3fd00000
 8001a90:	33333333 	.word	0x33333333
 8001a94:	3fd33333 	.word	0x3fd33333
 8001a98:	33333333 	.word	0x33333333
 8001a9c:	bfd33333 	.word	0xbfd33333
 8001aa0:	20000030 	.word	0x20000030
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	2000007c 	.word	0x2000007c
 8001aac:	40021400 	.word	0x40021400
 8001ab0:	200002e0 	.word	0x200002e0
 8001ab4:	200002e8 	.word	0x200002e8

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <Error_Handler+0x8>

08001ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_MspInit+0x54>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <HAL_MspInit+0x54>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <HAL_MspInit+0x54>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <HAL_MspInit+0x54>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <HAL_MspInit+0x54>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af6:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <HAL_MspInit+0x54>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	210f      	movs	r1, #15
 8001b06:	f06f 0001 	mvn.w	r0, #1
 8001b0a:	f002 fd90 	bl	800462e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a33      	ldr	r2, [pc, #204]	@ (8001c08 <HAL_ADC_MspInit+0xec>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d15f      	bne.n	8001bfe <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b32      	ldr	r3, [pc, #200]	@ (8001c0c <HAL_ADC_MspInit+0xf0>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	4a31      	ldr	r2, [pc, #196]	@ (8001c0c <HAL_ADC_MspInit+0xf0>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <HAL_ADC_MspInit+0xf0>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <HAL_ADC_MspInit+0xf0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a2a      	ldr	r2, [pc, #168]	@ (8001c0c <HAL_ADC_MspInit+0xf0>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <HAL_ADC_MspInit+0xf0>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b76:	2308      	movs	r3, #8
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4821      	ldr	r0, [pc, #132]	@ (8001c10 <HAL_ADC_MspInit+0xf4>)
 8001b8a:	f003 f871 	bl	8004c70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001b90:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <HAL_ADC_MspInit+0xfc>)
 8001b92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b94:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001ba8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bae:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bb6:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001bb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001bc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bd2:	4810      	ldr	r0, [pc, #64]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001bd4:	f002 fd62 	bl	800469c <HAL_DMA_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001bde:	f7ff ff6b 	bl	8001ab8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001be6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001be8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <HAL_ADC_MspInit+0xf8>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	2012      	movs	r0, #18
 8001bf4:	f002 fd1b 	bl	800462e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001bf8:	2012      	movs	r0, #18
 8001bfa:	f002 fd34 	bl	8004666 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	@ 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40012000 	.word	0x40012000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	20000180 	.word	0x20000180
 8001c18:	40026410 	.word	0x40026410

08001c1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	@ 0x30
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a4a      	ldr	r2, [pc, #296]	@ (8001d64 <HAL_CAN_MspInit+0x148>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d13d      	bne.n	8001cba <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d68 <HAL_CAN_MspInit+0x14c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a48      	ldr	r2, [pc, #288]	@ (8001d68 <HAL_CAN_MspInit+0x14c>)
 8001c46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c48:	4b47      	ldr	r3, [pc, #284]	@ (8001d68 <HAL_CAN_MspInit+0x14c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d10d      	bne.n	8001c6c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	4b45      	ldr	r3, [pc, #276]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c58:	4a44      	ldr	r2, [pc, #272]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001c5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c60:	4b42      	ldr	r3, [pc, #264]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	4b3e      	ldr	r3, [pc, #248]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	4a3d      	ldr	r2, [pc, #244]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001c76:	f043 0308 	orr.w	r3, r3, #8
 8001c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c98:	2309      	movs	r3, #9
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4833      	ldr	r0, [pc, #204]	@ (8001d70 <HAL_CAN_MspInit+0x154>)
 8001ca4:	f002 ffe4 	bl	8004c70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2105      	movs	r1, #5
 8001cac:	2014      	movs	r0, #20
 8001cae:	f002 fcbe 	bl	800462e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001cb2:	2014      	movs	r0, #20
 8001cb4:	f002 fcd7 	bl	8004666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001cb8:	e050      	b.n	8001d5c <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001d74 <HAL_CAN_MspInit+0x158>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d14b      	bne.n	8001d5c <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	4a27      	ldr	r2, [pc, #156]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001cce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd4:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001ce0:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <HAL_CAN_MspInit+0x14c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4a20      	ldr	r2, [pc, #128]	@ (8001d68 <HAL_CAN_MspInit+0x14c>)
 8001ce8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cea:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <HAL_CAN_MspInit+0x14c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10d      	bne.n	8001d0e <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001cfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	4a15      	ldr	r2, [pc, #84]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <HAL_CAN_MspInit+0x150>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d2a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001d3c:	2309      	movs	r3, #9
 8001d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	480c      	ldr	r0, [pc, #48]	@ (8001d78 <HAL_CAN_MspInit+0x15c>)
 8001d48:	f002 ff92 	bl	8004c70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2105      	movs	r1, #5
 8001d50:	2040      	movs	r0, #64	@ 0x40
 8001d52:	f002 fc6c 	bl	800462e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001d56:	2040      	movs	r0, #64	@ 0x40
 8001d58:	f002 fc85 	bl	8004666 <HAL_NVIC_EnableIRQ>
}
 8001d5c:	bf00      	nop
 8001d5e:	3730      	adds	r7, #48	@ 0x30
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40006400 	.word	0x40006400
 8001d68:	200002f0 	.word	0x200002f0
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020c00 	.word	0x40020c00
 8001d74:	40006800 	.word	0x40006800
 8001d78:	40020400 	.word	0x40020400

08001d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	@ 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a28      	ldr	r2, [pc, #160]	@ (8001e3c <HAL_SPI_MspInit+0xc0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d149      	bne.n	8001e32 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b27      	ldr	r3, [pc, #156]	@ (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	4a26      	ldr	r2, [pc, #152]	@ (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001da8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dae:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b20      	ldr	r3, [pc, #128]	@ (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a18      	ldr	r2, [pc, #96]	@ (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <HAL_SPI_MspInit+0xc4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001df2:	2320      	movs	r3, #32
 8001df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e02:	2305      	movs	r3, #5
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480d      	ldr	r0, [pc, #52]	@ (8001e44 <HAL_SPI_MspInit+0xc8>)
 8001e0e:	f002 ff2f 	bl	8004c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e12:	2320      	movs	r3, #32
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e22:	2305      	movs	r3, #5
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <HAL_SPI_MspInit+0xcc>)
 8001e2e:	f002 ff1f 	bl	8004c70 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	@ 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40013000 	.word	0x40013000
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400

08001e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_UART_MspInit+0x84>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d12c      	bne.n	8001ec8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <HAL_UART_MspInit+0x88>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	4a17      	ldr	r2, [pc, #92]	@ (8001ed4 <HAL_UART_MspInit+0x88>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_UART_MspInit+0x88>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_UART_MspInit+0x88>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a10      	ldr	r2, [pc, #64]	@ (8001ed4 <HAL_UART_MspInit+0x88>)
 8001e94:	f043 0308 	orr.w	r3, r3, #8
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <HAL_UART_MspInit+0x88>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ea6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eb8:	2307      	movs	r3, #7
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	@ (8001ed8 <HAL_UART_MspInit+0x8c>)
 8001ec4:	f002 fed4 	bl	8004c70 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001ec8:	bf00      	nop
 8001eca:	3728      	adds	r7, #40	@ 0x28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40004800 	.word	0x40004800
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020c00 	.word	0x40020c00

08001edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <NMI_Handler+0x4>

08001ee4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <HardFault_Handler+0x4>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <BusFault_Handler+0x4>

08001efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <UsageFault_Handler+0x4>

08001f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f16:	f001 f88d 	bl	8003034 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f1a:	f005 ff75 	bl	8007e08 <xTaskGetSchedulerState>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d001      	beq.n	8001f28 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f24:	f006 fd70 	bl	8008a08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <ADC_IRQHandler+0x10>)
 8001f32:	f001 f8e2 	bl	80030fa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000138 	.word	0x20000138

08001f40 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <CAN1_RX0_IRQHandler+0x10>)
 8001f46:	f002 f867 	bl	8004018 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200001e0 	.word	0x200001e0

08001f54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <DMA2_Stream0_IRQHandler+0x10>)
 8001f5a:	f002 fc4d 	bl	80047f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000180 	.word	0x20000180

08001f68 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001f6c:	4802      	ldr	r0, [pc, #8]	@ (8001f78 <CAN2_RX0_IRQHandler+0x10>)
 8001f6e:	f002 f853 	bl	8004018 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000208 	.word	0x20000208

08001f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f80:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <SystemInit+0x20>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f86:	4a05      	ldr	r2, [pc, #20]	@ (8001f9c <SystemInit+0x20>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa4:	480d      	ldr	r0, [pc, #52]	@ (8001fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fa6:	490e      	ldr	r1, [pc, #56]	@ (8001fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fbc:	4c0b      	ldr	r4, [pc, #44]	@ (8001fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fca:	f7ff ffd7 	bl	8001f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fce:	f006 ffb3 	bl	8008f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd2:	f7ff f953 	bl	800127c <main>
  bx  lr    
 8001fd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001fe4:	080090a0 	.word	0x080090a0
  ldr r2, =_sbss
 8001fe8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001fec:	20004cf0 	.word	0x20004cf0

08001ff0 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <CAN1_RX1_IRQHandler>
	...

08001ff4 <Can_begin>:
CAN_COM* Can_communication1;
CAN_COM* Can_communication2;
void (*rxDataITcallback)() = NULL;

void Can_begin(CAN_COM* canhandle, CAN_HandleTypeDef* Handle, uint8_t Idmode)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	4613      	mov	r3, r2
 8002000:	71fb      	strb	r3, [r7, #7]
	canhandle->CanHandle = Handle;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	629a      	str	r2, [r3, #40]	@ 0x28
	canhandle->IDMode = Idmode;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	79fa      	ldrb	r2, [r7, #7]
 800200c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	if(Handle == &hcan1)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4a08      	ldr	r2, [pc, #32]	@ (8002034 <Can_begin+0x40>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d103      	bne.n	8002020 <Can_begin+0x2c>
	Can_communication1 = canhandle;
 8002018:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <Can_begin+0x44>)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6013      	str	r3, [r2, #0]
	else
		Can_communication2 = canhandle;
}
 800201e:	e002      	b.n	8002026 <Can_begin+0x32>
		Can_communication2 = canhandle;
 8002020:	4a06      	ldr	r2, [pc, #24]	@ (800203c <Can_begin+0x48>)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6013      	str	r3, [r2, #0]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	200001e0 	.word	0x200001e0
 8002038:	200002f4 	.word	0x200002f4
 800203c:	200002f8 	.word	0x200002f8

08002040 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d10f      	bne.n	8002070 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	{
	HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication1->Can_rxHeader, Can_communication1->Can_rxData);
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8002058:	4b10      	ldr	r3, [pc, #64]	@ (800209c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3364      	adds	r3, #100	@ 0x64
 800205e:	2100      	movs	r1, #0
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f001 fe91 	bl	8003d88 <HAL_CAN_GetRxMessage>
	Can_communication1->CanRxIT_Callback();
 8002066:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800206c:	4798      	blx	r3
	} else
	{
		HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication2->Can_rxHeader, Can_communication2->Can_rxData);
		Can_communication2->CanRxIT_Callback();
	}
}
 800206e:	e00e      	b.n	800208e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication2->Can_rxHeader, Can_communication2->Can_rxData);
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3364      	adds	r3, #100	@ 0x64
 800207e:	2100      	movs	r1, #0
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f001 fe81 	bl	8003d88 <HAL_CAN_GetRxMessage>
		Can_communication2->CanRxIT_Callback();
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800208c:	4798      	blx	r3
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200001e0 	.word	0x200001e0
 800209c:	200002f4 	.word	0x200002f4
 80020a0:	200002f8 	.word	0x200002f8

080020a4 <Can_Write>:
void Can_Write(CAN_COM* canhandle, uint8_t* data, size_t size)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
		canhandle->Can_txHeader.DLC = size;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	63da      	str	r2, [r3, #60]	@ 0x3c
		if(HAL_CAN_AddTxMessage(canhandle->CanHandle, &canhandle->Can_txHeader, data, &canhandle->tx_mailBox) != HAL_OK)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3370      	adds	r3, #112	@ 0x70
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	f001 fd8f 	bl	8003be8 <HAL_CAN_AddTxMessage>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <Can_Write+0x30>
		{
			Error_Handler();
 80020d0:	f7ff fcf2 	bl	8001ab8 <Error_Handler>
		}
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <CanCofigfilter>:
#endif

/* CONFIG FILLTER */
void CanCofigfilter(CAN_COM* canhandle, uint32_t FilterHigh , uint32_t FilterLow)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
	if(HAL_FDCAN_ConfigFilter(canhandle->CanHandle, &canhandle->CanfilterTypedef) != HAL_OK)
	{
		Error_Handler();
	}
#else
		canhandle->CanfilterTypedef.FilterActivation = CAN_FILTER_ENABLE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2201      	movs	r2, #1
 80020ec:	621a      	str	r2, [r3, #32]
		canhandle->CanfilterTypedef.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
		canhandle->CanfilterTypedef.FilterIdHigh = FilterHigh;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	601a      	str	r2, [r3, #0]
		canhandle->CanfilterTypedef.FilterIdLow = FilterLow;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	605a      	str	r2, [r3, #4]
		canhandle->CanfilterTypedef.FilterMaskIdHigh = FilterHigh;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	609a      	str	r2, [r3, #8]
		canhandle->CanfilterTypedef.FilterMaskIdLow = FilterLow;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	60da      	str	r2, [r3, #12]
		canhandle->CanfilterTypedef.FilterMode = CAN_FILTERMODE_IDMASK;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
		canhandle->CanfilterTypedef.FilterScale = CAN_FILTERSCALE_32BIT;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	61da      	str	r2, [r3, #28]
		if(canhandle->CanHandle == &hcan1)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	4a09      	ldr	r2, [pc, #36]	@ (8002144 <CanCofigfilter+0x68>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d105      	bne.n	800212e <CanCofigfilter+0x52>
		{
			canhandle->CanfilterTypedef.FilterBank = 0; // which filter bank to use from the assigned ones
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
			canhandle->CanfilterTypedef.SlaveStartFilterBank = 13;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	220d      	movs	r2, #13
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24
		}
		HAL_CAN_ConfigFilter(canhandle->CanHandle, &canhandle->CanfilterTypedef);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f001 fc32 	bl	80039a0 <HAL_CAN_ConfigFilter>
#endif
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200001e0 	.word	0x200001e0

08002148 <Can_Start>:

/*  CONFIG DATA TRANSMIT*/
void Can_Start(CAN_COM* canhandle, uint32_t CanID)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
	  canhandle->TxHeader.FDFormat = FDCAN_FD_CAN;
	  canhandle->TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	  canhandle->TxHeader.MessageMarker = 0;
#else

	canhandle->Can_id =  CanID;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	675a      	str	r2, [r3, #116]	@ 0x74
	HAL_CAN_Start(canhandle->CanHandle);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215c:	4618      	mov	r0, r3
 800215e:	f001 fcff 	bl	8003b60 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(canhandle->CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	2102      	movs	r1, #2
 8002168:	4618      	mov	r0, r3
 800216a:	f001 ff2f 	bl	8003fcc <HAL_CAN_ActivateNotification>
	canhandle->Can_txHeader.DLC = 3;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2203      	movs	r2, #3
 8002172:	63da      	str	r2, [r3, #60]	@ 0x3c
	canhandle->Can_txHeader.RTR = CAN_RTR_DATA;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	639a      	str	r2, [r3, #56]	@ 0x38
	if(canhandle->IDMode)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <Can_Start+0x4c>
	{
		canhandle->Can_txHeader.IDE = CAN_ID_EXT;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2204      	movs	r2, #4
 8002188:	635a      	str	r2, [r3, #52]	@ 0x34
		canhandle->Can_txHeader.ExtId = canhandle->Can_id;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	631a      	str	r2, [r3, #48]	@ 0x30
	{
		canhandle->Can_txHeader.IDE = CAN_ID_STD;
		canhandle->Can_txHeader.StdId = canhandle->Can_id;
	}
#endif
}
 8002192:	e006      	b.n	80021a2 <Can_Start+0x5a>
		canhandle->Can_txHeader.IDE = CAN_ID_STD;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	635a      	str	r2, [r3, #52]	@ 0x34
		canhandle->Can_txHeader.StdId = canhandle->Can_id;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <DAC_begin>:

#define ADC0_5V
mcp4922_pin spiPinDAC ;

void DAC_begin (SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
	spiPinDAC._hspi = hspi ;
 80021ba:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <DAC_begin+0x2c>)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6093      	str	r3, [r2, #8]
	spiPinDAC.GPIO_p = GPIOx;
 80021c0:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <DAC_begin+0x2c>)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	6013      	str	r3, [r2, #0]
	spiPinDAC.GPIO_pin = GPIO_Pin;
 80021c6:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <DAC_begin+0x2c>)
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	8093      	strh	r3, [r2, #4]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	200002fc 	.word	0x200002fc

080021dc <highByte>:
bit 11 down to bit 0

 */
//************************************************************************

uint8_t highByte(uint16_t value) {
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  return (uint8_t)(value >> 8);
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LowByte>:
uint8_t LowByte(uint16_t value) {
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	80fb      	strh	r3, [r7, #6]
  return (uint8_t)(value & 0xFF);
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	b2db      	uxtb	r3, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <sendIntValueSPI>:

void sendIntValueSPI(int A ,int B) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
int channelA = A | 0b0111000000000000;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8002224:	617b      	str	r3, [r7, #20]
int channelB = B | 0b1111000000000000;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 800222c:	613b      	str	r3, [r7, #16]
uint8_t hightByteA = highByte(channelA);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	b29b      	uxth	r3, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ffd2 	bl	80021dc <highByte>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]
uint8_t lowByteA = LowByte(channelA);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ffda 	bl	80021fa <LowByte>
 8002246:	4603      	mov	r3, r0
 8002248:	73bb      	strb	r3, [r7, #14]
uint8_t hightByteB = highByte(channelB);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	b29b      	uxth	r3, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff ffc4 	bl	80021dc <highByte>
 8002254:	4603      	mov	r3, r0
 8002256:	737b      	strb	r3, [r7, #13]
uint8_t lowByteB = LowByte(channelB);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	b29b      	uxth	r3, r3
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ffcc 	bl	80021fa <LowByte>
 8002262:	4603      	mov	r3, r0
 8002264:	733b      	strb	r3, [r7, #12]
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_RESET);
 8002266:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <sendIntValueSPI+0xe0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a22      	ldr	r2, [pc, #136]	@ (80022f4 <sendIntValueSPI+0xe0>)
 800226c:	8891      	ldrh	r1, [r2, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f002 feb1 	bl	8004fd8 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(spiPinDAC._hspi, &hightByteA,sizeof(hightByteA), 100);
 8002276:	4b1f      	ldr	r3, [pc, #124]	@ (80022f4 <sendIntValueSPI+0xe0>)
 8002278:	6898      	ldr	r0, [r3, #8]
 800227a:	f107 010f 	add.w	r1, r7, #15
 800227e:	2364      	movs	r3, #100	@ 0x64
 8002280:	2201      	movs	r2, #1
 8002282:	f003 fba4 	bl	80059ce <HAL_SPI_Transmit>
HAL_SPI_Transmit(spiPinDAC._hspi, &lowByteA,sizeof(lowByteA), 100);
 8002286:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <sendIntValueSPI+0xe0>)
 8002288:	6898      	ldr	r0, [r3, #8]
 800228a:	f107 010e 	add.w	r1, r7, #14
 800228e:	2364      	movs	r3, #100	@ 0x64
 8002290:	2201      	movs	r2, #1
 8002292:	f003 fb9c 	bl	80059ce <HAL_SPI_Transmit>
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_SET);
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <sendIntValueSPI+0xe0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a16      	ldr	r2, [pc, #88]	@ (80022f4 <sendIntValueSPI+0xe0>)
 800229c:	8891      	ldrh	r1, [r2, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fe99 	bl	8004fd8 <HAL_GPIO_WritePin>
__asm__("nop\n\t");
 80022a6:	bf00      	nop
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_RESET);
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <sendIntValueSPI+0xe0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a11      	ldr	r2, [pc, #68]	@ (80022f4 <sendIntValueSPI+0xe0>)
 80022ae:	8891      	ldrh	r1, [r2, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 fe90 	bl	8004fd8 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(spiPinDAC._hspi, &hightByteB, sizeof(hightByteB), 100);
 80022b8:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <sendIntValueSPI+0xe0>)
 80022ba:	6898      	ldr	r0, [r3, #8]
 80022bc:	f107 010d 	add.w	r1, r7, #13
 80022c0:	2364      	movs	r3, #100	@ 0x64
 80022c2:	2201      	movs	r2, #1
 80022c4:	f003 fb83 	bl	80059ce <HAL_SPI_Transmit>
HAL_SPI_Transmit(spiPinDAC._hspi, &lowByteB,sizeof(lowByteB), 100);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <sendIntValueSPI+0xe0>)
 80022ca:	6898      	ldr	r0, [r3, #8]
 80022cc:	f107 010c 	add.w	r1, r7, #12
 80022d0:	2364      	movs	r3, #100	@ 0x64
 80022d2:	2201      	movs	r2, #1
 80022d4:	f003 fb7b 	bl	80059ce <HAL_SPI_Transmit>
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_SET);
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <sendIntValueSPI+0xe0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a05      	ldr	r2, [pc, #20]	@ (80022f4 <sendIntValueSPI+0xe0>)
 80022de:	8891      	ldrh	r1, [r2, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 fe78 	bl	8004fd8 <HAL_GPIO_WritePin>
__asm__("nop\n\t");
 80022e8:	bf00      	nop
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200002fc 	.word	0x200002fc

080022f8 <SetDAC>:

void SetDAC(uint16_t channelA, uint16_t channelB) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	460a      	mov	r2, r1
 8002302:	80fb      	strh	r3, [r7, #6]
 8002304:	4613      	mov	r3, r2
 8002306:	80bb      	strh	r3, [r7, #4]
#ifdef ADC0_5V
if(channelA>2048)
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800230e:	d902      	bls.n	8002316 <SetDAC+0x1e>
	{channelA = 2048;}
 8002310:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002314:	80fb      	strh	r3, [r7, #6]
	if(channelB>2048)
 8002316:	88bb      	ldrh	r3, [r7, #4]
 8002318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800231c:	d902      	bls.n	8002324 <SetDAC+0x2c>
	{channelB=2048;}
 800231e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002322:	80bb      	strh	r3, [r7, #4]
#endif
  sendIntValueSPI(channelA,channelB);
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	88ba      	ldrh	r2, [r7, #4]
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff72 	bl	8002214 <sendIntValueSPI>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <setKincoErrorStatus>:
/****************Set id Current Feedback in mode PDO************/
uint32_t CurrentID[MNum] = {0x281, 0x282};
/*********************FunctionCode***********************/
void readParameter();

void setKincoErrorStatus(struct KincoErrorStatus *status, uint16_t value) {
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
    status->Extended_error = value & (1 << 0);
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2da      	uxtb	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	701a      	strb	r2, [r3, #0]
    status->Encoder_connected = value & (1 << 1);
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2da      	uxtb	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	705a      	strb	r2, [r3, #1]
    status->Encoder_internal = value & (1 << 2);
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	bf14      	ite	ne
 8002376:	2301      	movne	r3, #1
 8002378:	2300      	moveq	r3, #0
 800237a:	b2da      	uxtb	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	709a      	strb	r2, [r3, #2]
    status->Encoder_CRC = value & (1 << 3);
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2da      	uxtb	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	70da      	strb	r2, [r3, #3]
    status->Driver_temperature = value & (1 << 4);
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	711a      	strb	r2, [r3, #4]
    status->Over_voltage = value & (1 << 5);
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	715a      	strb	r2, [r3, #5]
    status->Under_voltage = value & (1 << 6);
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bf14      	ite	ne
 80023c6:	2301      	movne	r3, #1
 80023c8:	2300      	moveq	r3, #0
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	719a      	strb	r2, [r3, #6]
    status->Over_current = value & (1 << 7);
 80023d0:	887b      	ldrh	r3, [r7, #2]
 80023d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bf14      	ite	ne
 80023da:	2301      	movne	r3, #1
 80023dc:	2300      	moveq	r3, #0
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	71da      	strb	r2, [r3, #7]
    status->Chop_resistor = value & (1 << 8);
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf14      	ite	ne
 80023ee:	2301      	movne	r3, #1
 80023f0:	2300      	moveq	r3, #0
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	721a      	strb	r2, [r3, #8]
    status->Position_following = value & (1 << 9);
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf14      	ite	ne
 8002402:	2301      	movne	r3, #1
 8002404:	2300      	moveq	r3, #0
 8002406:	b2da      	uxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	725a      	strb	r2, [r3, #9]
    status->Low_logicvoltage = value & (1 << 10);
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2da      	uxtb	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	729a      	strb	r2, [r3, #10]
    status->Motor_or_driver_IIt = value & (1 << 11);
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002426:	2b00      	cmp	r3, #0
 8002428:	bf14      	ite	ne
 800242a:	2301      	movne	r3, #1
 800242c:	2300      	moveq	r3, #0
 800242e:	b2da      	uxtb	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	72da      	strb	r2, [r3, #11]
    status->Over_frequency = value & (1 << 12);
 8002434:	887b      	ldrh	r3, [r7, #2]
 8002436:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2da      	uxtb	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	731a      	strb	r2, [r3, #12]
    status->Motor_temperature = value & (1 << 13);
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800244e:	2b00      	cmp	r3, #0
 8002450:	bf14      	ite	ne
 8002452:	2301      	movne	r3, #1
 8002454:	2300      	moveq	r3, #0
 8002456:	b2da      	uxtb	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	735a      	strb	r2, [r3, #13]
    status->Motor_communication = value & (1 << 14);
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf14      	ite	ne
 8002466:	2301      	movne	r3, #1
 8002468:	2300      	moveq	r3, #0
 800246a:	b2da      	uxtb	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	739a      	strb	r2, [r3, #14]
    status->EEPROM_data = value & (1 << 15);
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2da      	uxtb	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	73da      	strb	r2, [r3, #15]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <MotorIsConnected>:

void MotorIsConnected(uint32_t id)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	if(id == 0x701)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f240 7201 	movw	r2, #1793	@ 0x701
 800249e:	4293      	cmp	r3, r2
 80024a0:	d103      	bne.n	80024aa <MotorIsConnected+0x1a>
	{
		Kincoparam[0].flagMotorConnecting = true ;
 80024a2:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <MotorIsConnected+0x28>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	}
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000348 	.word	0x20000348

080024bc <CanRecieverCallback>:

void CanRecieverCallback()
{
 80024bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c0:	b085      	sub	sp, #20
 80024c2:	af00      	add	r7, sp, #0
	MesRx.Canid = Cankinco->Can_rxHeader.StdId;
 80024c4:	4c68      	ldr	r4, [pc, #416]	@ (8002668 <CanRecieverCallback+0x1ac>)
 80024c6:	6824      	ldr	r4, [r4, #0]
 80024c8:	6c64      	ldr	r4, [r4, #68]	@ 0x44
 80024ca:	4d68      	ldr	r5, [pc, #416]	@ (800266c <CanRecieverCallback+0x1b0>)
 80024cc:	602c      	str	r4, [r5, #0]
	memcpy(MesRx.mes, Cankinco->Can_rxData,8);
 80024ce:	4c66      	ldr	r4, [pc, #408]	@ (8002668 <CanRecieverCallback+0x1ac>)
 80024d0:	6824      	ldr	r4, [r4, #0]
 80024d2:	f104 0564 	add.w	r5, r4, #100	@ 0x64
 80024d6:	4c65      	ldr	r4, [pc, #404]	@ (800266c <CanRecieverCallback+0x1b0>)
 80024d8:	340a      	adds	r4, #10
 80024da:	682e      	ldr	r6, [r5, #0]
 80024dc:	686d      	ldr	r5, [r5, #4]
 80024de:	6026      	str	r6, [r4, #0]
 80024e0:	6065      	str	r5, [r4, #4]
	if(MesRx.Canid > 0x180 && MesRx.Canid < 0x280 )
 80024e2:	4c62      	ldr	r4, [pc, #392]	@ (800266c <CanRecieverCallback+0x1b0>)
 80024e4:	6824      	ldr	r4, [r4, #0]
 80024e6:	f5b4 7fc0 	cmp.w	r4, #384	@ 0x180
 80024ea:	d960      	bls.n	80025ae <CanRecieverCallback+0xf2>
 80024ec:	4c5f      	ldr	r4, [pc, #380]	@ (800266c <CanRecieverCallback+0x1b0>)
 80024ee:	6824      	ldr	r4, [r4, #0]
 80024f0:	f5b4 7f20 	cmp.w	r4, #640	@ 0x280
 80024f4:	d25b      	bcs.n	80025ae <CanRecieverCallback+0xf2>
	{
		UINT8_TO_INT32(MesRx.mes,3,Kincoparameter.PosActual);
 80024f6:	4c5d      	ldr	r4, [pc, #372]	@ (800266c <CanRecieverCallback+0x1b0>)
 80024f8:	7b64      	ldrb	r4, [r4, #13]
 80024fa:	0625      	lsls	r5, r4, #24
 80024fc:	4c5b      	ldr	r4, [pc, #364]	@ (800266c <CanRecieverCallback+0x1b0>)
 80024fe:	7b24      	ldrb	r4, [r4, #12]
 8002500:	0424      	lsls	r4, r4, #16
 8002502:	4325      	orrs	r5, r4
 8002504:	4c59      	ldr	r4, [pc, #356]	@ (800266c <CanRecieverCallback+0x1b0>)
 8002506:	7ae4      	ldrb	r4, [r4, #11]
 8002508:	0224      	lsls	r4, r4, #8
 800250a:	432c      	orrs	r4, r5
 800250c:	4d57      	ldr	r5, [pc, #348]	@ (800266c <CanRecieverCallback+0x1b0>)
 800250e:	7aad      	ldrb	r5, [r5, #10]
 8002510:	432c      	orrs	r4, r5
 8002512:	4d57      	ldr	r5, [pc, #348]	@ (8002670 <CanRecieverCallback+0x1b4>)
 8002514:	61ac      	str	r4, [r5, #24]
		int32_t tmp;
		UINT8_TO_INT32(MesRx.mes,7,tmp);
 8002516:	4c55      	ldr	r4, [pc, #340]	@ (800266c <CanRecieverCallback+0x1b0>)
 8002518:	7c64      	ldrb	r4, [r4, #17]
 800251a:	0625      	lsls	r5, r4, #24
 800251c:	4c53      	ldr	r4, [pc, #332]	@ (800266c <CanRecieverCallback+0x1b0>)
 800251e:	7c24      	ldrb	r4, [r4, #16]
 8002520:	0424      	lsls	r4, r4, #16
 8002522:	4325      	orrs	r5, r4
 8002524:	4c51      	ldr	r4, [pc, #324]	@ (800266c <CanRecieverCallback+0x1b0>)
 8002526:	7be4      	ldrb	r4, [r4, #15]
 8002528:	0224      	lsls	r4, r4, #8
 800252a:	432c      	orrs	r4, r5
 800252c:	4d4f      	ldr	r5, [pc, #316]	@ (800266c <CanRecieverCallback+0x1b0>)
 800252e:	7bad      	ldrb	r5, [r5, #14]
 8002530:	432c      	orrs	r4, r5
 8002532:	60bc      	str	r4, [r7, #8]
		Kincoparameter.SpeedReal = DEC_TO_RPM(tmp) ;
 8002534:	68bc      	ldr	r4, [r7, #8]
 8002536:	17e5      	asrs	r5, r4, #31
 8002538:	46a0      	mov	r8, r4
 800253a:	46a9      	mov	r9, r5
 800253c:	4644      	mov	r4, r8
 800253e:	464d      	mov	r5, r9
 8002540:	f04f 0a00 	mov.w	sl, #0
 8002544:	f04f 0b00 	mov.w	fp, #0
 8002548:	ea4f 1b45 	mov.w	fp, r5, lsl #5
 800254c:	ea4b 6bd4 	orr.w	fp, fp, r4, lsr #27
 8002550:	ea4f 1a44 	mov.w	sl, r4, lsl #5
 8002554:	4654      	mov	r4, sl
 8002556:	465d      	mov	r5, fp
 8002558:	ebb4 0208 	subs.w	r2, r4, r8
 800255c:	eb65 0309 	sbc.w	r3, r5, r9
 8002560:	f04f 0400 	mov.w	r4, #0
 8002564:	f04f 0500 	mov.w	r5, #0
 8002568:	009d      	lsls	r5, r3, #2
 800256a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800256e:	0094      	lsls	r4, r2, #2
 8002570:	4622      	mov	r2, r4
 8002572:	462b      	mov	r3, r5
 8002574:	eb12 0008 	adds.w	r0, r2, r8
 8002578:	eb43 0109 	adc.w	r1, r3, r9
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	010b      	lsls	r3, r1, #4
 8002586:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800258a:	0102      	lsls	r2, r0, #4
 800258c:	1a14      	subs	r4, r2, r0
 800258e:	603c      	str	r4, [r7, #0]
 8002590:	eb63 0301 	sbc.w	r3, r3, r1
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	4a37      	ldr	r2, [pc, #220]	@ (8002674 <CanRecieverCallback+0x1b8>)
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025a0:	f7fe fa0c 	bl	80009bc <__aeabi_ldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <CanRecieverCallback+0x1b4>)
 80025aa:	61da      	str	r2, [r3, #28]
	{
 80025ac:	e055      	b.n	800265a <CanRecieverCallback+0x19e>
	} else if (MesRx.Canid > 0x580 && MesRx.Canid < 0x600)
 80025ae:	4b2f      	ldr	r3, [pc, #188]	@ (800266c <CanRecieverCallback+0x1b0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80025b6:	d91a      	bls.n	80025ee <CanRecieverCallback+0x132>
 80025b8:	4b2c      	ldr	r3, [pc, #176]	@ (800266c <CanRecieverCallback+0x1b0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80025c0:	d215      	bcs.n	80025ee <CanRecieverCallback+0x132>
	{
		for(int x=4; x <8; x++)
 80025c2:	2304      	movs	r3, #4
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e00e      	b.n	80025e6 <CanRecieverCallback+0x12a>
		{
			MesRx.value[x-4] = Cankinco->Can_rxData[x];
 80025c8:	4b27      	ldr	r3, [pc, #156]	@ (8002668 <CanRecieverCallback+0x1ac>)
 80025ca:	6819      	ldr	r1, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3b04      	subs	r3, #4
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	440a      	add	r2, r1
 80025d4:	3264      	adds	r2, #100	@ 0x64
 80025d6:	7811      	ldrb	r1, [r2, #0]
 80025d8:	4a24      	ldr	r2, [pc, #144]	@ (800266c <CanRecieverCallback+0x1b0>)
 80025da:	4413      	add	r3, r2
 80025dc:	460a      	mov	r2, r1
 80025de:	719a      	strb	r2, [r3, #6]
		for(int x=4; x <8; x++)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3301      	adds	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	dded      	ble.n	80025c8 <CanRecieverCallback+0x10c>
 80025ec:	e035      	b.n	800265a <CanRecieverCallback+0x19e>
		}
	} else if (MesRx.Canid > 0x280 && MesRx.Canid < 0x300)
 80025ee:	4b1f      	ldr	r3, [pc, #124]	@ (800266c <CanRecieverCallback+0x1b0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80025f6:	d926      	bls.n	8002646 <CanRecieverCallback+0x18a>
 80025f8:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <CanRecieverCallback+0x1b0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002600:	d221      	bcs.n	8002646 <CanRecieverCallback+0x18a>
	{
		Kincoparameter.flagMotorStarted = true ;
 8002602:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <CanRecieverCallback+0x1b4>)
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		UINT8_TO_INT16(MesRx.mes,1,Kincoparameter.I_q);
 800260a:	4b18      	ldr	r3, [pc, #96]	@ (800266c <CanRecieverCallback+0x1b0>)
 800260c:	7adb      	ldrb	r3, [r3, #11]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	b21a      	sxth	r2, r3
 8002612:	4b16      	ldr	r3, [pc, #88]	@ (800266c <CanRecieverCallback+0x1b0>)
 8002614:	7a9b      	ldrb	r3, [r3, #10]
 8002616:	b21b      	sxth	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	b21a      	sxth	r2, r3
 800261c:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <CanRecieverCallback+0x1b4>)
 800261e:	841a      	strh	r2, [r3, #32]
		UINT8_TO_INT16(MesRx.mes,3,Kincoparameter.Error_code);
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <CanRecieverCallback+0x1b0>)
 8002622:	7b5b      	ldrb	r3, [r3, #13]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	b21a      	sxth	r2, r3
 8002628:	4b10      	ldr	r3, [pc, #64]	@ (800266c <CanRecieverCallback+0x1b0>)
 800262a:	7b1b      	ldrb	r3, [r3, #12]
 800262c:	b21b      	sxth	r3, r3
 800262e:	4313      	orrs	r3, r2
 8002630:	b21b      	sxth	r3, r3
 8002632:	b29a      	uxth	r2, r3
 8002634:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <CanRecieverCallback+0x1b4>)
 8002636:	845a      	strh	r2, [r3, #34]	@ 0x22
		setKincoErrorStatus(&Kincoparameter.Error_status, Kincoparameter.Error_code);
 8002638:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <CanRecieverCallback+0x1b4>)
 800263a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800263c:	4619      	mov	r1, r3
 800263e:	480c      	ldr	r0, [pc, #48]	@ (8002670 <CanRecieverCallback+0x1b4>)
 8002640:	f7ff fe7a 	bl	8002338 <setKincoErrorStatus>
 8002644:	e009      	b.n	800265a <CanRecieverCallback+0x19e>
	}else if (MesRx.Canid > 0x700)
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <CanRecieverCallback+0x1b0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800264e:	d904      	bls.n	800265a <CanRecieverCallback+0x19e>
	{
		MotorIsConnected(MesRx.Canid);
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <CanRecieverCallback+0x1b0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff1b 	bl	8002490 <MotorIsConnected>
	}

	readParameter();
 800265a:	f000 fb07 	bl	8002c6c <readParameter>
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002668:	20000308 	.word	0x20000308
 800266c:	2000030c 	.word	0x2000030c
 8002670:	20000320 	.word	0x20000320
 8002674:	004e2000 	.word	0x004e2000

08002678 <CreateMessage>:
Message_Kinco_Can CreateMessage( uint32_t Res, uint32_t value )
{
 8002678:	b4b0      	push	{r4, r5, r7}
 800267a:	b091      	sub	sp, #68	@ 0x44
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
	uint8_t byteAdd[4];
	uint8_t byteval[4];
	uint8_t mes[8];
	Message_Kinco_Can candata;
	//candata.Canid = motorid ;
	INT_TO_UINT8_ARRAY(Res, byteAdd);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	0e1b      	lsrs	r3, r3, #24
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	INT_TO_UINT8_ARRAY(value, byteval);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0e1b      	lsrs	r3, r3, #24
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0c1b      	lsrs	r3, r3, #16
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t ObjectSubindex = 0x23;
 80026d0:	2323      	movs	r3, #35	@ 0x23
 80026d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	mes[0] = ObjectSubindex;
 80026d6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80026da:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	mes[1] = byteAdd[1];
 80026de:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80026e2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	mes[2] = byteAdd[0];
 80026e6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80026ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	mes[3] = byteAdd[2];
 80026ee:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80026f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	mes[4] = byteval[3];
 80026f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	mes[5] = byteval[2];
 80026fe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002702:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	mes[6] = byteval[1];
 8002706:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800270a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	mes[7] = byteval[0];
 800270e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
//	mes[8] = '\00';
	candata.Res = ((uint16_t)byteAdd[0]<< 8) | byteAdd[1];
 8002716:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	b21a      	sxth	r2, r3
 800271e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002722:	b21b      	sxth	r3, r3
 8002724:	4313      	orrs	r3, r2
 8002726:	b21b      	sxth	r3, r3
 8002728:	b29b      	uxth	r3, r3
 800272a:	833b      	strh	r3, [r7, #24]
	memcpy(candata.mes,mes,8);
 800272c:	f107 021e 	add.w	r2, r7, #30
 8002730:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002734:	cb03      	ldmia	r3!, {r0, r1}
 8002736:	6010      	str	r0, [r2, #0]
 8002738:	6051      	str	r1, [r2, #4]
	for(int x=4; x <8; x++)
 800273a:	2304      	movs	r3, #4
 800273c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800273e:	e00d      	b.n	800275c <CreateMessage+0xe4>
	{
		candata.value[x-4] = mes[x];
 8002740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002742:	3b04      	subs	r3, #4
 8002744:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002748:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800274a:	440a      	add	r2, r1
 800274c:	7812      	ldrb	r2, [r2, #0]
 800274e:	3340      	adds	r3, #64	@ 0x40
 8002750:	443b      	add	r3, r7
 8002752:	f803 2c26 	strb.w	r2, [r3, #-38]
	for(int x=4; x <8; x++)
 8002756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002758:	3301      	adds	r3, #1
 800275a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800275c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800275e:	2b07      	cmp	r3, #7
 8002760:	ddee      	ble.n	8002740 <CreateMessage+0xc8>
	}
	return candata;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	461d      	mov	r5, r3
 8002766:	f107 0414 	add.w	r4, r7, #20
 800276a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	602b      	str	r3, [r5, #0]
}
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	3744      	adds	r7, #68	@ 0x44
 8002776:	46bd      	mov	sp, r7
 8002778:	bcb0      	pop	{r4, r5, r7}
 800277a:	4770      	bx	lr

0800277c <SetControlWord>:

    return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true  ;
}

bool SetControlWord (uint32_t vl, uint32_t id)
{
 800277c:	b5b0      	push	{r4, r5, r7, lr}
 800277e:	b08e      	sub	sp, #56	@ 0x38
 8002780:	af00      	add	r7, sp, #0
 8002782:	61f8      	str	r0, [r7, #28]
 8002784:	61b9      	str	r1, [r7, #24]
	Message_Kinco_Can temp ;
	Cankinco->Can_txHeader.StdId = id ;
 8002786:	4b22      	ldr	r3, [pc, #136]	@ (8002810 <SetControlWord+0x94>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	62da      	str	r2, [r3, #44]	@ 0x2c
	uint16_t timeout = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	86fb      	strh	r3, [r7, #54]	@ 0x36
	temp = CreateMessage(ControlWordRes, vl);
 8002792:	463b      	mov	r3, r7
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	491f      	ldr	r1, [pc, #124]	@ (8002814 <SetControlWord+0x98>)
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff6d 	bl	8002678 <CreateMessage>
 800279e:	f107 0420 	add.w	r4, r7, #32
 80027a2:	463d      	mov	r5, r7
 80027a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	6023      	str	r3, [r4, #0]
	temp.mes[0] = 0x2B;
 80027ac:	232b      	movs	r3, #43	@ 0x2b
 80027ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	do {
		Can_Write(Cankinco, temp.mes, DATA_BYTE_6);
 80027b2:	4b17      	ldr	r3, [pc, #92]	@ (8002810 <SetControlWord+0x94>)
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	f107 0320 	add.w	r3, r7, #32
 80027ba:	330a      	adds	r3, #10
 80027bc:	2206      	movs	r2, #6
 80027be:	4619      	mov	r1, r3
 80027c0:	f7ff fc70 	bl	80020a4 <Can_Write>
		timeout ++ ;
 80027c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027c6:	3301      	adds	r3, #1
 80027c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
		osDelay(100);
 80027ca:	2064      	movs	r0, #100	@ 0x64
 80027cc:	f003 fef4 	bl	80065b8 <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 20);
 80027d0:	f107 0320 	add.w	r3, r7, #32
 80027d4:	3306      	adds	r3, #6
 80027d6:	2204      	movs	r2, #4
 80027d8:	490f      	ldr	r1, [pc, #60]	@ (8002818 <SetControlWord+0x9c>)
 80027da:	4618      	mov	r0, r3
 80027dc:	f006 fb94 	bl	8008f08 <memcmp>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <SetControlWord+0x70>
 80027e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80027e8:	2b13      	cmp	r3, #19
 80027ea:	d9e2      	bls.n	80027b2 <SetControlWord+0x36>

    return memcmp(temp.value, MesRx.value, 4) == 0 ? false :  true ;
 80027ec:	f107 0320 	add.w	r3, r7, #32
 80027f0:	3306      	adds	r3, #6
 80027f2:	2204      	movs	r2, #4
 80027f4:	4908      	ldr	r1, [pc, #32]	@ (8002818 <SetControlWord+0x9c>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f006 fb86 	bl	8008f08 <memcmp>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf14      	ite	ne
 8002802:	2301      	movne	r3, #1
 8002804:	2300      	moveq	r3, #0
 8002806:	b2db      	uxtb	r3, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	3738      	adds	r7, #56	@ 0x38
 800280c:	46bd      	mov	sp, r7
 800280e:	bdb0      	pop	{r4, r5, r7, pc}
 8002810:	20000308 	.word	0x20000308
 8002814:	60400010 	.word	0x60400010
 8002818:	20000312 	.word	0x20000312

0800281c <SDOProfileAcc>:
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
}
bool SDOProfileAcc(int vl, uint32_t id)
{
 800281c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002820:	b097      	sub	sp, #92	@ 0x5c
 8002822:	af00      	add	r7, sp, #0
 8002824:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002826:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	Cankinco->Can_txHeader.StdId = id ;
 8002828:	494e      	ldr	r1, [pc, #312]	@ (8002964 <SDOProfileAcc+0x148>)
 800282a:	6809      	ldr	r1, [r1, #0]
 800282c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800282e:	62c8      	str	r0, [r1, #44]	@ 0x2c
	int64_t dec = RPS_TO_DEC(vl);
 8002830:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002832:	17c8      	asrs	r0, r1, #31
 8002834:	4688      	mov	r8, r1
 8002836:	4681      	mov	r9, r0
 8002838:	e9c7 8902 	strd	r8, r9, [r7, #8]
 800283c:	f04f 0000 	mov.w	r0, #0
 8002840:	f04f 0100 	mov.w	r1, #0
 8002844:	e9c7 0100 	strd	r0, r1, [r7]
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	008e      	lsls	r6, r1, #2
 800284c:	607e      	str	r6, [r7, #4]
 800284e:	687e      	ldr	r6, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8002856:	607e      	str	r6, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	0089      	lsls	r1, r1, #2
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002862:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002866:	4601      	mov	r1, r0
 8002868:	eb11 0408 	adds.w	r4, r1, r8
 800286c:	68f9      	ldr	r1, [r7, #12]
 800286e:	eb41 0509 	adc.w	r5, r1, r9
 8002872:	f04f 0000 	mov.w	r0, #0
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	00e9      	lsls	r1, r5, #3
 800287c:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002880:	00e0      	lsls	r0, r4, #3
 8002882:	4604      	mov	r4, r0
 8002884:	460d      	mov	r5, r1
 8002886:	ebb4 0208 	subs.w	r2, r4, r8
 800288a:	eb65 0309 	sbc.w	r3, r5, r9
 800288e:	f04f 0000 	mov.w	r0, #0
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	0119      	lsls	r1, r3, #4
 8002898:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800289c:	0110      	lsls	r0, r2, #4
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	eb12 0a08 	adds.w	sl, r2, r8
 80028a6:	eb43 0b09 	adc.w	fp, r3, r9
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	ea4f 530b 	mov.w	r3, fp, lsl #20
 80028b6:	ea43 331a 	orr.w	r3, r3, sl, lsr #12
 80028ba:	ea4f 520a 	mov.w	r2, sl, lsl #20
 80028be:	4692      	mov	sl, r2
 80028c0:	469b      	mov	fp, r3
 80028c2:	4650      	mov	r0, sl
 80028c4:	4659      	mov	r1, fp
 80028c6:	4a28      	ldr	r2, [pc, #160]	@ (8002968 <SDOProfileAcc+0x14c>)
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	f7fe f876 	bl	80009bc <__aeabi_ldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(ProfileAccRes, dec);
 80028d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028da:	f107 0310 	add.w	r3, r7, #16
 80028de:	4923      	ldr	r1, [pc, #140]	@ (800296c <SDOProfileAcc+0x150>)
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fec9 	bl	8002678 <CreateMessage>
 80028e6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80028ea:	f107 0510 	add.w	r5, r7, #16
 80028ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f2:	682b      	ldr	r3, [r5, #0]
 80028f4:	6023      	str	r3, [r4, #0]
	uint16_t timeout = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	do {
		Can_Write(Cankinco, temp.mes, DATA_BYTE_8);
 80028fc:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <SDOProfileAcc+0x148>)
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002904:	330a      	adds	r3, #10
 8002906:	2208      	movs	r2, #8
 8002908:	4619      	mov	r1, r3
 800290a:	f7ff fbcb 	bl	80020a4 <Can_Write>
		timeout++;
 800290e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002912:	3301      	adds	r3, #1
 8002914:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		osDelay(20);
 8002918:	2014      	movs	r0, #20
 800291a:	f003 fe4d 	bl	80065b8 <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);
 800291e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002922:	3306      	adds	r3, #6
 8002924:	2204      	movs	r2, #4
 8002926:	4912      	ldr	r1, [pc, #72]	@ (8002970 <SDOProfileAcc+0x154>)
 8002928:	4618      	mov	r0, r3
 800292a:	f006 faed 	bl	8008f08 <memcmp>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <SDOProfileAcc+0x120>
 8002934:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002938:	2b63      	cmp	r3, #99	@ 0x63
 800293a:	d9df      	bls.n	80028fc <SDOProfileAcc+0xe0>

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
 800293c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002940:	3306      	adds	r3, #6
 8002942:	2204      	movs	r2, #4
 8002944:	490a      	ldr	r1, [pc, #40]	@ (8002970 <SDOProfileAcc+0x154>)
 8002946:	4618      	mov	r0, r3
 8002948:	f006 fade 	bl	8008f08 <memcmp>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf14      	ite	ne
 8002952:	2301      	movne	r3, #1
 8002954:	2300      	moveq	r3, #0
 8002956:	b2db      	uxtb	r3, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	375c      	adds	r7, #92	@ 0x5c
 800295c:	46bd      	mov	sp, r7
 800295e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002962:	bf00      	nop
 8002964:	20000308 	.word	0x20000308
 8002968:	003d0900 	.word	0x003d0900
 800296c:	60830020 	.word	0x60830020
 8002970:	20000312 	.word	0x20000312

08002974 <SDOProfileDec>:
bool SDOProfileDec(int vl, uint32_t id)
{
 8002974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002978:	b097      	sub	sp, #92	@ 0x5c
 800297a:	af00      	add	r7, sp, #0
 800297c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800297e:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	Cankinco->Can_txHeader.StdId = id ;
 8002980:	494e      	ldr	r1, [pc, #312]	@ (8002abc <SDOProfileDec+0x148>)
 8002982:	6809      	ldr	r1, [r1, #0]
 8002984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002986:	62c8      	str	r0, [r1, #44]	@ 0x2c
	int64_t dec = RPS_TO_DEC(vl);
 8002988:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800298a:	17c8      	asrs	r0, r1, #31
 800298c:	4688      	mov	r8, r1
 800298e:	4681      	mov	r9, r0
 8002990:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002994:	f04f 0000 	mov.w	r0, #0
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	e9c7 0100 	strd	r0, r1, [r7]
 80029a0:	68f9      	ldr	r1, [r7, #12]
 80029a2:	008e      	lsls	r6, r1, #2
 80029a4:	607e      	str	r6, [r7, #4]
 80029a6:	687e      	ldr	r6, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 80029ae:	607e      	str	r6, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	0089      	lsls	r1, r1, #2
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ba:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80029be:	4601      	mov	r1, r0
 80029c0:	eb11 0408 	adds.w	r4, r1, r8
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	eb41 0509 	adc.w	r5, r1, r9
 80029ca:	f04f 0000 	mov.w	r0, #0
 80029ce:	f04f 0100 	mov.w	r1, #0
 80029d2:	00e9      	lsls	r1, r5, #3
 80029d4:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 80029d8:	00e0      	lsls	r0, r4, #3
 80029da:	4604      	mov	r4, r0
 80029dc:	460d      	mov	r5, r1
 80029de:	ebb4 0208 	subs.w	r2, r4, r8
 80029e2:	eb65 0309 	sbc.w	r3, r5, r9
 80029e6:	f04f 0000 	mov.w	r0, #0
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	0119      	lsls	r1, r3, #4
 80029f0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80029f4:	0110      	lsls	r0, r2, #4
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	eb12 0a08 	adds.w	sl, r2, r8
 80029fe:	eb43 0b09 	adc.w	fp, r3, r9
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	ea4f 530b 	mov.w	r3, fp, lsl #20
 8002a0e:	ea43 331a 	orr.w	r3, r3, sl, lsr #12
 8002a12:	ea4f 520a 	mov.w	r2, sl, lsl #20
 8002a16:	4692      	mov	sl, r2
 8002a18:	469b      	mov	fp, r3
 8002a1a:	4650      	mov	r0, sl
 8002a1c:	4659      	mov	r1, fp
 8002a1e:	4a28      	ldr	r2, [pc, #160]	@ (8002ac0 <SDOProfileDec+0x14c>)
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	f7fd ffca 	bl	80009bc <__aeabi_ldivmod>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(ProfileDecRes, dec);
 8002a30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a32:	f107 0310 	add.w	r3, r7, #16
 8002a36:	4923      	ldr	r1, [pc, #140]	@ (8002ac4 <SDOProfileDec+0x150>)
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fe1d 	bl	8002678 <CreateMessage>
 8002a3e:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002a42:	f107 0510 	add.w	r5, r7, #16
 8002a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a4a:	682b      	ldr	r3, [r5, #0]
 8002a4c:	6023      	str	r3, [r4, #0]
	uint16_t timeout = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	do {
		Can_Write(Cankinco, temp.mes, DATA_BYTE_8);
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <SDOProfileDec+0x148>)
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a5c:	330a      	adds	r3, #10
 8002a5e:	2208      	movs	r2, #8
 8002a60:	4619      	mov	r1, r3
 8002a62:	f7ff fb1f 	bl	80020a4 <Can_Write>
		timeout++;
 8002a66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		osDelay(20);
 8002a70:	2014      	movs	r0, #20
 8002a72:	f003 fda1 	bl	80065b8 <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);
 8002a76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a7a:	3306      	adds	r3, #6
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	4912      	ldr	r1, [pc, #72]	@ (8002ac8 <SDOProfileDec+0x154>)
 8002a80:	4618      	mov	r0, r3
 8002a82:	f006 fa41 	bl	8008f08 <memcmp>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <SDOProfileDec+0x120>
 8002a8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002a90:	2b63      	cmp	r3, #99	@ 0x63
 8002a92:	d9df      	bls.n	8002a54 <SDOProfileDec+0xe0>

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
 8002a94:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a98:	3306      	adds	r3, #6
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	490a      	ldr	r1, [pc, #40]	@ (8002ac8 <SDOProfileDec+0x154>)
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f006 fa32 	bl	8008f08 <memcmp>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3

}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	375c      	adds	r7, #92	@ 0x5c
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aba:	bf00      	nop
 8002abc:	20000308 	.word	0x20000308
 8002ac0:	003d0900 	.word	0x003d0900
 8002ac4:	60840020 	.word	0x60840020
 8002ac8:	20000312 	.word	0x20000312

08002acc <SDOResetErrors>:
bool SDOResetErrors(int vl, uint32_t id)
{
 8002acc:	b5b0      	push	{r4, r5, r7, lr}
 8002ace:	b08e      	sub	sp, #56	@ 0x38
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	61f8      	str	r0, [r7, #28]
 8002ad4:	61b9      	str	r1, [r7, #24]
	Message_Kinco_Can temp ;
	Cankinco->Can_txHeader.StdId = id ;
 8002ad6:	4b22      	ldr	r3, [pc, #136]	@ (8002b60 <SDOResetErrors+0x94>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	62da      	str	r2, [r3, #44]	@ 0x2c
	uint16_t timeout = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	86fb      	strh	r3, [r7, #54]	@ 0x36
	temp = CreateMessage(ResetErrorsRes, vl);
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	463b      	mov	r3, r7
 8002ae6:	491f      	ldr	r1, [pc, #124]	@ (8002b64 <SDOResetErrors+0x98>)
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fdc5 	bl	8002678 <CreateMessage>
 8002aee:	f107 0420 	add.w	r4, r7, #32
 8002af2:	463d      	mov	r5, r7
 8002af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af8:	682b      	ldr	r3, [r5, #0]
 8002afa:	6023      	str	r3, [r4, #0]
	temp.mes[0] = 0x2B;
 8002afc:	232b      	movs	r3, #43	@ 0x2b
 8002afe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	do {
		Can_Write(Cankinco, temp.mes, DATA_BYTE_6);
 8002b02:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <SDOResetErrors+0x94>)
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	f107 0320 	add.w	r3, r7, #32
 8002b0a:	330a      	adds	r3, #10
 8002b0c:	2206      	movs	r2, #6
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7ff fac8 	bl	80020a4 <Can_Write>
		timeout ++ ;
 8002b14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b16:	3301      	adds	r3, #1
 8002b18:	86fb      	strh	r3, [r7, #54]	@ 0x36
		osDelay(100);
 8002b1a:	2064      	movs	r0, #100	@ 0x64
 8002b1c:	f003 fd4c 	bl	80065b8 <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 20);
 8002b20:	f107 0320 	add.w	r3, r7, #32
 8002b24:	3306      	adds	r3, #6
 8002b26:	2204      	movs	r2, #4
 8002b28:	490f      	ldr	r1, [pc, #60]	@ (8002b68 <SDOResetErrors+0x9c>)
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f006 f9ec 	bl	8008f08 <memcmp>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <SDOResetErrors+0x70>
 8002b36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b38:	2b13      	cmp	r3, #19
 8002b3a:	d9e2      	bls.n	8002b02 <SDOResetErrors+0x36>

    return memcmp(temp.value, MesRx.value, 4) == 0 ? false :  true ;
 8002b3c:	f107 0320 	add.w	r3, r7, #32
 8002b40:	3306      	adds	r3, #6
 8002b42:	2204      	movs	r2, #4
 8002b44:	4908      	ldr	r1, [pc, #32]	@ (8002b68 <SDOResetErrors+0x9c>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f006 f9de 	bl	8008f08 <memcmp>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	bf14      	ite	ne
 8002b52:	2301      	movne	r3, #1
 8002b54:	2300      	moveq	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3738      	adds	r7, #56	@ 0x38
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b60:	20000308 	.word	0x20000308
 8002b64:	20100210 	.word	0x20100210
 8002b68:	20000312 	.word	0x20000312

08002b6c <SetSpeed>:

void SetSpeed(int vl, uint32_t TPDO)
{
 8002b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b70:	b095      	sub	sp, #84	@ 0x54
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002b76:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	int64_t dec = RPM_TO_DEC(vl);
 8002b78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b7a:	17c8      	asrs	r0, r1, #31
 8002b7c:	4688      	mov	r8, r1
 8002b7e:	4681      	mov	r9, r0
 8002b80:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002b84:	f04f 0000 	mov.w	r0, #0
 8002b88:	f04f 0100 	mov.w	r1, #0
 8002b8c:	e9c7 0100 	strd	r0, r1, [r7]
 8002b90:	68f9      	ldr	r1, [r7, #12]
 8002b92:	008e      	lsls	r6, r1, #2
 8002b94:	607e      	str	r6, [r7, #4]
 8002b96:	687e      	ldr	r6, [r7, #4]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8002b9e:	607e      	str	r6, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	0089      	lsls	r1, r1, #2
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002baa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002bae:	4601      	mov	r1, r0
 8002bb0:	eb11 0408 	adds.w	r4, r1, r8
 8002bb4:	68f9      	ldr	r1, [r7, #12]
 8002bb6:	eb41 0509 	adc.w	r5, r1, r9
 8002bba:	f04f 0000 	mov.w	r0, #0
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	00e9      	lsls	r1, r5, #3
 8002bc4:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002bc8:	00e0      	lsls	r0, r4, #3
 8002bca:	4604      	mov	r4, r0
 8002bcc:	460d      	mov	r5, r1
 8002bce:	ebb4 0208 	subs.w	r2, r4, r8
 8002bd2:	eb65 0309 	sbc.w	r3, r5, r9
 8002bd6:	f04f 0000 	mov.w	r0, #0
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	0119      	lsls	r1, r3, #4
 8002be0:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002be4:	0110      	lsls	r0, r2, #4
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	eb12 0a08 	adds.w	sl, r2, r8
 8002bee:	eb43 0b09 	adc.w	fp, r3, r9
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	ea4f 334b 	mov.w	r3, fp, lsl #13
 8002bfe:	ea43 43da 	orr.w	r3, r3, sl, lsr #19
 8002c02:	ea4f 324a 	mov.w	r2, sl, lsl #13
 8002c06:	4692      	mov	sl, r2
 8002c08:	469b      	mov	fp, r3
 8002c0a:	4650      	mov	r0, sl
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	f240 7253 	movw	r2, #1875	@ 0x753
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	f7fd fed1 	bl	80009bc <__aeabi_ldivmod>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(TargetSpeedRes, dec);
 8002c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c24:	f107 0310 	add.w	r3, r7, #16
 8002c28:	490e      	ldr	r1, [pc, #56]	@ (8002c64 <SetSpeed+0xf8>)
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fd24 	bl	8002678 <CreateMessage>
 8002c30:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002c34:	f107 0510 	add.w	r5, r7, #16
 8002c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	6023      	str	r3, [r4, #0]
	Cankinco->Can_txHeader.StdId = TPDO;
 8002c40:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <SetSpeed+0xfc>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c46:	62da      	str	r2, [r3, #44]	@ 0x2c
	Can_Write(Cankinco, temp.value, DATA_BYTE_4);
 8002c48:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <SetSpeed+0xfc>)
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c50:	3306      	adds	r3, #6
 8002c52:	2204      	movs	r2, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7ff fa25 	bl	80020a4 <Can_Write>

}
 8002c5a:	bf00      	nop
 8002c5c:	3754      	adds	r7, #84	@ 0x54
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c64:	60ff0020 	.word	0x60ff0020
 8002c68:	20000308 	.word	0x20000308

08002c6c <readParameter>:

	return MesRx.Canid == EncoderID[MotorID-1]? false : true ;
}

void readParameter()
{
 8002c6c:	b490      	push	{r4, r7}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
	for(int i=0; i<MNum; i++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	e05c      	b.n	8002d32 <readParameter+0xc6>
	{
		if(MesRx.Canid == EncoderID[i])
 8002c78:	4b32      	ldr	r3, [pc, #200]	@ (8002d44 <readParameter+0xd8>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4932      	ldr	r1, [pc, #200]	@ (8002d48 <readParameter+0xdc>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d116      	bne.n	8002cb6 <readParameter+0x4a>
		{
			Kincoparam[i].SpeedReal = Kincoparameter.SpeedReal;
 8002c88:	4b30      	ldr	r3, [pc, #192]	@ (8002d4c <readParameter+0xe0>)
 8002c8a:	69d9      	ldr	r1, [r3, #28]
 8002c8c:	4830      	ldr	r0, [pc, #192]	@ (8002d50 <readParameter+0xe4>)
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4403      	add	r3, r0
 8002c9a:	331c      	adds	r3, #28
 8002c9c:	6019      	str	r1, [r3, #0]
			Kincoparam[i].PosActual = Kincoparameter.PosActual;
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <readParameter+0xe0>)
 8002ca0:	6999      	ldr	r1, [r3, #24]
 8002ca2:	482b      	ldr	r0, [pc, #172]	@ (8002d50 <readParameter+0xe4>)
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4403      	add	r3, r0
 8002cb0:	3318      	adds	r3, #24
 8002cb2:	6019      	str	r1, [r3, #0]
 8002cb4:	e03a      	b.n	8002d2c <readParameter+0xc0>
		} else if (MesRx.Canid == CurrentID[i])
 8002cb6:	4b23      	ldr	r3, [pc, #140]	@ (8002d44 <readParameter+0xd8>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4926      	ldr	r1, [pc, #152]	@ (8002d54 <readParameter+0xe8>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d132      	bne.n	8002d2c <readParameter+0xc0>
		{
			Kincoparam[i].Error_code   = Kincoparameter.Error_code ;
 8002cc6:	4b21      	ldr	r3, [pc, #132]	@ (8002d4c <readParameter+0xe0>)
 8002cc8:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
 8002cca:	4921      	ldr	r1, [pc, #132]	@ (8002d50 <readParameter+0xe4>)
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3322      	adds	r3, #34	@ 0x22
 8002cda:	4602      	mov	r2, r0
 8002cdc:	801a      	strh	r2, [r3, #0]
			Kincoparam[i].Error_status = Kincoparameter.Error_status;
 8002cde:	491c      	ldr	r1, [pc, #112]	@ (8002d50 <readParameter+0xe4>)
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	4a17      	ldr	r2, [pc, #92]	@ (8002d4c <readParameter+0xe0>)
 8002cee:	461c      	mov	r4, r3
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			Kincoparam[i].I_q          = Kincoparameter.I_q;
 8002cf8:	4b14      	ldr	r3, [pc, #80]	@ (8002d4c <readParameter+0xe0>)
 8002cfa:	f9b3 0020 	ldrsh.w	r0, [r3, #32]
 8002cfe:	4914      	ldr	r1, [pc, #80]	@ (8002d50 <readParameter+0xe4>)
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3320      	adds	r3, #32
 8002d0e:	4602      	mov	r2, r0
 8002d10:	801a      	strh	r2, [r3, #0]
			Kincoparam[i].flagMotorStarted = Kincoparameter.flagMotorStarted ;
 8002d12:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <readParameter+0xe0>)
 8002d14:	f893 0024 	ldrb.w	r0, [r3, #36]	@ 0x24
 8002d18:	490d      	ldr	r1, [pc, #52]	@ (8002d50 <readParameter+0xe4>)
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	3324      	adds	r3, #36	@ 0x24
 8002d28:	4602      	mov	r2, r0
 8002d2a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MNum; i++)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	dd9f      	ble.n	8002c78 <readParameter+0xc>
		}

	}
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc90      	pop	{r4, r7}
 8002d42:	4770      	bx	lr
 8002d44:	2000030c 	.word	0x2000030c
 8002d48:	20000040 	.word	0x20000040
 8002d4c:	20000320 	.word	0x20000320
 8002d50:	20000348 	.word	0x20000348
 8002d54:	20000048 	.word	0x20000048

08002d58 <motorControl>:

void motorControl( bool en, bool error, uint8_t dir, double speed )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	ed87 0b00 	vstr	d0, [r7]
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	460b      	mov	r3, r1
 8002d68:	73bb      	strb	r3, [r7, #14]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	737b      	strb	r3, [r7, #13]
	static bool isStop;
	if ((!en || error) && isStop == false)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	f083 0301 	eor.w	r3, r3, #1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <motorControl+0x28>
 8002d7a:	7bbb      	ldrb	r3, [r7, #14]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <motorControl+0x50>
 8002d80:	4b2a      	ldr	r3, [pc, #168]	@ (8002e2c <motorControl+0xd4>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	f083 0301 	eor.w	r3, r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <motorControl+0x50>
	{
		Kincoparam[0].TargetSpeed = 0 ;
 8002d8e:	4b28      	ldr	r3, [pc, #160]	@ (8002e30 <motorControl+0xd8>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
		SetControlWord(ControlWord_DIS, MotorID[0]); // disable motor
 8002d94:	4b27      	ldr	r3, [pc, #156]	@ (8002e34 <motorControl+0xdc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	2006      	movs	r0, #6
 8002d9c:	f7ff fcee 	bl	800277c <SetControlWord>
		isStop = true ;
 8002da0:	4b22      	ldr	r3, [pc, #136]	@ (8002e2c <motorControl+0xd4>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e035      	b.n	8002e14 <motorControl+0xbc>
	} else if(en && !error)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d032      	beq.n	8002e14 <motorControl+0xbc>
 8002dae:	7bbb      	ldrb	r3, [r7, #14]
 8002db0:	f083 0301 	eor.w	r3, r3, #1
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d02c      	beq.n	8002e14 <motorControl+0xbc>
	{
		if(isStop)
 8002dba:	4b1c      	ldr	r3, [pc, #112]	@ (8002e2c <motorControl+0xd4>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <motorControl+0x7c>
		{
			SetControlWord(ControlWord_EN, MotorID[0]); // enable motor
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e34 <motorControl+0xdc>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	200f      	movs	r0, #15
 8002dca:	f7ff fcd7 	bl	800277c <SetControlWord>
			isStop = false;
 8002dce:	4b17      	ldr	r3, [pc, #92]	@ (8002e2c <motorControl+0xd4>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
		}

		if(dir == 1 || dir == 4)
 8002dd4:	7b7b      	ldrb	r3, [r7, #13]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d002      	beq.n	8002de0 <motorControl+0x88>
 8002dda:	7b7b      	ldrb	r3, [r7, #13]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d107      	bne.n	8002df0 <motorControl+0x98>
		{
			Kincoparam[0].TargetSpeed = speedToRpm(speed);
 8002de0:	ed97 0b00 	vldr	d0, [r7]
 8002de4:	f000 f848 	bl	8002e78 <speedToRpm>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4a11      	ldr	r2, [pc, #68]	@ (8002e30 <motorControl+0xd8>)
 8002dec:	6113      	str	r3, [r2, #16]
 8002dee:	e011      	b.n	8002e14 <motorControl+0xbc>
		}else if(dir == 3 || dir == 2)
 8002df0:	7b7b      	ldrb	r3, [r7, #13]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d002      	beq.n	8002dfc <motorControl+0xa4>
 8002df6:	7b7b      	ldrb	r3, [r7, #13]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d108      	bne.n	8002e0e <motorControl+0xb6>
		{
			Kincoparam[0].TargetSpeed = -speedToRpm(speed);
 8002dfc:	ed97 0b00 	vldr	d0, [r7]
 8002e00:	f000 f83a 	bl	8002e78 <speedToRpm>
 8002e04:	4603      	mov	r3, r0
 8002e06:	425b      	negs	r3, r3
 8002e08:	4a09      	ldr	r2, [pc, #36]	@ (8002e30 <motorControl+0xd8>)
 8002e0a:	6113      	str	r3, [r2, #16]
 8002e0c:	e002      	b.n	8002e14 <motorControl+0xbc>
		}else
		{
			Kincoparam[0].TargetSpeed = 0 ;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <motorControl+0xd8>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]
		}
	}
	SetSpeed(Kincoparam[0].TargetSpeed, SetSpeedPDO[0]);
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <motorControl+0xd8>)
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <motorControl+0xe0>)
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fea4 	bl	8002b6c <SetSpeed>
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000398 	.word	0x20000398
 8002e30:	20000348 	.word	0x20000348
 8002e34:	20000030 	.word	0x20000030
 8002e38:	20000038 	.word	0x20000038

08002e3c <motorErrorReset>:

void motorErrorReset()
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
	SetControlWord(ControlWord_DIS, MotorID[0]);
 8002e40:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <motorErrorReset+0x38>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	2006      	movs	r0, #6
 8002e48:	f7ff fc98 	bl	800277c <SetControlWord>
	SDOResetErrors(0x01, MotorID[0]);
 8002e4c:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <motorErrorReset+0x38>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4619      	mov	r1, r3
 8002e52:	2001      	movs	r0, #1
 8002e54:	f7ff fe3a 	bl	8002acc <SDOResetErrors>
	SetControlWord(ControlWord_EN, MotorID[0]);
 8002e58:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <motorErrorReset+0x38>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	200f      	movs	r0, #15
 8002e60:	f7ff fc8c 	bl	800277c <SetControlWord>
	SDOResetErrors(0x0, MotorID[0]);
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <motorErrorReset+0x38>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7ff fe2e 	bl	8002acc <SDOResetErrors>
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000030 	.word	0x20000030

08002e78 <speedToRpm>:
    // Calculate speed (m/s)
    double speed = (wheelCircumference * wheelRPM) / 60.0;
	return speed ;
}
int speedToRpm (double speed)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	ed87 0b00 	vstr	d0, [r7]
    // Calculate Circumference (C = pi * D)
    double wheelCircumference =  whellConfig.PI * whellConfig.wheelDiameter;
 8002e82:	4b1a      	ldr	r3, [pc, #104]	@ (8002eec <speedToRpm+0x74>)
 8002e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e88:	4b18      	ldr	r3, [pc, #96]	@ (8002eec <speedToRpm+0x74>)
 8002e8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e8e:	f7fd fb5b 	bl	8000548 <__aeabi_dmul>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// Calculate rpm
	double wheelRPM = (speed*60)/wheelCircumference;
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <speedToRpm+0x78>)
 8002ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ea4:	f7fd fb50 	bl	8000548 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eb4:	f7fd fc72 	bl	800079c <__aeabi_ddiv>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int rpm = wheelRPM * whellConfig.ratio ;
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <speedToRpm+0x74>)
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fad5 	bl	8000474 <__aeabi_i2d>
 8002eca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ece:	f7fd fb3b 	bl	8000548 <__aeabi_dmul>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7fd fd47 	bl	800096c <__aeabi_d2iz>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	60fb      	str	r3, [r7, #12]
	return rpm ;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000018 	.word	0x20000018
 8002ef0:	404e0000 	.word	0x404e0000

08002ef4 <speedToRps>:

int speedToRps (double speed)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	ed87 0b00 	vstr	d0, [r7]
	return (speedToRpm(speed)/60);
 8002efe:	ed97 0b00 	vldr	d0, [r7]
 8002f02:	f7ff ffb9 	bl	8002e78 <speedToRpm>
 8002f06:	4603      	mov	r3, r0
 8002f08:	4a05      	ldr	r2, [pc, #20]	@ (8002f20 <speedToRps+0x2c>)
 8002f0a:	fb82 1203 	smull	r1, r2, r2, r3
 8002f0e:	441a      	add	r2, r3
 8002f10:	1152      	asrs	r2, r2, #5
 8002f12:	17db      	asrs	r3, r3, #31
 8002f14:	1ad3      	subs	r3, r2, r3
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	88888889 	.word	0x88888889

08002f24 <hydraulicSetState>:
/**
 * @brief    Xuất tín hiệu điều khiển xylanh.
 * @param state: bảng trạng thái điều khiển xylanh
 */

void hydraulicSetState(struct HydraulicTableControl state) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, (GPIO_PinState) state.valve1);
 8002f2c:	793b      	ldrb	r3, [r7, #4]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2110      	movs	r1, #16
 8002f32:	4815      	ldr	r0, [pc, #84]	@ (8002f88 <hydraulicSetState+0x64>)
 8002f34:	f002 f850 	bl	8004fd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, (GPIO_PinState) state.valve2);
 8002f38:	797b      	ldrb	r3, [r7, #5]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2120      	movs	r1, #32
 8002f3e:	4812      	ldr	r0, [pc, #72]	@ (8002f88 <hydraulicSetState+0x64>)
 8002f40:	f002 f84a 	bl	8004fd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, (GPIO_PinState) state.valve3);
 8002f44:	79bb      	ldrb	r3, [r7, #6]
 8002f46:	461a      	mov	r2, r3
 8002f48:	2140      	movs	r1, #64	@ 0x40
 8002f4a:	480f      	ldr	r0, [pc, #60]	@ (8002f88 <hydraulicSetState+0x64>)
 8002f4c:	f002 f844 	bl	8004fd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, (GPIO_PinState) state.pump);
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f58:	480b      	ldr	r0, [pc, #44]	@ (8002f88 <hydraulicSetState+0x64>)
 8002f5a:	f002 f83d 	bl	8004fd8 <HAL_GPIO_WritePin>
    if(state.pump == 1)
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <hydraulicSetState+0x50>
    {
    	mcp4922.setDAC(1024,1024);
 8002f64:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <hydraulicSetState+0x68>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f6c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002f70:	4798      	blx	r3
    }else
    {
    	mcp4922.setDAC(0,0);
    }
}
 8002f72:	e004      	b.n	8002f7e <hydraulicSetState+0x5a>
    	mcp4922.setDAC(0,0);
 8002f74:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <hydraulicSetState+0x68>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	4798      	blx	r3
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021800 	.word	0x40021800
 8002f8c:	2000000c 	.word	0x2000000c

08002f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f94:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd0 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd0 <HAL_Init+0x40>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <HAL_Init+0x40>)
 8002fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fac:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	@ (8002fd0 <HAL_Init+0x40>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb8:	2003      	movs	r0, #3
 8002fba:	f001 fb2d 	bl	8004618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbe:	200f      	movs	r0, #15
 8002fc0:	f000 f808 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7fe fd7e 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fdc:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <HAL_InitTick+0x54>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	@ (800302c <HAL_InitTick+0x58>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 fb45 	bl	8004682 <HAL_SYSTICK_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00e      	b.n	8003020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d80a      	bhi.n	800301e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003008:	2200      	movs	r2, #0
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f001 fb0d 	bl	800462e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003014:	4a06      	ldr	r2, [pc, #24]	@ (8003030 <HAL_InitTick+0x5c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000008 	.word	0x20000008
 800302c:	20000054 	.word	0x20000054
 8003030:	20000050 	.word	0x20000050

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	@ (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000054 	.word	0x20000054
 8003058:	2000039c 	.word	0x2000039c

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	@ (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	2000039c 	.word	0x2000039c

08003074 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e033      	b.n	80030f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe fd42 	bl	8001b1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d118      	bne.n	80030e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030ba:	f023 0302 	bic.w	r3, r3, #2
 80030be:	f043 0202 	orr.w	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fa68 	bl	800359c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f023 0303 	bic.w	r3, r3, #3
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80030e2:	e001      	b.n	80030e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d049      	beq.n	80031c4 <HAL_ADC_IRQHandler+0xca>
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d046      	beq.n	80031c4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d12b      	bne.n	80031b4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003160:	2b00      	cmp	r3, #0
 8003162:	d127      	bne.n	80031b4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800316e:	2b00      	cmp	r3, #0
 8003170:	d006      	beq.n	8003180 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800317c:	2b00      	cmp	r3, #0
 800317e:	d119      	bne.n	80031b4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0220 	bic.w	r2, r2, #32
 800318e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f043 0201 	orr.w	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f8b0 	bl	800331a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0212 	mvn.w	r2, #18
 80031c2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d057      	beq.n	800328a <HAL_ADC_IRQHandler+0x190>
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d054      	beq.n	800328a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d139      	bne.n	800327a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003210:	2b00      	cmp	r3, #0
 8003212:	d006      	beq.n	8003222 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d12b      	bne.n	800327a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800322c:	2b00      	cmp	r3, #0
 800322e:	d124      	bne.n	800327a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11d      	bne.n	800327a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003242:	2b00      	cmp	r3, #0
 8003244:	d119      	bne.n	800327a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003254:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	f043 0201 	orr.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa8a 	bl	8003794 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 020c 	mvn.w	r2, #12
 8003288:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003298:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d017      	beq.n	80032d0 <HAL_ADC_IRQHandler+0x1d6>
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d014      	beq.n	80032d0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10d      	bne.n	80032d0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f834 	bl	800332e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f06f 0201 	mvn.w	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0320 	and.w	r3, r3, #32
 80032d6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032de:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d015      	beq.n	8003312 <HAL_ADC_IRQHandler+0x218>
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d012      	beq.n	8003312 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f0:	f043 0202 	orr.w	r2, r3, #2
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0220 	mvn.w	r2, #32
 8003300:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f81d 	bl	8003342 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0220 	mvn.w	r2, #32
 8003310:	601a      	str	r2, [r3, #0]
  }
}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1c>
 8003370:	2302      	movs	r3, #2
 8003372:	e105      	b.n	8003580 <HAL_ADC_ConfigChannel+0x228>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b09      	cmp	r3, #9
 8003382:	d925      	bls.n	80033d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68d9      	ldr	r1, [r3, #12]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	461a      	mov	r2, r3
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	3b1e      	subs	r3, #30
 800339a:	2207      	movs	r2, #7
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43da      	mvns	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	400a      	ands	r2, r1
 80033a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68d9      	ldr	r1, [r3, #12]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	4618      	mov	r0, r3
 80033bc:	4603      	mov	r3, r0
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4403      	add	r3, r0
 80033c2:	3b1e      	subs	r3, #30
 80033c4:	409a      	lsls	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	e022      	b.n	8003416 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6919      	ldr	r1, [r3, #16]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	2207      	movs	r2, #7
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	400a      	ands	r2, r1
 80033f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6919      	ldr	r1, [r3, #16]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	4618      	mov	r0, r3
 8003406:	4603      	mov	r3, r0
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4403      	add	r3, r0
 800340c:	409a      	lsls	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b06      	cmp	r3, #6
 800341c:	d824      	bhi.n	8003468 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	3b05      	subs	r3, #5
 8003430:	221f      	movs	r2, #31
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43da      	mvns	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	400a      	ands	r2, r1
 800343e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	4618      	mov	r0, r3
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	3b05      	subs	r3, #5
 800345a:	fa00 f203 	lsl.w	r2, r0, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	635a      	str	r2, [r3, #52]	@ 0x34
 8003466:	e04c      	b.n	8003502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b0c      	cmp	r3, #12
 800346e:	d824      	bhi.n	80034ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	3b23      	subs	r3, #35	@ 0x23
 8003482:	221f      	movs	r2, #31
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43da      	mvns	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	400a      	ands	r2, r1
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	4618      	mov	r0, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	3b23      	subs	r3, #35	@ 0x23
 80034ac:	fa00 f203 	lsl.w	r2, r0, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80034b8:	e023      	b.n	8003502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	3b41      	subs	r3, #65	@ 0x41
 80034cc:	221f      	movs	r2, #31
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	400a      	ands	r2, r1
 80034da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	4618      	mov	r0, r3
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	3b41      	subs	r3, #65	@ 0x41
 80034f6:	fa00 f203 	lsl.w	r2, r0, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003502:	4b22      	ldr	r3, [pc, #136]	@ (800358c <HAL_ADC_ConfigChannel+0x234>)
 8003504:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a21      	ldr	r2, [pc, #132]	@ (8003590 <HAL_ADC_ConfigChannel+0x238>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d109      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x1cc>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b12      	cmp	r3, #18
 8003516:	d105      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a19      	ldr	r2, [pc, #100]	@ (8003590 <HAL_ADC_ConfigChannel+0x238>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d123      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x21e>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b10      	cmp	r3, #16
 8003534:	d003      	beq.n	800353e <HAL_ADC_ConfigChannel+0x1e6>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b11      	cmp	r3, #17
 800353c:	d11b      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b10      	cmp	r3, #16
 8003550:	d111      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003552:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <HAL_ADC_ConfigChannel+0x23c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a10      	ldr	r2, [pc, #64]	@ (8003598 <HAL_ADC_ConfigChannel+0x240>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	0c9a      	lsrs	r2, r3, #18
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003568:	e002      	b.n	8003570 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3b01      	subs	r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f9      	bne.n	800356a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40012300 	.word	0x40012300
 8003590:	40012000 	.word	0x40012000
 8003594:	20000008 	.word	0x20000008
 8003598:	431bde83 	.word	0x431bde83

0800359c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035a4:	4b79      	ldr	r3, [pc, #484]	@ (800378c <ADC_Init+0x1f0>)
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	021a      	lsls	r2, r3, #8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80035f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	4a58      	ldr	r2, [pc, #352]	@ (8003790 <ADC_Init+0x1f4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d022      	beq.n	800367a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003642:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6899      	ldr	r1, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6899      	ldr	r1, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	e00f      	b.n	800369a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003698:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0202 	bic.w	r2, r2, #2
 80036a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6899      	ldr	r1, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	7e1b      	ldrb	r3, [r3, #24]
 80036b4:	005a      	lsls	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01b      	beq.n	8003700 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036d6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80036e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	3b01      	subs	r3, #1
 80036f4:	035a      	lsls	r2, r3, #13
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	e007      	b.n	8003710 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800371e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	3b01      	subs	r3, #1
 800372c:	051a      	lsls	r2, r3, #20
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6899      	ldr	r1, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003752:	025a      	lsls	r2, r3, #9
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800376a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	029a      	lsls	r2, r3, #10
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40012300 	.word	0x40012300
 8003790:	0f000001 	.word	0x0f000001

08003794 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0ed      	b.n	8003996 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fe fa28 	bl	8001c1c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037dc:	f7ff fc3e 	bl	800305c <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037e2:	e012      	b.n	800380a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037e4:	f7ff fc3a 	bl	800305c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b0a      	cmp	r3, #10
 80037f0:	d90b      	bls.n	800380a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2205      	movs	r2, #5
 8003802:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e0c5      	b.n	8003996 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0e5      	beq.n	80037e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0202 	bic.w	r2, r2, #2
 8003826:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003828:	f7ff fc18 	bl	800305c <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800382e:	e012      	b.n	8003856 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003830:	f7ff fc14 	bl	800305c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b0a      	cmp	r3, #10
 800383c:	d90b      	bls.n	8003856 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2205      	movs	r2, #5
 800384e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e09f      	b.n	8003996 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e5      	bne.n	8003830 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7e1b      	ldrb	r3, [r3, #24]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d108      	bne.n	800387e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e007      	b.n	800388e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800388c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7e5b      	ldrb	r3, [r3, #25]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d108      	bne.n	80038a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e007      	b.n	80038b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	7e9b      	ldrb	r3, [r3, #26]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d108      	bne.n	80038d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0220 	orr.w	r2, r2, #32
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e007      	b.n	80038e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0220 	bic.w	r2, r2, #32
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	7edb      	ldrb	r3, [r3, #27]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d108      	bne.n	80038fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0210 	bic.w	r2, r2, #16
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e007      	b.n	800390c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0210 	orr.w	r2, r2, #16
 800390a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	7f1b      	ldrb	r3, [r3, #28]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d108      	bne.n	8003926 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0208 	orr.w	r2, r2, #8
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	e007      	b.n	8003936 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0208 	bic.w	r2, r2, #8
 8003934:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7f5b      	ldrb	r3, [r3, #29]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d108      	bne.n	8003950 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0204 	orr.w	r2, r2, #4
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e007      	b.n	8003960 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0204 	bic.w	r2, r2, #4
 800395e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	ea42 0103 	orr.w	r1, r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	1e5a      	subs	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80039b8:	7cfb      	ldrb	r3, [r7, #19]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d003      	beq.n	80039c6 <HAL_CAN_ConfigFilter+0x26>
 80039be:	7cfb      	ldrb	r3, [r7, #19]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	f040 80be 	bne.w	8003b42 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80039c6:	4b65      	ldr	r3, [pc, #404]	@ (8003b5c <HAL_CAN_ConfigFilter+0x1bc>)
 80039c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80039e0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	431a      	orrs	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	2201      	movs	r2, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	401a      	ands	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d123      	bne.n	8003a70 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	401a      	ands	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	3248      	adds	r2, #72	@ 0x48
 8003a50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a66:	6979      	ldr	r1, [r7, #20]
 8003a68:	3348      	adds	r3, #72	@ 0x48
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	440b      	add	r3, r1
 8003a6e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d122      	bne.n	8003abe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	3248      	adds	r2, #72	@ 0x48
 8003a9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ab2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ab4:	6979      	ldr	r1, [r7, #20]
 8003ab6:	3348      	adds	r3, #72	@ 0x48
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	440b      	add	r3, r1
 8003abc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	401a      	ands	r2, r3
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003ad8:	e007      	b.n	8003aea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	401a      	ands	r2, r3
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003b04:	e007      	b.n	8003b16 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d107      	bne.n	8003b2e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003b34:	f023 0201 	bic.w	r2, r3, #1
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e006      	b.n	8003b50 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40006400 	.word	0x40006400

08003b60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d12e      	bne.n	8003bd2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b8c:	f7ff fa66 	bl	800305c <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b92:	e012      	b.n	8003bba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b94:	f7ff fa62 	bl	800305c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b0a      	cmp	r3, #10
 8003ba0:	d90b      	bls.n	8003bba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2205      	movs	r2, #5
 8003bb2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e012      	b.n	8003be0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e5      	bne.n	8003b94 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e006      	b.n	8003be0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
  }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	@ 0x24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bfc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c06:	7ffb      	ldrb	r3, [r7, #31]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d003      	beq.n	8003c14 <HAL_CAN_AddTxMessage+0x2c>
 8003c0c:	7ffb      	ldrb	r3, [r7, #31]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	f040 80ad 	bne.w	8003d6e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8095 	beq.w	8003d5e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	0e1b      	lsrs	r3, r3, #24
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003c3e:	2201      	movs	r2, #1
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	409a      	lsls	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10d      	bne.n	8003c6c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	6809      	ldr	r1, [r1, #0]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	3318      	adds	r3, #24
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	440b      	add	r3, r1
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e00f      	b.n	8003c8c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c76:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c7c:	68f9      	ldr	r1, [r7, #12]
 8003c7e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003c80:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	3318      	adds	r3, #24
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	440b      	add	r3, r1
 8003c8a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6819      	ldr	r1, [r3, #0]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	3318      	adds	r3, #24
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	7d1b      	ldrb	r3, [r3, #20]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d111      	bne.n	8003ccc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3318      	adds	r3, #24
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	6811      	ldr	r1, [r2, #0]
 8003cbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3304      	adds	r3, #4
 8003cca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3307      	adds	r3, #7
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	061a      	lsls	r2, r3, #24
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3306      	adds	r3, #6
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3305      	adds	r3, #5
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	3204      	adds	r2, #4
 8003cec:	7812      	ldrb	r2, [r2, #0]
 8003cee:	4610      	mov	r0, r2
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	6811      	ldr	r1, [r2, #0]
 8003cf4:	ea43 0200 	orr.w	r2, r3, r0
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003d02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3303      	adds	r3, #3
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	061a      	lsls	r2, r3, #24
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3302      	adds	r3, #2
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	041b      	lsls	r3, r3, #16
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	7812      	ldrb	r2, [r2, #0]
 8003d24:	4610      	mov	r0, r2
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	6811      	ldr	r1, [r2, #0]
 8003d2a:	ea43 0200 	orr.w	r2, r3, r0
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	440b      	add	r3, r1
 8003d34:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003d38:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	3318      	adds	r3, #24
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	4413      	add	r3, r2
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	6811      	ldr	r1, [r2, #0]
 8003d4c:	f043 0201 	orr.w	r2, r3, #1
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3318      	adds	r3, #24
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	440b      	add	r3, r1
 8003d58:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e00e      	b.n	8003d7c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e006      	b.n	8003d7c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3724      	adds	r7, #36	@ 0x24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d9c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d003      	beq.n	8003dac <HAL_CAN_GetRxMessage+0x24>
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	f040 8103 	bne.w	8003fb2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10e      	bne.n	8003dd0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0f7      	b.n	8003fc0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d107      	bne.n	8003dee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0e8      	b.n	8003fc0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	331b      	adds	r3, #27
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	4413      	add	r3, r2
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0204 	and.w	r2, r3, #4
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10c      	bne.n	8003e26 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	331b      	adds	r3, #27
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	4413      	add	r3, r2
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	0d5b      	lsrs	r3, r3, #21
 8003e1c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e00b      	b.n	8003e3e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	331b      	adds	r3, #27
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	4413      	add	r3, r2
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	331b      	adds	r3, #27
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	4413      	add	r3, r2
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0202 	and.w	r2, r3, #2
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	331b      	adds	r3, #27
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	4413      	add	r3, r2
 8003e60:	3304      	adds	r3, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2208      	movs	r2, #8
 8003e70:	611a      	str	r2, [r3, #16]
 8003e72:	e00b      	b.n	8003e8c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	331b      	adds	r3, #27
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	4413      	add	r3, r2
 8003e80:	3304      	adds	r3, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 020f 	and.w	r2, r3, #15
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	331b      	adds	r3, #27
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	4413      	add	r3, r2
 8003e98:	3304      	adds	r3, #4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	0a1b      	lsrs	r3, r3, #8
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	331b      	adds	r3, #27
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	4413      	add	r3, r2
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	0a1a      	lsrs	r2, r3, #8
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	0c1a      	lsrs	r2, r3, #16
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	3302      	adds	r3, #2
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	0e1a      	lsrs	r2, r3, #24
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	3303      	adds	r3, #3
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	3304      	adds	r3, #4
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	0a1a      	lsrs	r2, r3, #8
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	3305      	adds	r3, #5
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	0c1a      	lsrs	r2, r3, #16
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	3306      	adds	r3, #6
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	0e1a      	lsrs	r2, r3, #24
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	3307      	adds	r3, #7
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d108      	bne.n	8003f9e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0220 	orr.w	r2, r2, #32
 8003f9a:	60da      	str	r2, [r3, #12]
 8003f9c:	e007      	b.n	8003fae <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0220 	orr.w	r2, r2, #32
 8003fac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e006      	b.n	8003fc0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
  }
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fdc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d002      	beq.n	8003fea <HAL_CAN_ActivateNotification+0x1e>
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d109      	bne.n	8003ffe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6959      	ldr	r1, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e006      	b.n	800400c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	@ 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d07c      	beq.n	8004158 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d023      	beq.n	80040b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2201      	movs	r2, #1
 800406e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f983 	bl	8004386 <HAL_CAN_TxMailbox0CompleteCallback>
 8004080:	e016      	b.n	80040b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
 8004094:	e00c      	b.n	80040b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a8:	e002      	b.n	80040b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f989 	bl	80043c2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d024      	beq.n	8004104 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f963 	bl	800439a <HAL_CAN_TxMailbox1CompleteCallback>
 80040d4:	e016      	b.n	8004104 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e8:	e00c      	b.n	8004104 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d004      	beq.n	80040fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fc:	e002      	b.n	8004104 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f969 	bl	80043d6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d024      	beq.n	8004158 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004116:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f943 	bl	80043ae <HAL_CAN_TxMailbox2CompleteCallback>
 8004128:	e016      	b.n	8004158 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d004      	beq.n	800413e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
 800413c:	e00c      	b.n	8004158 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d004      	beq.n	8004152 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004150:	e002      	b.n	8004158 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f949 	bl	80043ea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00c      	beq.n	800417c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800416c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2210      	movs	r2, #16
 800417a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d006      	beq.n	800419e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2208      	movs	r2, #8
 8004196:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f930 	bl	80043fe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d009      	beq.n	80041bc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd ff42 	bl	8002040 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00c      	beq.n	80041e0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2210      	movs	r2, #16
 80041de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d006      	beq.n	8004202 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2208      	movs	r2, #8
 80041fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f912 	bl	8004426 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f8f9 	bl	8004412 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	d006      	beq.n	8004242 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2210      	movs	r2, #16
 800423a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f8fc 	bl	800443a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2208      	movs	r2, #8
 800425c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8f5 	bl	800444e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d07b      	beq.n	8004366 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d072      	beq.n	800435e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042aa:	f043 0302 	orr.w	r3, r3, #2
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	f043 0304 	orr.w	r3, r3, #4
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d043      	beq.n	800435e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d03e      	beq.n	800435e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042e6:	2b60      	cmp	r3, #96	@ 0x60
 80042e8:	d02b      	beq.n	8004342 <HAL_CAN_IRQHandler+0x32a>
 80042ea:	2b60      	cmp	r3, #96	@ 0x60
 80042ec:	d82e      	bhi.n	800434c <HAL_CAN_IRQHandler+0x334>
 80042ee:	2b50      	cmp	r3, #80	@ 0x50
 80042f0:	d022      	beq.n	8004338 <HAL_CAN_IRQHandler+0x320>
 80042f2:	2b50      	cmp	r3, #80	@ 0x50
 80042f4:	d82a      	bhi.n	800434c <HAL_CAN_IRQHandler+0x334>
 80042f6:	2b40      	cmp	r3, #64	@ 0x40
 80042f8:	d019      	beq.n	800432e <HAL_CAN_IRQHandler+0x316>
 80042fa:	2b40      	cmp	r3, #64	@ 0x40
 80042fc:	d826      	bhi.n	800434c <HAL_CAN_IRQHandler+0x334>
 80042fe:	2b30      	cmp	r3, #48	@ 0x30
 8004300:	d010      	beq.n	8004324 <HAL_CAN_IRQHandler+0x30c>
 8004302:	2b30      	cmp	r3, #48	@ 0x30
 8004304:	d822      	bhi.n	800434c <HAL_CAN_IRQHandler+0x334>
 8004306:	2b10      	cmp	r3, #16
 8004308:	d002      	beq.n	8004310 <HAL_CAN_IRQHandler+0x2f8>
 800430a:	2b20      	cmp	r3, #32
 800430c:	d005      	beq.n	800431a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800430e:	e01d      	b.n	800434c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	f043 0308 	orr.w	r3, r3, #8
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004318:	e019      	b.n	800434e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	f043 0310 	orr.w	r3, r3, #16
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004322:	e014      	b.n	800434e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	f043 0320 	orr.w	r3, r3, #32
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800432c:	e00f      	b.n	800434e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004334:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004336:	e00a      	b.n	800434e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004340:	e005      	b.n	800434e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800434a:	e000      	b.n	800434e <HAL_CAN_IRQHandler+0x336>
            break;
 800434c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800435c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2204      	movs	r2, #4
 8004364:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f872 	bl	8004462 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800437e:	bf00      	nop
 8004380:	3728      	adds	r7, #40	@ 0x28
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <__NVIC_SetPriorityGrouping+0x44>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004494:	4013      	ands	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044aa:	4a04      	ldr	r2, [pc, #16]	@ (80044bc <__NVIC_SetPriorityGrouping+0x44>)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	60d3      	str	r3, [r2, #12]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044c4:	4b04      	ldr	r3, [pc, #16]	@ (80044d8 <__NVIC_GetPriorityGrouping+0x18>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	f003 0307 	and.w	r3, r3, #7
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	db0b      	blt.n	8004506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	f003 021f 	and.w	r2, r3, #31
 80044f4:	4907      	ldr	r1, [pc, #28]	@ (8004514 <__NVIC_EnableIRQ+0x38>)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2001      	movs	r0, #1
 80044fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	e000e100 	.word	0xe000e100

08004518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	6039      	str	r1, [r7, #0]
 8004522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004528:	2b00      	cmp	r3, #0
 800452a:	db0a      	blt.n	8004542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	490c      	ldr	r1, [pc, #48]	@ (8004564 <__NVIC_SetPriority+0x4c>)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	0112      	lsls	r2, r2, #4
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	440b      	add	r3, r1
 800453c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004540:	e00a      	b.n	8004558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	4908      	ldr	r1, [pc, #32]	@ (8004568 <__NVIC_SetPriority+0x50>)
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	3b04      	subs	r3, #4
 8004550:	0112      	lsls	r2, r2, #4
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	440b      	add	r3, r1
 8004556:	761a      	strb	r2, [r3, #24]
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	e000e100 	.word	0xe000e100
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800456c:	b480      	push	{r7}
 800456e:	b089      	sub	sp, #36	@ 0x24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f1c3 0307 	rsb	r3, r3, #7
 8004586:	2b04      	cmp	r3, #4
 8004588:	bf28      	it	cs
 800458a:	2304      	movcs	r3, #4
 800458c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3304      	adds	r3, #4
 8004592:	2b06      	cmp	r3, #6
 8004594:	d902      	bls.n	800459c <NVIC_EncodePriority+0x30>
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	3b03      	subs	r3, #3
 800459a:	e000      	b.n	800459e <NVIC_EncodePriority+0x32>
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a0:	f04f 32ff 	mov.w	r2, #4294967295
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43da      	mvns	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	401a      	ands	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045b4:	f04f 31ff 	mov.w	r1, #4294967295
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	43d9      	mvns	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c4:	4313      	orrs	r3, r2
         );
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3724      	adds	r7, #36	@ 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3b01      	subs	r3, #1
 80045e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045e4:	d301      	bcc.n	80045ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045e6:	2301      	movs	r3, #1
 80045e8:	e00f      	b.n	800460a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004614 <SysTick_Config+0x40>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045f2:	210f      	movs	r1, #15
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	f7ff ff8e 	bl	8004518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045fc:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <SysTick_Config+0x40>)
 80045fe:	2200      	movs	r2, #0
 8004600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004602:	4b04      	ldr	r3, [pc, #16]	@ (8004614 <SysTick_Config+0x40>)
 8004604:	2207      	movs	r2, #7
 8004606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	e000e010 	.word	0xe000e010

08004618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff ff29 	bl	8004478 <__NVIC_SetPriorityGrouping>
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	4603      	mov	r3, r0
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004640:	f7ff ff3e 	bl	80044c0 <__NVIC_GetPriorityGrouping>
 8004644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	6978      	ldr	r0, [r7, #20]
 800464c:	f7ff ff8e 	bl	800456c <NVIC_EncodePriority>
 8004650:	4602      	mov	r2, r0
 8004652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ff5d 	bl	8004518 <__NVIC_SetPriority>
}
 800465e:	bf00      	nop
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	4603      	mov	r3, r0
 800466e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff31 	bl	80044dc <__NVIC_EnableIRQ>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff ffa2 	bl	80045d4 <SysTick_Config>
 8004690:	4603      	mov	r3, r0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046a8:	f7fe fcd8 	bl	800305c <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e099      	b.n	80047ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0201 	bic.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046d8:	e00f      	b.n	80046fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046da:	f7fe fcbf 	bl	800305c <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b05      	cmp	r3, #5
 80046e6:	d908      	bls.n	80046fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2203      	movs	r2, #3
 80046f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e078      	b.n	80047ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e8      	bne.n	80046da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4b38      	ldr	r3, [pc, #224]	@ (80047f4 <HAL_DMA_Init+0x158>)
 8004714:	4013      	ands	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004726:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800473e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	2b04      	cmp	r3, #4
 8004752:	d107      	bne.n	8004764 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	4313      	orrs	r3, r2
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 0307 	bic.w	r3, r3, #7
 800477a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	2b04      	cmp	r3, #4
 800478c:	d117      	bne.n	80047be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00e      	beq.n	80047be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f9e9 	bl	8004b78 <DMA_CheckFifoParam>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2240      	movs	r2, #64	@ 0x40
 80047b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80047ba:	2301      	movs	r3, #1
 80047bc:	e016      	b.n	80047ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f9a0 	bl	8004b0c <DMA_CalcBaseAndBitshift>
 80047cc:	4603      	mov	r3, r0
 80047ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d4:	223f      	movs	r2, #63	@ 0x3f
 80047d6:	409a      	lsls	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	f010803f 	.word	0xf010803f

080047f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004804:	4b8e      	ldr	r3, [pc, #568]	@ (8004a40 <HAL_DMA_IRQHandler+0x248>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a8e      	ldr	r2, [pc, #568]	@ (8004a44 <HAL_DMA_IRQHandler+0x24c>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	0a9b      	lsrs	r3, r3, #10
 8004810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004822:	2208      	movs	r2, #8
 8004824:	409a      	lsls	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01a      	beq.n	8004864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d013      	beq.n	8004864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0204 	bic.w	r2, r2, #4
 800484a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004850:	2208      	movs	r2, #8
 8004852:	409a      	lsls	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004868:	2201      	movs	r2, #1
 800486a:	409a      	lsls	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d012      	beq.n	800489a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004886:	2201      	movs	r2, #1
 8004888:	409a      	lsls	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004892:	f043 0202 	orr.w	r2, r3, #2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489e:	2204      	movs	r2, #4
 80048a0:	409a      	lsls	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d012      	beq.n	80048d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048bc:	2204      	movs	r2, #4
 80048be:	409a      	lsls	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c8:	f043 0204 	orr.w	r2, r3, #4
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	2210      	movs	r2, #16
 80048d6:	409a      	lsls	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d043      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d03c      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f2:	2210      	movs	r2, #16
 80048f4:	409a      	lsls	r2, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d018      	beq.n	800493a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d024      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
 8004926:	e01f      	b.n	8004968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
 8004938:	e016      	b.n	8004968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0208 	bic.w	r2, r2, #8
 8004956:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496c:	2220      	movs	r2, #32
 800496e:	409a      	lsls	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 808f 	beq.w	8004a98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8087 	beq.w	8004a98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498e:	2220      	movs	r2, #32
 8004990:	409a      	lsls	r2, r3
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b05      	cmp	r3, #5
 80049a0:	d136      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0216 	bic.w	r2, r2, #22
 80049b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <HAL_DMA_IRQHandler+0x1da>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0208 	bic.w	r2, r2, #8
 80049e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e6:	223f      	movs	r2, #63	@ 0x3f
 80049e8:	409a      	lsls	r2, r3
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d07e      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
        }
        return;
 8004a0e:	e079      	b.n	8004b04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01d      	beq.n	8004a5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10d      	bne.n	8004a48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d031      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
 8004a3c:	e02c      	b.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
 8004a3e:	bf00      	nop
 8004a40:	20000008 	.word	0x20000008
 8004a44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d023      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	4798      	blx	r3
 8004a58:	e01e      	b.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10f      	bne.n	8004a88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0210 	bic.w	r2, r2, #16
 8004a76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d032      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d022      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2205      	movs	r2, #5
 8004ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d307      	bcc.n	8004ae0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f2      	bne.n	8004ac4 <HAL_DMA_IRQHandler+0x2cc>
 8004ade:	e000      	b.n	8004ae2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ae0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
 8004b02:	e000      	b.n	8004b06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b04:	bf00      	nop
    }
  }
}
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	3b10      	subs	r3, #16
 8004b1c:	4a14      	ldr	r2, [pc, #80]	@ (8004b70 <DMA_CalcBaseAndBitshift+0x64>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b26:	4a13      	ldr	r2, [pc, #76]	@ (8004b74 <DMA_CalcBaseAndBitshift+0x68>)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d909      	bls.n	8004b4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b42:	f023 0303 	bic.w	r3, r3, #3
 8004b46:	1d1a      	adds	r2, r3, #4
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b4c:	e007      	b.n	8004b5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b56:	f023 0303 	bic.w	r3, r3, #3
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	aaaaaaab 	.word	0xaaaaaaab
 8004b74:	08009088 	.word	0x08009088

08004b78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11f      	bne.n	8004bd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d856      	bhi.n	8004c46 <DMA_CheckFifoParam+0xce>
 8004b98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba0 <DMA_CheckFifoParam+0x28>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bc3 	.word	0x08004bc3
 8004ba8:	08004bb1 	.word	0x08004bb1
 8004bac:	08004c47 	.word	0x08004c47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d046      	beq.n	8004c4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bc0:	e043      	b.n	8004c4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bca:	d140      	bne.n	8004c4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bd0:	e03d      	b.n	8004c4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bda:	d121      	bne.n	8004c20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d837      	bhi.n	8004c52 <DMA_CheckFifoParam+0xda>
 8004be2:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <DMA_CheckFifoParam+0x70>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004bf9 	.word	0x08004bf9
 8004bec:	08004bff 	.word	0x08004bff
 8004bf0:	08004bf9 	.word	0x08004bf9
 8004bf4:	08004c11 	.word	0x08004c11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bfc:	e030      	b.n	8004c60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d025      	beq.n	8004c56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c0e:	e022      	b.n	8004c56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c18:	d11f      	bne.n	8004c5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c1e:	e01c      	b.n	8004c5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d903      	bls.n	8004c2e <DMA_CheckFifoParam+0xb6>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d003      	beq.n	8004c34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c2c:	e018      	b.n	8004c60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	73fb      	strb	r3, [r7, #15]
      break;
 8004c32:	e015      	b.n	8004c60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00e      	beq.n	8004c5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
      break;
 8004c44:	e00b      	b.n	8004c5e <DMA_CheckFifoParam+0xe6>
      break;
 8004c46:	bf00      	nop
 8004c48:	e00a      	b.n	8004c60 <DMA_CheckFifoParam+0xe8>
      break;
 8004c4a:	bf00      	nop
 8004c4c:	e008      	b.n	8004c60 <DMA_CheckFifoParam+0xe8>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e006      	b.n	8004c60 <DMA_CheckFifoParam+0xe8>
      break;
 8004c52:	bf00      	nop
 8004c54:	e004      	b.n	8004c60 <DMA_CheckFifoParam+0xe8>
      break;
 8004c56:	bf00      	nop
 8004c58:	e002      	b.n	8004c60 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c5a:	bf00      	nop
 8004c5c:	e000      	b.n	8004c60 <DMA_CheckFifoParam+0xe8>
      break;
 8004c5e:	bf00      	nop
    }
  } 
  
  return status; 
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop

08004c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b089      	sub	sp, #36	@ 0x24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	e16b      	b.n	8004f64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	f040 815a 	bne.w	8004f5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d005      	beq.n	8004cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d130      	bne.n	8004d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	2203      	movs	r2, #3
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	43db      	mvns	r3, r3
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	4013      	ands	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 0201 	and.w	r2, r3, #1
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d017      	beq.n	8004d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d123      	bne.n	8004db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	08da      	lsrs	r2, r3, #3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3208      	adds	r2, #8
 8004d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	220f      	movs	r2, #15
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	08da      	lsrs	r2, r3, #3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3208      	adds	r2, #8
 8004dae:	69b9      	ldr	r1, [r7, #24]
 8004db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 0203 	and.w	r2, r3, #3
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 80b4 	beq.w	8004f5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	4b60      	ldr	r3, [pc, #384]	@ (8004f7c <HAL_GPIO_Init+0x30c>)
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfe:	4a5f      	ldr	r2, [pc, #380]	@ (8004f7c <HAL_GPIO_Init+0x30c>)
 8004e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e06:	4b5d      	ldr	r3, [pc, #372]	@ (8004f7c <HAL_GPIO_Init+0x30c>)
 8004e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e12:	4a5b      	ldr	r2, [pc, #364]	@ (8004f80 <HAL_GPIO_Init+0x310>)
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	089b      	lsrs	r3, r3, #2
 8004e18:	3302      	adds	r3, #2
 8004e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	220f      	movs	r2, #15
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a52      	ldr	r2, [pc, #328]	@ (8004f84 <HAL_GPIO_Init+0x314>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d02b      	beq.n	8004e96 <HAL_GPIO_Init+0x226>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a51      	ldr	r2, [pc, #324]	@ (8004f88 <HAL_GPIO_Init+0x318>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d025      	beq.n	8004e92 <HAL_GPIO_Init+0x222>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a50      	ldr	r2, [pc, #320]	@ (8004f8c <HAL_GPIO_Init+0x31c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01f      	beq.n	8004e8e <HAL_GPIO_Init+0x21e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a4f      	ldr	r2, [pc, #316]	@ (8004f90 <HAL_GPIO_Init+0x320>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d019      	beq.n	8004e8a <HAL_GPIO_Init+0x21a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a4e      	ldr	r2, [pc, #312]	@ (8004f94 <HAL_GPIO_Init+0x324>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <HAL_GPIO_Init+0x216>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a4d      	ldr	r2, [pc, #308]	@ (8004f98 <HAL_GPIO_Init+0x328>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00d      	beq.n	8004e82 <HAL_GPIO_Init+0x212>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a4c      	ldr	r2, [pc, #304]	@ (8004f9c <HAL_GPIO_Init+0x32c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d007      	beq.n	8004e7e <HAL_GPIO_Init+0x20e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a4b      	ldr	r2, [pc, #300]	@ (8004fa0 <HAL_GPIO_Init+0x330>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d101      	bne.n	8004e7a <HAL_GPIO_Init+0x20a>
 8004e76:	2307      	movs	r3, #7
 8004e78:	e00e      	b.n	8004e98 <HAL_GPIO_Init+0x228>
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	e00c      	b.n	8004e98 <HAL_GPIO_Init+0x228>
 8004e7e:	2306      	movs	r3, #6
 8004e80:	e00a      	b.n	8004e98 <HAL_GPIO_Init+0x228>
 8004e82:	2305      	movs	r3, #5
 8004e84:	e008      	b.n	8004e98 <HAL_GPIO_Init+0x228>
 8004e86:	2304      	movs	r3, #4
 8004e88:	e006      	b.n	8004e98 <HAL_GPIO_Init+0x228>
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e004      	b.n	8004e98 <HAL_GPIO_Init+0x228>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e002      	b.n	8004e98 <HAL_GPIO_Init+0x228>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <HAL_GPIO_Init+0x228>
 8004e96:	2300      	movs	r3, #0
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	f002 0203 	and.w	r2, r2, #3
 8004e9e:	0092      	lsls	r2, r2, #2
 8004ea0:	4093      	lsls	r3, r2
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ea8:	4935      	ldr	r1, [pc, #212]	@ (8004f80 <HAL_GPIO_Init+0x310>)
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	089b      	lsrs	r3, r3, #2
 8004eae:	3302      	adds	r3, #2
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8004fa4 <HAL_GPIO_Init+0x334>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eda:	4a32      	ldr	r2, [pc, #200]	@ (8004fa4 <HAL_GPIO_Init+0x334>)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ee0:	4b30      	ldr	r3, [pc, #192]	@ (8004fa4 <HAL_GPIO_Init+0x334>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f04:	4a27      	ldr	r2, [pc, #156]	@ (8004fa4 <HAL_GPIO_Init+0x334>)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f0a:	4b26      	ldr	r3, [pc, #152]	@ (8004fa4 <HAL_GPIO_Init+0x334>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <HAL_GPIO_Init+0x334>)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f34:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa4 <HAL_GPIO_Init+0x334>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f58:	4a12      	ldr	r2, [pc, #72]	@ (8004fa4 <HAL_GPIO_Init+0x334>)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3301      	adds	r3, #1
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	f67f ae90 	bls.w	8004c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	3724      	adds	r7, #36	@ 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	40013800 	.word	0x40013800
 8004f84:	40020000 	.word	0x40020000
 8004f88:	40020400 	.word	0x40020400
 8004f8c:	40020800 	.word	0x40020800
 8004f90:	40020c00 	.word	0x40020c00
 8004f94:	40021000 	.word	0x40021000
 8004f98:	40021400 	.word	0x40021400
 8004f9c:	40021800 	.word	0x40021800
 8004fa0:	40021c00 	.word	0x40021c00
 8004fa4:	40013c00 	.word	0x40013c00

08004fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	887b      	ldrh	r3, [r7, #2]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	73fb      	strb	r3, [r7, #15]
 8004fc4:	e001      	b.n	8004fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	807b      	strh	r3, [r7, #2]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fe8:	787b      	ldrb	r3, [r7, #1]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fee:	887a      	ldrh	r2, [r7, #2]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ff4:	e003      	b.n	8004ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ff6:	887b      	ldrh	r3, [r7, #2]
 8004ff8:	041a      	lsls	r2, r3, #16
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	619a      	str	r2, [r3, #24]
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e267      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d075      	beq.n	8005116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800502a:	4b88      	ldr	r3, [pc, #544]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b04      	cmp	r3, #4
 8005034:	d00c      	beq.n	8005050 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005036:	4b85      	ldr	r3, [pc, #532]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800503e:	2b08      	cmp	r3, #8
 8005040:	d112      	bne.n	8005068 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005042:	4b82      	ldr	r3, [pc, #520]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800504a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800504e:	d10b      	bne.n	8005068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	4b7e      	ldr	r3, [pc, #504]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05b      	beq.n	8005114 <HAL_RCC_OscConfig+0x108>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d157      	bne.n	8005114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e242      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005070:	d106      	bne.n	8005080 <HAL_RCC_OscConfig+0x74>
 8005072:	4b76      	ldr	r3, [pc, #472]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a75      	ldr	r2, [pc, #468]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e01d      	b.n	80050bc <HAL_RCC_OscConfig+0xb0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x98>
 800508a:	4b70      	ldr	r3, [pc, #448]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a6f      	ldr	r2, [pc, #444]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	4b6d      	ldr	r3, [pc, #436]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a6c      	ldr	r2, [pc, #432]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0xb0>
 80050a4:	4b69      	ldr	r3, [pc, #420]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a68      	ldr	r2, [pc, #416]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4b66      	ldr	r3, [pc, #408]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a65      	ldr	r2, [pc, #404]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c4:	f7fd ffca 	bl	800305c <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050cc:	f7fd ffc6 	bl	800305c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	@ 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e207      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	4b5b      	ldr	r3, [pc, #364]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0xc0>
 80050ea:	e014      	b.n	8005116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ec:	f7fd ffb6 	bl	800305c <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f4:	f7fd ffb2 	bl	800305c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	@ 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e1f3      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005106:	4b51      	ldr	r3, [pc, #324]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0xe8>
 8005112:	e000      	b.n	8005116 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d063      	beq.n	80051ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005122:	4b4a      	ldr	r3, [pc, #296]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512e:	4b47      	ldr	r3, [pc, #284]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005136:	2b08      	cmp	r3, #8
 8005138:	d11c      	bne.n	8005174 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513a:	4b44      	ldr	r3, [pc, #272]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d116      	bne.n	8005174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005146:	4b41      	ldr	r3, [pc, #260]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_RCC_OscConfig+0x152>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d001      	beq.n	800515e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e1c7      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515e:	4b3b      	ldr	r3, [pc, #236]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4937      	ldr	r1, [pc, #220]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005172:	e03a      	b.n	80051ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800517c:	4b34      	ldr	r3, [pc, #208]	@ (8005250 <HAL_RCC_OscConfig+0x244>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005182:	f7fd ff6b 	bl	800305c <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800518a:	f7fd ff67 	bl	800305c <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e1a8      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800519c:	4b2b      	ldr	r3, [pc, #172]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0f0      	beq.n	800518a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a8:	4b28      	ldr	r3, [pc, #160]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4925      	ldr	r1, [pc, #148]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]
 80051bc:	e015      	b.n	80051ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051be:	4b24      	ldr	r3, [pc, #144]	@ (8005250 <HAL_RCC_OscConfig+0x244>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fd ff4a 	bl	800305c <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051cc:	f7fd ff46 	bl	800305c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e187      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051de:	4b1b      	ldr	r3, [pc, #108]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d036      	beq.n	8005264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d016      	beq.n	800522c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051fe:	4b15      	ldr	r3, [pc, #84]	@ (8005254 <HAL_RCC_OscConfig+0x248>)
 8005200:	2201      	movs	r2, #1
 8005202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005204:	f7fd ff2a 	bl	800305c <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520c:	f7fd ff26 	bl	800305c <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e167      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521e:	4b0b      	ldr	r3, [pc, #44]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0f0      	beq.n	800520c <HAL_RCC_OscConfig+0x200>
 800522a:	e01b      	b.n	8005264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800522c:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <HAL_RCC_OscConfig+0x248>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005232:	f7fd ff13 	bl	800305c <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005238:	e00e      	b.n	8005258 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800523a:	f7fd ff0f 	bl	800305c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d907      	bls.n	8005258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e150      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
 800524c:	40023800 	.word	0x40023800
 8005250:	42470000 	.word	0x42470000
 8005254:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005258:	4b88      	ldr	r3, [pc, #544]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800525a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1ea      	bne.n	800523a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8097 	beq.w	80053a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005276:	4b81      	ldr	r3, [pc, #516]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	4b7d      	ldr	r3, [pc, #500]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	4a7c      	ldr	r2, [pc, #496]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800528c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005290:	6413      	str	r3, [r2, #64]	@ 0x40
 8005292:	4b7a      	ldr	r3, [pc, #488]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529a:	60bb      	str	r3, [r7, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a2:	4b77      	ldr	r3, [pc, #476]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d118      	bne.n	80052e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ae:	4b74      	ldr	r3, [pc, #464]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a73      	ldr	r2, [pc, #460]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ba:	f7fd fecf 	bl	800305c <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c2:	f7fd fecb 	bl	800305c <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e10c      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d106      	bne.n	80052f6 <HAL_RCC_OscConfig+0x2ea>
 80052e8:	4b64      	ldr	r3, [pc, #400]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80052ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ec:	4a63      	ldr	r2, [pc, #396]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f4:	e01c      	b.n	8005330 <HAL_RCC_OscConfig+0x324>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d10c      	bne.n	8005318 <HAL_RCC_OscConfig+0x30c>
 80052fe:	4b5f      	ldr	r3, [pc, #380]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005302:	4a5e      	ldr	r2, [pc, #376]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005304:	f043 0304 	orr.w	r3, r3, #4
 8005308:	6713      	str	r3, [r2, #112]	@ 0x70
 800530a:	4b5c      	ldr	r3, [pc, #368]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530e:	4a5b      	ldr	r2, [pc, #364]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	6713      	str	r3, [r2, #112]	@ 0x70
 8005316:	e00b      	b.n	8005330 <HAL_RCC_OscConfig+0x324>
 8005318:	4b58      	ldr	r3, [pc, #352]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531c:	4a57      	ldr	r2, [pc, #348]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	6713      	str	r3, [r2, #112]	@ 0x70
 8005324:	4b55      	ldr	r3, [pc, #340]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	4a54      	ldr	r2, [pc, #336]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800532a:	f023 0304 	bic.w	r3, r3, #4
 800532e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d015      	beq.n	8005364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fd fe90 	bl	800305c <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533e:	e00a      	b.n	8005356 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005340:	f7fd fe8c 	bl	800305c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e0cb      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005356:	4b49      	ldr	r3, [pc, #292]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ee      	beq.n	8005340 <HAL_RCC_OscConfig+0x334>
 8005362:	e014      	b.n	800538e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005364:	f7fd fe7a 	bl	800305c <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536a:	e00a      	b.n	8005382 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536c:	f7fd fe76 	bl	800305c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e0b5      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005382:	4b3e      	ldr	r3, [pc, #248]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1ee      	bne.n	800536c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800538e:	7dfb      	ldrb	r3, [r7, #23]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005394:	4b39      	ldr	r3, [pc, #228]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	4a38      	ldr	r2, [pc, #224]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800539a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800539e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80a1 	beq.w	80054ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053aa:	4b34      	ldr	r3, [pc, #208]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d05c      	beq.n	8005470 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d141      	bne.n	8005442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053be:	4b31      	ldr	r3, [pc, #196]	@ (8005484 <HAL_RCC_OscConfig+0x478>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c4:	f7fd fe4a 	bl	800305c <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053cc:	f7fd fe46 	bl	800305c <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e087      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053de:	4b27      	ldr	r3, [pc, #156]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	019b      	lsls	r3, r3, #6
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	3b01      	subs	r3, #1
 8005404:	041b      	lsls	r3, r3, #16
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	061b      	lsls	r3, r3, #24
 800540e:	491b      	ldr	r1, [pc, #108]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005410:	4313      	orrs	r3, r2
 8005412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005414:	4b1b      	ldr	r3, [pc, #108]	@ (8005484 <HAL_RCC_OscConfig+0x478>)
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541a:	f7fd fe1f 	bl	800305c <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005422:	f7fd fe1b 	bl	800305c <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e05c      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005434:	4b11      	ldr	r3, [pc, #68]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0x416>
 8005440:	e054      	b.n	80054ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005442:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <HAL_RCC_OscConfig+0x478>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005448:	f7fd fe08 	bl	800305c <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005450:	f7fd fe04 	bl	800305c <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e045      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005462:	4b06      	ldr	r3, [pc, #24]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0x444>
 800546e:	e03d      	b.n	80054ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d107      	bne.n	8005488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e038      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
 800547c:	40023800 	.word	0x40023800
 8005480:	40007000 	.word	0x40007000
 8005484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005488:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <HAL_RCC_OscConfig+0x4ec>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d028      	beq.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d121      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d11a      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054b8:	4013      	ands	r3, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d111      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	3b01      	subs	r3, #1
 80054d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d107      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800

080054fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0cc      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005510:	4b68      	ldr	r3, [pc, #416]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d90c      	bls.n	8005538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551e:	4b65      	ldr	r3, [pc, #404]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005526:	4b63      	ldr	r3, [pc, #396]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d001      	beq.n	8005538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0b8      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d020      	beq.n	8005586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005550:	4b59      	ldr	r3, [pc, #356]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	4a58      	ldr	r2, [pc, #352]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800555a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005568:	4b53      	ldr	r3, [pc, #332]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	4a52      	ldr	r2, [pc, #328]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005574:	4b50      	ldr	r3, [pc, #320]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	494d      	ldr	r1, [pc, #308]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d044      	beq.n	800561c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d107      	bne.n	80055aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559a:	4b47      	ldr	r3, [pc, #284]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d119      	bne.n	80055da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e07f      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d003      	beq.n	80055ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d107      	bne.n	80055ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ba:	4b3f      	ldr	r3, [pc, #252]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e06f      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ca:	4b3b      	ldr	r3, [pc, #236]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e067      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055da:	4b37      	ldr	r3, [pc, #220]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f023 0203 	bic.w	r2, r3, #3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4934      	ldr	r1, [pc, #208]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055ec:	f7fd fd36 	bl	800305c <HAL_GetTick>
 80055f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f2:	e00a      	b.n	800560a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f4:	f7fd fd32 	bl	800305c <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e04f      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560a:	4b2b      	ldr	r3, [pc, #172]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 020c 	and.w	r2, r3, #12
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	429a      	cmp	r2, r3
 800561a:	d1eb      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800561c:	4b25      	ldr	r3, [pc, #148]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d20c      	bcs.n	8005644 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562a:	4b22      	ldr	r3, [pc, #136]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005632:	4b20      	ldr	r3, [pc, #128]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d001      	beq.n	8005644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e032      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005650:	4b19      	ldr	r3, [pc, #100]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4916      	ldr	r1, [pc, #88]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800566e:	4b12      	ldr	r3, [pc, #72]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	490e      	ldr	r1, [pc, #56]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	4313      	orrs	r3, r2
 8005680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005682:	f000 f821 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005686:	4602      	mov	r2, r0
 8005688:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	091b      	lsrs	r3, r3, #4
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	490a      	ldr	r1, [pc, #40]	@ (80056bc <HAL_RCC_ClockConfig+0x1c0>)
 8005694:	5ccb      	ldrb	r3, [r1, r3]
 8005696:	fa22 f303 	lsr.w	r3, r2, r3
 800569a:	4a09      	ldr	r2, [pc, #36]	@ (80056c0 <HAL_RCC_ClockConfig+0x1c4>)
 800569c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800569e:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <HAL_RCC_ClockConfig+0x1c8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fd fc96 	bl	8002fd4 <HAL_InitTick>

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40023c00 	.word	0x40023c00
 80056b8:	40023800 	.word	0x40023800
 80056bc:	08009070 	.word	0x08009070
 80056c0:	20000008 	.word	0x20000008
 80056c4:	20000050 	.word	0x20000050

080056c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056cc:	b090      	sub	sp, #64	@ 0x40
 80056ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e0:	4b59      	ldr	r3, [pc, #356]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 030c 	and.w	r3, r3, #12
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d00d      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0x40>
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	f200 80a1 	bhi.w	8005834 <HAL_RCC_GetSysClockFreq+0x16c>
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x34>
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d003      	beq.n	8005702 <HAL_RCC_GetSysClockFreq+0x3a>
 80056fa:	e09b      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056fc:	4b53      	ldr	r3, [pc, #332]	@ (800584c <HAL_RCC_GetSysClockFreq+0x184>)
 80056fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005700:	e09b      	b.n	800583a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005702:	4b53      	ldr	r3, [pc, #332]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x188>)
 8005704:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005706:	e098      	b.n	800583a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005708:	4b4f      	ldr	r3, [pc, #316]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005710:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005712:	4b4d      	ldr	r3, [pc, #308]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d028      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800571e:	4b4a      	ldr	r3, [pc, #296]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	099b      	lsrs	r3, r3, #6
 8005724:	2200      	movs	r2, #0
 8005726:	623b      	str	r3, [r7, #32]
 8005728:	627a      	str	r2, [r7, #36]	@ 0x24
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005730:	2100      	movs	r1, #0
 8005732:	4b47      	ldr	r3, [pc, #284]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x188>)
 8005734:	fb03 f201 	mul.w	r2, r3, r1
 8005738:	2300      	movs	r3, #0
 800573a:	fb00 f303 	mul.w	r3, r0, r3
 800573e:	4413      	add	r3, r2
 8005740:	4a43      	ldr	r2, [pc, #268]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x188>)
 8005742:	fba0 1202 	umull	r1, r2, r0, r2
 8005746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005748:	460a      	mov	r2, r1
 800574a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800574c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800574e:	4413      	add	r3, r2
 8005750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005754:	2200      	movs	r2, #0
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	61fa      	str	r2, [r7, #28]
 800575a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800575e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005762:	f7fb f97b 	bl	8000a5c <__aeabi_uldivmod>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4613      	mov	r3, r2
 800576c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800576e:	e053      	b.n	8005818 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005770:	4b35      	ldr	r3, [pc, #212]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	099b      	lsrs	r3, r3, #6
 8005776:	2200      	movs	r2, #0
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	617a      	str	r2, [r7, #20]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005782:	f04f 0b00 	mov.w	fp, #0
 8005786:	4652      	mov	r2, sl
 8005788:	465b      	mov	r3, fp
 800578a:	f04f 0000 	mov.w	r0, #0
 800578e:	f04f 0100 	mov.w	r1, #0
 8005792:	0159      	lsls	r1, r3, #5
 8005794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005798:	0150      	lsls	r0, r2, #5
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	ebb2 080a 	subs.w	r8, r2, sl
 80057a2:	eb63 090b 	sbc.w	r9, r3, fp
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057ba:	ebb2 0408 	subs.w	r4, r2, r8
 80057be:	eb63 0509 	sbc.w	r5, r3, r9
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	00eb      	lsls	r3, r5, #3
 80057cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057d0:	00e2      	lsls	r2, r4, #3
 80057d2:	4614      	mov	r4, r2
 80057d4:	461d      	mov	r5, r3
 80057d6:	eb14 030a 	adds.w	r3, r4, sl
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	eb45 030b 	adc.w	r3, r5, fp
 80057e0:	607b      	str	r3, [r7, #4]
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057ee:	4629      	mov	r1, r5
 80057f0:	028b      	lsls	r3, r1, #10
 80057f2:	4621      	mov	r1, r4
 80057f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057f8:	4621      	mov	r1, r4
 80057fa:	028a      	lsls	r2, r1, #10
 80057fc:	4610      	mov	r0, r2
 80057fe:	4619      	mov	r1, r3
 8005800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005802:	2200      	movs	r2, #0
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	60fa      	str	r2, [r7, #12]
 8005808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800580c:	f7fb f926 	bl	8000a5c <__aeabi_uldivmod>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4613      	mov	r3, r2
 8005816:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005818:	4b0b      	ldr	r3, [pc, #44]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	3301      	adds	r3, #1
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005828:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005830:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005832:	e002      	b.n	800583a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005834:	4b05      	ldr	r3, [pc, #20]	@ (800584c <HAL_RCC_GetSysClockFreq+0x184>)
 8005836:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800583a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800583c:	4618      	mov	r0, r3
 800583e:	3740      	adds	r7, #64	@ 0x40
 8005840:	46bd      	mov	sp, r7
 8005842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005846:	bf00      	nop
 8005848:	40023800 	.word	0x40023800
 800584c:	00f42400 	.word	0x00f42400
 8005850:	017d7840 	.word	0x017d7840

08005854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005858:	4b03      	ldr	r3, [pc, #12]	@ (8005868 <HAL_RCC_GetHCLKFreq+0x14>)
 800585a:	681b      	ldr	r3, [r3, #0]
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20000008 	.word	0x20000008

0800586c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005870:	f7ff fff0 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 8005874:	4602      	mov	r2, r0
 8005876:	4b05      	ldr	r3, [pc, #20]	@ (800588c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	0a9b      	lsrs	r3, r3, #10
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	4903      	ldr	r1, [pc, #12]	@ (8005890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005882:	5ccb      	ldrb	r3, [r1, r3]
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005888:	4618      	mov	r0, r3
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40023800 	.word	0x40023800
 8005890:	08009080 	.word	0x08009080

08005894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005898:	f7ff ffdc 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 800589c:	4602      	mov	r2, r0
 800589e:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	0b5b      	lsrs	r3, r3, #13
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	4903      	ldr	r1, [pc, #12]	@ (80058b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058aa:	5ccb      	ldrb	r3, [r1, r3]
 80058ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40023800 	.word	0x40023800
 80058b8:	08009080 	.word	0x08009080

080058bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e07b      	b.n	80059c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d108      	bne.n	80058e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058de:	d009      	beq.n	80058f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	61da      	str	r2, [r3, #28]
 80058e6:	e005      	b.n	80058f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fc fa34 	bl	8001d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800592a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005978:	ea42 0103 	orr.w	r1, r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005980:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	0c1b      	lsrs	r3, r3, #16
 8005992:	f003 0104 	and.w	r1, r3, #4
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599a:	f003 0210 	and.w	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b088      	sub	sp, #32
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059de:	f7fd fb3d 	bl	800305c <HAL_GetTick>
 80059e2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d001      	beq.n	80059f8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
 80059f6:	e12a      	b.n	8005c4e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <HAL_SPI_Transmit+0x36>
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e122      	b.n	8005c4e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_SPI_Transmit+0x48>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e11b      	b.n	8005c4e <HAL_SPI_Transmit+0x280>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2203      	movs	r2, #3
 8005a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	88fa      	ldrh	r2, [r7, #6]
 8005a36:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a64:	d10f      	bne.n	8005a86 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a90:	2b40      	cmp	r3, #64	@ 0x40
 8005a92:	d007      	beq.n	8005aa4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aac:	d152      	bne.n	8005b54 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_SPI_Transmit+0xee>
 8005ab6:	8b7b      	ldrh	r3, [r7, #26]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d145      	bne.n	8005b48 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac0:	881a      	ldrh	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005acc:	1c9a      	adds	r2, r3, #2
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ae0:	e032      	b.n	8005b48 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d112      	bne.n	8005b16 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af4:	881a      	ldrh	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b00:	1c9a      	adds	r2, r3, #2
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b14:	e018      	b.n	8005b48 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b16:	f7fd faa1 	bl	800305c <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d803      	bhi.n	8005b2e <HAL_SPI_Transmit+0x160>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d102      	bne.n	8005b34 <HAL_SPI_Transmit+0x166>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d109      	bne.n	8005b48 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e082      	b.n	8005c4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1c7      	bne.n	8005ae2 <HAL_SPI_Transmit+0x114>
 8005b52:	e053      	b.n	8005bfc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_SPI_Transmit+0x194>
 8005b5c:	8b7b      	ldrh	r3, [r7, #26]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d147      	bne.n	8005bf2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	7812      	ldrb	r2, [r2, #0]
 8005b6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b88:	e033      	b.n	8005bf2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d113      	bne.n	8005bc0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	7812      	ldrb	r2, [r2, #0]
 8005ba4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005bbe:	e018      	b.n	8005bf2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bc0:	f7fd fa4c 	bl	800305c <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d803      	bhi.n	8005bd8 <HAL_SPI_Transmit+0x20a>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d102      	bne.n	8005bde <HAL_SPI_Transmit+0x210>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d109      	bne.n	8005bf2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e02d      	b.n	8005c4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1c6      	bne.n	8005b8a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f8b1 	bl	8005d68 <SPI_EndRxTxTransaction>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3720      	adds	r7, #32
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	4613      	mov	r3, r2
 8005c66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c68:	f7fd f9f8 	bl	800305c <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	4413      	add	r3, r2
 8005c76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c78:	f7fd f9f0 	bl	800305c <HAL_GetTick>
 8005c7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c7e:	4b39      	ldr	r3, [pc, #228]	@ (8005d64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	015b      	lsls	r3, r3, #5
 8005c84:	0d1b      	lsrs	r3, r3, #20
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	fb02 f303 	mul.w	r3, r2, r3
 8005c8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c8e:	e054      	b.n	8005d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d050      	beq.n	8005d3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c98:	f7fd f9e0 	bl	800305c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d902      	bls.n	8005cae <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d13d      	bne.n	8005d2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cc6:	d111      	bne.n	8005cec <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cd0:	d004      	beq.n	8005cdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cda:	d107      	bne.n	8005cec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cf4:	d10f      	bne.n	8005d16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e017      	b.n	8005d5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4013      	ands	r3, r2
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	bf0c      	ite	eq
 8005d4a:	2301      	moveq	r3, #1
 8005d4c:	2300      	movne	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d19b      	bne.n	8005c90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000008 	.word	0x20000008

08005d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	2102      	movs	r1, #2
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f7ff ff6a 	bl	8005c58 <SPI_WaitFlagStateUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8e:	f043 0220 	orr.w	r2, r3, #32
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e032      	b.n	8005e00 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e08 <SPI_EndRxTxTransaction+0xa0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e0c <SPI_EndRxTxTransaction+0xa4>)
 8005da0:	fba2 2303 	umull	r2, r3, r2, r3
 8005da4:	0d5b      	lsrs	r3, r3, #21
 8005da6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005db8:	d112      	bne.n	8005de0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2180      	movs	r1, #128	@ 0x80
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff ff47 	bl	8005c58 <SPI_WaitFlagStateUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d016      	beq.n	8005dfe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd4:	f043 0220 	orr.w	r2, r3, #32
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e00f      	b.n	8005e00 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df6:	2b80      	cmp	r3, #128	@ 0x80
 8005df8:	d0f2      	beq.n	8005de0 <SPI_EndRxTxTransaction+0x78>
 8005dfa:	e000      	b.n	8005dfe <SPI_EndRxTxTransaction+0x96>
        break;
 8005dfc:	bf00      	nop
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20000008 	.word	0x20000008
 8005e0c:	165e9f81 	.word	0x165e9f81

08005e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e042      	b.n	8005ea8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc f808 	bl	8001e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2224      	movs	r2, #36	@ 0x24
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f82b 	bl	8005eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eb4:	b0c0      	sub	sp, #256	@ 0x100
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ecc:	68d9      	ldr	r1, [r3, #12]
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	ea40 0301 	orr.w	r3, r0, r1
 8005ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f08:	f021 010c 	bic.w	r1, r1, #12
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f16:	430b      	orrs	r3, r1
 8005f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2a:	6999      	ldr	r1, [r3, #24]
 8005f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	ea40 0301 	orr.w	r3, r0, r1
 8005f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b8f      	ldr	r3, [pc, #572]	@ (800617c <UART_SetConfig+0x2cc>)
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d005      	beq.n	8005f50 <UART_SetConfig+0xa0>
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b8d      	ldr	r3, [pc, #564]	@ (8006180 <UART_SetConfig+0x2d0>)
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d104      	bne.n	8005f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f50:	f7ff fca0 	bl	8005894 <HAL_RCC_GetPCLK2Freq>
 8005f54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f58:	e003      	b.n	8005f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f5a:	f7ff fc87 	bl	800586c <HAL_RCC_GetPCLK1Freq>
 8005f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f6c:	f040 810c 	bne.w	8006188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f82:	4622      	mov	r2, r4
 8005f84:	462b      	mov	r3, r5
 8005f86:	1891      	adds	r1, r2, r2
 8005f88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f8a:	415b      	adcs	r3, r3
 8005f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f92:	4621      	mov	r1, r4
 8005f94:	eb12 0801 	adds.w	r8, r2, r1
 8005f98:	4629      	mov	r1, r5
 8005f9a:	eb43 0901 	adc.w	r9, r3, r1
 8005f9e:	f04f 0200 	mov.w	r2, #0
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fb2:	4690      	mov	r8, r2
 8005fb4:	4699      	mov	r9, r3
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	eb18 0303 	adds.w	r3, r8, r3
 8005fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fc0:	462b      	mov	r3, r5
 8005fc2:	eb49 0303 	adc.w	r3, r9, r3
 8005fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fde:	460b      	mov	r3, r1
 8005fe0:	18db      	adds	r3, r3, r3
 8005fe2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	eb42 0303 	adc.w	r3, r2, r3
 8005fea:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ff4:	f7fa fd32 	bl	8000a5c <__aeabi_uldivmod>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4b61      	ldr	r3, [pc, #388]	@ (8006184 <UART_SetConfig+0x2d4>)
 8005ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	011c      	lsls	r4, r3, #4
 8006006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600a:	2200      	movs	r2, #0
 800600c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006010:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	1891      	adds	r1, r2, r2
 800601e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006020:	415b      	adcs	r3, r3
 8006022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006028:	4641      	mov	r1, r8
 800602a:	eb12 0a01 	adds.w	sl, r2, r1
 800602e:	4649      	mov	r1, r9
 8006030:	eb43 0b01 	adc.w	fp, r3, r1
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006048:	4692      	mov	sl, r2
 800604a:	469b      	mov	fp, r3
 800604c:	4643      	mov	r3, r8
 800604e:	eb1a 0303 	adds.w	r3, sl, r3
 8006052:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006056:	464b      	mov	r3, r9
 8006058:	eb4b 0303 	adc.w	r3, fp, r3
 800605c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800606c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006074:	460b      	mov	r3, r1
 8006076:	18db      	adds	r3, r3, r3
 8006078:	643b      	str	r3, [r7, #64]	@ 0x40
 800607a:	4613      	mov	r3, r2
 800607c:	eb42 0303 	adc.w	r3, r2, r3
 8006080:	647b      	str	r3, [r7, #68]	@ 0x44
 8006082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800608a:	f7fa fce7 	bl	8000a5c <__aeabi_uldivmod>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4611      	mov	r1, r2
 8006094:	4b3b      	ldr	r3, [pc, #236]	@ (8006184 <UART_SetConfig+0x2d4>)
 8006096:	fba3 2301 	umull	r2, r3, r3, r1
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	2264      	movs	r2, #100	@ 0x64
 800609e:	fb02 f303 	mul.w	r3, r2, r3
 80060a2:	1acb      	subs	r3, r1, r3
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060aa:	4b36      	ldr	r3, [pc, #216]	@ (8006184 <UART_SetConfig+0x2d4>)
 80060ac:	fba3 2302 	umull	r2, r3, r3, r2
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060b8:	441c      	add	r4, r3
 80060ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060cc:	4642      	mov	r2, r8
 80060ce:	464b      	mov	r3, r9
 80060d0:	1891      	adds	r1, r2, r2
 80060d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060d4:	415b      	adcs	r3, r3
 80060d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060dc:	4641      	mov	r1, r8
 80060de:	1851      	adds	r1, r2, r1
 80060e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80060e2:	4649      	mov	r1, r9
 80060e4:	414b      	adcs	r3, r1
 80060e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060f4:	4659      	mov	r1, fp
 80060f6:	00cb      	lsls	r3, r1, #3
 80060f8:	4651      	mov	r1, sl
 80060fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060fe:	4651      	mov	r1, sl
 8006100:	00ca      	lsls	r2, r1, #3
 8006102:	4610      	mov	r0, r2
 8006104:	4619      	mov	r1, r3
 8006106:	4603      	mov	r3, r0
 8006108:	4642      	mov	r2, r8
 800610a:	189b      	adds	r3, r3, r2
 800610c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006110:	464b      	mov	r3, r9
 8006112:	460a      	mov	r2, r1
 8006114:	eb42 0303 	adc.w	r3, r2, r3
 8006118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006128:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800612c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006130:	460b      	mov	r3, r1
 8006132:	18db      	adds	r3, r3, r3
 8006134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006136:	4613      	mov	r3, r2
 8006138:	eb42 0303 	adc.w	r3, r2, r3
 800613c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800613e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006146:	f7fa fc89 	bl	8000a5c <__aeabi_uldivmod>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <UART_SetConfig+0x2d4>)
 8006150:	fba3 1302 	umull	r1, r3, r3, r2
 8006154:	095b      	lsrs	r3, r3, #5
 8006156:	2164      	movs	r1, #100	@ 0x64
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	3332      	adds	r3, #50	@ 0x32
 8006162:	4a08      	ldr	r2, [pc, #32]	@ (8006184 <UART_SetConfig+0x2d4>)
 8006164:	fba2 2303 	umull	r2, r3, r2, r3
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	f003 0207 	and.w	r2, r3, #7
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4422      	add	r2, r4
 8006176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006178:	e106      	b.n	8006388 <UART_SetConfig+0x4d8>
 800617a:	bf00      	nop
 800617c:	40011000 	.word	0x40011000
 8006180:	40011400 	.word	0x40011400
 8006184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800618c:	2200      	movs	r2, #0
 800618e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006192:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800619a:	4642      	mov	r2, r8
 800619c:	464b      	mov	r3, r9
 800619e:	1891      	adds	r1, r2, r2
 80061a0:	6239      	str	r1, [r7, #32]
 80061a2:	415b      	adcs	r3, r3
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061aa:	4641      	mov	r1, r8
 80061ac:	1854      	adds	r4, r2, r1
 80061ae:	4649      	mov	r1, r9
 80061b0:	eb43 0501 	adc.w	r5, r3, r1
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	00eb      	lsls	r3, r5, #3
 80061be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061c2:	00e2      	lsls	r2, r4, #3
 80061c4:	4614      	mov	r4, r2
 80061c6:	461d      	mov	r5, r3
 80061c8:	4643      	mov	r3, r8
 80061ca:	18e3      	adds	r3, r4, r3
 80061cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061d0:	464b      	mov	r3, r9
 80061d2:	eb45 0303 	adc.w	r3, r5, r3
 80061d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061f6:	4629      	mov	r1, r5
 80061f8:	008b      	lsls	r3, r1, #2
 80061fa:	4621      	mov	r1, r4
 80061fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006200:	4621      	mov	r1, r4
 8006202:	008a      	lsls	r2, r1, #2
 8006204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006208:	f7fa fc28 	bl	8000a5c <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4b60      	ldr	r3, [pc, #384]	@ (8006394 <UART_SetConfig+0x4e4>)
 8006212:	fba3 2302 	umull	r2, r3, r3, r2
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	011c      	lsls	r4, r3, #4
 800621a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006224:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800622c:	4642      	mov	r2, r8
 800622e:	464b      	mov	r3, r9
 8006230:	1891      	adds	r1, r2, r2
 8006232:	61b9      	str	r1, [r7, #24]
 8006234:	415b      	adcs	r3, r3
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800623c:	4641      	mov	r1, r8
 800623e:	1851      	adds	r1, r2, r1
 8006240:	6139      	str	r1, [r7, #16]
 8006242:	4649      	mov	r1, r9
 8006244:	414b      	adcs	r3, r1
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006254:	4659      	mov	r1, fp
 8006256:	00cb      	lsls	r3, r1, #3
 8006258:	4651      	mov	r1, sl
 800625a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800625e:	4651      	mov	r1, sl
 8006260:	00ca      	lsls	r2, r1, #3
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	4603      	mov	r3, r0
 8006268:	4642      	mov	r2, r8
 800626a:	189b      	adds	r3, r3, r2
 800626c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006270:	464b      	mov	r3, r9
 8006272:	460a      	mov	r2, r1
 8006274:	eb42 0303 	adc.w	r3, r2, r3
 8006278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006286:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006294:	4649      	mov	r1, r9
 8006296:	008b      	lsls	r3, r1, #2
 8006298:	4641      	mov	r1, r8
 800629a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800629e:	4641      	mov	r1, r8
 80062a0:	008a      	lsls	r2, r1, #2
 80062a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80062a6:	f7fa fbd9 	bl	8000a5c <__aeabi_uldivmod>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	4b38      	ldr	r3, [pc, #224]	@ (8006394 <UART_SetConfig+0x4e4>)
 80062b2:	fba3 2301 	umull	r2, r3, r3, r1
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	2264      	movs	r2, #100	@ 0x64
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	1acb      	subs	r3, r1, r3
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	3332      	adds	r3, #50	@ 0x32
 80062c4:	4a33      	ldr	r2, [pc, #204]	@ (8006394 <UART_SetConfig+0x4e4>)
 80062c6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062d0:	441c      	add	r4, r3
 80062d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d6:	2200      	movs	r2, #0
 80062d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80062da:	677a      	str	r2, [r7, #116]	@ 0x74
 80062dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062e0:	4642      	mov	r2, r8
 80062e2:	464b      	mov	r3, r9
 80062e4:	1891      	adds	r1, r2, r2
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	415b      	adcs	r3, r3
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062f0:	4641      	mov	r1, r8
 80062f2:	1851      	adds	r1, r2, r1
 80062f4:	6039      	str	r1, [r7, #0]
 80062f6:	4649      	mov	r1, r9
 80062f8:	414b      	adcs	r3, r1
 80062fa:	607b      	str	r3, [r7, #4]
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006308:	4659      	mov	r1, fp
 800630a:	00cb      	lsls	r3, r1, #3
 800630c:	4651      	mov	r1, sl
 800630e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006312:	4651      	mov	r1, sl
 8006314:	00ca      	lsls	r2, r1, #3
 8006316:	4610      	mov	r0, r2
 8006318:	4619      	mov	r1, r3
 800631a:	4603      	mov	r3, r0
 800631c:	4642      	mov	r2, r8
 800631e:	189b      	adds	r3, r3, r2
 8006320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006322:	464b      	mov	r3, r9
 8006324:	460a      	mov	r2, r1
 8006326:	eb42 0303 	adc.w	r3, r2, r3
 800632a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	663b      	str	r3, [r7, #96]	@ 0x60
 8006336:	667a      	str	r2, [r7, #100]	@ 0x64
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006344:	4649      	mov	r1, r9
 8006346:	008b      	lsls	r3, r1, #2
 8006348:	4641      	mov	r1, r8
 800634a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800634e:	4641      	mov	r1, r8
 8006350:	008a      	lsls	r2, r1, #2
 8006352:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006356:	f7fa fb81 	bl	8000a5c <__aeabi_uldivmod>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <UART_SetConfig+0x4e4>)
 8006360:	fba3 1302 	umull	r1, r3, r3, r2
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	2164      	movs	r1, #100	@ 0x64
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	3332      	adds	r3, #50	@ 0x32
 8006372:	4a08      	ldr	r2, [pc, #32]	@ (8006394 <UART_SetConfig+0x4e4>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	f003 020f 	and.w	r2, r3, #15
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4422      	add	r2, r4
 8006386:	609a      	str	r2, [r3, #8]
}
 8006388:	bf00      	nop
 800638a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800638e:	46bd      	mov	sp, r7
 8006390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006394:	51eb851f 	.word	0x51eb851f

08006398 <__NVIC_SetPriority>:
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	6039      	str	r1, [r7, #0]
 80063a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	db0a      	blt.n	80063c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	490c      	ldr	r1, [pc, #48]	@ (80063e4 <__NVIC_SetPriority+0x4c>)
 80063b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b6:	0112      	lsls	r2, r2, #4
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	440b      	add	r3, r1
 80063bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80063c0:	e00a      	b.n	80063d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	4908      	ldr	r1, [pc, #32]	@ (80063e8 <__NVIC_SetPriority+0x50>)
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	3b04      	subs	r3, #4
 80063d0:	0112      	lsls	r2, r2, #4
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	440b      	add	r3, r1
 80063d6:	761a      	strb	r2, [r3, #24]
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	e000e100 	.word	0xe000e100
 80063e8:	e000ed00 	.word	0xe000ed00

080063ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80063f0:	2100      	movs	r1, #0
 80063f2:	f06f 0004 	mvn.w	r0, #4
 80063f6:	f7ff ffcf 	bl	8006398 <__NVIC_SetPriority>
#endif
}
 80063fa:	bf00      	nop
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006406:	f3ef 8305 	mrs	r3, IPSR
 800640a:	603b      	str	r3, [r7, #0]
  return(result);
 800640c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006412:	f06f 0305 	mvn.w	r3, #5
 8006416:	607b      	str	r3, [r7, #4]
 8006418:	e00c      	b.n	8006434 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800641a:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <osKernelInitialize+0x44>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d105      	bne.n	800642e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006422:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <osKernelInitialize+0x44>)
 8006424:	2201      	movs	r2, #1
 8006426:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006428:	2300      	movs	r3, #0
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	e002      	b.n	8006434 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006434:	687b      	ldr	r3, [r7, #4]
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	200003a0 	.word	0x200003a0

08006448 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800644e:	f3ef 8305 	mrs	r3, IPSR
 8006452:	603b      	str	r3, [r7, #0]
  return(result);
 8006454:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <osKernelStart+0x1a>
    stat = osErrorISR;
 800645a:	f06f 0305 	mvn.w	r3, #5
 800645e:	607b      	str	r3, [r7, #4]
 8006460:	e010      	b.n	8006484 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006462:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <osKernelStart+0x48>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d109      	bne.n	800647e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800646a:	f7ff ffbf 	bl	80063ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800646e:	4b08      	ldr	r3, [pc, #32]	@ (8006490 <osKernelStart+0x48>)
 8006470:	2202      	movs	r2, #2
 8006472:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006474:	f001 f87a 	bl	800756c <vTaskStartScheduler>
      stat = osOK;
 8006478:	2300      	movs	r3, #0
 800647a:	607b      	str	r3, [r7, #4]
 800647c:	e002      	b.n	8006484 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800647e:	f04f 33ff 	mov.w	r3, #4294967295
 8006482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006484:	687b      	ldr	r3, [r7, #4]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	200003a0 	.word	0x200003a0

08006494 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b08e      	sub	sp, #56	@ 0x38
 8006498:	af04      	add	r7, sp, #16
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064a4:	f3ef 8305 	mrs	r3, IPSR
 80064a8:	617b      	str	r3, [r7, #20]
  return(result);
 80064aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d17e      	bne.n	80065ae <osThreadNew+0x11a>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d07b      	beq.n	80065ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80064b6:	2380      	movs	r3, #128	@ 0x80
 80064b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80064ba:	2318      	movs	r3, #24
 80064bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80064c2:	f04f 33ff 	mov.w	r3, #4294967295
 80064c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d045      	beq.n	800655a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <osThreadNew+0x48>
        name = attr->name;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d008      	beq.n	8006502 <osThreadNew+0x6e>
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	2b38      	cmp	r3, #56	@ 0x38
 80064f4:	d805      	bhi.n	8006502 <osThreadNew+0x6e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <osThreadNew+0x72>
        return (NULL);
 8006502:	2300      	movs	r3, #0
 8006504:	e054      	b.n	80065b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	089b      	lsrs	r3, r3, #2
 8006514:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00e      	beq.n	800653c <osThreadNew+0xa8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b5b      	cmp	r3, #91	@ 0x5b
 8006524:	d90a      	bls.n	800653c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800652a:	2b00      	cmp	r3, #0
 800652c:	d006      	beq.n	800653c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <osThreadNew+0xa8>
        mem = 1;
 8006536:	2301      	movs	r3, #1
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	e010      	b.n	800655e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10c      	bne.n	800655e <osThreadNew+0xca>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d108      	bne.n	800655e <osThreadNew+0xca>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <osThreadNew+0xca>
          mem = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	61bb      	str	r3, [r7, #24]
 8006558:	e001      	b.n	800655e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d110      	bne.n	8006586 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800656c:	9202      	str	r2, [sp, #8]
 800656e:	9301      	str	r3, [sp, #4]
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fe1a 	bl	80071b4 <xTaskCreateStatic>
 8006580:	4603      	mov	r3, r0
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	e013      	b.n	80065ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d110      	bne.n	80065ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	b29a      	uxth	r2, r3
 8006590:	f107 0310 	add.w	r3, r7, #16
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fe68 	bl	8007274 <xTaskCreate>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d001      	beq.n	80065ae <osThreadNew+0x11a>
            hTask = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065ae:	693b      	ldr	r3, [r7, #16]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3728      	adds	r7, #40	@ 0x28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c0:	f3ef 8305 	mrs	r3, IPSR
 80065c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80065c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <osDelay+0x1c>
    stat = osErrorISR;
 80065cc:	f06f 0305 	mvn.w	r3, #5
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	e007      	b.n	80065e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d002      	beq.n	80065e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 ff8e 	bl	8007500 <vTaskDelay>
    }
  }

  return (stat);
 80065e4:	68fb      	ldr	r3, [r7, #12]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4a07      	ldr	r2, [pc, #28]	@ (800661c <vApplicationGetIdleTaskMemory+0x2c>)
 8006600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4a06      	ldr	r2, [pc, #24]	@ (8006620 <vApplicationGetIdleTaskMemory+0x30>)
 8006606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2280      	movs	r2, #128	@ 0x80
 800660c:	601a      	str	r2, [r3, #0]
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	200003a4 	.word	0x200003a4
 8006620:	20000400 	.word	0x20000400

08006624 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4a07      	ldr	r2, [pc, #28]	@ (8006650 <vApplicationGetTimerTaskMemory+0x2c>)
 8006634:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	4a06      	ldr	r2, [pc, #24]	@ (8006654 <vApplicationGetTimerTaskMemory+0x30>)
 800663a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	20000600 	.word	0x20000600
 8006654:	2000065c 	.word	0x2000065c

08006658 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f103 0208 	add.w	r2, r3, #8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f04f 32ff 	mov.w	r2, #4294967295
 8006670:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f103 0208 	add.w	r2, r3, #8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f103 0208 	add.w	r2, r3, #8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	601a      	str	r2, [r3, #0]
}
 80066ee:	bf00      	nop
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006710:	d103      	bne.n	800671a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e00c      	b.n	8006734 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3308      	adds	r3, #8
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	e002      	b.n	8006728 <vListInsert+0x2e>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	429a      	cmp	r2, r3
 8006732:	d2f6      	bcs.n	8006722 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	601a      	str	r2, [r3, #0]
}
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6892      	ldr	r2, [r2, #8]
 8006782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6852      	ldr	r2, [r2, #4]
 800678c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d103      	bne.n	80067a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	1e5a      	subs	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067ec:	f002 f87c 	bl	80088e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	441a      	add	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681c:	3b01      	subs	r3, #1
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	441a      	add	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	22ff      	movs	r2, #255	@ 0xff
 8006830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	22ff      	movs	r2, #255	@ 0xff
 8006838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d114      	bne.n	800686c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d01a      	beq.n	8006880 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3310      	adds	r3, #16
 800684e:	4618      	mov	r0, r3
 8006850:	f001 f91a 	bl	8007a88 <xTaskRemoveFromEventList>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d012      	beq.n	8006880 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800685a:	4b0d      	ldr	r3, [pc, #52]	@ (8006890 <xQueueGenericReset+0xd0>)
 800685c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	e009      	b.n	8006880 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3310      	adds	r3, #16
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff fef1 	bl	8006658 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3324      	adds	r3, #36	@ 0x24
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff feec 	bl	8006658 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006880:	f002 f864 	bl	800894c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006884:	2301      	movs	r3, #1
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	e000ed04 	.word	0xe000ed04

08006894 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08e      	sub	sp, #56	@ 0x38
 8006898:	af02      	add	r7, sp, #8
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10b      	bne.n	80068de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	e7fd      	b.n	80068da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <xQueueGenericCreateStatic+0x56>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <xQueueGenericCreateStatic+0x5a>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <xQueueGenericCreateStatic+0x5c>
 80068ee:	2300      	movs	r3, #0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	623b      	str	r3, [r7, #32]
}
 8006906:	bf00      	nop
 8006908:	bf00      	nop
 800690a:	e7fd      	b.n	8006908 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d102      	bne.n	8006918 <xQueueGenericCreateStatic+0x84>
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <xQueueGenericCreateStatic+0x88>
 8006918:	2301      	movs	r3, #1
 800691a:	e000      	b.n	800691e <xQueueGenericCreateStatic+0x8a>
 800691c:	2300      	movs	r3, #0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10b      	bne.n	800693a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	61fb      	str	r3, [r7, #28]
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	e7fd      	b.n	8006936 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800693a:	2350      	movs	r3, #80	@ 0x50
 800693c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b50      	cmp	r3, #80	@ 0x50
 8006942:	d00b      	beq.n	800695c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	61bb      	str	r3, [r7, #24]
}
 8006956:	bf00      	nop
 8006958:	bf00      	nop
 800695a:	e7fd      	b.n	8006958 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800695c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00d      	beq.n	8006984 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006970:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	4613      	mov	r3, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f805 	bl	800698e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006986:	4618      	mov	r0, r3
 8006988:	3730      	adds	r7, #48	@ 0x30
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d103      	bne.n	80069aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	e002      	b.n	80069b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069bc:	2101      	movs	r1, #1
 80069be:	69b8      	ldr	r0, [r7, #24]
 80069c0:	f7ff fefe 	bl	80067c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069cc:	bf00      	nop
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08e      	sub	sp, #56	@ 0x38
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069e2:	2300      	movs	r3, #0
 80069e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <xQueueGenericSend+0x34>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a02:	bf00      	nop
 8006a04:	bf00      	nop
 8006a06:	e7fd      	b.n	8006a04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <xQueueGenericSend+0x42>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <xQueueGenericSend+0x46>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <xQueueGenericSend+0x48>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10b      	bne.n	8006a38 <xQueueGenericSend+0x64>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a32:	bf00      	nop
 8006a34:	bf00      	nop
 8006a36:	e7fd      	b.n	8006a34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d103      	bne.n	8006a46 <xQueueGenericSend+0x72>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <xQueueGenericSend+0x76>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <xQueueGenericSend+0x78>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10b      	bne.n	8006a68 <xQueueGenericSend+0x94>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	623b      	str	r3, [r7, #32]
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a68:	f001 f9ce 	bl	8007e08 <xTaskGetSchedulerState>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <xQueueGenericSend+0xa4>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <xQueueGenericSend+0xa8>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <xQueueGenericSend+0xaa>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <xQueueGenericSend+0xc6>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	61fb      	str	r3, [r7, #28]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a9a:	f001 ff25 	bl	80088e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d302      	bcc.n	8006ab0 <xQueueGenericSend+0xdc>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d129      	bne.n	8006b04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ab6:	f000 fa0f 	bl	8006ed8 <prvCopyDataToQueue>
 8006aba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d010      	beq.n	8006ae6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	3324      	adds	r3, #36	@ 0x24
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 ffdd 	bl	8007a88 <xTaskRemoveFromEventList>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d013      	beq.n	8006afc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8006bd4 <xQueueGenericSend+0x200>)
 8006ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	e00a      	b.n	8006afc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006aec:	4b39      	ldr	r3, [pc, #228]	@ (8006bd4 <xQueueGenericSend+0x200>)
 8006aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006afc:	f001 ff26 	bl	800894c <vPortExitCritical>
				return pdPASS;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e063      	b.n	8006bcc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b0a:	f001 ff1f 	bl	800894c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e05c      	b.n	8006bcc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b18:	f107 0314 	add.w	r3, r7, #20
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 f817 	bl	8007b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b22:	2301      	movs	r3, #1
 8006b24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b26:	f001 ff11 	bl	800894c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b2a:	f000 fd87 	bl	800763c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b2e:	f001 fedb 	bl	80088e8 <vPortEnterCritical>
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b38:	b25b      	sxtb	r3, r3
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3e:	d103      	bne.n	8006b48 <xQueueGenericSend+0x174>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b4e:	b25b      	sxtb	r3, r3
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b54:	d103      	bne.n	8006b5e <xQueueGenericSend+0x18a>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b5e:	f001 fef5 	bl	800894c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b62:	1d3a      	adds	r2, r7, #4
 8006b64:	f107 0314 	add.w	r3, r7, #20
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f001 f806 	bl	8007b7c <xTaskCheckForTimeOut>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d124      	bne.n	8006bc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b78:	f000 faa6 	bl	80070c8 <prvIsQueueFull>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	3310      	adds	r3, #16
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 ff2a 	bl	80079e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b92:	f000 fa31 	bl	8006ff8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b96:	f000 fd5f 	bl	8007658 <xTaskResumeAll>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f47f af7c 	bne.w	8006a9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd4 <xQueueGenericSend+0x200>)
 8006ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	e772      	b.n	8006a9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006bb6:	f000 fa1f 	bl	8006ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bba:	f000 fd4d 	bl	8007658 <xTaskResumeAll>
 8006bbe:	e76c      	b.n	8006a9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006bc2:	f000 fa19 	bl	8006ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bc6:	f000 fd47 	bl	8007658 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3738      	adds	r7, #56	@ 0x38
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b090      	sub	sp, #64	@ 0x40
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10b      	bne.n	8006c08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c02:	bf00      	nop
 8006c04:	bf00      	nop
 8006c06:	e7fd      	b.n	8006c04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d103      	bne.n	8006c16 <xQueueGenericSendFromISR+0x3e>
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <xQueueGenericSendFromISR+0x42>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <xQueueGenericSendFromISR+0x44>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10b      	bne.n	8006c38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c32:	bf00      	nop
 8006c34:	bf00      	nop
 8006c36:	e7fd      	b.n	8006c34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d103      	bne.n	8006c46 <xQueueGenericSendFromISR+0x6e>
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <xQueueGenericSendFromISR+0x72>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e000      	b.n	8006c4c <xQueueGenericSendFromISR+0x74>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	623b      	str	r3, [r7, #32]
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	e7fd      	b.n	8006c64 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c68:	f001 ff1e 	bl	8008aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c6c:	f3ef 8211 	mrs	r2, BASEPRI
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	61fa      	str	r2, [r7, #28]
 8006c82:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c84:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c86:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d302      	bcc.n	8006c9a <xQueueGenericSendFromISR+0xc2>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d12f      	bne.n	8006cfa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ca0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	68b9      	ldr	r1, [r7, #8]
 8006cae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006cb0:	f000 f912 	bl	8006ed8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cb4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d112      	bne.n	8006ce4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d016      	beq.n	8006cf4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc8:	3324      	adds	r3, #36	@ 0x24
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fedc 	bl	8007a88 <xTaskRemoveFromEventList>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00e      	beq.n	8006cf4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00b      	beq.n	8006cf4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e007      	b.n	8006cf4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006ce8:	3301      	adds	r3, #1
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	b25a      	sxtb	r2, r3
 8006cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006cf8:	e001      	b.n	8006cfe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d00:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3740      	adds	r7, #64	@ 0x40
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08c      	sub	sp, #48	@ 0x30
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <xQueueReceive+0x32>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	623b      	str	r3, [r7, #32]
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d103      	bne.n	8006d54 <xQueueReceive+0x40>
 8006d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <xQueueReceive+0x44>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e000      	b.n	8006d5a <xQueueReceive+0x46>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10b      	bne.n	8006d76 <xQueueReceive+0x62>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	61fb      	str	r3, [r7, #28]
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	e7fd      	b.n	8006d72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d76:	f001 f847 	bl	8007e08 <xTaskGetSchedulerState>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <xQueueReceive+0x72>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <xQueueReceive+0x76>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <xQueueReceive+0x78>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10b      	bne.n	8006da8 <xQueueReceive+0x94>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	61bb      	str	r3, [r7, #24]
}
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	e7fd      	b.n	8006da4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006da8:	f001 fd9e 	bl	80088e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01f      	beq.n	8006df8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006db8:	68b9      	ldr	r1, [r7, #8]
 8006dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dbc:	f000 f8f6 	bl	8006fac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc2:	1e5a      	subs	r2, r3, #1
 8006dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00f      	beq.n	8006df0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd2:	3310      	adds	r3, #16
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 fe57 	bl	8007a88 <xTaskRemoveFromEventList>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d007      	beq.n	8006df0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006de0:	4b3c      	ldr	r3, [pc, #240]	@ (8006ed4 <xQueueReceive+0x1c0>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006df0:	f001 fdac 	bl	800894c <vPortExitCritical>
				return pdPASS;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e069      	b.n	8006ecc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d103      	bne.n	8006e06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dfe:	f001 fda5 	bl	800894c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e062      	b.n	8006ecc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d106      	bne.n	8006e1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e0c:	f107 0310 	add.w	r3, r7, #16
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fe9d 	bl	8007b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e16:	2301      	movs	r3, #1
 8006e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e1a:	f001 fd97 	bl	800894c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e1e:	f000 fc0d 	bl	800763c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e22:	f001 fd61 	bl	80088e8 <vPortEnterCritical>
 8006e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e2c:	b25b      	sxtb	r3, r3
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	d103      	bne.n	8006e3c <xQueueReceive+0x128>
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e42:	b25b      	sxtb	r3, r3
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d103      	bne.n	8006e52 <xQueueReceive+0x13e>
 8006e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e52:	f001 fd7b 	bl	800894c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e56:	1d3a      	adds	r2, r7, #4
 8006e58:	f107 0310 	add.w	r3, r7, #16
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fe8c 	bl	8007b7c <xTaskCheckForTimeOut>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d123      	bne.n	8006eb2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e6c:	f000 f916 	bl	800709c <prvIsQueueEmpty>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d017      	beq.n	8006ea6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e78:	3324      	adds	r3, #36	@ 0x24
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fdb0 	bl	80079e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e86:	f000 f8b7 	bl	8006ff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e8a:	f000 fbe5 	bl	8007658 <xTaskResumeAll>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d189      	bne.n	8006da8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006e94:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed4 <xQueueReceive+0x1c0>)
 8006e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	e780      	b.n	8006da8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ea6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ea8:	f000 f8a6 	bl	8006ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eac:	f000 fbd4 	bl	8007658 <xTaskResumeAll>
 8006eb0:	e77a      	b.n	8006da8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006eb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eb4:	f000 f8a0 	bl	8006ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eb8:	f000 fbce 	bl	8007658 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ebe:	f000 f8ed 	bl	800709c <prvIsQueueEmpty>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f43f af6f 	beq.w	8006da8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006eca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3730      	adds	r7, #48	@ 0x30
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10d      	bne.n	8006f12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d14d      	bne.n	8006f9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 ff9e 	bl	8007e44 <xTaskPriorityDisinherit>
 8006f08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	609a      	str	r2, [r3, #8]
 8006f10:	e043      	b.n	8006f9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d119      	bne.n	8006f4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6858      	ldr	r0, [r3, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f20:	461a      	mov	r2, r3
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	f002 f82c 	bl	8008f80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d32b      	bcc.n	8006f9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	e026      	b.n	8006f9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68d8      	ldr	r0, [r3, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f54:	461a      	mov	r2, r3
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	f002 f812 	bl	8008f80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f64:	425b      	negs	r3, r3
 8006f66:	441a      	add	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d207      	bcs.n	8006f88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f80:	425b      	negs	r3, r3
 8006f82:	441a      	add	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d105      	bne.n	8006f9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006fa2:	697b      	ldr	r3, [r7, #20]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d018      	beq.n	8006ff0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc6:	441a      	add	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d303      	bcc.n	8006fe0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68d9      	ldr	r1, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6838      	ldr	r0, [r7, #0]
 8006fec:	f001 ffc8 	bl	8008f80 <memcpy>
	}
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007000:	f001 fc72 	bl	80088e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800700a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800700c:	e011      	b.n	8007032 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007012:	2b00      	cmp	r3, #0
 8007014:	d012      	beq.n	800703c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3324      	adds	r3, #36	@ 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fd34 	bl	8007a88 <xTaskRemoveFromEventList>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007026:	f000 fe0d 	bl	8007c44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	3b01      	subs	r3, #1
 800702e:	b2db      	uxtb	r3, r3
 8007030:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007036:	2b00      	cmp	r3, #0
 8007038:	dce9      	bgt.n	800700e <prvUnlockQueue+0x16>
 800703a:	e000      	b.n	800703e <prvUnlockQueue+0x46>
					break;
 800703c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	22ff      	movs	r2, #255	@ 0xff
 8007042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007046:	f001 fc81 	bl	800894c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800704a:	f001 fc4d 	bl	80088e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007054:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007056:	e011      	b.n	800707c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d012      	beq.n	8007086 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3310      	adds	r3, #16
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fd0f 	bl	8007a88 <xTaskRemoveFromEventList>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007070:	f000 fde8 	bl	8007c44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	3b01      	subs	r3, #1
 8007078:	b2db      	uxtb	r3, r3
 800707a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800707c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007080:	2b00      	cmp	r3, #0
 8007082:	dce9      	bgt.n	8007058 <prvUnlockQueue+0x60>
 8007084:	e000      	b.n	8007088 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007086:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	22ff      	movs	r2, #255	@ 0xff
 800708c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007090:	f001 fc5c 	bl	800894c <vPortExitCritical>
}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a4:	f001 fc20 	bl	80088e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d102      	bne.n	80070b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e001      	b.n	80070ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ba:	f001 fc47 	bl	800894c <vPortExitCritical>

	return xReturn;
 80070be:	68fb      	ldr	r3, [r7, #12]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070d0:	f001 fc0a 	bl	80088e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070dc:	429a      	cmp	r2, r3
 80070de:	d102      	bne.n	80070e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070e0:	2301      	movs	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	e001      	b.n	80070ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ea:	f001 fc2f 	bl	800894c <vPortExitCritical>

	return xReturn;
 80070ee:	68fb      	ldr	r3, [r7, #12]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	e014      	b.n	8007132 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007108:	4a0f      	ldr	r2, [pc, #60]	@ (8007148 <vQueueAddToRegistry+0x50>)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10b      	bne.n	800712c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007114:	490c      	ldr	r1, [pc, #48]	@ (8007148 <vQueueAddToRegistry+0x50>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800711e:	4a0a      	ldr	r2, [pc, #40]	@ (8007148 <vQueueAddToRegistry+0x50>)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	4413      	add	r3, r2
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800712a:	e006      	b.n	800713a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3301      	adds	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b07      	cmp	r3, #7
 8007136:	d9e7      	bls.n	8007108 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007138:	bf00      	nop
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20000a5c 	.word	0x20000a5c

0800714c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800715c:	f001 fbc4 	bl	80088e8 <vPortEnterCritical>
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007166:	b25b      	sxtb	r3, r3
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d103      	bne.n	8007176 <vQueueWaitForMessageRestricted+0x2a>
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800717c:	b25b      	sxtb	r3, r3
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d103      	bne.n	800718c <vQueueWaitForMessageRestricted+0x40>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800718c:	f001 fbde 	bl	800894c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007194:	2b00      	cmp	r3, #0
 8007196:	d106      	bne.n	80071a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	3324      	adds	r3, #36	@ 0x24
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fc45 	bl	8007a30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071a6:	6978      	ldr	r0, [r7, #20]
 80071a8:	f7ff ff26 	bl	8006ff8 <prvUnlockQueue>
	}
 80071ac:	bf00      	nop
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08e      	sub	sp, #56	@ 0x38
 80071b8:	af04      	add	r7, sp, #16
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10b      	bne.n	80071e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	623b      	str	r3, [r7, #32]
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10b      	bne.n	80071fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	61fb      	str	r3, [r7, #28]
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop
 80071fc:	e7fd      	b.n	80071fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071fe:	235c      	movs	r3, #92	@ 0x5c
 8007200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b5c      	cmp	r3, #92	@ 0x5c
 8007206:	d00b      	beq.n	8007220 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	61bb      	str	r3, [r7, #24]
}
 800721a:	bf00      	nop
 800721c:	bf00      	nop
 800721e:	e7fd      	b.n	800721c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007220:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01e      	beq.n	8007266 <xTaskCreateStatic+0xb2>
 8007228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01b      	beq.n	8007266 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800722e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007236:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	2202      	movs	r2, #2
 800723c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007240:	2300      	movs	r3, #0
 8007242:	9303      	str	r3, [sp, #12]
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	9302      	str	r3, [sp, #8]
 8007248:	f107 0314 	add.w	r3, r7, #20
 800724c:	9301      	str	r3, [sp, #4]
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	68b9      	ldr	r1, [r7, #8]
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 f850 	bl	80072fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800725e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007260:	f000 f8de 	bl	8007420 <prvAddNewTaskToReadyList>
 8007264:	e001      	b.n	800726a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800726a:	697b      	ldr	r3, [r7, #20]
	}
 800726c:	4618      	mov	r0, r3
 800726e:	3728      	adds	r7, #40	@ 0x28
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08c      	sub	sp, #48	@ 0x30
 8007278:	af04      	add	r7, sp, #16
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	4613      	mov	r3, r2
 8007282:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007284:	88fb      	ldrh	r3, [r7, #6]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4618      	mov	r0, r3
 800728a:	f001 fc4f 	bl	8008b2c <pvPortMalloc>
 800728e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00e      	beq.n	80072b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007296:	205c      	movs	r0, #92	@ 0x5c
 8007298:	f001 fc48 	bl	8008b2c <pvPortMalloc>
 800729c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80072aa:	e005      	b.n	80072b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072ac:	6978      	ldr	r0, [r7, #20]
 80072ae:	f001 fd0b 	bl	8008cc8 <vPortFree>
 80072b2:	e001      	b.n	80072b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d017      	beq.n	80072ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072c6:	88fa      	ldrh	r2, [r7, #6]
 80072c8:	2300      	movs	r3, #0
 80072ca:	9303      	str	r3, [sp, #12]
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	9302      	str	r3, [sp, #8]
 80072d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 f80e 	bl	80072fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072e2:	69f8      	ldr	r0, [r7, #28]
 80072e4:	f000 f89c 	bl	8007420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072e8:	2301      	movs	r3, #1
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	e002      	b.n	80072f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072ee:	f04f 33ff 	mov.w	r3, #4294967295
 80072f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072f4:	69bb      	ldr	r3, [r7, #24]
	}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b088      	sub	sp, #32
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	461a      	mov	r2, r3
 8007316:	21a5      	movs	r1, #165	@ 0xa5
 8007318:	f001 fe06 	bl	8008f28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007326:	3b01      	subs	r3, #1
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	f023 0307 	bic.w	r3, r3, #7
 8007334:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00b      	beq.n	8007358 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	617b      	str	r3, [r7, #20]
}
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	e7fd      	b.n	8007354 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d01f      	beq.n	800739e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800735e:	2300      	movs	r3, #0
 8007360:	61fb      	str	r3, [r7, #28]
 8007362:	e012      	b.n	800738a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	4413      	add	r3, r2
 800736a:	7819      	ldrb	r1, [r3, #0]
 800736c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	4413      	add	r3, r2
 8007372:	3334      	adds	r3, #52	@ 0x34
 8007374:	460a      	mov	r2, r1
 8007376:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d006      	beq.n	8007392 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	3301      	adds	r3, #1
 8007388:	61fb      	str	r3, [r7, #28]
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	2b0f      	cmp	r3, #15
 800738e:	d9e9      	bls.n	8007364 <prvInitialiseNewTask+0x66>
 8007390:	e000      	b.n	8007394 <prvInitialiseNewTask+0x96>
			{
				break;
 8007392:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800739c:	e003      	b.n	80073a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a8:	2b37      	cmp	r3, #55	@ 0x37
 80073aa:	d901      	bls.n	80073b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073ac:	2337      	movs	r3, #55	@ 0x37
 80073ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073be:	2200      	movs	r2, #0
 80073c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c4:	3304      	adds	r3, #4
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff f966 	bl	8006698 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	3318      	adds	r3, #24
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff f961 	bl	8006698 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80073e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ee:	2200      	movs	r2, #0
 80073f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	68f9      	ldr	r1, [r7, #12]
 80073fe:	69b8      	ldr	r0, [r7, #24]
 8007400:	f001 f93e 	bl	8008680 <pxPortInitialiseStack>
 8007404:	4602      	mov	r2, r0
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800740a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007416:	bf00      	nop
 8007418:	3720      	adds	r7, #32
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007428:	f001 fa5e 	bl	80088e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800742c:	4b2d      	ldr	r3, [pc, #180]	@ (80074e4 <prvAddNewTaskToReadyList+0xc4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3301      	adds	r3, #1
 8007432:	4a2c      	ldr	r2, [pc, #176]	@ (80074e4 <prvAddNewTaskToReadyList+0xc4>)
 8007434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007436:	4b2c      	ldr	r3, [pc, #176]	@ (80074e8 <prvAddNewTaskToReadyList+0xc8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800743e:	4a2a      	ldr	r2, [pc, #168]	@ (80074e8 <prvAddNewTaskToReadyList+0xc8>)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007444:	4b27      	ldr	r3, [pc, #156]	@ (80074e4 <prvAddNewTaskToReadyList+0xc4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d110      	bne.n	800746e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800744c:	f000 fc1e 	bl	8007c8c <prvInitialiseTaskLists>
 8007450:	e00d      	b.n	800746e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007452:	4b26      	ldr	r3, [pc, #152]	@ (80074ec <prvAddNewTaskToReadyList+0xcc>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d109      	bne.n	800746e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800745a:	4b23      	ldr	r3, [pc, #140]	@ (80074e8 <prvAddNewTaskToReadyList+0xc8>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007464:	429a      	cmp	r2, r3
 8007466:	d802      	bhi.n	800746e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007468:	4a1f      	ldr	r2, [pc, #124]	@ (80074e8 <prvAddNewTaskToReadyList+0xc8>)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800746e:	4b20      	ldr	r3, [pc, #128]	@ (80074f0 <prvAddNewTaskToReadyList+0xd0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3301      	adds	r3, #1
 8007474:	4a1e      	ldr	r2, [pc, #120]	@ (80074f0 <prvAddNewTaskToReadyList+0xd0>)
 8007476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007478:	4b1d      	ldr	r3, [pc, #116]	@ (80074f0 <prvAddNewTaskToReadyList+0xd0>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007484:	4b1b      	ldr	r3, [pc, #108]	@ (80074f4 <prvAddNewTaskToReadyList+0xd4>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d903      	bls.n	8007494 <prvAddNewTaskToReadyList+0x74>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007490:	4a18      	ldr	r2, [pc, #96]	@ (80074f4 <prvAddNewTaskToReadyList+0xd4>)
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4a15      	ldr	r2, [pc, #84]	@ (80074f8 <prvAddNewTaskToReadyList+0xd8>)
 80074a2:	441a      	add	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3304      	adds	r3, #4
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f7ff f901 	bl	80066b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074b0:	f001 fa4c 	bl	800894c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074b4:	4b0d      	ldr	r3, [pc, #52]	@ (80074ec <prvAddNewTaskToReadyList+0xcc>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00e      	beq.n	80074da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074bc:	4b0a      	ldr	r3, [pc, #40]	@ (80074e8 <prvAddNewTaskToReadyList+0xc8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d207      	bcs.n	80074da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074ca:	4b0c      	ldr	r3, [pc, #48]	@ (80074fc <prvAddNewTaskToReadyList+0xdc>)
 80074cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000f70 	.word	0x20000f70
 80074e8:	20000a9c 	.word	0x20000a9c
 80074ec:	20000f7c 	.word	0x20000f7c
 80074f0:	20000f8c 	.word	0x20000f8c
 80074f4:	20000f78 	.word	0x20000f78
 80074f8:	20000aa0 	.word	0x20000aa0
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d018      	beq.n	8007544 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007512:	4b14      	ldr	r3, [pc, #80]	@ (8007564 <vTaskDelay+0x64>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <vTaskDelay+0x32>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	60bb      	str	r3, [r7, #8]
}
 800752c:	bf00      	nop
 800752e:	bf00      	nop
 8007530:	e7fd      	b.n	800752e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007532:	f000 f883 	bl	800763c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007536:	2100      	movs	r1, #0
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fcf3 	bl	8007f24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800753e:	f000 f88b 	bl	8007658 <xTaskResumeAll>
 8007542:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d107      	bne.n	800755a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800754a:	4b07      	ldr	r3, [pc, #28]	@ (8007568 <vTaskDelay+0x68>)
 800754c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800755a:	bf00      	nop
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20000f98 	.word	0x20000f98
 8007568:	e000ed04 	.word	0xe000ed04

0800756c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	@ 0x28
 8007570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007576:	2300      	movs	r3, #0
 8007578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800757a:	463a      	mov	r2, r7
 800757c:	1d39      	adds	r1, r7, #4
 800757e:	f107 0308 	add.w	r3, r7, #8
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff f834 	bl	80065f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	9202      	str	r2, [sp, #8]
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	2300      	movs	r3, #0
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	2300      	movs	r3, #0
 8007598:	460a      	mov	r2, r1
 800759a:	4922      	ldr	r1, [pc, #136]	@ (8007624 <vTaskStartScheduler+0xb8>)
 800759c:	4822      	ldr	r0, [pc, #136]	@ (8007628 <vTaskStartScheduler+0xbc>)
 800759e:	f7ff fe09 	bl	80071b4 <xTaskCreateStatic>
 80075a2:	4603      	mov	r3, r0
 80075a4:	4a21      	ldr	r2, [pc, #132]	@ (800762c <vTaskStartScheduler+0xc0>)
 80075a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075a8:	4b20      	ldr	r3, [pc, #128]	@ (800762c <vTaskStartScheduler+0xc0>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075b0:	2301      	movs	r3, #1
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	e001      	b.n	80075ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d102      	bne.n	80075c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075c0:	f000 fd04 	bl	8007fcc <xTimerCreateTimerTask>
 80075c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d116      	bne.n	80075fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	613b      	str	r3, [r7, #16]
}
 80075de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075e0:	4b13      	ldr	r3, [pc, #76]	@ (8007630 <vTaskStartScheduler+0xc4>)
 80075e2:	f04f 32ff 	mov.w	r2, #4294967295
 80075e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075e8:	4b12      	ldr	r3, [pc, #72]	@ (8007634 <vTaskStartScheduler+0xc8>)
 80075ea:	2201      	movs	r2, #1
 80075ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075ee:	4b12      	ldr	r3, [pc, #72]	@ (8007638 <vTaskStartScheduler+0xcc>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075f4:	f001 f8d4 	bl	80087a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075f8:	e00f      	b.n	800761a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007600:	d10b      	bne.n	800761a <vTaskStartScheduler+0xae>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60fb      	str	r3, [r7, #12]
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	e7fd      	b.n	8007616 <vTaskStartScheduler+0xaa>
}
 800761a:	bf00      	nop
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	08008fd8 	.word	0x08008fd8
 8007628:	08007c5d 	.word	0x08007c5d
 800762c:	20000f94 	.word	0x20000f94
 8007630:	20000f90 	.word	0x20000f90
 8007634:	20000f7c 	.word	0x20000f7c
 8007638:	20000f74 	.word	0x20000f74

0800763c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007640:	4b04      	ldr	r3, [pc, #16]	@ (8007654 <vTaskSuspendAll+0x18>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	4a03      	ldr	r2, [pc, #12]	@ (8007654 <vTaskSuspendAll+0x18>)
 8007648:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800764a:	bf00      	nop
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	20000f98 	.word	0x20000f98

08007658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007662:	2300      	movs	r3, #0
 8007664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007666:	4b42      	ldr	r3, [pc, #264]	@ (8007770 <xTaskResumeAll+0x118>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10b      	bne.n	8007686 <xTaskResumeAll+0x2e>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	603b      	str	r3, [r7, #0]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007686:	f001 f92f 	bl	80088e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800768a:	4b39      	ldr	r3, [pc, #228]	@ (8007770 <xTaskResumeAll+0x118>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3b01      	subs	r3, #1
 8007690:	4a37      	ldr	r2, [pc, #220]	@ (8007770 <xTaskResumeAll+0x118>)
 8007692:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007694:	4b36      	ldr	r3, [pc, #216]	@ (8007770 <xTaskResumeAll+0x118>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d162      	bne.n	8007762 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800769c:	4b35      	ldr	r3, [pc, #212]	@ (8007774 <xTaskResumeAll+0x11c>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d05e      	beq.n	8007762 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076a4:	e02f      	b.n	8007706 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a6:	4b34      	ldr	r3, [pc, #208]	@ (8007778 <xTaskResumeAll+0x120>)
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3318      	adds	r3, #24
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff f85a 	bl	800676c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff f855 	bl	800676c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c6:	4b2d      	ldr	r3, [pc, #180]	@ (800777c <xTaskResumeAll+0x124>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d903      	bls.n	80076d6 <xTaskResumeAll+0x7e>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	4a2a      	ldr	r2, [pc, #168]	@ (800777c <xTaskResumeAll+0x124>)
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4a27      	ldr	r2, [pc, #156]	@ (8007780 <xTaskResumeAll+0x128>)
 80076e4:	441a      	add	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3304      	adds	r3, #4
 80076ea:	4619      	mov	r1, r3
 80076ec:	4610      	mov	r0, r2
 80076ee:	f7fe ffe0 	bl	80066b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f6:	4b23      	ldr	r3, [pc, #140]	@ (8007784 <xTaskResumeAll+0x12c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d302      	bcc.n	8007706 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007700:	4b21      	ldr	r3, [pc, #132]	@ (8007788 <xTaskResumeAll+0x130>)
 8007702:	2201      	movs	r2, #1
 8007704:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007706:	4b1c      	ldr	r3, [pc, #112]	@ (8007778 <xTaskResumeAll+0x120>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1cb      	bne.n	80076a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007714:	f000 fb58 	bl	8007dc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007718:	4b1c      	ldr	r3, [pc, #112]	@ (800778c <xTaskResumeAll+0x134>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d010      	beq.n	8007746 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007724:	f000 f846 	bl	80077b4 <xTaskIncrementTick>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800772e:	4b16      	ldr	r3, [pc, #88]	@ (8007788 <xTaskResumeAll+0x130>)
 8007730:	2201      	movs	r2, #1
 8007732:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3b01      	subs	r3, #1
 8007738:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1f1      	bne.n	8007724 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007740:	4b12      	ldr	r3, [pc, #72]	@ (800778c <xTaskResumeAll+0x134>)
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007746:	4b10      	ldr	r3, [pc, #64]	@ (8007788 <xTaskResumeAll+0x130>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d009      	beq.n	8007762 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800774e:	2301      	movs	r3, #1
 8007750:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007752:	4b0f      	ldr	r3, [pc, #60]	@ (8007790 <xTaskResumeAll+0x138>)
 8007754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007762:	f001 f8f3 	bl	800894c <vPortExitCritical>

	return xAlreadyYielded;
 8007766:	68bb      	ldr	r3, [r7, #8]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000f98 	.word	0x20000f98
 8007774:	20000f70 	.word	0x20000f70
 8007778:	20000f30 	.word	0x20000f30
 800777c:	20000f78 	.word	0x20000f78
 8007780:	20000aa0 	.word	0x20000aa0
 8007784:	20000a9c 	.word	0x20000a9c
 8007788:	20000f84 	.word	0x20000f84
 800778c:	20000f80 	.word	0x20000f80
 8007790:	e000ed04 	.word	0xe000ed04

08007794 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800779a:	4b05      	ldr	r3, [pc, #20]	@ (80077b0 <xTaskGetTickCount+0x1c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077a0:	687b      	ldr	r3, [r7, #4]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20000f74 	.word	0x20000f74

080077b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077be:	4b4f      	ldr	r3, [pc, #316]	@ (80078fc <xTaskIncrementTick+0x148>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f040 8090 	bne.w	80078e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007900 <xTaskIncrementTick+0x14c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3301      	adds	r3, #1
 80077ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077d0:	4a4b      	ldr	r2, [pc, #300]	@ (8007900 <xTaskIncrementTick+0x14c>)
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d121      	bne.n	8007820 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80077dc:	4b49      	ldr	r3, [pc, #292]	@ (8007904 <xTaskIncrementTick+0x150>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00b      	beq.n	80077fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	603b      	str	r3, [r7, #0]
}
 80077f8:	bf00      	nop
 80077fa:	bf00      	nop
 80077fc:	e7fd      	b.n	80077fa <xTaskIncrementTick+0x46>
 80077fe:	4b41      	ldr	r3, [pc, #260]	@ (8007904 <xTaskIncrementTick+0x150>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	4b40      	ldr	r3, [pc, #256]	@ (8007908 <xTaskIncrementTick+0x154>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a3e      	ldr	r2, [pc, #248]	@ (8007904 <xTaskIncrementTick+0x150>)
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	4a3e      	ldr	r2, [pc, #248]	@ (8007908 <xTaskIncrementTick+0x154>)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	4b3e      	ldr	r3, [pc, #248]	@ (800790c <xTaskIncrementTick+0x158>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3301      	adds	r3, #1
 8007818:	4a3c      	ldr	r2, [pc, #240]	@ (800790c <xTaskIncrementTick+0x158>)
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	f000 fad4 	bl	8007dc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007820:	4b3b      	ldr	r3, [pc, #236]	@ (8007910 <xTaskIncrementTick+0x15c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	429a      	cmp	r2, r3
 8007828:	d349      	bcc.n	80078be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800782a:	4b36      	ldr	r3, [pc, #216]	@ (8007904 <xTaskIncrementTick+0x150>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d104      	bne.n	800783e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007834:	4b36      	ldr	r3, [pc, #216]	@ (8007910 <xTaskIncrementTick+0x15c>)
 8007836:	f04f 32ff 	mov.w	r2, #4294967295
 800783a:	601a      	str	r2, [r3, #0]
					break;
 800783c:	e03f      	b.n	80078be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800783e:	4b31      	ldr	r3, [pc, #196]	@ (8007904 <xTaskIncrementTick+0x150>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	429a      	cmp	r2, r3
 8007854:	d203      	bcs.n	800785e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007856:	4a2e      	ldr	r2, [pc, #184]	@ (8007910 <xTaskIncrementTick+0x15c>)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800785c:	e02f      	b.n	80078be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	3304      	adds	r3, #4
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe ff82 	bl	800676c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786c:	2b00      	cmp	r3, #0
 800786e:	d004      	beq.n	800787a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	3318      	adds	r3, #24
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe ff79 	bl	800676c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800787e:	4b25      	ldr	r3, [pc, #148]	@ (8007914 <xTaskIncrementTick+0x160>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d903      	bls.n	800788e <xTaskIncrementTick+0xda>
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	4a22      	ldr	r2, [pc, #136]	@ (8007914 <xTaskIncrementTick+0x160>)
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007892:	4613      	mov	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4a1f      	ldr	r2, [pc, #124]	@ (8007918 <xTaskIncrementTick+0x164>)
 800789c:	441a      	add	r2, r3
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	3304      	adds	r3, #4
 80078a2:	4619      	mov	r1, r3
 80078a4:	4610      	mov	r0, r2
 80078a6:	f7fe ff04 	bl	80066b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ae:	4b1b      	ldr	r3, [pc, #108]	@ (800791c <xTaskIncrementTick+0x168>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d3b8      	bcc.n	800782a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80078b8:	2301      	movs	r3, #1
 80078ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078bc:	e7b5      	b.n	800782a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078be:	4b17      	ldr	r3, [pc, #92]	@ (800791c <xTaskIncrementTick+0x168>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c4:	4914      	ldr	r1, [pc, #80]	@ (8007918 <xTaskIncrementTick+0x164>)
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	440b      	add	r3, r1
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d901      	bls.n	80078da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80078d6:	2301      	movs	r3, #1
 80078d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078da:	4b11      	ldr	r3, [pc, #68]	@ (8007920 <xTaskIncrementTick+0x16c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80078e2:	2301      	movs	r3, #1
 80078e4:	617b      	str	r3, [r7, #20]
 80078e6:	e004      	b.n	80078f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007924 <xTaskIncrementTick+0x170>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3301      	adds	r3, #1
 80078ee:	4a0d      	ldr	r2, [pc, #52]	@ (8007924 <xTaskIncrementTick+0x170>)
 80078f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80078f2:	697b      	ldr	r3, [r7, #20]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	20000f98 	.word	0x20000f98
 8007900:	20000f74 	.word	0x20000f74
 8007904:	20000f28 	.word	0x20000f28
 8007908:	20000f2c 	.word	0x20000f2c
 800790c:	20000f88 	.word	0x20000f88
 8007910:	20000f90 	.word	0x20000f90
 8007914:	20000f78 	.word	0x20000f78
 8007918:	20000aa0 	.word	0x20000aa0
 800791c:	20000a9c 	.word	0x20000a9c
 8007920:	20000f84 	.word	0x20000f84
 8007924:	20000f80 	.word	0x20000f80

08007928 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800792e:	4b28      	ldr	r3, [pc, #160]	@ (80079d0 <vTaskSwitchContext+0xa8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007936:	4b27      	ldr	r3, [pc, #156]	@ (80079d4 <vTaskSwitchContext+0xac>)
 8007938:	2201      	movs	r2, #1
 800793a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800793c:	e042      	b.n	80079c4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800793e:	4b25      	ldr	r3, [pc, #148]	@ (80079d4 <vTaskSwitchContext+0xac>)
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007944:	4b24      	ldr	r3, [pc, #144]	@ (80079d8 <vTaskSwitchContext+0xb0>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	e011      	b.n	8007970 <vTaskSwitchContext+0x48>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10b      	bne.n	800796a <vTaskSwitchContext+0x42>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	607b      	str	r3, [r7, #4]
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop
 8007968:	e7fd      	b.n	8007966 <vTaskSwitchContext+0x3e>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3b01      	subs	r3, #1
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	491a      	ldr	r1, [pc, #104]	@ (80079dc <vTaskSwitchContext+0xb4>)
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	440b      	add	r3, r1
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0e3      	beq.n	800794c <vTaskSwitchContext+0x24>
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4a13      	ldr	r2, [pc, #76]	@ (80079dc <vTaskSwitchContext+0xb4>)
 8007990:	4413      	add	r3, r2
 8007992:	60bb      	str	r3, [r7, #8]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	605a      	str	r2, [r3, #4]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	3308      	adds	r3, #8
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d104      	bne.n	80079b4 <vTaskSwitchContext+0x8c>
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	605a      	str	r2, [r3, #4]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	4a09      	ldr	r2, [pc, #36]	@ (80079e0 <vTaskSwitchContext+0xb8>)
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	4a06      	ldr	r2, [pc, #24]	@ (80079d8 <vTaskSwitchContext+0xb0>)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6013      	str	r3, [r2, #0]
}
 80079c4:	bf00      	nop
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	20000f98 	.word	0x20000f98
 80079d4:	20000f84 	.word	0x20000f84
 80079d8:	20000f78 	.word	0x20000f78
 80079dc:	20000aa0 	.word	0x20000aa0
 80079e0:	20000a9c 	.word	0x20000a9c

080079e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10b      	bne.n	8007a0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	60fb      	str	r3, [r7, #12]
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	e7fd      	b.n	8007a08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a0c:	4b07      	ldr	r3, [pc, #28]	@ (8007a2c <vTaskPlaceOnEventList+0x48>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3318      	adds	r3, #24
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7fe fe70 	bl	80066fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	6838      	ldr	r0, [r7, #0]
 8007a1e:	f000 fa81 	bl	8007f24 <prvAddCurrentTaskToDelayedList>
}
 8007a22:	bf00      	nop
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20000a9c 	.word	0x20000a9c

08007a30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	617b      	str	r3, [r7, #20]
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a84 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3318      	adds	r3, #24
 8007a60:	4619      	mov	r1, r3
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7fe fe25 	bl	80066b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	68b8      	ldr	r0, [r7, #8]
 8007a78:	f000 fa54 	bl	8007f24 <prvAddCurrentTaskToDelayedList>
	}
 8007a7c:	bf00      	nop
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20000a9c 	.word	0x20000a9c

08007a88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10b      	bne.n	8007ab6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	60fb      	str	r3, [r7, #12]
}
 8007ab0:	bf00      	nop
 8007ab2:	bf00      	nop
 8007ab4:	e7fd      	b.n	8007ab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3318      	adds	r3, #24
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fe fe56 	bl	800676c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8007b38 <xTaskRemoveFromEventList+0xb0>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11d      	bne.n	8007b04 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe fe4d 	bl	800676c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad6:	4b19      	ldr	r3, [pc, #100]	@ (8007b3c <xTaskRemoveFromEventList+0xb4>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d903      	bls.n	8007ae6 <xTaskRemoveFromEventList+0x5e>
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae2:	4a16      	ldr	r2, [pc, #88]	@ (8007b3c <xTaskRemoveFromEventList+0xb4>)
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4a13      	ldr	r2, [pc, #76]	@ (8007b40 <xTaskRemoveFromEventList+0xb8>)
 8007af4:	441a      	add	r2, r3
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	3304      	adds	r3, #4
 8007afa:	4619      	mov	r1, r3
 8007afc:	4610      	mov	r0, r2
 8007afe:	f7fe fdd8 	bl	80066b2 <vListInsertEnd>
 8007b02:	e005      	b.n	8007b10 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	3318      	adds	r3, #24
 8007b08:	4619      	mov	r1, r3
 8007b0a:	480e      	ldr	r0, [pc, #56]	@ (8007b44 <xTaskRemoveFromEventList+0xbc>)
 8007b0c:	f7fe fdd1 	bl	80066b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b14:	4b0c      	ldr	r3, [pc, #48]	@ (8007b48 <xTaskRemoveFromEventList+0xc0>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d905      	bls.n	8007b2a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b22:	4b0a      	ldr	r3, [pc, #40]	@ (8007b4c <xTaskRemoveFromEventList+0xc4>)
 8007b24:	2201      	movs	r2, #1
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	e001      	b.n	8007b2e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b2e:	697b      	ldr	r3, [r7, #20]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	20000f98 	.word	0x20000f98
 8007b3c:	20000f78 	.word	0x20000f78
 8007b40:	20000aa0 	.word	0x20000aa0
 8007b44:	20000f30 	.word	0x20000f30
 8007b48:	20000a9c 	.word	0x20000a9c
 8007b4c:	20000f84 	.word	0x20000f84

08007b50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b58:	4b06      	ldr	r3, [pc, #24]	@ (8007b74 <vTaskInternalSetTimeOutState+0x24>)
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b60:	4b05      	ldr	r3, [pc, #20]	@ (8007b78 <vTaskInternalSetTimeOutState+0x28>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	605a      	str	r2, [r3, #4]
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	20000f88 	.word	0x20000f88
 8007b78:	20000f74 	.word	0x20000f74

08007b7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10b      	bne.n	8007ba4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	613b      	str	r3, [r7, #16]
}
 8007b9e:	bf00      	nop
 8007ba0:	bf00      	nop
 8007ba2:	e7fd      	b.n	8007ba0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10b      	bne.n	8007bc2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	60fb      	str	r3, [r7, #12]
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	e7fd      	b.n	8007bbe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007bc2:	f000 fe91 	bl	80088e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8007c3c <xTaskCheckForTimeOut+0xc0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d102      	bne.n	8007be6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	e023      	b.n	8007c2e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4b15      	ldr	r3, [pc, #84]	@ (8007c40 <xTaskCheckForTimeOut+0xc4>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d007      	beq.n	8007c02 <xTaskCheckForTimeOut+0x86>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d302      	bcc.n	8007c02 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	61fb      	str	r3, [r7, #28]
 8007c00:	e015      	b.n	8007c2e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d20b      	bcs.n	8007c24 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	1ad2      	subs	r2, r2, r3
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff ff99 	bl	8007b50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61fb      	str	r3, [r7, #28]
 8007c22:	e004      	b.n	8007c2e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c2e:	f000 fe8d 	bl	800894c <vPortExitCritical>

	return xReturn;
 8007c32:	69fb      	ldr	r3, [r7, #28]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3720      	adds	r7, #32
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000f74 	.word	0x20000f74
 8007c40:	20000f88 	.word	0x20000f88

08007c44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c48:	4b03      	ldr	r3, [pc, #12]	@ (8007c58 <vTaskMissedYield+0x14>)
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
}
 8007c4e:	bf00      	nop
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	20000f84 	.word	0x20000f84

08007c5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c64:	f000 f852 	bl	8007d0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c68:	4b06      	ldr	r3, [pc, #24]	@ (8007c84 <prvIdleTask+0x28>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d9f9      	bls.n	8007c64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c70:	4b05      	ldr	r3, [pc, #20]	@ (8007c88 <prvIdleTask+0x2c>)
 8007c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c80:	e7f0      	b.n	8007c64 <prvIdleTask+0x8>
 8007c82:	bf00      	nop
 8007c84:	20000aa0 	.word	0x20000aa0
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c92:	2300      	movs	r3, #0
 8007c94:	607b      	str	r3, [r7, #4]
 8007c96:	e00c      	b.n	8007cb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4a12      	ldr	r2, [pc, #72]	@ (8007cec <prvInitialiseTaskLists+0x60>)
 8007ca4:	4413      	add	r3, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fcd6 	bl	8006658 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	607b      	str	r3, [r7, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b37      	cmp	r3, #55	@ 0x37
 8007cb6:	d9ef      	bls.n	8007c98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cb8:	480d      	ldr	r0, [pc, #52]	@ (8007cf0 <prvInitialiseTaskLists+0x64>)
 8007cba:	f7fe fccd 	bl	8006658 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007cbe:	480d      	ldr	r0, [pc, #52]	@ (8007cf4 <prvInitialiseTaskLists+0x68>)
 8007cc0:	f7fe fcca 	bl	8006658 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cc4:	480c      	ldr	r0, [pc, #48]	@ (8007cf8 <prvInitialiseTaskLists+0x6c>)
 8007cc6:	f7fe fcc7 	bl	8006658 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cca:	480c      	ldr	r0, [pc, #48]	@ (8007cfc <prvInitialiseTaskLists+0x70>)
 8007ccc:	f7fe fcc4 	bl	8006658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cd0:	480b      	ldr	r0, [pc, #44]	@ (8007d00 <prvInitialiseTaskLists+0x74>)
 8007cd2:	f7fe fcc1 	bl	8006658 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d04 <prvInitialiseTaskLists+0x78>)
 8007cd8:	4a05      	ldr	r2, [pc, #20]	@ (8007cf0 <prvInitialiseTaskLists+0x64>)
 8007cda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8007d08 <prvInitialiseTaskLists+0x7c>)
 8007cde:	4a05      	ldr	r2, [pc, #20]	@ (8007cf4 <prvInitialiseTaskLists+0x68>)
 8007ce0:	601a      	str	r2, [r3, #0]
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000aa0 	.word	0x20000aa0
 8007cf0:	20000f00 	.word	0x20000f00
 8007cf4:	20000f14 	.word	0x20000f14
 8007cf8:	20000f30 	.word	0x20000f30
 8007cfc:	20000f44 	.word	0x20000f44
 8007d00:	20000f5c 	.word	0x20000f5c
 8007d04:	20000f28 	.word	0x20000f28
 8007d08:	20000f2c 	.word	0x20000f2c

08007d0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d12:	e019      	b.n	8007d48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d14:	f000 fde8 	bl	80088e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d18:	4b10      	ldr	r3, [pc, #64]	@ (8007d5c <prvCheckTasksWaitingTermination+0x50>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe fd21 	bl	800676c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d60 <prvCheckTasksWaitingTermination+0x54>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	4a0b      	ldr	r2, [pc, #44]	@ (8007d60 <prvCheckTasksWaitingTermination+0x54>)
 8007d32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d34:	4b0b      	ldr	r3, [pc, #44]	@ (8007d64 <prvCheckTasksWaitingTermination+0x58>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8007d64 <prvCheckTasksWaitingTermination+0x58>)
 8007d3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d3e:	f000 fe05 	bl	800894c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f810 	bl	8007d68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d48:	4b06      	ldr	r3, [pc, #24]	@ (8007d64 <prvCheckTasksWaitingTermination+0x58>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e1      	bne.n	8007d14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000f44 	.word	0x20000f44
 8007d60:	20000f70 	.word	0x20000f70
 8007d64:	20000f58 	.word	0x20000f58

08007d68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d108      	bne.n	8007d8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 ffa2 	bl	8008cc8 <vPortFree>
				vPortFree( pxTCB );
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 ff9f 	bl	8008cc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d8a:	e019      	b.n	8007dc0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d103      	bne.n	8007d9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 ff96 	bl	8008cc8 <vPortFree>
	}
 8007d9c:	e010      	b.n	8007dc0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d00b      	beq.n	8007dc0 <prvDeleteTCB+0x58>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	60fb      	str	r3, [r7, #12]
}
 8007dba:	bf00      	nop
 8007dbc:	bf00      	nop
 8007dbe:	e7fd      	b.n	8007dbc <prvDeleteTCB+0x54>
	}
 8007dc0:	bf00      	nop
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dce:	4b0c      	ldr	r3, [pc, #48]	@ (8007e00 <prvResetNextTaskUnblockTime+0x38>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d104      	bne.n	8007de2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e04 <prvResetNextTaskUnblockTime+0x3c>)
 8007dda:	f04f 32ff 	mov.w	r2, #4294967295
 8007dde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007de0:	e008      	b.n	8007df4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007de2:	4b07      	ldr	r3, [pc, #28]	@ (8007e00 <prvResetNextTaskUnblockTime+0x38>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	4a04      	ldr	r2, [pc, #16]	@ (8007e04 <prvResetNextTaskUnblockTime+0x3c>)
 8007df2:	6013      	str	r3, [r2, #0]
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	20000f28 	.word	0x20000f28
 8007e04:	20000f90 	.word	0x20000f90

08007e08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e3c <xTaskGetSchedulerState+0x34>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d102      	bne.n	8007e1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e16:	2301      	movs	r3, #1
 8007e18:	607b      	str	r3, [r7, #4]
 8007e1a:	e008      	b.n	8007e2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e1c:	4b08      	ldr	r3, [pc, #32]	@ (8007e40 <xTaskGetSchedulerState+0x38>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e24:	2302      	movs	r3, #2
 8007e26:	607b      	str	r3, [r7, #4]
 8007e28:	e001      	b.n	8007e2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e2e:	687b      	ldr	r3, [r7, #4]
	}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	20000f7c 	.word	0x20000f7c
 8007e40:	20000f98 	.word	0x20000f98

08007e44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d058      	beq.n	8007f0c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007f18 <xTaskPriorityDisinherit+0xd4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d00b      	beq.n	8007e7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	60fb      	str	r3, [r7, #12]
}
 8007e76:	bf00      	nop
 8007e78:	bf00      	nop
 8007e7a:	e7fd      	b.n	8007e78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10b      	bne.n	8007e9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	60bb      	str	r3, [r7, #8]
}
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	e7fd      	b.n	8007e98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ea0:	1e5a      	subs	r2, r3, #1
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d02c      	beq.n	8007f0c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d128      	bne.n	8007f0c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fc54 	bl	800676c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007edc:	4b0f      	ldr	r3, [pc, #60]	@ (8007f1c <xTaskPriorityDisinherit+0xd8>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d903      	bls.n	8007eec <xTaskPriorityDisinherit+0xa8>
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8007f1c <xTaskPriorityDisinherit+0xd8>)
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4a09      	ldr	r2, [pc, #36]	@ (8007f20 <xTaskPriorityDisinherit+0xdc>)
 8007efa:	441a      	add	r2, r3
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	3304      	adds	r3, #4
 8007f00:	4619      	mov	r1, r3
 8007f02:	4610      	mov	r0, r2
 8007f04:	f7fe fbd5 	bl	80066b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f0c:	697b      	ldr	r3, [r7, #20]
	}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20000a9c 	.word	0x20000a9c
 8007f1c:	20000f78 	.word	0x20000f78
 8007f20:	20000aa0 	.word	0x20000aa0

08007f24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f2e:	4b21      	ldr	r3, [pc, #132]	@ (8007fb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f34:	4b20      	ldr	r3, [pc, #128]	@ (8007fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fc16 	bl	800676c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f46:	d10a      	bne.n	8007f5e <prvAddCurrentTaskToDelayedList+0x3a>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d007      	beq.n	8007f5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8007fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3304      	adds	r3, #4
 8007f54:	4619      	mov	r1, r3
 8007f56:	4819      	ldr	r0, [pc, #100]	@ (8007fbc <prvAddCurrentTaskToDelayedList+0x98>)
 8007f58:	f7fe fbab 	bl	80066b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f5c:	e026      	b.n	8007fac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4413      	add	r3, r2
 8007f64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f66:	4b14      	ldr	r3, [pc, #80]	@ (8007fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d209      	bcs.n	8007f8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f76:	4b12      	ldr	r3, [pc, #72]	@ (8007fc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f7fe fbb9 	bl	80066fa <vListInsert>
}
 8007f88:	e010      	b.n	8007fac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3304      	adds	r3, #4
 8007f94:	4619      	mov	r1, r3
 8007f96:	4610      	mov	r0, r2
 8007f98:	f7fe fbaf 	bl	80066fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d202      	bcs.n	8007fac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007fa6:	4a08      	ldr	r2, [pc, #32]	@ (8007fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	6013      	str	r3, [r2, #0]
}
 8007fac:	bf00      	nop
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20000f74 	.word	0x20000f74
 8007fb8:	20000a9c 	.word	0x20000a9c
 8007fbc:	20000f5c 	.word	0x20000f5c
 8007fc0:	20000f2c 	.word	0x20000f2c
 8007fc4:	20000f28 	.word	0x20000f28
 8007fc8:	20000f90 	.word	0x20000f90

08007fcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	@ 0x28
 8007fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fd6:	f000 fb13 	bl	8008600 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fda:	4b1d      	ldr	r3, [pc, #116]	@ (8008050 <xTimerCreateTimerTask+0x84>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d021      	beq.n	8008026 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007fea:	1d3a      	adds	r2, r7, #4
 8007fec:	f107 0108 	add.w	r1, r7, #8
 8007ff0:	f107 030c 	add.w	r3, r7, #12
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe fb15 	bl	8006624 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	9202      	str	r2, [sp, #8]
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	2302      	movs	r3, #2
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	2300      	movs	r3, #0
 800800a:	460a      	mov	r2, r1
 800800c:	4911      	ldr	r1, [pc, #68]	@ (8008054 <xTimerCreateTimerTask+0x88>)
 800800e:	4812      	ldr	r0, [pc, #72]	@ (8008058 <xTimerCreateTimerTask+0x8c>)
 8008010:	f7ff f8d0 	bl	80071b4 <xTaskCreateStatic>
 8008014:	4603      	mov	r3, r0
 8008016:	4a11      	ldr	r2, [pc, #68]	@ (800805c <xTimerCreateTimerTask+0x90>)
 8008018:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800801a:	4b10      	ldr	r3, [pc, #64]	@ (800805c <xTimerCreateTimerTask+0x90>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008022:	2301      	movs	r3, #1
 8008024:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10b      	bne.n	8008044 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	613b      	str	r3, [r7, #16]
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	e7fd      	b.n	8008040 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008044:	697b      	ldr	r3, [r7, #20]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	20000fcc 	.word	0x20000fcc
 8008054:	08008fe0 	.word	0x08008fe0
 8008058:	08008199 	.word	0x08008199
 800805c:	20000fd0 	.word	0x20000fd0

08008060 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	@ 0x28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800806e:	2300      	movs	r3, #0
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10b      	bne.n	8008090 <xTimerGenericCommand+0x30>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	623b      	str	r3, [r7, #32]
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008090:	4b19      	ldr	r3, [pc, #100]	@ (80080f8 <xTimerGenericCommand+0x98>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d02a      	beq.n	80080ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2b05      	cmp	r3, #5
 80080a8:	dc18      	bgt.n	80080dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080aa:	f7ff fead 	bl	8007e08 <xTaskGetSchedulerState>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d109      	bne.n	80080c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080b4:	4b10      	ldr	r3, [pc, #64]	@ (80080f8 <xTimerGenericCommand+0x98>)
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	f107 0110 	add.w	r1, r7, #16
 80080bc:	2300      	movs	r3, #0
 80080be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c0:	f7fe fc88 	bl	80069d4 <xQueueGenericSend>
 80080c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80080c6:	e012      	b.n	80080ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080c8:	4b0b      	ldr	r3, [pc, #44]	@ (80080f8 <xTimerGenericCommand+0x98>)
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	f107 0110 	add.w	r1, r7, #16
 80080d0:	2300      	movs	r3, #0
 80080d2:	2200      	movs	r2, #0
 80080d4:	f7fe fc7e 	bl	80069d4 <xQueueGenericSend>
 80080d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80080da:	e008      	b.n	80080ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080dc:	4b06      	ldr	r3, [pc, #24]	@ (80080f8 <xTimerGenericCommand+0x98>)
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	f107 0110 	add.w	r1, r7, #16
 80080e4:	2300      	movs	r3, #0
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	f7fe fd76 	bl	8006bd8 <xQueueGenericSendFromISR>
 80080ec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3728      	adds	r7, #40	@ 0x28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20000fcc 	.word	0x20000fcc

080080fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af02      	add	r7, sp, #8
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008106:	4b23      	ldr	r3, [pc, #140]	@ (8008194 <prvProcessExpiredTimer+0x98>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	3304      	adds	r3, #4
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fb29 	bl	800676c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d023      	beq.n	8008170 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	699a      	ldr	r2, [r3, #24]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	18d1      	adds	r1, r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	6978      	ldr	r0, [r7, #20]
 8008136:	f000 f8d5 	bl	80082e4 <prvInsertTimerInActiveList>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d020      	beq.n	8008182 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008140:	2300      	movs	r3, #0
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	2300      	movs	r3, #0
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	2100      	movs	r1, #0
 800814a:	6978      	ldr	r0, [r7, #20]
 800814c:	f7ff ff88 	bl	8008060 <xTimerGenericCommand>
 8008150:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d114      	bne.n	8008182 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	60fb      	str	r3, [r7, #12]
}
 800816a:	bf00      	nop
 800816c:	bf00      	nop
 800816e:	e7fd      	b.n	800816c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008176:	f023 0301 	bic.w	r3, r3, #1
 800817a:	b2da      	uxtb	r2, r3
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	6978      	ldr	r0, [r7, #20]
 8008188:	4798      	blx	r3
}
 800818a:	bf00      	nop
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20000fc4 	.word	0x20000fc4

08008198 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081a0:	f107 0308 	add.w	r3, r7, #8
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 f859 	bl	800825c <prvGetNextExpireTime>
 80081aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4619      	mov	r1, r3
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 f805 	bl	80081c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081b6:	f000 f8d7 	bl	8008368 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081ba:	bf00      	nop
 80081bc:	e7f0      	b.n	80081a0 <prvTimerTask+0x8>
	...

080081c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081ca:	f7ff fa37 	bl	800763c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 f866 	bl	80082a4 <prvSampleTimeNow>
 80081d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d130      	bne.n	8008242 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <prvProcessTimerOrBlockTask+0x3c>
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d806      	bhi.n	80081fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081ee:	f7ff fa33 	bl	8007658 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff ff81 	bl	80080fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081fa:	e024      	b.n	8008246 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d008      	beq.n	8008214 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008202:	4b13      	ldr	r3, [pc, #76]	@ (8008250 <prvProcessTimerOrBlockTask+0x90>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <prvProcessTimerOrBlockTask+0x50>
 800820c:	2301      	movs	r3, #1
 800820e:	e000      	b.n	8008212 <prvProcessTimerOrBlockTask+0x52>
 8008210:	2300      	movs	r3, #0
 8008212:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008214:	4b0f      	ldr	r3, [pc, #60]	@ (8008254 <prvProcessTimerOrBlockTask+0x94>)
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4619      	mov	r1, r3
 8008222:	f7fe ff93 	bl	800714c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008226:	f7ff fa17 	bl	8007658 <xTaskResumeAll>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10a      	bne.n	8008246 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008230:	4b09      	ldr	r3, [pc, #36]	@ (8008258 <prvProcessTimerOrBlockTask+0x98>)
 8008232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	f3bf 8f6f 	isb	sy
}
 8008240:	e001      	b.n	8008246 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008242:	f7ff fa09 	bl	8007658 <xTaskResumeAll>
}
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000fc8 	.word	0x20000fc8
 8008254:	20000fcc 	.word	0x20000fcc
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008264:	4b0e      	ldr	r3, [pc, #56]	@ (80082a0 <prvGetNextExpireTime+0x44>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <prvGetNextExpireTime+0x16>
 800826e:	2201      	movs	r2, #1
 8008270:	e000      	b.n	8008274 <prvGetNextExpireTime+0x18>
 8008272:	2200      	movs	r2, #0
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d105      	bne.n	800828c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008280:	4b07      	ldr	r3, [pc, #28]	@ (80082a0 <prvGetNextExpireTime+0x44>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	e001      	b.n	8008290 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008290:	68fb      	ldr	r3, [r7, #12]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20000fc4 	.word	0x20000fc4

080082a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082ac:	f7ff fa72 	bl	8007794 <xTaskGetTickCount>
 80082b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082b2:	4b0b      	ldr	r3, [pc, #44]	@ (80082e0 <prvSampleTimeNow+0x3c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d205      	bcs.n	80082c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082bc:	f000 f93a 	bl	8008534 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	e002      	b.n	80082ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082ce:	4a04      	ldr	r2, [pc, #16]	@ (80082e0 <prvSampleTimeNow+0x3c>)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082d4:	68fb      	ldr	r3, [r7, #12]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000fd4 	.word	0x20000fd4

080082e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d812      	bhi.n	8008330 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	429a      	cmp	r2, r3
 8008316:	d302      	bcc.n	800831e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008318:	2301      	movs	r3, #1
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	e01b      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800831e:	4b10      	ldr	r3, [pc, #64]	@ (8008360 <prvInsertTimerInActiveList+0x7c>)
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f7fe f9e6 	bl	80066fa <vListInsert>
 800832e:	e012      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d206      	bcs.n	8008346 <prvInsertTimerInActiveList+0x62>
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	429a      	cmp	r2, r3
 800833e:	d302      	bcc.n	8008346 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e007      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008346:	4b07      	ldr	r3, [pc, #28]	@ (8008364 <prvInsertTimerInActiveList+0x80>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7fe f9d2 	bl	80066fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008356:	697b      	ldr	r3, [r7, #20]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20000fc8 	.word	0x20000fc8
 8008364:	20000fc4 	.word	0x20000fc4

08008368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08e      	sub	sp, #56	@ 0x38
 800836c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800836e:	e0ce      	b.n	800850e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	da19      	bge.n	80083aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008376:	1d3b      	adds	r3, r7, #4
 8008378:	3304      	adds	r3, #4
 800837a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800837c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10b      	bne.n	800839a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	61fb      	str	r3, [r7, #28]
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop
 8008398:	e7fd      	b.n	8008396 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800839a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083a0:	6850      	ldr	r0, [r2, #4]
 80083a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083a4:	6892      	ldr	r2, [r2, #8]
 80083a6:	4611      	mov	r1, r2
 80083a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f2c0 80ae 	blt.w	800850e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c0:	3304      	adds	r3, #4
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe f9d2 	bl	800676c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083c8:	463b      	mov	r3, r7
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff ff6a 	bl	80082a4 <prvSampleTimeNow>
 80083d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b09      	cmp	r3, #9
 80083d6:	f200 8097 	bhi.w	8008508 <prvProcessReceivedCommands+0x1a0>
 80083da:	a201      	add	r2, pc, #4	@ (adr r2, 80083e0 <prvProcessReceivedCommands+0x78>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	08008409 	.word	0x08008409
 80083e4:	08008409 	.word	0x08008409
 80083e8:	08008409 	.word	0x08008409
 80083ec:	0800847f 	.word	0x0800847f
 80083f0:	08008493 	.word	0x08008493
 80083f4:	080084df 	.word	0x080084df
 80083f8:	08008409 	.word	0x08008409
 80083fc:	08008409 	.word	0x08008409
 8008400:	0800847f 	.word	0x0800847f
 8008404:	08008493 	.word	0x08008493
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	b2da      	uxtb	r2, r3
 8008414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008416:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	18d1      	adds	r1, r2, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008428:	f7ff ff5c 	bl	80082e4 <prvInsertTimerInActiveList>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d06c      	beq.n	800850c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008438:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800843a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d061      	beq.n	800850c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	441a      	add	r2, r3
 8008450:	2300      	movs	r3, #0
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	2100      	movs	r1, #0
 8008458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800845a:	f7ff fe01 	bl	8008060 <xTimerGenericCommand>
 800845e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d152      	bne.n	800850c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	61bb      	str	r3, [r7, #24]
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	e7fd      	b.n	800847a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800847e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008484:	f023 0301 	bic.w	r3, r3, #1
 8008488:	b2da      	uxtb	r2, r3
 800848a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008490:	e03d      	b.n	800850e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008494:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008498:	f043 0301 	orr.w	r3, r3, #1
 800849c:	b2da      	uxtb	r2, r3
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10b      	bne.n	80084ca <prvProcessReceivedCommands+0x162>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	617b      	str	r3, [r7, #20]
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop
 80084c8:	e7fd      	b.n	80084c6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	18d1      	adds	r1, r2, r3
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084d8:	f7ff ff04 	bl	80082e4 <prvInsertTimerInActiveList>
					break;
 80084dc:	e017      	b.n	800850e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d103      	bne.n	80084f4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80084ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084ee:	f000 fbeb 	bl	8008cc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084f2:	e00c      	b.n	800850e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084fa:	f023 0301 	bic.w	r3, r3, #1
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008502:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008506:	e002      	b.n	800850e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008508:	bf00      	nop
 800850a:	e000      	b.n	800850e <prvProcessReceivedCommands+0x1a6>
					break;
 800850c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800850e:	4b08      	ldr	r3, [pc, #32]	@ (8008530 <prvProcessReceivedCommands+0x1c8>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	1d39      	adds	r1, r7, #4
 8008514:	2200      	movs	r2, #0
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe fbfc 	bl	8006d14 <xQueueReceive>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	f47f af26 	bne.w	8008370 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	3730      	adds	r7, #48	@ 0x30
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000fcc 	.word	0x20000fcc

08008534 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800853a:	e049      	b.n	80085d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800853c:	4b2e      	ldr	r3, [pc, #184]	@ (80085f8 <prvSwitchTimerLists+0xc4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008546:	4b2c      	ldr	r3, [pc, #176]	@ (80085f8 <prvSwitchTimerLists+0xc4>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3304      	adds	r3, #4
 8008554:	4618      	mov	r0, r3
 8008556:	f7fe f909 	bl	800676c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b00      	cmp	r3, #0
 800856e:	d02f      	beq.n	80085d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	693a      	ldr	r2, [r7, #16]
 8008576:	4413      	add	r3, r2
 8008578:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	429a      	cmp	r2, r3
 8008580:	d90e      	bls.n	80085a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800858e:	4b1a      	ldr	r3, [pc, #104]	@ (80085f8 <prvSwitchTimerLists+0xc4>)
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3304      	adds	r3, #4
 8008596:	4619      	mov	r1, r3
 8008598:	4610      	mov	r0, r2
 800859a:	f7fe f8ae 	bl	80066fa <vListInsert>
 800859e:	e017      	b.n	80085d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085a0:	2300      	movs	r3, #0
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	2300      	movs	r3, #0
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	2100      	movs	r1, #0
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f7ff fd58 	bl	8008060 <xTimerGenericCommand>
 80085b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10b      	bne.n	80085d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	603b      	str	r3, [r7, #0]
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	e7fd      	b.n	80085cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085d0:	4b09      	ldr	r3, [pc, #36]	@ (80085f8 <prvSwitchTimerLists+0xc4>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1b0      	bne.n	800853c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085da:	4b07      	ldr	r3, [pc, #28]	@ (80085f8 <prvSwitchTimerLists+0xc4>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085e0:	4b06      	ldr	r3, [pc, #24]	@ (80085fc <prvSwitchTimerLists+0xc8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a04      	ldr	r2, [pc, #16]	@ (80085f8 <prvSwitchTimerLists+0xc4>)
 80085e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085e8:	4a04      	ldr	r2, [pc, #16]	@ (80085fc <prvSwitchTimerLists+0xc8>)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	6013      	str	r3, [r2, #0]
}
 80085ee:	bf00      	nop
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000fc4 	.word	0x20000fc4
 80085fc:	20000fc8 	.word	0x20000fc8

08008600 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008606:	f000 f96f 	bl	80088e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800860a:	4b15      	ldr	r3, [pc, #84]	@ (8008660 <prvCheckForValidListAndQueue+0x60>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d120      	bne.n	8008654 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008612:	4814      	ldr	r0, [pc, #80]	@ (8008664 <prvCheckForValidListAndQueue+0x64>)
 8008614:	f7fe f820 	bl	8006658 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008618:	4813      	ldr	r0, [pc, #76]	@ (8008668 <prvCheckForValidListAndQueue+0x68>)
 800861a:	f7fe f81d 	bl	8006658 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800861e:	4b13      	ldr	r3, [pc, #76]	@ (800866c <prvCheckForValidListAndQueue+0x6c>)
 8008620:	4a10      	ldr	r2, [pc, #64]	@ (8008664 <prvCheckForValidListAndQueue+0x64>)
 8008622:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008624:	4b12      	ldr	r3, [pc, #72]	@ (8008670 <prvCheckForValidListAndQueue+0x70>)
 8008626:	4a10      	ldr	r2, [pc, #64]	@ (8008668 <prvCheckForValidListAndQueue+0x68>)
 8008628:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800862a:	2300      	movs	r3, #0
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	4b11      	ldr	r3, [pc, #68]	@ (8008674 <prvCheckForValidListAndQueue+0x74>)
 8008630:	4a11      	ldr	r2, [pc, #68]	@ (8008678 <prvCheckForValidListAndQueue+0x78>)
 8008632:	2110      	movs	r1, #16
 8008634:	200a      	movs	r0, #10
 8008636:	f7fe f92d 	bl	8006894 <xQueueGenericCreateStatic>
 800863a:	4603      	mov	r3, r0
 800863c:	4a08      	ldr	r2, [pc, #32]	@ (8008660 <prvCheckForValidListAndQueue+0x60>)
 800863e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008640:	4b07      	ldr	r3, [pc, #28]	@ (8008660 <prvCheckForValidListAndQueue+0x60>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008648:	4b05      	ldr	r3, [pc, #20]	@ (8008660 <prvCheckForValidListAndQueue+0x60>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	490b      	ldr	r1, [pc, #44]	@ (800867c <prvCheckForValidListAndQueue+0x7c>)
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fd52 	bl	80070f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008654:	f000 f97a 	bl	800894c <vPortExitCritical>
}
 8008658:	bf00      	nop
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000fcc 	.word	0x20000fcc
 8008664:	20000f9c 	.word	0x20000f9c
 8008668:	20000fb0 	.word	0x20000fb0
 800866c:	20000fc4 	.word	0x20000fc4
 8008670:	20000fc8 	.word	0x20000fc8
 8008674:	20001078 	.word	0x20001078
 8008678:	20000fd8 	.word	0x20000fd8
 800867c:	08008fe8 	.word	0x08008fe8

08008680 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3b04      	subs	r3, #4
 8008690:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3b04      	subs	r3, #4
 800869e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f023 0201 	bic.w	r2, r3, #1
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3b04      	subs	r3, #4
 80086ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086b0:	4a0c      	ldr	r2, [pc, #48]	@ (80086e4 <pxPortInitialiseStack+0x64>)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3b14      	subs	r3, #20
 80086ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3b04      	subs	r3, #4
 80086c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f06f 0202 	mvn.w	r2, #2
 80086ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3b20      	subs	r3, #32
 80086d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086d6:	68fb      	ldr	r3, [r7, #12]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	080086e9 	.word	0x080086e9

080086e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086f2:	4b13      	ldr	r3, [pc, #76]	@ (8008740 <prvTaskExitError+0x58>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fa:	d00b      	beq.n	8008714 <prvTaskExitError+0x2c>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	60fb      	str	r3, [r7, #12]
}
 800870e:	bf00      	nop
 8008710:	bf00      	nop
 8008712:	e7fd      	b.n	8008710 <prvTaskExitError+0x28>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	60bb      	str	r3, [r7, #8]
}
 8008726:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008728:	bf00      	nop
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d0fc      	beq.n	800872a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	20000058 	.word	0x20000058
	...

08008750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008750:	4b07      	ldr	r3, [pc, #28]	@ (8008770 <pxCurrentTCBConst2>)
 8008752:	6819      	ldr	r1, [r3, #0]
 8008754:	6808      	ldr	r0, [r1, #0]
 8008756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875a:	f380 8809 	msr	PSP, r0
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f04f 0000 	mov.w	r0, #0
 8008766:	f380 8811 	msr	BASEPRI, r0
 800876a:	4770      	bx	lr
 800876c:	f3af 8000 	nop.w

08008770 <pxCurrentTCBConst2>:
 8008770:	20000a9c 	.word	0x20000a9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop

08008778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008778:	4808      	ldr	r0, [pc, #32]	@ (800879c <prvPortStartFirstTask+0x24>)
 800877a:	6800      	ldr	r0, [r0, #0]
 800877c:	6800      	ldr	r0, [r0, #0]
 800877e:	f380 8808 	msr	MSP, r0
 8008782:	f04f 0000 	mov.w	r0, #0
 8008786:	f380 8814 	msr	CONTROL, r0
 800878a:	b662      	cpsie	i
 800878c:	b661      	cpsie	f
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	df00      	svc	0
 8008798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800879a:	bf00      	nop
 800879c:	e000ed08 	.word	0xe000ed08

080087a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087a6:	4b47      	ldr	r3, [pc, #284]	@ (80088c4 <xPortStartScheduler+0x124>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a47      	ldr	r2, [pc, #284]	@ (80088c8 <xPortStartScheduler+0x128>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d10b      	bne.n	80087c8 <xPortStartScheduler+0x28>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	613b      	str	r3, [r7, #16]
}
 80087c2:	bf00      	nop
 80087c4:	bf00      	nop
 80087c6:	e7fd      	b.n	80087c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087c8:	4b3e      	ldr	r3, [pc, #248]	@ (80088c4 <xPortStartScheduler+0x124>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a3f      	ldr	r2, [pc, #252]	@ (80088cc <xPortStartScheduler+0x12c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d10b      	bne.n	80087ea <xPortStartScheduler+0x4a>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60fb      	str	r3, [r7, #12]
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
 80087e8:	e7fd      	b.n	80087e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087ea:	4b39      	ldr	r3, [pc, #228]	@ (80088d0 <xPortStartScheduler+0x130>)
 80087ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	22ff      	movs	r2, #255	@ 0xff
 80087fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	b2db      	uxtb	r3, r3
 8008802:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008804:	78fb      	ldrb	r3, [r7, #3]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800880c:	b2da      	uxtb	r2, r3
 800880e:	4b31      	ldr	r3, [pc, #196]	@ (80088d4 <xPortStartScheduler+0x134>)
 8008810:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008812:	4b31      	ldr	r3, [pc, #196]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008814:	2207      	movs	r2, #7
 8008816:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008818:	e009      	b.n	800882e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800881a:	4b2f      	ldr	r3, [pc, #188]	@ (80088d8 <xPortStartScheduler+0x138>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3b01      	subs	r3, #1
 8008820:	4a2d      	ldr	r2, [pc, #180]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008824:	78fb      	ldrb	r3, [r7, #3]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	b2db      	uxtb	r3, r3
 800882c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800882e:	78fb      	ldrb	r3, [r7, #3]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008836:	2b80      	cmp	r3, #128	@ 0x80
 8008838:	d0ef      	beq.n	800881a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800883a:	4b27      	ldr	r3, [pc, #156]	@ (80088d8 <xPortStartScheduler+0x138>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f1c3 0307 	rsb	r3, r3, #7
 8008842:	2b04      	cmp	r3, #4
 8008844:	d00b      	beq.n	800885e <xPortStartScheduler+0xbe>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60bb      	str	r3, [r7, #8]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800885e:	4b1e      	ldr	r3, [pc, #120]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	4a1c      	ldr	r2, [pc, #112]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008868:	4b1b      	ldr	r3, [pc, #108]	@ (80088d8 <xPortStartScheduler+0x138>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008870:	4a19      	ldr	r2, [pc, #100]	@ (80088d8 <xPortStartScheduler+0x138>)
 8008872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	b2da      	uxtb	r2, r3
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800887c:	4b17      	ldr	r3, [pc, #92]	@ (80088dc <xPortStartScheduler+0x13c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a16      	ldr	r2, [pc, #88]	@ (80088dc <xPortStartScheduler+0x13c>)
 8008882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008888:	4b14      	ldr	r3, [pc, #80]	@ (80088dc <xPortStartScheduler+0x13c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a13      	ldr	r2, [pc, #76]	@ (80088dc <xPortStartScheduler+0x13c>)
 800888e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008894:	f000 f8da 	bl	8008a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008898:	4b11      	ldr	r3, [pc, #68]	@ (80088e0 <xPortStartScheduler+0x140>)
 800889a:	2200      	movs	r2, #0
 800889c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800889e:	f000 f8f9 	bl	8008a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088a2:	4b10      	ldr	r3, [pc, #64]	@ (80088e4 <xPortStartScheduler+0x144>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a0f      	ldr	r2, [pc, #60]	@ (80088e4 <xPortStartScheduler+0x144>)
 80088a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80088ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088ae:	f7ff ff63 	bl	8008778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088b2:	f7ff f839 	bl	8007928 <vTaskSwitchContext>
	prvTaskExitError();
 80088b6:	f7ff ff17 	bl	80086e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	e000ed00 	.word	0xe000ed00
 80088c8:	410fc271 	.word	0x410fc271
 80088cc:	410fc270 	.word	0x410fc270
 80088d0:	e000e400 	.word	0xe000e400
 80088d4:	200010c8 	.word	0x200010c8
 80088d8:	200010cc 	.word	0x200010cc
 80088dc:	e000ed20 	.word	0xe000ed20
 80088e0:	20000058 	.word	0x20000058
 80088e4:	e000ef34 	.word	0xe000ef34

080088e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008902:	4b10      	ldr	r3, [pc, #64]	@ (8008944 <vPortEnterCritical+0x5c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	4a0e      	ldr	r2, [pc, #56]	@ (8008944 <vPortEnterCritical+0x5c>)
 800890a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800890c:	4b0d      	ldr	r3, [pc, #52]	@ (8008944 <vPortEnterCritical+0x5c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d110      	bne.n	8008936 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008914:	4b0c      	ldr	r3, [pc, #48]	@ (8008948 <vPortEnterCritical+0x60>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <vPortEnterCritical+0x4e>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	603b      	str	r3, [r7, #0]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <vPortEnterCritical+0x4a>
	}
}
 8008936:	bf00      	nop
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20000058 	.word	0x20000058
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008952:	4b12      	ldr	r3, [pc, #72]	@ (800899c <vPortExitCritical+0x50>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10b      	bne.n	8008972 <vPortExitCritical+0x26>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	607b      	str	r3, [r7, #4]
}
 800896c:	bf00      	nop
 800896e:	bf00      	nop
 8008970:	e7fd      	b.n	800896e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008972:	4b0a      	ldr	r3, [pc, #40]	@ (800899c <vPortExitCritical+0x50>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3b01      	subs	r3, #1
 8008978:	4a08      	ldr	r2, [pc, #32]	@ (800899c <vPortExitCritical+0x50>)
 800897a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800897c:	4b07      	ldr	r3, [pc, #28]	@ (800899c <vPortExitCritical+0x50>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d105      	bne.n	8008990 <vPortExitCritical+0x44>
 8008984:	2300      	movs	r3, #0
 8008986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	f383 8811 	msr	BASEPRI, r3
}
 800898e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	20000058 	.word	0x20000058

080089a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089a0:	f3ef 8009 	mrs	r0, PSP
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	4b15      	ldr	r3, [pc, #84]	@ (8008a00 <pxCurrentTCBConst>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	f01e 0f10 	tst.w	lr, #16
 80089b0:	bf08      	it	eq
 80089b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ba:	6010      	str	r0, [r2, #0]
 80089bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089c4:	f380 8811 	msr	BASEPRI, r0
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f7fe ffaa 	bl	8007928 <vTaskSwitchContext>
 80089d4:	f04f 0000 	mov.w	r0, #0
 80089d8:	f380 8811 	msr	BASEPRI, r0
 80089dc:	bc09      	pop	{r0, r3}
 80089de:	6819      	ldr	r1, [r3, #0]
 80089e0:	6808      	ldr	r0, [r1, #0]
 80089e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e6:	f01e 0f10 	tst.w	lr, #16
 80089ea:	bf08      	it	eq
 80089ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089f0:	f380 8809 	msr	PSP, r0
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	f3af 8000 	nop.w

08008a00 <pxCurrentTCBConst>:
 8008a00:	20000a9c 	.word	0x20000a9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop

08008a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	607b      	str	r3, [r7, #4]
}
 8008a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a22:	f7fe fec7 	bl	80077b4 <xTaskIncrementTick>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a2c:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <xPortSysTickHandler+0x40>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	2300      	movs	r3, #0
 8008a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	f383 8811 	msr	BASEPRI, r3
}
 8008a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a50:	4b0b      	ldr	r3, [pc, #44]	@ (8008a80 <vPortSetupTimerInterrupt+0x34>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a56:	4b0b      	ldr	r3, [pc, #44]	@ (8008a84 <vPortSetupTimerInterrupt+0x38>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a88 <vPortSetupTimerInterrupt+0x3c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a0a      	ldr	r2, [pc, #40]	@ (8008a8c <vPortSetupTimerInterrupt+0x40>)
 8008a62:	fba2 2303 	umull	r2, r3, r2, r3
 8008a66:	099b      	lsrs	r3, r3, #6
 8008a68:	4a09      	ldr	r2, [pc, #36]	@ (8008a90 <vPortSetupTimerInterrupt+0x44>)
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a6e:	4b04      	ldr	r3, [pc, #16]	@ (8008a80 <vPortSetupTimerInterrupt+0x34>)
 8008a70:	2207      	movs	r2, #7
 8008a72:	601a      	str	r2, [r3, #0]
}
 8008a74:	bf00      	nop
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	e000e010 	.word	0xe000e010
 8008a84:	e000e018 	.word	0xe000e018
 8008a88:	20000008 	.word	0x20000008
 8008a8c:	10624dd3 	.word	0x10624dd3
 8008a90:	e000e014 	.word	0xe000e014

08008a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008aa4 <vPortEnableVFP+0x10>
 8008a98:	6801      	ldr	r1, [r0, #0]
 8008a9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008a9e:	6001      	str	r1, [r0, #0]
 8008aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008aa2:	bf00      	nop
 8008aa4:	e000ed88 	.word	0xe000ed88

08008aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008aae:	f3ef 8305 	mrs	r3, IPSR
 8008ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b0f      	cmp	r3, #15
 8008ab8:	d915      	bls.n	8008ae6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008aba:	4a18      	ldr	r2, [pc, #96]	@ (8008b1c <vPortValidateInterruptPriority+0x74>)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ac4:	4b16      	ldr	r3, [pc, #88]	@ (8008b20 <vPortValidateInterruptPriority+0x78>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	7afa      	ldrb	r2, [r7, #11]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d20b      	bcs.n	8008ae6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	607b      	str	r3, [r7, #4]
}
 8008ae0:	bf00      	nop
 8008ae2:	bf00      	nop
 8008ae4:	e7fd      	b.n	8008ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b24 <vPortValidateInterruptPriority+0x7c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008aee:	4b0e      	ldr	r3, [pc, #56]	@ (8008b28 <vPortValidateInterruptPriority+0x80>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d90b      	bls.n	8008b0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	603b      	str	r3, [r7, #0]
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	e7fd      	b.n	8008b0a <vPortValidateInterruptPriority+0x62>
	}
 8008b0e:	bf00      	nop
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	e000e3f0 	.word	0xe000e3f0
 8008b20:	200010c8 	.word	0x200010c8
 8008b24:	e000ed0c 	.word	0xe000ed0c
 8008b28:	200010cc 	.word	0x200010cc

08008b2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08a      	sub	sp, #40	@ 0x28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b38:	f7fe fd80 	bl	800763c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8008cb0 <pvPortMalloc+0x184>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b44:	f000 f924 	bl	8008d90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b48:	4b5a      	ldr	r3, [pc, #360]	@ (8008cb4 <pvPortMalloc+0x188>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f040 8095 	bne.w	8008c80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01e      	beq.n	8008b9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4413      	add	r3, r2
 8008b62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d015      	beq.n	8008b9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f023 0307 	bic.w	r3, r3, #7
 8008b74:	3308      	adds	r3, #8
 8008b76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f003 0307 	and.w	r3, r3, #7
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <pvPortMalloc+0x6e>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	617b      	str	r3, [r7, #20]
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop
 8008b98:	e7fd      	b.n	8008b96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d06f      	beq.n	8008c80 <pvPortMalloc+0x154>
 8008ba0:	4b45      	ldr	r3, [pc, #276]	@ (8008cb8 <pvPortMalloc+0x18c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d86a      	bhi.n	8008c80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008baa:	4b44      	ldr	r3, [pc, #272]	@ (8008cbc <pvPortMalloc+0x190>)
 8008bac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bae:	4b43      	ldr	r3, [pc, #268]	@ (8008cbc <pvPortMalloc+0x190>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bb4:	e004      	b.n	8008bc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d903      	bls.n	8008bd2 <pvPortMalloc+0xa6>
 8008bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1f1      	bne.n	8008bb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bd2:	4b37      	ldr	r3, [pc, #220]	@ (8008cb0 <pvPortMalloc+0x184>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d051      	beq.n	8008c80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2208      	movs	r2, #8
 8008be2:	4413      	add	r3, r2
 8008be4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	1ad2      	subs	r2, r2, r3
 8008bf6:	2308      	movs	r3, #8
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d920      	bls.n	8008c40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4413      	add	r3, r2
 8008c04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00b      	beq.n	8008c28 <pvPortMalloc+0xfc>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	613b      	str	r3, [r7, #16]
}
 8008c22:	bf00      	nop
 8008c24:	bf00      	nop
 8008c26:	e7fd      	b.n	8008c24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c3a:	69b8      	ldr	r0, [r7, #24]
 8008c3c:	f000 f90a 	bl	8008e54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c40:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb8 <pvPortMalloc+0x18c>)
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008cb8 <pvPortMalloc+0x18c>)
 8008c4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb8 <pvPortMalloc+0x18c>)
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc0 <pvPortMalloc+0x194>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d203      	bcs.n	8008c62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c5a:	4b17      	ldr	r3, [pc, #92]	@ (8008cb8 <pvPortMalloc+0x18c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a18      	ldr	r2, [pc, #96]	@ (8008cc0 <pvPortMalloc+0x194>)
 8008c60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	4b13      	ldr	r3, [pc, #76]	@ (8008cb4 <pvPortMalloc+0x188>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c76:	4b13      	ldr	r3, [pc, #76]	@ (8008cc4 <pvPortMalloc+0x198>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	4a11      	ldr	r2, [pc, #68]	@ (8008cc4 <pvPortMalloc+0x198>)
 8008c7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c80:	f7fe fcea 	bl	8007658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00b      	beq.n	8008ca6 <pvPortMalloc+0x17a>
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	60fb      	str	r3, [r7, #12]
}
 8008ca0:	bf00      	nop
 8008ca2:	bf00      	nop
 8008ca4:	e7fd      	b.n	8008ca2 <pvPortMalloc+0x176>
	return pvReturn;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3728      	adds	r7, #40	@ 0x28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20004cd8 	.word	0x20004cd8
 8008cb4:	20004cec 	.word	0x20004cec
 8008cb8:	20004cdc 	.word	0x20004cdc
 8008cbc:	20004cd0 	.word	0x20004cd0
 8008cc0:	20004ce0 	.word	0x20004ce0
 8008cc4:	20004ce4 	.word	0x20004ce4

08008cc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d04f      	beq.n	8008d7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cda:	2308      	movs	r3, #8
 8008cdc:	425b      	negs	r3, r3
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	4b25      	ldr	r3, [pc, #148]	@ (8008d84 <vPortFree+0xbc>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10b      	bne.n	8008d0e <vPortFree+0x46>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	60fb      	str	r3, [r7, #12]
}
 8008d08:	bf00      	nop
 8008d0a:	bf00      	nop
 8008d0c:	e7fd      	b.n	8008d0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00b      	beq.n	8008d2e <vPortFree+0x66>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	60bb      	str	r3, [r7, #8]
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	e7fd      	b.n	8008d2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	4b14      	ldr	r3, [pc, #80]	@ (8008d84 <vPortFree+0xbc>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4013      	ands	r3, r2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d01e      	beq.n	8008d7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d11a      	bne.n	8008d7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	4b0e      	ldr	r3, [pc, #56]	@ (8008d84 <vPortFree+0xbc>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	43db      	mvns	r3, r3
 8008d4e:	401a      	ands	r2, r3
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d54:	f7fe fc72 	bl	800763c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d88 <vPortFree+0xc0>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4413      	add	r3, r2
 8008d62:	4a09      	ldr	r2, [pc, #36]	@ (8008d88 <vPortFree+0xc0>)
 8008d64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d66:	6938      	ldr	r0, [r7, #16]
 8008d68:	f000 f874 	bl	8008e54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d6c:	4b07      	ldr	r3, [pc, #28]	@ (8008d8c <vPortFree+0xc4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3301      	adds	r3, #1
 8008d72:	4a06      	ldr	r2, [pc, #24]	@ (8008d8c <vPortFree+0xc4>)
 8008d74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d76:	f7fe fc6f 	bl	8007658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d7a:	bf00      	nop
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20004cec 	.word	0x20004cec
 8008d88:	20004cdc 	.word	0x20004cdc
 8008d8c:	20004ce8 	.word	0x20004ce8

08008d90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008d9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d9c:	4b27      	ldr	r3, [pc, #156]	@ (8008e3c <prvHeapInit+0xac>)
 8008d9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f003 0307 	and.w	r3, r3, #7
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00c      	beq.n	8008dc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3307      	adds	r3, #7
 8008dae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0307 	bic.w	r3, r3, #7
 8008db6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8008e3c <prvHeapInit+0xac>)
 8008dc0:	4413      	add	r3, r2
 8008dc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e40 <prvHeapInit+0xb0>)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dce:	4b1c      	ldr	r3, [pc, #112]	@ (8008e40 <prvHeapInit+0xb0>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	4413      	add	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ddc:	2208      	movs	r2, #8
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	1a9b      	subs	r3, r3, r2
 8008de2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f023 0307 	bic.w	r3, r3, #7
 8008dea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4a15      	ldr	r2, [pc, #84]	@ (8008e44 <prvHeapInit+0xb4>)
 8008df0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008df2:	4b14      	ldr	r3, [pc, #80]	@ (8008e44 <prvHeapInit+0xb4>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2200      	movs	r2, #0
 8008df8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dfa:	4b12      	ldr	r3, [pc, #72]	@ (8008e44 <prvHeapInit+0xb4>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	1ad2      	subs	r2, r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e10:	4b0c      	ldr	r3, [pc, #48]	@ (8008e44 <prvHeapInit+0xb4>)
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8008e48 <prvHeapInit+0xb8>)
 8008e1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4a09      	ldr	r2, [pc, #36]	@ (8008e4c <prvHeapInit+0xbc>)
 8008e26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e28:	4b09      	ldr	r3, [pc, #36]	@ (8008e50 <prvHeapInit+0xc0>)
 8008e2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008e2e:	601a      	str	r2, [r3, #0]
}
 8008e30:	bf00      	nop
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	200010d0 	.word	0x200010d0
 8008e40:	20004cd0 	.word	0x20004cd0
 8008e44:	20004cd8 	.word	0x20004cd8
 8008e48:	20004ce0 	.word	0x20004ce0
 8008e4c:	20004cdc 	.word	0x20004cdc
 8008e50:	20004cec 	.word	0x20004cec

08008e54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e5c:	4b28      	ldr	r3, [pc, #160]	@ (8008f00 <prvInsertBlockIntoFreeList+0xac>)
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	e002      	b.n	8008e68 <prvInsertBlockIntoFreeList+0x14>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d8f7      	bhi.n	8008e62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d108      	bne.n	8008e96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	441a      	add	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	68ba      	ldr	r2, [r7, #8]
 8008ea0:	441a      	add	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d118      	bne.n	8008edc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	4b15      	ldr	r3, [pc, #84]	@ (8008f04 <prvInsertBlockIntoFreeList+0xb0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d00d      	beq.n	8008ed2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	441a      	add	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e008      	b.n	8008ee4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8008f04 <prvInsertBlockIntoFreeList+0xb0>)
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	e003      	b.n	8008ee4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d002      	beq.n	8008ef2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ef2:	bf00      	nop
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	20004cd0 	.word	0x20004cd0
 8008f04:	20004cd8 	.word	0x20004cd8

08008f08 <memcmp>:
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	3901      	subs	r1, #1
 8008f0c:	4402      	add	r2, r0
 8008f0e:	4290      	cmp	r0, r2
 8008f10:	d101      	bne.n	8008f16 <memcmp+0xe>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e005      	b.n	8008f22 <memcmp+0x1a>
 8008f16:	7803      	ldrb	r3, [r0, #0]
 8008f18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	d001      	beq.n	8008f24 <memcmp+0x1c>
 8008f20:	1b18      	subs	r0, r3, r4
 8008f22:	bd10      	pop	{r4, pc}
 8008f24:	3001      	adds	r0, #1
 8008f26:	e7f2      	b.n	8008f0e <memcmp+0x6>

08008f28 <memset>:
 8008f28:	4402      	add	r2, r0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d100      	bne.n	8008f32 <memset+0xa>
 8008f30:	4770      	bx	lr
 8008f32:	f803 1b01 	strb.w	r1, [r3], #1
 8008f36:	e7f9      	b.n	8008f2c <memset+0x4>

08008f38 <__libc_init_array>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f70 <__libc_init_array+0x38>)
 8008f3c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f74 <__libc_init_array+0x3c>)
 8008f3e:	1b64      	subs	r4, r4, r5
 8008f40:	10a4      	asrs	r4, r4, #2
 8008f42:	2600      	movs	r6, #0
 8008f44:	42a6      	cmp	r6, r4
 8008f46:	d109      	bne.n	8008f5c <__libc_init_array+0x24>
 8008f48:	4d0b      	ldr	r5, [pc, #44]	@ (8008f78 <__libc_init_array+0x40>)
 8008f4a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f7c <__libc_init_array+0x44>)
 8008f4c:	f000 f826 	bl	8008f9c <_init>
 8008f50:	1b64      	subs	r4, r4, r5
 8008f52:	10a4      	asrs	r4, r4, #2
 8008f54:	2600      	movs	r6, #0
 8008f56:	42a6      	cmp	r6, r4
 8008f58:	d105      	bne.n	8008f66 <__libc_init_array+0x2e>
 8008f5a:	bd70      	pop	{r4, r5, r6, pc}
 8008f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f60:	4798      	blx	r3
 8008f62:	3601      	adds	r6, #1
 8008f64:	e7ee      	b.n	8008f44 <__libc_init_array+0xc>
 8008f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6a:	4798      	blx	r3
 8008f6c:	3601      	adds	r6, #1
 8008f6e:	e7f2      	b.n	8008f56 <__libc_init_array+0x1e>
 8008f70:	08009098 	.word	0x08009098
 8008f74:	08009098 	.word	0x08009098
 8008f78:	08009098 	.word	0x08009098
 8008f7c:	0800909c 	.word	0x0800909c

08008f80 <memcpy>:
 8008f80:	440a      	add	r2, r1
 8008f82:	4291      	cmp	r1, r2
 8008f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f88:	d100      	bne.n	8008f8c <memcpy+0xc>
 8008f8a:	4770      	bx	lr
 8008f8c:	b510      	push	{r4, lr}
 8008f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f96:	4291      	cmp	r1, r2
 8008f98:	d1f9      	bne.n	8008f8e <memcpy+0xe>
 8008f9a:	bd10      	pop	{r4, pc}

08008f9c <_init>:
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9e:	bf00      	nop
 8008fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa2:	bc08      	pop	{r3}
 8008fa4:	469e      	mov	lr, r3
 8008fa6:	4770      	bx	lr

08008fa8 <_fini>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	bf00      	nop
 8008fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fae:	bc08      	pop	{r3}
 8008fb0:	469e      	mov	lr, r3
 8008fb2:	4770      	bx	lr
