
program_hydralic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08009254  08009254  0000a254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009364  08009364  0000b0b8  2**0
                  CONTENTS
  4 .ARM          00000008  08009364  08009364  0000a364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800936c  0800936c  0000b0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800936c  0800936c  0000a36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009370  08009370  0000a370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08009374  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0b8  2**0
                  CONTENTS
 10 .bss          00004d90  200000b8  200000b8  0000b0b8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004e48  20004e48  0000b0b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c59  00000000  00000000  0000b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e5b  00000000  00000000  00023d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00027ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f96  00000000  00000000  00028ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000055f6  00000000  00000000  00029f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001751c  00000000  00000000  0002f584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4351  00000000  00000000  00046aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011adf1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c68  00000000  00000000  0011ae34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00120a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800923c 	.word	0x0800923c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0800923c 	.word	0x0800923c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_ldivmod>:
 80009bc:	b97b      	cbnz	r3, 80009de <__aeabi_ldivmod+0x22>
 80009be:	b972      	cbnz	r2, 80009de <__aeabi_ldivmod+0x22>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bfbe      	ittt	lt
 80009c4:	2000      	movlt	r0, #0
 80009c6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80009ca:	e006      	blt.n	80009da <__aeabi_ldivmod+0x1e>
 80009cc:	bf08      	it	eq
 80009ce:	2800      	cmpeq	r0, #0
 80009d0:	bf1c      	itt	ne
 80009d2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80009d6:	f04f 30ff 	movne.w	r0, #4294967295
 80009da:	f000 b9d3 	b.w	8000d84 <__aeabi_idiv0>
 80009de:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e6:	2900      	cmp	r1, #0
 80009e8:	db09      	blt.n	80009fe <__aeabi_ldivmod+0x42>
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db1a      	blt.n	8000a24 <__aeabi_ldivmod+0x68>
 80009ee:	f000 f84d 	bl	8000a8c <__udivmoddi4>
 80009f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009fa:	b004      	add	sp, #16
 80009fc:	4770      	bx	lr
 80009fe:	4240      	negs	r0, r0
 8000a00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db1b      	blt.n	8000a40 <__aeabi_ldivmod+0x84>
 8000a08:	f000 f840 	bl	8000a8c <__udivmoddi4>
 8000a0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a14:	b004      	add	sp, #16
 8000a16:	4240      	negs	r0, r0
 8000a18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a1c:	4252      	negs	r2, r2
 8000a1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a22:	4770      	bx	lr
 8000a24:	4252      	negs	r2, r2
 8000a26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a2a:	f000 f82f 	bl	8000a8c <__udivmoddi4>
 8000a2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a36:	b004      	add	sp, #16
 8000a38:	4240      	negs	r0, r0
 8000a3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a3e:	4770      	bx	lr
 8000a40:	4252      	negs	r2, r2
 8000a42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a46:	f000 f821 	bl	8000a8c <__udivmoddi4>
 8000a4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a52:	b004      	add	sp, #16
 8000a54:	4252      	negs	r2, r2
 8000a56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <u_timer_expired>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool u_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8000d88:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6178      	str	r0, [r7, #20]
 8000d92:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8000d96:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000d9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d9e:	eb10 0a02 	adds.w	sl, r0, r2
 8000da2:	eb41 0b03 	adc.w	fp, r1, r3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	4592      	cmp	sl, r2
 8000dae:	eb7b 0303 	sbcs.w	r3, fp, r3
 8000db2:	d206      	bcs.n	8000dc2 <u_timer_expired+0x3a>
 8000db4:	6979      	ldr	r1, [r7, #20]
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	d10d      	bne.n	8000de8 <u_timer_expired+0x60>
 8000dcc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dd4:	1886      	adds	r6, r0, r2
 8000dd6:	603e      	str	r6, [r7, #0]
 8000dd8:	eb41 0303 	adc.w	r3, r1, r3
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000de4:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000df2:	4290      	cmp	r0, r2
 8000df4:	eb71 0303 	sbcs.w	r3, r1, r3
 8000df8:	d201      	bcs.n	8000dfe <u_timer_expired+0x76>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e022      	b.n	8000e44 <u_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e04:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000e08:	ebb0 0802 	subs.w	r8, r0, r2
 8000e0c:	eb61 0903 	sbc.w	r9, r1, r3
 8000e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e14:	4542      	cmp	r2, r8
 8000e16:	eb73 0309 	sbcs.w	r3, r3, r9
 8000e1a:	d207      	bcs.n	8000e2c <u_timer_expired+0xa4>
 8000e1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e24:	1884      	adds	r4, r0, r2
 8000e26:	eb41 0503 	adc.w	r5, r1, r3
 8000e2a:	e007      	b.n	8000e3c <u_timer_expired+0xb4>
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e36:	1884      	adds	r4, r0, r2
 8000e38:	eb41 0503 	adc.w	r5, r1, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e4e:	4770      	bx	lr

08000e50 <readGPIOInputs>:
//            }
//        }
//    }
//}

void readGPIOInputs(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    gpioInputStates[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000e54:	2140      	movs	r1, #64	@ 0x40
 8000e56:	4815      	ldr	r0, [pc, #84]	@ (8000eac <readGPIOInputs+0x5c>)
 8000e58:	f003 fbd4 	bl	8004604 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <readGPIOInputs+0x60>)
 8000e62:	701a      	strb	r2, [r3, #0]
    gpioInputStates[1] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000e64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e68:	4812      	ldr	r0, [pc, #72]	@ (8000eb4 <readGPIOInputs+0x64>)
 8000e6a:	f003 fbcb 	bl	8004604 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <readGPIOInputs+0x60>)
 8000e74:	705a      	strb	r2, [r3, #1]
    gpioInputStates[2] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7);
 8000e76:	2180      	movs	r1, #128	@ 0x80
 8000e78:	480e      	ldr	r0, [pc, #56]	@ (8000eb4 <readGPIOInputs+0x64>)
 8000e7a:	f003 fbc3 	bl	8004604 <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <readGPIOInputs+0x60>)
 8000e84:	709a      	strb	r2, [r3, #2]
    gpioInputStates[3] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6);
 8000e86:	2140      	movs	r1, #64	@ 0x40
 8000e88:	480a      	ldr	r0, [pc, #40]	@ (8000eb4 <readGPIOInputs+0x64>)
 8000e8a:	f003 fbbb 	bl	8004604 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <readGPIOInputs+0x60>)
 8000e94:	70da      	strb	r2, [r3, #3]
    gpioInputStates[4] = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000e96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9a:	4806      	ldr	r0, [pc, #24]	@ (8000eb4 <readGPIOInputs+0x64>)
 8000e9c:	f003 fbb2 	bl	8004604 <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b02      	ldr	r3, [pc, #8]	@ (8000eb0 <readGPIOInputs+0x60>)
 8000ea6:	711a      	strb	r2, [r3, #4]
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	200000f8 	.word	0x200000f8
 8000eb4:	40021400 	.word	0x40021400

08000eb8 <manualMode>:
void manualMode(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
    modeLift = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_RESET ? true : false; // TRUE: bánh xe, FALSE: pallet
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	481a      	ldr	r0, [pc, #104]	@ (8000f2c <manualMode+0x74>)
 8000ec2:	f003 fb9f 	bl	8004604 <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bf0c      	ite	eq
 8000ecc:	2301      	moveq	r3, #1
 8000ece:	2300      	movne	r3, #0
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <manualMode+0x78>)
 8000ed4:	701a      	strb	r2, [r3, #0]

    bool liftPressed = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7) == GPIO_PIN_RESET ? true : false;
 8000ed6:	2180      	movs	r1, #128	@ 0x80
 8000ed8:	4816      	ldr	r0, [pc, #88]	@ (8000f34 <manualMode+0x7c>)
 8000eda:	f003 fb93 	bl	8004604 <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bf0c      	ite	eq
 8000ee4:	2301      	moveq	r3, #1
 8000ee6:	2300      	movne	r3, #0
 8000ee8:	71fb      	strb	r3, [r7, #7]
    bool lowerPressed = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == GPIO_PIN_RESET ? true : false;
 8000eea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eee:	4811      	ldr	r0, [pc, #68]	@ (8000f34 <manualMode+0x7c>)
 8000ef0:	f003 fb88 	bl	8004604 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	bf0c      	ite	eq
 8000efa:	2301      	moveq	r3, #1
 8000efc:	2300      	movne	r3, #0
 8000efe:	71bb      	strb	r3, [r7, #6]

    if (liftPressed) {
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <manualMode+0x56>
        buttonPressCount = 1;  // Nâng
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <manualMode+0x80>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
        buttonPressCount = 3;  // Hạ
    }
    else {
        buttonPressCount = 0;  // Tắt thủy lực
    }
}
 8000f0c:	e009      	b.n	8000f22 <manualMode+0x6a>
    else if (lowerPressed) {
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <manualMode+0x64>
        buttonPressCount = 3;  // Hạ
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <manualMode+0x80>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	701a      	strb	r2, [r3, #0]
}
 8000f1a:	e002      	b.n	8000f22 <manualMode+0x6a>
        buttonPressCount = 0;  // Tắt thủy lực
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <manualMode+0x80>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	200000d5 	.word	0x200000d5
 8000f34:	40021400 	.word	0x40021400
 8000f38:	200000d4 	.word	0x200000d4

08000f3c <autoMode>:

void autoMode()
{
 8000f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f40:	b08c      	sub	sp, #48	@ 0x30
 8000f42:	af02      	add	r7, sp, #8
  switch (autoStep)
 8000f44:	4b9f      	ldr	r3, [pc, #636]	@ (80011c4 <autoMode+0x288>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	f200 812b 	bhi.w	80011a6 <autoMode+0x26a>
 8000f50:	a201      	add	r2, pc, #4	@ (adr r2, 8000f58 <autoMode+0x1c>)
 8000f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f56:	bf00      	nop
 8000f58:	08000f69 	.word	0x08000f69
 8000f5c:	08000ffd 	.word	0x08000ffd
 8000f60:	08001091 	.word	0x08001091
 8000f64:	0800111d 	.word	0x0800111d
  {
  case 0: // nâng pallet
    buttonPressCount = 1;
 8000f68:	4b97      	ldr	r3, [pc, #604]	@ (80011c8 <autoMode+0x28c>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
    modeLift = false;
 8000f6e:	4b97      	ldr	r3, [pc, #604]	@ (80011cc <autoMode+0x290>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LIFT_PALLET, HAL_GetTick()))
 8000f74:	f002 fa24 	bl	80033c0 <HAL_GetTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	623b      	str	r3, [r7, #32]
 8000f7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f80:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000f84:	e9cd 3400 	strd	r3, r4, [sp]
 8000f88:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	488f      	ldr	r0, [pc, #572]	@ (80011d0 <autoMode+0x294>)
 8000f92:	f7ff fef9 	bl	8000d88 <u_timer_expired>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <autoMode+0x66>
    {
      stepDone[0] = true;
 8000f9c:	4b8d      	ldr	r3, [pc, #564]	@ (80011d4 <autoMode+0x298>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
    }
    if (stepDone[0])
 8000fa2:	4b8c      	ldr	r3, [pc, #560]	@ (80011d4 <autoMode+0x298>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 80ff 	beq.w	80011aa <autoMode+0x26e>
    {
      buttonPressCount = 0; // off thuỷ lực
 8000fac:	4b86      	ldr	r3, [pc, #536]	@ (80011c8 <autoMode+0x28c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 8000fb2:	f002 fa05 	bl	80033c0 <HAL_GetTick>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	61fa      	str	r2, [r7, #28]
 8000fbe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000fc2:	e9cd 3400 	strd	r3, r4, [sp]
 8000fc6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	4882      	ldr	r0, [pc, #520]	@ (80011d8 <autoMode+0x29c>)
 8000fd0:	f7ff feda 	bl	8000d88 <u_timer_expired>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 80e7 	beq.w	80011aa <autoMode+0x26e>
      {
        stepDone[0] = false;
 8000fdc:	4b7d      	ldr	r3, [pc, #500]	@ (80011d4 <autoMode+0x298>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	487a      	ldr	r0, [pc, #488]	@ (80011d0 <autoMode+0x294>)
 8000fe8:	f007 fe66 	bl	8008cb8 <memset>
        autoStep++;
 8000fec:	4b75      	ldr	r3, [pc, #468]	@ (80011c4 <autoMode+0x288>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b73      	ldr	r3, [pc, #460]	@ (80011c4 <autoMode+0x288>)
 8000ff8:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 8000ffa:	e0d6      	b.n	80011aa <autoMode+0x26e>

  case 1: // hạ bánh xe
    buttonPressCount = 1;
 8000ffc:	4b72      	ldr	r3, [pc, #456]	@ (80011c8 <autoMode+0x28c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
    modeLift = true;
 8001002:	4b72      	ldr	r3, [pc, #456]	@ (80011cc <autoMode+0x290>)
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LOWER_WHEEL, HAL_GetTick()))
 8001008:	f002 f9da 	bl	80033c0 <HAL_GetTick>
 800100c:	4603      	mov	r3, r0
 800100e:	2200      	movs	r2, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	617a      	str	r2, [r7, #20]
 8001014:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001018:	e9cd 3400 	strd	r3, r4, [sp]
 800101c:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	486a      	ldr	r0, [pc, #424]	@ (80011d0 <autoMode+0x294>)
 8001026:	f7ff feaf 	bl	8000d88 <u_timer_expired>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <autoMode+0xfa>
    {
      stepDone[1] = true;
 8001030:	4b68      	ldr	r3, [pc, #416]	@ (80011d4 <autoMode+0x298>)
 8001032:	2201      	movs	r2, #1
 8001034:	705a      	strb	r2, [r3, #1]
    }
    if (stepDone[1])
 8001036:	4b67      	ldr	r3, [pc, #412]	@ (80011d4 <autoMode+0x298>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80b7 	beq.w	80011ae <autoMode+0x272>
    {
      buttonPressCount = 0; // off thuỷ lực
 8001040:	4b61      	ldr	r3, [pc, #388]	@ (80011c8 <autoMode+0x28c>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 8001046:	f002 f9bb 	bl	80033c0 <HAL_GetTick>
 800104a:	4603      	mov	r3, r0
 800104c:	2200      	movs	r2, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	60fa      	str	r2, [r7, #12]
 8001052:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001056:	e9cd 3400 	strd	r3, r4, [sp]
 800105a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	485d      	ldr	r0, [pc, #372]	@ (80011d8 <autoMode+0x29c>)
 8001064:	f7ff fe90 	bl	8000d88 <u_timer_expired>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 809f 	beq.w	80011ae <autoMode+0x272>
      {
        stepDone[1] = false;
 8001070:	4b58      	ldr	r3, [pc, #352]	@ (80011d4 <autoMode+0x298>)
 8001072:	2200      	movs	r2, #0
 8001074:	705a      	strb	r2, [r3, #1]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 8001076:	2210      	movs	r2, #16
 8001078:	2100      	movs	r1, #0
 800107a:	4855      	ldr	r0, [pc, #340]	@ (80011d0 <autoMode+0x294>)
 800107c:	f007 fe1c 	bl	8008cb8 <memset>
        autoStep++;
 8001080:	4b50      	ldr	r3, [pc, #320]	@ (80011c4 <autoMode+0x288>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	3301      	adds	r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b4e      	ldr	r3, [pc, #312]	@ (80011c4 <autoMode+0x288>)
 800108c:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 800108e:	e08e      	b.n	80011ae <autoMode+0x272>

  case 2: // hạ pallet
    buttonPressCount = 3;
 8001090:	4b4d      	ldr	r3, [pc, #308]	@ (80011c8 <autoMode+0x28c>)
 8001092:	2203      	movs	r2, #3
 8001094:	701a      	strb	r2, [r3, #0]
    modeLift = false;
 8001096:	4b4d      	ldr	r3, [pc, #308]	@ (80011cc <autoMode+0x290>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_DOWN_PALLET, HAL_GetTick()))
 800109c:	f002 f990 	bl	80033c0 <HAL_GetTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2200      	movs	r2, #0
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010ac:	e9cd 3400 	strd	r3, r4, [sp]
 80010b0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	4845      	ldr	r0, [pc, #276]	@ (80011d0 <autoMode+0x294>)
 80010ba:	f7ff fe65 	bl	8000d88 <u_timer_expired>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <autoMode+0x18e>
    {
      stepDone[2] = true;
 80010c4:	4b43      	ldr	r3, [pc, #268]	@ (80011d4 <autoMode+0x298>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	709a      	strb	r2, [r3, #2]
    }
    if (stepDone[2])
 80010ca:	4b42      	ldr	r3, [pc, #264]	@ (80011d4 <autoMode+0x298>)
 80010cc:	789b      	ldrb	r3, [r3, #2]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d06f      	beq.n	80011b2 <autoMode+0x276>
    {
      buttonPressCount = 0; // off thuỷ lực
 80010d2:	4b3d      	ldr	r3, [pc, #244]	@ (80011c8 <autoMode+0x28c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 80010d8:	f002 f972 	bl	80033c0 <HAL_GetTick>
 80010dc:	4603      	mov	r3, r0
 80010de:	2200      	movs	r2, #0
 80010e0:	469a      	mov	sl, r3
 80010e2:	4693      	mov	fp, r2
 80010e4:	e9cd ab00 	strd	sl, fp, [sp]
 80010e8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	4839      	ldr	r0, [pc, #228]	@ (80011d8 <autoMode+0x29c>)
 80010f2:	f7ff fe49 	bl	8000d88 <u_timer_expired>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d05a      	beq.n	80011b2 <autoMode+0x276>
      {
        stepDone[2] = false;
 80010fc:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <autoMode+0x298>)
 80010fe:	2200      	movs	r2, #0
 8001100:	709a      	strb	r2, [r3, #2]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 8001102:	2210      	movs	r2, #16
 8001104:	2100      	movs	r1, #0
 8001106:	4832      	ldr	r0, [pc, #200]	@ (80011d0 <autoMode+0x294>)
 8001108:	f007 fdd6 	bl	8008cb8 <memset>
        autoStep++;
 800110c:	4b2d      	ldr	r3, [pc, #180]	@ (80011c4 <autoMode+0x288>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	3301      	adds	r3, #1
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <autoMode+0x288>)
 8001118:	701a      	strb	r2, [r3, #0]
      }
    }
    break;
 800111a:	e04a      	b.n	80011b2 <autoMode+0x276>

  case 3: // nâng bánh xe
    buttonPressCount = 3;
 800111c:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <autoMode+0x28c>)
 800111e:	2203      	movs	r2, #3
 8001120:	701a      	strb	r2, [r3, #0]
    modeLift = true;
 8001122:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <autoMode+0x290>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
    if (u_timer_expired(&timer_hydarulic[0], TIME_LIFT_WHEEL, HAL_GetTick()))
 8001128:	f002 f94a 	bl	80033c0 <HAL_GetTick>
 800112c:	4603      	mov	r3, r0
 800112e:	2200      	movs	r2, #0
 8001130:	4698      	mov	r8, r3
 8001132:	4691      	mov	r9, r2
 8001134:	e9cd 8900 	strd	r8, r9, [sp]
 8001138:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	4823      	ldr	r0, [pc, #140]	@ (80011d0 <autoMode+0x294>)
 8001142:	f7ff fe21 	bl	8000d88 <u_timer_expired>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <autoMode+0x216>
    {
      stepDone[3] = true;
 800114c:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <autoMode+0x298>)
 800114e:	2201      	movs	r2, #1
 8001150:	70da      	strb	r2, [r3, #3]
    }
    if (stepDone[3])
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <autoMode+0x298>)
 8001154:	78db      	ldrb	r3, [r3, #3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d02d      	beq.n	80011b6 <autoMode+0x27a>
    {
      buttonPressCount = 0; // off thuỷ lực
 800115a:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <autoMode+0x28c>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
      if (u_timer_expired(&timer_hydarulic[1], TIME_FREE, HAL_GetTick()))
 8001160:	f002 f92e 	bl	80033c0 <HAL_GetTick>
 8001164:	4603      	mov	r3, r0
 8001166:	2200      	movs	r2, #0
 8001168:	461c      	mov	r4, r3
 800116a:	4615      	mov	r5, r2
 800116c:	e9cd 4500 	strd	r4, r5, [sp]
 8001170:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	4817      	ldr	r0, [pc, #92]	@ (80011d8 <autoMode+0x29c>)
 800117a:	f7ff fe05 	bl	8000d88 <u_timer_expired>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d018      	beq.n	80011b6 <autoMode+0x27a>
      {
        stepDone[3] = false;
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <autoMode+0x298>)
 8001186:	2200      	movs	r2, #0
 8001188:	70da      	strb	r2, [r3, #3]
        memset(timer_hydarulic, 0, sizeof(timer_hydarulic));
 800118a:	2210      	movs	r2, #16
 800118c:	2100      	movs	r1, #0
 800118e:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <autoMode+0x294>)
 8001190:	f007 fd92 	bl	8008cb8 <memset>
        autoStep = 0;
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <autoMode+0x288>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
        totalCycle++;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <autoMode+0x2a0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	4a0e      	ldr	r2, [pc, #56]	@ (80011dc <autoMode+0x2a0>)
 80011a2:	6013      	str	r3, [r2, #0]
      }
    }
    break;
 80011a4:	e007      	b.n	80011b6 <autoMode+0x27a>

  default:
    break;
 80011a6:	bf00      	nop
 80011a8:	e006      	b.n	80011b8 <autoMode+0x27c>
    break;
 80011aa:	bf00      	nop
 80011ac:	e004      	b.n	80011b8 <autoMode+0x27c>
    break;
 80011ae:	bf00      	nop
 80011b0:	e002      	b.n	80011b8 <autoMode+0x27c>
    break;
 80011b2:	bf00      	nop
 80011b4:	e000      	b.n	80011b8 <autoMode+0x27c>
    break;
 80011b6:	bf00      	nop
  }
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	@ 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011c2:	bf00      	nop
 80011c4:	200000d6 	.word	0x200000d6
 80011c8:	200000d4 	.word	0x200000d4
 80011cc:	200000d5 	.word	0x200000d5
 80011d0:	200000e8 	.word	0x200000e8
 80011d4:	200000dc 	.word	0x200000dc
 80011d8:	200000f0 	.word	0x200000f0
 80011dc:	200000d8 	.word	0x200000d8

080011e0 <performAction>:

void performAction(int count, bool Mode) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
	switch (count) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d003      	beq.n	80011fa <performAction+0x1a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d019      	beq.n	800122c <performAction+0x4c>
 80011f8:	e031      	b.n	800125e <performAction+0x7e>
	case 1:
		if (Mode) {
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00a      	beq.n	8001216 <performAction+0x36>
			hydraulicSetState(wheel_down_state);
 8001200:	2301      	movs	r3, #1
 8001202:	2201      	movs	r2, #1
 8001204:	f362 4317 	bfi	r3, r2, #16, #8
 8001208:	2201      	movs	r2, #1
 800120a:	f362 631f 	bfi	r3, r2, #24, #8
 800120e:	4618      	mov	r0, r3
 8001210:	f002 f82a 	bl	8003268 <hydraulicSetState>
			// Thực hiện hành động hạ bánh xe
		} else {
			hydraulicSetState(pallet_up_state);
			// Thực hiện hành động nâng pallet
		}
		break;
 8001214:	e028      	b.n	8001268 <performAction+0x88>
			hydraulicSetState(pallet_up_state);
 8001216:	2301      	movs	r3, #1
 8001218:	2201      	movs	r2, #1
 800121a:	f362 230f 	bfi	r3, r2, #8, #8
 800121e:	2201      	movs	r2, #1
 8001220:	f362 631f 	bfi	r3, r2, #24, #8
 8001224:	4618      	mov	r0, r3
 8001226:	f002 f81f 	bl	8003268 <hydraulicSetState>
		break;
 800122a:	e01d      	b.n	8001268 <performAction+0x88>
	case 3:
		if (Mode) {
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00a      	beq.n	8001248 <performAction+0x68>
			hydraulicSetState(wheel_up_state);
 8001232:	2300      	movs	r3, #0
 8001234:	2201      	movs	r2, #1
 8001236:	f362 4317 	bfi	r3, r2, #16, #8
 800123a:	2201      	movs	r2, #1
 800123c:	f362 631f 	bfi	r3, r2, #24, #8
 8001240:	4618      	mov	r0, r3
 8001242:	f002 f811 	bl	8003268 <hydraulicSetState>
			// Thực hiện hành động nâng bánh xe
		} else {
			hydraulicSetState(pallet_down_state);
			// Thực hiện hành động hạ pallet
		}
		break;
 8001246:	e00f      	b.n	8001268 <performAction+0x88>
			hydraulicSetState(pallet_down_state);
 8001248:	2300      	movs	r3, #0
 800124a:	2201      	movs	r2, #1
 800124c:	f362 230f 	bfi	r3, r2, #8, #8
 8001250:	2201      	movs	r2, #1
 8001252:	f362 631f 	bfi	r3, r2, #24, #8
 8001256:	4618      	mov	r0, r3
 8001258:	f002 f806 	bl	8003268 <hydraulicSetState>
		break;
 800125c:	e004      	b.n	8001268 <performAction+0x88>
	default:
		hydraulicSetState(free_all_state);
 800125e:	2300      	movs	r3, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f002 f801 	bl	8003268 <hydraulicSetState>
		// Trạng thái tự do
		break;
 8001266:	bf00      	nop
	}
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <map_adc_to_float>:
float map_adc_to_float(uint16_t adc) {
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
    if (adc < MIN_ADC) adc = MIN_ADC;
    if (adc > MAX_ADC) adc = MAX_ADC;
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001280:	d902      	bls.n	8001288 <map_adc_to_float+0x18>
 8001282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001286:	80fb      	strh	r3, [r7, #6]
    return ((adc - MIN_ADC) / (float)(MAX_ADC - MIN_ADC)) * MAX_FLOAT;
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001292:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80012ac <map_adc_to_float+0x3c>
 8001296:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800129a:	eef0 7a66 	vmov.f32	s15, s13
}
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	447a0000 	.word	0x447a0000

080012b0 <HandleAutoMode>:
        target_speed = 0;
    }
}

// Hàm xử lý chế độ Auto
void HandleAutoMode() {
 80012b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af02      	add	r7, sp, #8
    static uint64_t auto_timer = 0;  // Bộ đếm thời gian
    static int auto_state = 0;        // Trạng thái: 0 = thuận, 1 = ngược, 2 = dừng

    // Kiểm tra thời gian đã hết hạn chưa
    if (u_timer_expired(&auto_timer, (auto_state == 2) ? STOP_TIME : AUTO_TIME, HAL_GetTick())) {
 80012b8:	4b20      	ldr	r3, [pc, #128]	@ (800133c <HandleAutoMode+0x8c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d104      	bne.n	80012ca <HandleAutoMode+0x1a>
 80012c0:	f241 3488 	movw	r4, #5000	@ 0x1388
 80012c4:	f04f 0500 	mov.w	r5, #0
 80012c8:	e003      	b.n	80012d2 <HandleAutoMode+0x22>
 80012ca:	f644 6420 	movw	r4, #20000	@ 0x4e20
 80012ce:	f04f 0500 	mov.w	r5, #0
 80012d2:	f002 f875 	bl	80033c0 <HAL_GetTick>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2200      	movs	r2, #0
 80012da:	4698      	mov	r8, r3
 80012dc:	4691      	mov	r9, r2
 80012de:	e9cd 8900 	strd	r8, r9, [sp]
 80012e2:	4622      	mov	r2, r4
 80012e4:	462b      	mov	r3, r5
 80012e6:	4816      	ldr	r0, [pc, #88]	@ (8001340 <HandleAutoMode+0x90>)
 80012e8:	f7ff fd4e 	bl	8000d88 <u_timer_expired>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d020      	beq.n	8001334 <HandleAutoMode+0x84>
        // Xử lý hành động theo trạng thái hiện tại
        if (auto_state == 0) {
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HandleAutoMode+0x8c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d103      	bne.n	8001302 <HandleAutoMode+0x52>
            dir = 1;  // Chạy thuận
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HandleAutoMode+0x94>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e00a      	b.n	8001318 <HandleAutoMode+0x68>
        } else if (auto_state == 1) {
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <HandleAutoMode+0x8c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d103      	bne.n	8001312 <HandleAutoMode+0x62>
            dir = 3;  // Chạy ngược
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <HandleAutoMode+0x94>)
 800130c:	2203      	movs	r2, #3
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	e002      	b.n	8001318 <HandleAutoMode+0x68>
        } else {
            dir = 0;  // Dừng
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <HandleAutoMode+0x94>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
        }

        // Chuyển sang trạng thái tiếp theo (0 -> 1 -> 2 -> 0)
        auto_state = (auto_state + 1) % 3;
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <HandleAutoMode+0x8c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1c59      	adds	r1, r3, #1
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HandleAutoMode+0x98>)
 8001320:	fb83 3201 	smull	r3, r2, r3, r1
 8001324:	17cb      	asrs	r3, r1, #31
 8001326:	1ad2      	subs	r2, r2, r3
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	1aca      	subs	r2, r1, r3
 8001330:	4b02      	ldr	r3, [pc, #8]	@ (800133c <HandleAutoMode+0x8c>)
 8001332:	601a      	str	r2, [r3, #0]
    }
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800133c:	20000264 	.word	0x20000264
 8001340:	20000268 	.word	0x20000268
 8001344:	2000010c 	.word	0x2000010c
 8001348:	55555556 	.word	0x55555556

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001350:	f001 ffd0 	bl	80032f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001354:	f000 f85a 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001358:	f000 f9c4 	bl	80016e4 <MX_GPIO_Init>
  MX_CAN1_Init();
 800135c:	f000 f8c0 	bl	80014e0 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8001360:	f000 f996 	bl	8001690 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 8001364:	f000 f8f2 	bl	800154c <MX_CAN2_Init>
  MX_SPI1_Init();
 8001368:	f000 f926 	bl	80015b8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800136c:	f000 f95a 	bl	8001624 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  mcp4922.begin(&hspi1,GPIOA,GPIO_PIN_4);
 8001370:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <main+0x80>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2210      	movs	r2, #16
 8001376:	4916      	ldr	r1, [pc, #88]	@ (80013d0 <main+0x84>)
 8001378:	4816      	ldr	r0, [pc, #88]	@ (80013d4 <main+0x88>)
 800137a:	4798      	blx	r3
  mcp3202.begin(&hspi2,GPIOB,GPIO_PIN_9);
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <main+0x8c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001384:	4915      	ldr	r1, [pc, #84]	@ (80013dc <main+0x90>)
 8001386:	4816      	ldr	r0, [pc, #88]	@ (80013e0 <main+0x94>)
 8001388:	4798      	blx	r3

//  Can_begin(&canOpen, &hcan2, 0);
//  CanCofigfilter(&canOpen, 0x11, 0x11);
//  canOpen.CanRxIT_Callback = &canOpenCallBack;
//  Can_Start(&canOpen, MotorID[0]);
  MotorInit(&hcan2);
 800138a:	4816      	ldr	r0, [pc, #88]	@ (80013e4 <main+0x98>)
 800138c:	f001 fb4a 	bl	8002a24 <MotorInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001390:	f004 fd0c 	bl	8005dac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001394:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <main+0x9c>)
 8001396:	2100      	movs	r1, #0
 8001398:	4814      	ldr	r0, [pc, #80]	@ (80013ec <main+0xa0>)
 800139a:	f004 fd51 	bl	8005e40 <osThreadNew>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a13      	ldr	r2, [pc, #76]	@ (80013f0 <main+0xa4>)
 80013a2:	6013      	str	r3, [r2, #0]

  /* creation of Task_Pump */
  Task_PumpHandle = osThreadNew(StartTask_Pump, NULL, &Task_Pump_attributes);
 80013a4:	4a13      	ldr	r2, [pc, #76]	@ (80013f4 <main+0xa8>)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4813      	ldr	r0, [pc, #76]	@ (80013f8 <main+0xac>)
 80013aa:	f004 fd49 	bl	8005e40 <osThreadNew>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <main+0xb0>)
 80013b2:	6013      	str	r3, [r2, #0]

  /* creation of Task_Motor */
  Task_MotorHandle = osThreadNew(StartTask_Motor, NULL, &Task_Motor_attributes);
 80013b4:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <main+0xb4>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	4812      	ldr	r0, [pc, #72]	@ (8001404 <main+0xb8>)
 80013ba:	f004 fd41 	bl	8005e40 <osThreadNew>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a11      	ldr	r2, [pc, #68]	@ (8001408 <main+0xbc>)
 80013c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013c4:	f004 fd16 	bl	8005df4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <main+0x7c>
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	40020000 	.word	0x40020000
 80013d4:	20000160 	.word	0x20000160
 80013d8:	20000004 	.word	0x20000004
 80013dc:	40020400 	.word	0x40020400
 80013e0:	200001b8 	.word	0x200001b8
 80013e4:	20000138 	.word	0x20000138
 80013e8:	080092e0 	.word	0x080092e0
 80013ec:	080018fd 	.word	0x080018fd
 80013f0:	20000258 	.word	0x20000258
 80013f4:	08009304 	.word	0x08009304
 80013f8:	0800190d 	.word	0x0800190d
 80013fc:	2000025c 	.word	0x2000025c
 8001400:	08009328 	.word	0x08009328
 8001404:	080019e9 	.word	0x080019e9
 8001408:	20000260 	.word	0x20000260

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	@ 0x50
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	2230      	movs	r2, #48	@ 0x30
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f007 fc4c 	bl	8008cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <SystemClock_Config+0xcc>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	4a27      	ldr	r2, [pc, #156]	@ (80014d8 <SystemClock_Config+0xcc>)
 800143a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001440:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <SystemClock_Config+0xcc>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <SystemClock_Config+0xd0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a21      	ldr	r2, [pc, #132]	@ (80014dc <SystemClock_Config+0xd0>)
 8001456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <SystemClock_Config+0xd0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001468:	2302      	movs	r3, #2
 800146a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146c:	2301      	movs	r3, #1
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001470:	2310      	movs	r3, #16
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001474:	2302      	movs	r3, #2
 8001476:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001478:	2300      	movs	r3, #0
 800147a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800147c:	2308      	movs	r3, #8
 800147e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001480:	23a8      	movs	r3, #168	@ 0xa8
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001484:	2302      	movs	r3, #2
 8001486:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001488:	2304      	movs	r3, #4
 800148a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f003 f8e9 	bl	8004668 <HAL_RCC_OscConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800149c:	f000 fbb6 	bl	8001c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a4:	2302      	movs	r3, #2
 80014a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2105      	movs	r1, #5
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 fb4a 	bl	8004b58 <HAL_RCC_ClockConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014ca:	f000 fb9f 	bl	8001c0c <Error_Handler>
  }
}
 80014ce:	bf00      	nop
 80014d0:	3750      	adds	r7, #80	@ 0x50
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000

080014e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014e4:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <MX_CAN1_Init+0x64>)
 80014e6:	4a18      	ldr	r2, [pc, #96]	@ (8001548 <MX_CAN1_Init+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80014ea:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <MX_CAN1_Init+0x64>)
 80014ec:	2215      	movs	r2, #21
 80014ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014f0:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_CAN1_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <MX_CAN1_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_CAN1_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <MX_CAN1_Init+0x64>)
 8001504:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001508:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <MX_CAN1_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <MX_CAN1_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <MX_CAN1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <MX_CAN1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <MX_CAN1_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <MX_CAN1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_CAN1_Init+0x64>)
 8001530:	f001 ff52 	bl	80033d8 <HAL_CAN_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800153a:	f000 fb67 	bl	8001c0c <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */
 //CanCofigfilter(&CanUser1,FilterHigh, FilterLOw);

  /* USER CODE END CAN1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000110 	.word	0x20000110
 8001548:	40006400 	.word	0x40006400

0800154c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <MX_CAN2_Init+0x64>)
 8001552:	4a18      	ldr	r2, [pc, #96]	@ (80015b4 <MX_CAN2_Init+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_CAN2_Init+0x64>)
 8001558:	2215      	movs	r2, #21
 800155a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_CAN2_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_CAN2_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_CAN2_Init+0x64>)
 800156a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800156e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_CAN2_Init+0x64>)
 8001572:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001576:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <MX_CAN2_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_CAN2_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_CAN2_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_CAN2_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <MX_CAN2_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_CAN2_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_CAN2_Init+0x64>)
 800159e:	f001 ff1b 	bl	80033d8 <HAL_CAN_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80015a8:	f000 fb30 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000138 	.word	0x20000138
 80015b4:	40006800 	.word	0x40006800

080015b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015bc:	4b17      	ldr	r3, [pc, #92]	@ (800161c <MX_SPI1_Init+0x64>)
 80015be:	4a18      	ldr	r2, [pc, #96]	@ (8001620 <MX_SPI1_Init+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <MX_SPI1_Init+0x64>)
 80015c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <MX_SPI1_Init+0x64>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <MX_SPI1_Init+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <MX_SPI1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <MX_SPI1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <MX_SPI1_Init+0x64>)
 80015e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <MX_SPI1_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <MX_SPI1_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f6:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_SPI1_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	@ (800161c <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <MX_SPI1_Init+0x64>)
 8001604:	220a      	movs	r2, #10
 8001606:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <MX_SPI1_Init+0x64>)
 800160a:	f003 fc85 	bl	8004f18 <HAL_SPI_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001614:	f000 fafa 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000160 	.word	0x20000160
 8001620:	40013000 	.word	0x40013000

08001624 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001628:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <MX_SPI2_Init+0x64>)
 800162a:	4a18      	ldr	r2, [pc, #96]	@ (800168c <MX_SPI2_Init+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <MX_SPI2_Init+0x64>)
 8001630:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001634:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001636:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <MX_SPI2_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <MX_SPI2_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_SPI2_Init+0x64>)
 8001644:	2202      	movs	r2, #2
 8001646:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <MX_SPI2_Init+0x64>)
 800164a:	2201      	movs	r2, #1
 800164c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <MX_SPI2_Init+0x64>)
 8001650:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001654:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001656:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_SPI2_Init+0x64>)
 8001658:	2228      	movs	r2, #40	@ 0x28
 800165a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <MX_SPI2_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_SPI2_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <MX_SPI2_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_SPI2_Init+0x64>)
 8001670:	220a      	movs	r2, #10
 8001672:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	@ (8001688 <MX_SPI2_Init+0x64>)
 8001676:	f003 fc4f 	bl	8004f18 <HAL_SPI_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001680:	f000 fac4 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200001b8 	.word	0x200001b8
 800168c:	40003800 	.word	0x40003800

08001690 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <MX_USART3_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016c8:	f004 f878 	bl	80057bc <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f000 fa9b 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000210 	.word	0x20000210
 80016e0:	40004800 	.word	0x40004800

080016e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	@ 0x30
 80016e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	4b78      	ldr	r3, [pc, #480]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a77      	ldr	r2, [pc, #476]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001704:	f043 0320 	orr.w	r3, r3, #32
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b75      	ldr	r3, [pc, #468]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	4b71      	ldr	r3, [pc, #452]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a70      	ldr	r2, [pc, #448]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b6e      	ldr	r3, [pc, #440]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b6a      	ldr	r3, [pc, #424]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a69      	ldr	r2, [pc, #420]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b67      	ldr	r3, [pc, #412]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b63      	ldr	r3, [pc, #396]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a62      	ldr	r2, [pc, #392]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b60      	ldr	r3, [pc, #384]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b5c      	ldr	r3, [pc, #368]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a5b      	ldr	r2, [pc, #364]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b55      	ldr	r3, [pc, #340]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a54      	ldr	r2, [pc, #336]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b52      	ldr	r3, [pc, #328]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b4e      	ldr	r3, [pc, #312]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a4d      	ldr	r2, [pc, #308]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b4b      	ldr	r3, [pc, #300]	@ (80018e0 <MX_GPIO_Init+0x1fc>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	2110      	movs	r1, #16
 80017c2:	4848      	ldr	r0, [pc, #288]	@ (80018e4 <MX_GPIO_Init+0x200>)
 80017c4:	f002 ff36 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 614f 	mov.w	r1, #3312	@ 0xcf0
 80017ce:	4846      	ldr	r0, [pc, #280]	@ (80018e8 <MX_GPIO_Init+0x204>)
 80017d0:	f002 ff30 	bl	8004634 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2140      	movs	r1, #64	@ 0x40
 80017d8:	4844      	ldr	r0, [pc, #272]	@ (80018ec <MX_GPIO_Init+0x208>)
 80017da:	f002 ff2b 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017e4:	4842      	ldr	r0, [pc, #264]	@ (80018f0 <MX_GPIO_Init+0x20c>)
 80017e6:	f002 ff25 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 PF11 PF12 PF13
                           PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80017ea:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 80017ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	483d      	ldr	r0, [pc, #244]	@ (80018f4 <MX_GPIO_Init+0x210>)
 8001800:	f002 fd64 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001804:	230c      	movs	r3, #12
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	4838      	ldr	r0, [pc, #224]	@ (80018f8 <MX_GPIO_Init+0x214>)
 8001818:	f002 fd58 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800181c:	2308      	movs	r3, #8
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	482d      	ldr	r0, [pc, #180]	@ (80018e4 <MX_GPIO_Init+0x200>)
 8001830:	f002 fd4c 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001834:	2310      	movs	r3, #16
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4826      	ldr	r0, [pc, #152]	@ (80018e4 <MX_GPIO_Init+0x200>)
 800184c:	f002 fd3e 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001850:	2340      	movs	r3, #64	@ 0x40
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	4820      	ldr	r0, [pc, #128]	@ (80018e4 <MX_GPIO_Init+0x200>)
 8001864:	f002 fd32 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001868:	2303      	movs	r3, #3
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	481b      	ldr	r0, [pc, #108]	@ (80018e8 <MX_GPIO_Init+0x204>)
 800187c:	f002 fd26 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG7
                           PG10 PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001880:	f44f 634f 	mov.w	r3, #3312	@ 0xcf0
 8001884:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4813      	ldr	r0, [pc, #76]	@ (80018e8 <MX_GPIO_Init+0x204>)
 800189a:	f002 fd17 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800189e:	2340      	movs	r3, #64	@ 0x40
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	480d      	ldr	r0, [pc, #52]	@ (80018ec <MX_GPIO_Init+0x208>)
 80018b6:	f002 fd09 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4807      	ldr	r0, [pc, #28]	@ (80018f0 <MX_GPIO_Init+0x20c>)
 80018d4:	f002 fcfa 	bl	80042cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d8:	bf00      	nop
 80018da:	3730      	adds	r7, #48	@ 0x30
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40021800 	.word	0x40021800
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40021400 	.word	0x40021400
 80018f8:	40020800 	.word	0x40020800

080018fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001904:	2001      	movs	r0, #1
 8001906:	f004 fb2d 	bl	8005f64 <osDelay>
 800190a:	e7fb      	b.n	8001904 <StartDefaultTask+0x8>

0800190c <StartTask_Pump>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Pump */
void StartTask_Pump(void *argument)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Pump */
  /* Infinite loop */
  for (;;)
  {
	  readGPIOInputs();
 8001914:	f7ff fa9c 	bl	8000e50 <readGPIOInputs>
      // Kiểm tra nút RESET (GPIOG_PIN_2)
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)
 8001918:	2140      	movs	r1, #64	@ 0x40
 800191a:	4829      	ldr	r0, [pc, #164]	@ (80019c0 <StartTask_Pump+0xb4>)
 800191c:	f002 fe72 	bl	8004604 <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	2b01      	cmp	r3, #1
 8001924:	d11d      	bne.n	8001962 <StartTask_Pump+0x56>
      {
    	 // motorErrorReset();
    	  NMTmanagement(0x2, MotorID[0]);
 8001926:	4b27      	ldr	r3, [pc, #156]	@ (80019c4 <StartTask_Pump+0xb8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4619      	mov	r1, r3
 800192c:	2002      	movs	r0, #2
 800192e:	f001 fb09 	bl	8002f44 <NMTmanagement>
          hydraulicSetState(free_all_state); // Dừng mọi hoạt động
 8001932:	2300      	movs	r3, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f001 fc97 	bl	8003268 <hydraulicSetState>
          // Reset tất cả
          buttonPressCount = 0;
 800193a:	4b23      	ldr	r3, [pc, #140]	@ (80019c8 <StartTask_Pump+0xbc>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
          autoStep = 0;
 8001940:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <StartTask_Pump+0xc0>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
          modeLift = false;
 8001946:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <StartTask_Pump+0xc4>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
          memset(timer_hydarulic, 0, sizeof(timer_hydarulic));  // Reset timer
 800194c:	2210      	movs	r2, #16
 800194e:	2100      	movs	r1, #0
 8001950:	4820      	ldr	r0, [pc, #128]	@ (80019d4 <StartTask_Pump+0xc8>)
 8001952:	f007 f9b1 	bl	8008cb8 <memset>
          memset(stepDone, 0, sizeof(stepDone));  // Reset cờ chạy auto
 8001956:	2204      	movs	r2, #4
 8001958:	2100      	movs	r1, #0
 800195a:	481f      	ldr	r0, [pc, #124]	@ (80019d8 <StartTask_Pump+0xcc>)
 800195c:	f007 f9ac 	bl	8008cb8 <memset>
          continue;
 8001960:	e02d      	b.n	80019be <StartTask_Pump+0xb2>
      }



      mode = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10) == GPIO_PIN_SET ? true : false;
 8001962:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001966:	481d      	ldr	r0, [pc, #116]	@ (80019dc <StartTask_Pump+0xd0>)
 8001968:	f002 fe4c 	bl	8004604 <HAL_GPIO_ReadPin>
 800196c:	4603      	mov	r3, r0
 800196e:	2b01      	cmp	r3, #1
 8001970:	bf0c      	ite	eq
 8001972:	2301      	moveq	r3, #1
 8001974:	2300      	movne	r3, #0
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <StartTask_Pump+0xd4>)
 800197a:	701a      	strb	r2, [r3, #0]

      if (mode) {
 800197c:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <StartTask_Pump+0xd4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <StartTask_Pump+0x7e>
          autoMode();
 8001984:	f7ff fada 	bl	8000f3c <autoMode>
 8001988:	e00b      	b.n	80019a2 <StartTask_Pump+0x96>
      } else {
          manualMode();
 800198a:	f7ff fa95 	bl	8000eb8 <manualMode>
          memset(timer_hydarulic, 0, sizeof(timer_hydarulic));  // Reset timer chế độ auto
 800198e:	2210      	movs	r2, #16
 8001990:	2100      	movs	r1, #0
 8001992:	4810      	ldr	r0, [pc, #64]	@ (80019d4 <StartTask_Pump+0xc8>)
 8001994:	f007 f990 	bl	8008cb8 <memset>
          memset(stepDone, 0, sizeof(stepDone));  // Reset cờ chạy auto
 8001998:	2204      	movs	r2, #4
 800199a:	2100      	movs	r1, #0
 800199c:	480e      	ldr	r0, [pc, #56]	@ (80019d8 <StartTask_Pump+0xcc>)
 800199e:	f007 f98b 	bl	8008cb8 <memset>
      }

      performAction(buttonPressCount, modeLift);
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <StartTask_Pump+0xbc>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <StartTask_Pump+0xc4>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f7ff fc14 	bl	80011e0 <performAction>
      osDelay(10);
 80019b8:	200a      	movs	r0, #10
 80019ba:	f004 fad3 	bl	8005f64 <osDelay>
	  readGPIOInputs();
 80019be:	e7a9      	b.n	8001914 <StartTask_Pump+0x8>
 80019c0:	40020000 	.word	0x40020000
 80019c4:	20000030 	.word	0x20000030
 80019c8:	200000d4 	.word	0x200000d4
 80019cc:	200000d6 	.word	0x200000d6
 80019d0:	200000d5 	.word	0x200000d5
 80019d4:	200000e8 	.word	0x200000e8
 80019d8:	200000dc 	.word	0x200000dc
 80019dc:	40021400 	.word	0x40021400
 80019e0:	200000e0 	.word	0x200000e0
 80019e4:	00000000 	.word	0x00000000

080019e8 <StartTask_Motor>:
//        osDelay(50);
//    }
//    /* USER CODE END StartTask_Motor */
//}

void StartTask_Motor(void *argument) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartTask_Motor */
    osDelay(5000);
 80019f0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80019f4:	f004 fab6 	bl	8005f64 <osDelay>
   // NMTmanagement(0x2, MotorID[0]);
    SetOperationMode(3, MotorID[0]);
 80019f8:	4b79      	ldr	r3, [pc, #484]	@ (8001be0 <StartTask_Motor+0x1f8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	2003      	movs	r0, #3
 8001a00:	f001 f832 	bl	8002a68 <SetOperationMode>
    SDOProfileAcc(speedToRps(0.25), MotorID[0]);
 8001a04:	ed9f 0b70 	vldr	d0, [pc, #448]	@ 8001bc8 <StartTask_Motor+0x1e0>
 8001a08:	f001 fc16 	bl	8003238 <speedToRps>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b74      	ldr	r3, [pc, #464]	@ (8001be0 <StartTask_Motor+0x1f8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4610      	mov	r0, r2
 8001a16:	f001 f8c3 	bl	8002ba0 <SDOProfileAcc>
    SDOProfileDec(speedToRps(0.3), MotorID[0]);
 8001a1a:	ed9f 0b6d 	vldr	d0, [pc, #436]	@ 8001bd0 <StartTask_Motor+0x1e8>
 8001a1e:	f001 fc0b 	bl	8003238 <speedToRps>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b6e      	ldr	r3, [pc, #440]	@ (8001be0 <StartTask_Motor+0x1f8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f001 f962 	bl	8002cf4 <SDOProfileDec>
    SetControlWord(ControlWord_EN, MotorID[0]); // enable motor
 8001a30:	4b6b      	ldr	r3, [pc, #428]	@ (8001be0 <StartTask_Motor+0x1f8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	200f      	movs	r0, #15
 8001a38:	f001 f864 	bl	8002b04 <SetControlWord>
    NMTmanagement(0x1, MotorID[0]);
 8001a3c:	4b68      	ldr	r3, [pc, #416]	@ (8001be0 <StartTask_Motor+0x1f8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	2001      	movs	r0, #1
 8001a44:	f001 fa7e 	bl	8002f44 <NMTmanagement>
    static uint32_t last_change_time = 0;
    static bool stopping_phase = false; // Đánh dấu giai đoạn dừng

    /* Infinite loop */
    for (;;) {
        reset_motor = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_RESET;
 8001a48:	2108      	movs	r1, #8
 8001a4a:	4866      	ldr	r0, [pc, #408]	@ (8001be4 <StartTask_Motor+0x1fc>)
 8001a4c:	f002 fdda 	bl	8004604 <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf0c      	ite	eq
 8001a56:	2301      	moveq	r3, #1
 8001a58:	2300      	movne	r3, #0
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b62      	ldr	r3, [pc, #392]	@ (8001be8 <StartTask_Motor+0x200>)
 8001a5e:	701a      	strb	r2, [r3, #0]

        adc_speed = mcp3202.readChannel(0);
 8001a60:	4b62      	ldr	r3, [pc, #392]	@ (8001bec <StartTask_Motor+0x204>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2000      	movs	r0, #0
 8001a66:	4798      	blx	r3
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b60      	ldr	r3, [pc, #384]	@ (8001bf0 <StartTask_Motor+0x208>)
 8001a6e:	801a      	strh	r2, [r3, #0]
        bool m_error = false;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]
        if (reset_motor == 0) {
 8001a74:	4b5c      	ldr	r3, [pc, #368]	@ (8001be8 <StartTask_Motor+0x200>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	f083 0301 	eor.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 808d 	beq.w	8001b9e <StartTask_Motor+0x1b6>
            if (mode == 0) { // Chế độ Manual
 8001a84:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf4 <StartTask_Motor+0x20c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	f083 0301 	eor.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d064      	beq.n	8001b5c <StartTask_Motor+0x174>
                forward_pressed = (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6) == GPIO_PIN_SET);
 8001a92:	2140      	movs	r1, #64	@ 0x40
 8001a94:	4858      	ldr	r0, [pc, #352]	@ (8001bf8 <StartTask_Motor+0x210>)
 8001a96:	f002 fdb5 	bl	8004604 <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b55      	ldr	r3, [pc, #340]	@ (8001bfc <StartTask_Motor+0x214>)
 8001aa8:	701a      	strb	r2, [r3, #0]
                reverse_pressed = (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8) == GPIO_PIN_SET);
 8001aaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aae:	4852      	ldr	r0, [pc, #328]	@ (8001bf8 <StartTask_Motor+0x210>)
 8001ab0:	f002 fda8 	bl	8004604 <HAL_GPIO_ReadPin>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	bf0c      	ite	eq
 8001aba:	2301      	moveq	r3, #1
 8001abc:	2300      	movne	r3, #0
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b4f      	ldr	r3, [pc, #316]	@ (8001c00 <StartTask_Motor+0x218>)
 8001ac2:	701a      	strb	r2, [r3, #0]

                if (forward_pressed && reverse_pressed) {
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8001bfc <StartTask_Motor+0x214>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00e      	beq.n	8001aea <StartTask_Motor+0x102>
 8001acc:	4b4c      	ldr	r3, [pc, #304]	@ (8001c00 <StartTask_Motor+0x218>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00a      	beq.n	8001aea <StartTask_Motor+0x102>
                    dir = 0; // Tránh xung đột khi nhấn cả hai nút
 8001ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8001c04 <StartTask_Motor+0x21c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
                    target_speed = 0;
 8001ada:	494b      	ldr	r1, [pc, #300]	@ (8001c08 <StartTask_Motor+0x220>)
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9c1 2300 	strd	r2, r3, [r1]
 8001ae8:	e03a      	b.n	8001b60 <StartTask_Motor+0x178>
                } else if (forward_pressed) {
 8001aea:	4b44      	ldr	r3, [pc, #272]	@ (8001bfc <StartTask_Motor+0x214>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d012      	beq.n	8001b18 <StartTask_Motor+0x130>
                    dir = 1;
 8001af2:	4b44      	ldr	r3, [pc, #272]	@ (8001c04 <StartTask_Motor+0x21c>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
                    target_speed = map_adc_to_float(adc_speed);
 8001af8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf0 <StartTask_Motor+0x208>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fbb7 	bl	8001270 <map_adc_to_float>
 8001b02:	ee10 3a10 	vmov	r3, s0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fcc6 	bl	8000498 <__aeabi_f2d>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	493d      	ldr	r1, [pc, #244]	@ (8001c08 <StartTask_Motor+0x220>)
 8001b12:	e9c1 2300 	strd	r2, r3, [r1]
 8001b16:	e023      	b.n	8001b60 <StartTask_Motor+0x178>
                } else if (reverse_pressed) {
 8001b18:	4b39      	ldr	r3, [pc, #228]	@ (8001c00 <StartTask_Motor+0x218>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d012      	beq.n	8001b46 <StartTask_Motor+0x15e>
                    dir = 3;
 8001b20:	4b38      	ldr	r3, [pc, #224]	@ (8001c04 <StartTask_Motor+0x21c>)
 8001b22:	2203      	movs	r2, #3
 8001b24:	601a      	str	r2, [r3, #0]
                    target_speed = map_adc_to_float(adc_speed);
 8001b26:	4b32      	ldr	r3, [pc, #200]	@ (8001bf0 <StartTask_Motor+0x208>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fba0 	bl	8001270 <map_adc_to_float>
 8001b30:	ee10 3a10 	vmov	r3, s0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fcaf 	bl	8000498 <__aeabi_f2d>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4932      	ldr	r1, [pc, #200]	@ (8001c08 <StartTask_Motor+0x220>)
 8001b40:	e9c1 2300 	strd	r2, r3, [r1]
 8001b44:	e00c      	b.n	8001b60 <StartTask_Motor+0x178>
                } else {
                    dir = 0;
 8001b46:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <StartTask_Motor+0x21c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
                    target_speed = 0;
 8001b4c:	492e      	ldr	r1, [pc, #184]	@ (8001c08 <StartTask_Motor+0x220>)
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9c1 2300 	strd	r2, r3, [r1]
 8001b5a:	e001      	b.n	8001b60 <StartTask_Motor+0x178>
                }

            } else {
            	HandleAutoMode();
 8001b5c:	f7ff fba8 	bl	80012b0 <HandleAutoMode>
//                        last_change_time = current_time;
//                        dir = 0; // Dừng trước khi đổi hướng
//                    }
//                }
//            }
            target_speed = map_adc_to_float(adc_speed);
 8001b60:	4b23      	ldr	r3, [pc, #140]	@ (8001bf0 <StartTask_Motor+0x208>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fb83 	bl	8001270 <map_adc_to_float>
 8001b6a:	ee10 3a10 	vmov	r3, s0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fc92 	bl	8000498 <__aeabi_f2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4923      	ldr	r1, [pc, #140]	@ (8001c08 <StartTask_Motor+0x220>)
 8001b7a:	e9c1 2300 	strd	r2, r3, [r1]
            motorControl(true, m_error, dir, target_speed);
 8001b7e:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <StartTask_Motor+0x21c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <StartTask_Motor+0x220>)
 8001b86:	ed93 7b00 	vldr	d7, [r3]
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b90:	eef0 0a67 	vmov.f32	s1, s15
 8001b94:	4619      	mov	r1, r3
 8001b96:	2001      	movs	r0, #1
 8001b98:	f001 fa94 	bl	80030c4 <motorControl>
 8001b9c:	e00d      	b.n	8001bba <StartTask_Motor+0x1d2>
        } else {
        	NMTmanagement(0x1, MotorID[0]);
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <StartTask_Motor+0x1f8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f001 f9cd 	bl	8002f44 <NMTmanagement>
            motorControl(true, m_error, 0, 0);
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001bd8 <StartTask_Motor+0x1f0>
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f001 fa85 	bl	80030c4 <motorControl>
        }
        osDelay(50);
 8001bba:	2032      	movs	r0, #50	@ 0x32
 8001bbc:	f004 f9d2 	bl	8005f64 <osDelay>
    for (;;) {
 8001bc0:	e742      	b.n	8001a48 <StartTask_Motor+0x60>
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	3fd00000 	.word	0x3fd00000
 8001bd0:	33333333 	.word	0x33333333
 8001bd4:	3fd33333 	.word	0x3fd33333
	...
 8001be0:	20000030 	.word	0x20000030
 8001be4:	40020800 	.word	0x40020800
 8001be8:	200000e1 	.word	0x200000e1
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	200000fe 	.word	0x200000fe
 8001bf4:	200000e0 	.word	0x200000e0
 8001bf8:	40021400 	.word	0x40021400
 8001bfc:	20000108 	.word	0x20000108
 8001c00:	20000109 	.word	0x20000109
 8001c04:	2000010c 	.word	0x2000010c
 8001c08:	20000100 	.word	0x20000100

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c10:	b672      	cpsid	i
}
 8001c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <Error_Handler+0x8>

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	4a11      	ldr	r2, [pc, #68]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <HAL_MspInit+0x54>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	210f      	movs	r1, #15
 8001c5a:	f06f 0001 	mvn.w	r0, #1
 8001c5e:	f002 fafe 	bl	800425e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800

08001c70 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	@ 0x30
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001db8 <HAL_CAN_MspInit+0x148>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d13d      	bne.n	8001d0e <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c92:	4b4a      	ldr	r3, [pc, #296]	@ (8001dbc <HAL_CAN_MspInit+0x14c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	4a48      	ldr	r2, [pc, #288]	@ (8001dbc <HAL_CAN_MspInit+0x14c>)
 8001c9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c9c:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_CAN_MspInit+0x14c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10d      	bne.n	8001cc0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	4b45      	ldr	r3, [pc, #276]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	4a44      	ldr	r2, [pc, #272]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001cae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb4:	4b42      	ldr	r3, [pc, #264]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	4a3d      	ldr	r2, [pc, #244]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cec:	2309      	movs	r3, #9
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4833      	ldr	r0, [pc, #204]	@ (8001dc4 <HAL_CAN_MspInit+0x154>)
 8001cf8:	f002 fae8 	bl	80042cc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2105      	movs	r1, #5
 8001d00:	2014      	movs	r0, #20
 8001d02:	f002 faac 	bl	800425e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d06:	2014      	movs	r0, #20
 8001d08:	f002 fac5 	bl	8004296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001d0c:	e050      	b.n	8001db0 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc8 <HAL_CAN_MspInit+0x158>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d14b      	bne.n	8001db0 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001d22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d28:	4b25      	ldr	r3, [pc, #148]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d34:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <HAL_CAN_MspInit+0x14c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	4a20      	ldr	r2, [pc, #128]	@ (8001dbc <HAL_CAN_MspInit+0x14c>)
 8001d3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dbc <HAL_CAN_MspInit+0x14c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10d      	bne.n	8001d62 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001d50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d56:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b16      	ldr	r3, [pc, #88]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a15      	ldr	r2, [pc, #84]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <HAL_CAN_MspInit+0x150>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001d7e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001d90:	2309      	movs	r3, #9
 8001d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <HAL_CAN_MspInit+0x15c>)
 8001d9c:	f002 fa96 	bl	80042cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2105      	movs	r1, #5
 8001da4:	2040      	movs	r0, #64	@ 0x40
 8001da6:	f002 fa5a 	bl	800425e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001daa:	2040      	movs	r0, #64	@ 0x40
 8001dac:	f002 fa73 	bl	8004296 <HAL_NVIC_EnableIRQ>
}
 8001db0:	bf00      	nop
 8001db2:	3730      	adds	r7, #48	@ 0x30
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40006400 	.word	0x40006400
 8001dbc:	20000270 	.word	0x20000270
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020c00 	.word	0x40020c00
 8001dc8:	40006800 	.word	0x40006800
 8001dcc:	40020400 	.word	0x40020400

08001dd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08c      	sub	sp, #48	@ 0x30
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a41      	ldr	r2, [pc, #260]	@ (8001ef4 <HAL_SPI_MspInit+0x124>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d14a      	bne.n	8001e88 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	4b40      	ldr	r3, [pc, #256]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001dfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	4b39      	ldr	r3, [pc, #228]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a38      	ldr	r2, [pc, #224]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b36      	ldr	r3, [pc, #216]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b32      	ldr	r3, [pc, #200]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a31      	ldr	r2, [pc, #196]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e46:	2320      	movs	r3, #32
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e56:	2305      	movs	r3, #5
 8001e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4826      	ldr	r0, [pc, #152]	@ (8001efc <HAL_SPI_MspInit+0x12c>)
 8001e62:	f002 fa33 	bl	80042cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e66:	2320      	movs	r3, #32
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e76:	2305      	movs	r3, #5
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	481f      	ldr	r0, [pc, #124]	@ (8001f00 <HAL_SPI_MspInit+0x130>)
 8001e82:	f002 fa23 	bl	80042cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e86:	e031      	b.n	8001eec <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f04 <HAL_SPI_MspInit+0x134>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d12c      	bne.n	8001eec <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea2:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_SPI_MspInit+0x128>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001eca:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001edc:	2305      	movs	r3, #5
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4806      	ldr	r0, [pc, #24]	@ (8001f00 <HAL_SPI_MspInit+0x130>)
 8001ee8:	f002 f9f0 	bl	80042cc <HAL_GPIO_Init>
}
 8001eec:	bf00      	nop
 8001eee:	3730      	adds	r7, #48	@ 0x30
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40013000 	.word	0x40013000
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40003800 	.word	0x40003800

08001f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a19      	ldr	r2, [pc, #100]	@ (8001f8c <HAL_UART_MspInit+0x84>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d12c      	bne.n	8001f84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	4a17      	ldr	r2, [pc, #92]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3a:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a10      	ldr	r2, [pc, #64]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f74:	2307      	movs	r3, #7
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <HAL_UART_MspInit+0x8c>)
 8001f80:	f002 f9a4 	bl	80042cc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	@ 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40004800 	.word	0x40004800
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020c00 	.word	0x40020c00

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <NMI_Handler+0x4>

08001fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <MemManage_Handler+0x4>

08001fb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <BusFault_Handler+0x4>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <UsageFault_Handler+0x4>

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd2:	f001 f9e1 	bl	8003398 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001fd6:	f005 fbed 	bl	80077b4 <xTaskGetSchedulerState>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d001      	beq.n	8001fe4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001fe0:	f006 f9e2 	bl	80083a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fec:	4802      	ldr	r0, [pc, #8]	@ (8001ff8 <CAN1_RX0_IRQHandler+0x10>)
 8001fee:	f001 fe2b 	bl	8003c48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000110 	.word	0x20000110

08001ffc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002000:	4802      	ldr	r0, [pc, #8]	@ (800200c <CAN2_RX0_IRQHandler+0x10>)
 8002002:	f001 fe21 	bl	8003c48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000138 	.word	0x20000138

08002010 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e00a      	b.n	8002038 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002022:	f3af 8000 	nop.w
 8002026:	4601      	mov	r1, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60ba      	str	r2, [r7, #8]
 800202e:	b2ca      	uxtb	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	dbf0      	blt.n	8002022 <_read+0x12>
  }

  return len;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e009      	b.n	8002070 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf1      	blt.n	800205c <_write+0x12>
  }
  return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_close>:

int _close(int file)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020aa:	605a      	str	r2, [r3, #4]
  return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_isatty>:

int _isatty(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	@ (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f006 fe1a 	bl	8008d54 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	@ (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20020000 	.word	0x20020000
 800214c:	00000400 	.word	0x00000400
 8002150:	20000274 	.word	0x20000274
 8002154:	20004e48 	.word	0x20004e48

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002180:	480d      	ldr	r0, [pc, #52]	@ (80021b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002182:	490e      	ldr	r1, [pc, #56]	@ (80021bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002184:	4a0e      	ldr	r2, [pc, #56]	@ (80021c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0b      	ldr	r2, [pc, #44]	@ (80021c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002198:	4c0b      	ldr	r4, [pc, #44]	@ (80021c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a6:	f7ff ffd7 	bl	8002158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021aa:	f006 fdd9 	bl	8008d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7ff f8cd 	bl	800134c <main>
  bx  lr    
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80021c0:	08009374 	.word	0x08009374
  ldr r2, =_sbss
 80021c4:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80021c8:	20004e48 	.word	0x20004e48

080021cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC_IRQHandler>
	...

080021d0 <Can_begin>:
CAN_COM* Can_communication1;
CAN_COM* Can_communication2;
void (*rxDataITcallback)() = NULL;

void Can_begin(CAN_COM* canhandle, CAN_HandleTypeDef* Handle, uint8_t Idmode)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	4613      	mov	r3, r2
 80021dc:	71fb      	strb	r3, [r7, #7]
	canhandle->CanHandle = Handle;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	629a      	str	r2, [r3, #40]	@ 0x28
	canhandle->IDMode = Idmode;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	79fa      	ldrb	r2, [r7, #7]
 80021e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	if(Handle == &hcan1)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4a08      	ldr	r2, [pc, #32]	@ (8002210 <Can_begin+0x40>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d103      	bne.n	80021fc <Can_begin+0x2c>
	Can_communication1 = canhandle;
 80021f4:	4a07      	ldr	r2, [pc, #28]	@ (8002214 <Can_begin+0x44>)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6013      	str	r3, [r2, #0]
	else
		Can_communication2 = canhandle;
}
 80021fa:	e002      	b.n	8002202 <Can_begin+0x32>
		Can_communication2 = canhandle;
 80021fc:	4a06      	ldr	r2, [pc, #24]	@ (8002218 <Can_begin+0x48>)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6013      	str	r3, [r2, #0]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000110 	.word	0x20000110
 8002214:	20000278 	.word	0x20000278
 8002218:	2000027c 	.word	0x2000027c

0800221c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a13      	ldr	r2, [pc, #76]	@ (8002274 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d10f      	bne.n	800224c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	{
	HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication1->Can_rxHeader, Can_communication1->Can_rxData);
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8002234:	4b10      	ldr	r3, [pc, #64]	@ (8002278 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3364      	adds	r3, #100	@ 0x64
 800223a:	2100      	movs	r1, #0
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f001 fbbb 	bl	80039b8 <HAL_CAN_GetRxMessage>
	Can_communication1->CanRxIT_Callback();
 8002242:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002248:	4798      	blx	r3
	} else
	{
		HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication2->Can_rxHeader, Can_communication2->Can_rxData);
		Can_communication2->CanRxIT_Callback();
	}
}
 800224a:	e00e      	b.n	800226a <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
		HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &Can_communication2->Can_rxHeader, Can_communication2->Can_rxData);
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8002254:	4b09      	ldr	r3, [pc, #36]	@ (800227c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3364      	adds	r3, #100	@ 0x64
 800225a:	2100      	movs	r1, #0
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f001 fbab 	bl	80039b8 <HAL_CAN_GetRxMessage>
		Can_communication2->CanRxIT_Callback();
 8002262:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002268:	4798      	blx	r3
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000110 	.word	0x20000110
 8002278:	20000278 	.word	0x20000278
 800227c:	2000027c 	.word	0x2000027c

08002280 <Can_Write>:
void Can_Write(CAN_COM* canhandle, uint8_t* data, size_t size)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
		canhandle->Can_txHeader.DLC = size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	63da      	str	r2, [r3, #60]	@ 0x3c
		if(HAL_CAN_AddTxMessage(canhandle->CanHandle, &canhandle->Can_txHeader, data, &canhandle->tx_mailBox) != HAL_OK)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3370      	adds	r3, #112	@ 0x70
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	f001 fab9 	bl	8003818 <HAL_CAN_AddTxMessage>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <Can_Write+0x30>
		{
			Error_Handler();
 80022ac:	f7ff fcae 	bl	8001c0c <Error_Handler>
		}
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <CanCofigfilter>:
#endif

/* CONFIG FILLTER */
void CanCofigfilter(CAN_COM* canhandle, uint32_t FilterHigh , uint32_t FilterLow)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
	if(HAL_FDCAN_ConfigFilter(canhandle->CanHandle, &canhandle->CanfilterTypedef) != HAL_OK)
	{
		Error_Handler();
	}
#else
		canhandle->CanfilterTypedef.FilterActivation = CAN_FILTER_ENABLE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	621a      	str	r2, [r3, #32]
		canhandle->CanfilterTypedef.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
		canhandle->CanfilterTypedef.FilterIdHigh = FilterHigh;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	601a      	str	r2, [r3, #0]
		canhandle->CanfilterTypedef.FilterIdLow = FilterLow;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	605a      	str	r2, [r3, #4]
		canhandle->CanfilterTypedef.FilterMaskIdHigh = FilterHigh;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	609a      	str	r2, [r3, #8]
		canhandle->CanfilterTypedef.FilterMaskIdLow = FilterLow;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	60da      	str	r2, [r3, #12]
		canhandle->CanfilterTypedef.FilterMode = CAN_FILTERMODE_IDMASK;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	619a      	str	r2, [r3, #24]
		canhandle->CanfilterTypedef.FilterScale = CAN_FILTERSCALE_32BIT;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	61da      	str	r2, [r3, #28]
		if(canhandle->CanHandle == &hcan1)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f8:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <CanCofigfilter+0x68>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d105      	bne.n	800230a <CanCofigfilter+0x52>
		{
			canhandle->CanfilterTypedef.FilterBank = 0; // which filter bank to use from the assigned ones
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	615a      	str	r2, [r3, #20]
			canhandle->CanfilterTypedef.SlaveStartFilterBank = 13;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	220d      	movs	r2, #13
 8002308:	625a      	str	r2, [r3, #36]	@ 0x24
		}
		HAL_CAN_ConfigFilter(canhandle->CanHandle, &canhandle->CanfilterTypedef);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f001 f95c 	bl	80035d0 <HAL_CAN_ConfigFilter>
#endif
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000110 	.word	0x20000110

08002324 <Can_Start>:

/*  CONFIG DATA TRANSMIT*/
void Can_Start(CAN_COM* canhandle, uint32_t CanID)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
	  canhandle->TxHeader.FDFormat = FDCAN_FD_CAN;
	  canhandle->TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
	  canhandle->TxHeader.MessageMarker = 0;
#else

	canhandle->Can_id =  CanID;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	675a      	str	r2, [r3, #116]	@ 0x74
	HAL_CAN_Start(canhandle->CanHandle);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002338:	4618      	mov	r0, r3
 800233a:	f001 fa29 	bl	8003790 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(canhandle->CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	2102      	movs	r1, #2
 8002344:	4618      	mov	r0, r3
 8002346:	f001 fc59 	bl	8003bfc <HAL_CAN_ActivateNotification>
	canhandle->Can_txHeader.DLC = 3;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2203      	movs	r2, #3
 800234e:	63da      	str	r2, [r3, #60]	@ 0x3c
	canhandle->Can_txHeader.RTR = CAN_RTR_DATA;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	639a      	str	r2, [r3, #56]	@ 0x38
	if(canhandle->IDMode)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <Can_Start+0x4c>
	{
		canhandle->Can_txHeader.IDE = CAN_ID_EXT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2204      	movs	r2, #4
 8002364:	635a      	str	r2, [r3, #52]	@ 0x34
		canhandle->Can_txHeader.ExtId = canhandle->Can_id;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	631a      	str	r2, [r3, #48]	@ 0x30
	{
		canhandle->Can_txHeader.IDE = CAN_ID_STD;
		canhandle->Can_txHeader.StdId = canhandle->Can_id;
	}
#endif
}
 800236e:	e006      	b.n	800237e <Can_Start+0x5a>
		canhandle->Can_txHeader.IDE = CAN_ID_STD;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	635a      	str	r2, [r3, #52]	@ 0x34
		canhandle->Can_txHeader.StdId = canhandle->Can_id;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <_begin>:
 *      Author: ADMIN-HPZ2
 */
#include "MCP3202.h"
mcp3202_pin spiPin;
void _begin (SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
	spiPin._hspi = hspi;
 8002396:	4a07      	ldr	r2, [pc, #28]	@ (80023b4 <_begin+0x2c>)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6093      	str	r3, [r2, #8]
	spiPin.GPIO_p = GPIOx;
 800239c:	4a05      	ldr	r2, [pc, #20]	@ (80023b4 <_begin+0x2c>)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	6013      	str	r3, [r2, #0]
	spiPin.GPIO_pin = GPIO_Pin;
 80023a2:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <_begin+0x2c>)
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	8093      	strh	r3, [r2, #4]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	20000280 	.word	0x20000280

080023b8 <_readChannel>:

uint16_t _readChannel(uint8_t thisCh) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af02      	add	r7, sp, #8
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
	uint8_t txData[3] = { 0b00000001, 0, 0 }; // Khởi tạo mảng txData để truyền dữ liệu
 80023c2:	4a21      	ldr	r2, [pc, #132]	@ (8002448 <_readChannel+0x90>)
 80023c4:	f107 0310 	add.w	r3, r7, #16
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	4611      	mov	r1, r2
 80023cc:	8019      	strh	r1, [r3, #0]
 80023ce:	3302      	adds	r3, #2
 80023d0:	0c12      	lsrs	r2, r2, #16
 80023d2:	701a      	strb	r2, [r3, #0]
	uint8_t rxData[3] = { 0, 0, 0 }; // Khởi tạo mảng rxData để nhận dữ liệu
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	2100      	movs	r1, #0
 80023da:	460a      	mov	r2, r1
 80023dc:	801a      	strh	r2, [r3, #0]
 80023de:	460a      	mov	r2, r1
 80023e0:	709a      	strb	r2, [r3, #2]
	uint16_t result;
	// Gán giá trị bit đầu tiên của txData[0] để chọn kênh đọc dữ liệu
	txData[1] = (thisCh == 0) ? 0b10100000 : 0b11100000;
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <_readChannel+0x34>
 80023e8:	23a0      	movs	r3, #160	@ 0xa0
 80023ea:	e000      	b.n	80023ee <_readChannel+0x36>
 80023ec:	23e0      	movs	r3, #224	@ 0xe0
 80023ee:	747b      	strb	r3, [r7, #17]
	// Truyền và nhận dữ liệu qua SPI
	HAL_GPIO_WritePin(spiPin.GPIO_p, spiPin.GPIO_pin, GPIO_PIN_RESET); // Thiết lập tín hiệu CS để bắt đầu truyền nhận
 80023f0:	4b16      	ldr	r3, [pc, #88]	@ (800244c <_readChannel+0x94>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a15      	ldr	r2, [pc, #84]	@ (800244c <_readChannel+0x94>)
 80023f6:	8891      	ldrh	r1, [r2, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 f91a 	bl	8004634 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spiPin._hspi, txData, rxData, 3, 100); // Truyền nhận dữ liệu
 8002400:	4b12      	ldr	r3, [pc, #72]	@ (800244c <_readChannel+0x94>)
 8002402:	6898      	ldr	r0, [r3, #8]
 8002404:	f107 020c 	add.w	r2, r7, #12
 8002408:	f107 0110 	add.w	r1, r7, #16
 800240c:	2364      	movs	r3, #100	@ 0x64
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2303      	movs	r3, #3
 8002412:	f002 ff4e 	bl	80052b2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(spiPin.GPIO_p, spiPin.GPIO_pin, GPIO_PIN_SET); // Thiết lập tín hiệu CS để kết thúc truyền nhận
 8002416:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <_readChannel+0x94>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a0c      	ldr	r2, [pc, #48]	@ (800244c <_readChannel+0x94>)
 800241c:	8891      	ldrh	r1, [r2, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	4618      	mov	r0, r3
 8002422:	f002 f907 	bl	8004634 <HAL_GPIO_WritePin>

	// Gộp 2 byte đầu tiên nhận được thành giá trị 12-bit
	//rxData[1] -=1;
	result = ((rxData[1] & 0x0F) << 8) | rxData[2];
 8002426:	7b7b      	ldrb	r3, [r7, #13]
 8002428:	b21b      	sxth	r3, r3
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	b21b      	sxth	r3, r3
 800242e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002432:	b21a      	sxth	r2, r3
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	b21b      	sxth	r3, r3
 8002438:	4313      	orrs	r3, r2
 800243a:	b21b      	sxth	r3, r3
 800243c:	82fb      	strh	r3, [r7, #22]

	return result;
 800243e:	8afb      	ldrh	r3, [r7, #22]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	08009278 	.word	0x08009278
 800244c:	20000280 	.word	0x20000280

08002450 <DAC_begin>:

#define ADC0_5V
mcp4922_pin spiPinDAC ;

void DAC_begin (SPI_HandleTypeDef* hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	4613      	mov	r3, r2
 800245c:	80fb      	strh	r3, [r7, #6]
	spiPinDAC._hspi = hspi ;
 800245e:	4a07      	ldr	r2, [pc, #28]	@ (800247c <DAC_begin+0x2c>)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6093      	str	r3, [r2, #8]
	spiPinDAC.GPIO_p = GPIOx;
 8002464:	4a05      	ldr	r2, [pc, #20]	@ (800247c <DAC_begin+0x2c>)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	6013      	str	r3, [r2, #0]
	spiPinDAC.GPIO_pin = GPIO_Pin;
 800246a:	4a04      	ldr	r2, [pc, #16]	@ (800247c <DAC_begin+0x2c>)
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	8093      	strh	r3, [r2, #4]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	2000028c 	.word	0x2000028c

08002480 <highByte>:
bit 11 down to bit 0

 */
//************************************************************************

uint8_t highByte(uint16_t value) {
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	80fb      	strh	r3, [r7, #6]
  return (uint8_t)(value >> 8);
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	b29b      	uxth	r3, r3
 8002490:	b2db      	uxtb	r3, r3
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LowByte>:
uint8_t LowByte(uint16_t value) {
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	80fb      	strh	r3, [r7, #6]
  return (uint8_t)(value & 0xFF);
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	b2db      	uxtb	r3, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <sendIntValueSPI>:

void sendIntValueSPI(int A ,int B) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
int channelA = A | 0b0111000000000000;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80024c8:	617b      	str	r3, [r7, #20]
int channelB = B | 0b1111000000000000;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 80024d0:	613b      	str	r3, [r7, #16]
uint8_t hightByteA = highByte(channelA);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ffd2 	bl	8002480 <highByte>
 80024dc:	4603      	mov	r3, r0
 80024de:	73fb      	strb	r3, [r7, #15]
uint8_t lowByteA = LowByte(channelA);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ffda 	bl	800249e <LowByte>
 80024ea:	4603      	mov	r3, r0
 80024ec:	73bb      	strb	r3, [r7, #14]
uint8_t hightByteB = highByte(channelB);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ffc4 	bl	8002480 <highByte>
 80024f8:	4603      	mov	r3, r0
 80024fa:	737b      	strb	r3, [r7, #13]
uint8_t lowByteB = LowByte(channelB);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ffcc 	bl	800249e <LowByte>
 8002506:	4603      	mov	r3, r0
 8002508:	733b      	strb	r3, [r7, #12]
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_RESET);
 800250a:	4b23      	ldr	r3, [pc, #140]	@ (8002598 <sendIntValueSPI+0xe0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a22      	ldr	r2, [pc, #136]	@ (8002598 <sendIntValueSPI+0xe0>)
 8002510:	8891      	ldrh	r1, [r2, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f002 f88d 	bl	8004634 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(spiPinDAC._hspi, &hightByteA,sizeof(hightByteA), 100);
 800251a:	4b1f      	ldr	r3, [pc, #124]	@ (8002598 <sendIntValueSPI+0xe0>)
 800251c:	6898      	ldr	r0, [r3, #8]
 800251e:	f107 010f 	add.w	r1, r7, #15
 8002522:	2364      	movs	r3, #100	@ 0x64
 8002524:	2201      	movs	r2, #1
 8002526:	f002 fd80 	bl	800502a <HAL_SPI_Transmit>
HAL_SPI_Transmit(spiPinDAC._hspi, &lowByteA,sizeof(lowByteA), 100);
 800252a:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <sendIntValueSPI+0xe0>)
 800252c:	6898      	ldr	r0, [r3, #8]
 800252e:	f107 010e 	add.w	r1, r7, #14
 8002532:	2364      	movs	r3, #100	@ 0x64
 8002534:	2201      	movs	r2, #1
 8002536:	f002 fd78 	bl	800502a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_SET);
 800253a:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <sendIntValueSPI+0xe0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a16      	ldr	r2, [pc, #88]	@ (8002598 <sendIntValueSPI+0xe0>)
 8002540:	8891      	ldrh	r1, [r2, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f002 f875 	bl	8004634 <HAL_GPIO_WritePin>
__asm__("nop\n\t");
 800254a:	bf00      	nop
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_RESET);
 800254c:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <sendIntValueSPI+0xe0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <sendIntValueSPI+0xe0>)
 8002552:	8891      	ldrh	r1, [r2, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f002 f86c 	bl	8004634 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(spiPinDAC._hspi, &hightByteB, sizeof(hightByteB), 100);
 800255c:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <sendIntValueSPI+0xe0>)
 800255e:	6898      	ldr	r0, [r3, #8]
 8002560:	f107 010d 	add.w	r1, r7, #13
 8002564:	2364      	movs	r3, #100	@ 0x64
 8002566:	2201      	movs	r2, #1
 8002568:	f002 fd5f 	bl	800502a <HAL_SPI_Transmit>
HAL_SPI_Transmit(spiPinDAC._hspi, &lowByteB,sizeof(lowByteB), 100);
 800256c:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <sendIntValueSPI+0xe0>)
 800256e:	6898      	ldr	r0, [r3, #8]
 8002570:	f107 010c 	add.w	r1, r7, #12
 8002574:	2364      	movs	r3, #100	@ 0x64
 8002576:	2201      	movs	r2, #1
 8002578:	f002 fd57 	bl	800502a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(spiPinDAC.GPIO_p, spiPinDAC.GPIO_pin, GPIO_PIN_SET);
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <sendIntValueSPI+0xe0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a05      	ldr	r2, [pc, #20]	@ (8002598 <sendIntValueSPI+0xe0>)
 8002582:	8891      	ldrh	r1, [r2, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	4618      	mov	r0, r3
 8002588:	f002 f854 	bl	8004634 <HAL_GPIO_WritePin>
__asm__("nop\n\t");
 800258c:	bf00      	nop
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2000028c 	.word	0x2000028c

0800259c <SetDAC>:

void SetDAC(uint16_t channelA, uint16_t channelB) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	460a      	mov	r2, r1
 80025a6:	80fb      	strh	r3, [r7, #6]
 80025a8:	4613      	mov	r3, r2
 80025aa:	80bb      	strh	r3, [r7, #4]
#ifdef ADC0_5V
if(channelA>2048)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025b2:	d902      	bls.n	80025ba <SetDAC+0x1e>
	{channelA = 2048;}
 80025b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025b8:	80fb      	strh	r3, [r7, #6]
	if(channelB>2048)
 80025ba:	88bb      	ldrh	r3, [r7, #4]
 80025bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025c0:	d902      	bls.n	80025c8 <SetDAC+0x2c>
	{channelB=2048;}
 80025c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025c6:	80bb      	strh	r3, [r7, #4]
#endif
  sendIntValueSPI(channelA,channelB);
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	88ba      	ldrh	r2, [r7, #4]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff72 	bl	80024b8 <sendIntValueSPI>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <setKincoErrorStatus>:
/****************Set id Current Feedback in mode PDO************/
uint32_t CurrentID[MNum] = {0x281, 0x282};
/*********************FunctionCode***********************/
void readParameter();

void setKincoErrorStatus(struct KincoErrorStatus *status, uint16_t value) {
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
    status->Extended_error = value & (1 << 0);
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	701a      	strb	r2, [r3, #0]
    status->Encoder_connected = value & (1 << 1);
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2da      	uxtb	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	705a      	strb	r2, [r3, #1]
    status->Encoder_internal = value & (1 << 2);
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2da      	uxtb	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	709a      	strb	r2, [r3, #2]
    status->Encoder_CRC = value & (1 << 3);
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2da      	uxtb	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	70da      	strb	r2, [r3, #3]
    status->Driver_temperature = value & (1 << 4);
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf14      	ite	ne
 8002642:	2301      	movne	r3, #1
 8002644:	2300      	moveq	r3, #0
 8002646:	b2da      	uxtb	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	711a      	strb	r2, [r3, #4]
    status->Over_voltage = value & (1 << 5);
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	2b00      	cmp	r3, #0
 8002654:	bf14      	ite	ne
 8002656:	2301      	movne	r3, #1
 8002658:	2300      	moveq	r3, #0
 800265a:	b2da      	uxtb	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	715a      	strb	r2, [r3, #5]
    status->Under_voltage = value & (1 << 6);
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	bf14      	ite	ne
 800266a:	2301      	movne	r3, #1
 800266c:	2300      	moveq	r3, #0
 800266e:	b2da      	uxtb	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	719a      	strb	r2, [r3, #6]
    status->Over_current = value & (1 << 7);
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	bf14      	ite	ne
 800267e:	2301      	movne	r3, #1
 8002680:	2300      	moveq	r3, #0
 8002682:	b2da      	uxtb	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	71da      	strb	r2, [r3, #7]
    status->Chop_resistor = value & (1 << 8);
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2da      	uxtb	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	721a      	strb	r2, [r3, #8]
    status->Position_following = value & (1 << 9);
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	725a      	strb	r2, [r3, #9]
    status->Low_logicvoltage = value & (1 << 10);
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	729a      	strb	r2, [r3, #10]
    status->Motor_or_driver_IIt = value & (1 << 11);
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	72da      	strb	r2, [r3, #11]
    status->Over_frequency = value & (1 << 12);
 80026d8:	887b      	ldrh	r3, [r7, #2]
 80026da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	731a      	strb	r2, [r3, #12]
    status->Motor_temperature = value & (1 << 13);
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf14      	ite	ne
 80026f6:	2301      	movne	r3, #1
 80026f8:	2300      	moveq	r3, #0
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	735a      	strb	r2, [r3, #13]
    status->Motor_communication = value & (1 << 14);
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2da      	uxtb	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	739a      	strb	r2, [r3, #14]
    status->EEPROM_data = value & (1 << 15);
 8002714:	887b      	ldrh	r3, [r7, #2]
 8002716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf14      	ite	ne
 800271e:	2301      	movne	r3, #1
 8002720:	2300      	moveq	r3, #0
 8002722:	b2da      	uxtb	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	73da      	strb	r2, [r3, #15]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <MotorIsConnected>:
bool motorIsConnect = false;
void MotorIsConnected(uint32_t id)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	if(id == 0x701)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f240 7201 	movw	r2, #1793	@ 0x701
 8002742:	4293      	cmp	r3, r2
 8002744:	d102      	bne.n	800274c <MotorIsConnected+0x18>
	{
		motorIsConnect = true;
 8002746:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <MotorIsConnected+0x24>)
 8002748:	2201      	movs	r2, #1
 800274a:	701a      	strb	r2, [r3, #0]
	}
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	200003a4 	.word	0x200003a4

0800275c <CanRecieverCallback>:
void CanRecieverCallback()
{
 800275c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
	MesRx.Canid = Cankinco.Can_txHeader.StdId;
 8002764:	4968      	ldr	r1, [pc, #416]	@ (8002908 <CanRecieverCallback+0x1ac>)
 8002766:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8002768:	4868      	ldr	r0, [pc, #416]	@ (800290c <CanRecieverCallback+0x1b0>)
 800276a:	6001      	str	r1, [r0, #0]
	memcpy(MesRx.mes, Cankinco.Can_rxData,8);
 800276c:	4867      	ldr	r0, [pc, #412]	@ (800290c <CanRecieverCallback+0x1b0>)
 800276e:	4966      	ldr	r1, [pc, #408]	@ (8002908 <CanRecieverCallback+0x1ac>)
 8002770:	f100 0c0a 	add.w	ip, r0, #10
 8002774:	f101 0664 	add.w	r6, r1, #100	@ 0x64
 8002778:	ce03      	ldmia	r6!, {r0, r1}
 800277a:	f8cc 0000 	str.w	r0, [ip]
 800277e:	f8cc 1004 	str.w	r1, [ip, #4]
	if(MesRx.Canid > 0x180 && MesRx.Canid < 0x280 )
 8002782:	4962      	ldr	r1, [pc, #392]	@ (800290c <CanRecieverCallback+0x1b0>)
 8002784:	6809      	ldr	r1, [r1, #0]
 8002786:	f5b1 7fc0 	cmp.w	r1, #384	@ 0x180
 800278a:	d960      	bls.n	800284e <CanRecieverCallback+0xf2>
 800278c:	495f      	ldr	r1, [pc, #380]	@ (800290c <CanRecieverCallback+0x1b0>)
 800278e:	6809      	ldr	r1, [r1, #0]
 8002790:	f5b1 7f20 	cmp.w	r1, #640	@ 0x280
 8002794:	d25b      	bcs.n	800284e <CanRecieverCallback+0xf2>
	{
		UINT8_TO_INT32(MesRx.mes,3,Kincoparameter.PosActual);
 8002796:	495d      	ldr	r1, [pc, #372]	@ (800290c <CanRecieverCallback+0x1b0>)
 8002798:	7b49      	ldrb	r1, [r1, #13]
 800279a:	0608      	lsls	r0, r1, #24
 800279c:	495b      	ldr	r1, [pc, #364]	@ (800290c <CanRecieverCallback+0x1b0>)
 800279e:	7b09      	ldrb	r1, [r1, #12]
 80027a0:	0409      	lsls	r1, r1, #16
 80027a2:	4308      	orrs	r0, r1
 80027a4:	4959      	ldr	r1, [pc, #356]	@ (800290c <CanRecieverCallback+0x1b0>)
 80027a6:	7ac9      	ldrb	r1, [r1, #11]
 80027a8:	0209      	lsls	r1, r1, #8
 80027aa:	4301      	orrs	r1, r0
 80027ac:	4857      	ldr	r0, [pc, #348]	@ (800290c <CanRecieverCallback+0x1b0>)
 80027ae:	7a80      	ldrb	r0, [r0, #10]
 80027b0:	4301      	orrs	r1, r0
 80027b2:	4857      	ldr	r0, [pc, #348]	@ (8002910 <CanRecieverCallback+0x1b4>)
 80027b4:	6201      	str	r1, [r0, #32]
		int32_t tmp;
		UINT8_TO_INT32(MesRx.mes,7,tmp);
 80027b6:	4955      	ldr	r1, [pc, #340]	@ (800290c <CanRecieverCallback+0x1b0>)
 80027b8:	7c49      	ldrb	r1, [r1, #17]
 80027ba:	0608      	lsls	r0, r1, #24
 80027bc:	4953      	ldr	r1, [pc, #332]	@ (800290c <CanRecieverCallback+0x1b0>)
 80027be:	7c09      	ldrb	r1, [r1, #16]
 80027c0:	0409      	lsls	r1, r1, #16
 80027c2:	4308      	orrs	r0, r1
 80027c4:	4951      	ldr	r1, [pc, #324]	@ (800290c <CanRecieverCallback+0x1b0>)
 80027c6:	7bc9      	ldrb	r1, [r1, #15]
 80027c8:	0209      	lsls	r1, r1, #8
 80027ca:	4301      	orrs	r1, r0
 80027cc:	484f      	ldr	r0, [pc, #316]	@ (800290c <CanRecieverCallback+0x1b0>)
 80027ce:	7b80      	ldrb	r0, [r0, #14]
 80027d0:	4301      	orrs	r1, r0
 80027d2:	60b9      	str	r1, [r7, #8]
		Kincoparameter.SpeedReal = DEC_TO_RPM(tmp) ;
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	17c8      	asrs	r0, r1, #31
 80027d8:	4688      	mov	r8, r1
 80027da:	4681      	mov	r9, r0
 80027dc:	4640      	mov	r0, r8
 80027de:	4649      	mov	r1, r9
 80027e0:	f04f 0a00 	mov.w	sl, #0
 80027e4:	f04f 0b00 	mov.w	fp, #0
 80027e8:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80027ec:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80027f0:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80027f4:	4650      	mov	r0, sl
 80027f6:	4659      	mov	r1, fp
 80027f8:	ebb0 0208 	subs.w	r2, r0, r8
 80027fc:	eb61 0309 	sbc.w	r3, r1, r9
 8002800:	f04f 0000 	mov.w	r0, #0
 8002804:	f04f 0100 	mov.w	r1, #0
 8002808:	0099      	lsls	r1, r3, #2
 800280a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800280e:	0090      	lsls	r0, r2, #2
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	eb12 0408 	adds.w	r4, r2, r8
 8002818:	eb43 0509 	adc.w	r5, r3, r9
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	012b      	lsls	r3, r5, #4
 8002826:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800282a:	0122      	lsls	r2, r4, #4
 800282c:	1b11      	subs	r1, r2, r4
 800282e:	6039      	str	r1, [r7, #0]
 8002830:	eb63 0305 	sbc.w	r3, r3, r5
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4a37      	ldr	r2, [pc, #220]	@ (8002914 <CanRecieverCallback+0x1b8>)
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002840:	f7fe f8bc 	bl	80009bc <__aeabi_ldivmod>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4b31      	ldr	r3, [pc, #196]	@ (8002910 <CanRecieverCallback+0x1b4>)
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24
	{
 800284c:	e055      	b.n	80028fa <CanRecieverCallback+0x19e>
	} else if (MesRx.Canid > 0x580 && MesRx.Canid < 0x600)
 800284e:	4b2f      	ldr	r3, [pc, #188]	@ (800290c <CanRecieverCallback+0x1b0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002856:	d919      	bls.n	800288c <CanRecieverCallback+0x130>
 8002858:	4b2c      	ldr	r3, [pc, #176]	@ (800290c <CanRecieverCallback+0x1b0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002860:	d214      	bcs.n	800288c <CanRecieverCallback+0x130>
	{
		for(int x=4; x <8; x++)
 8002862:	2304      	movs	r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e00d      	b.n	8002884 <CanRecieverCallback+0x128>
		{
			MesRx.value[x-4] = Cankinco.Can_rxData[x];
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3b04      	subs	r3, #4
 800286c:	4926      	ldr	r1, [pc, #152]	@ (8002908 <CanRecieverCallback+0x1ac>)
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	440a      	add	r2, r1
 8002872:	3264      	adds	r2, #100	@ 0x64
 8002874:	7811      	ldrb	r1, [r2, #0]
 8002876:	4a25      	ldr	r2, [pc, #148]	@ (800290c <CanRecieverCallback+0x1b0>)
 8002878:	4413      	add	r3, r2
 800287a:	460a      	mov	r2, r1
 800287c:	719a      	strb	r2, [r3, #6]
		for(int x=4; x <8; x++)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3301      	adds	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b07      	cmp	r3, #7
 8002888:	ddee      	ble.n	8002868 <CanRecieverCallback+0x10c>
 800288a:	e036      	b.n	80028fa <CanRecieverCallback+0x19e>
		}
	} else if (MesRx.Canid > 0x280 && MesRx.Canid < 0x300)
 800288c:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <CanRecieverCallback+0x1b0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8002894:	d927      	bls.n	80028e6 <CanRecieverCallback+0x18a>
 8002896:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <CanRecieverCallback+0x1b0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800289e:	d222      	bcs.n	80028e6 <CanRecieverCallback+0x18a>
	{
		Kincoparameter.motorconnect = true ;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <CanRecieverCallback+0x1b4>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
		UINT8_TO_INT16(MesRx.mes,1,Kincoparameter.I_q);
 80028a6:	4b19      	ldr	r3, [pc, #100]	@ (800290c <CanRecieverCallback+0x1b0>)
 80028a8:	7adb      	ldrb	r3, [r3, #11]
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	4b16      	ldr	r3, [pc, #88]	@ (800290c <CanRecieverCallback+0x1b0>)
 80028b2:	7a9b      	ldrb	r3, [r3, #10]
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	4313      	orrs	r3, r2
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <CanRecieverCallback+0x1b4>)
 80028bc:	805a      	strh	r2, [r3, #2]
		UINT8_TO_INT16(MesRx.mes,3,Kincoparameter.Error_code);
 80028be:	4b13      	ldr	r3, [pc, #76]	@ (800290c <CanRecieverCallback+0x1b0>)
 80028c0:	7b5b      	ldrb	r3, [r3, #13]
 80028c2:	b21b      	sxth	r3, r3
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	b21a      	sxth	r2, r3
 80028c8:	4b10      	ldr	r3, [pc, #64]	@ (800290c <CanRecieverCallback+0x1b0>)
 80028ca:	7b1b      	ldrb	r3, [r3, #12]
 80028cc:	b21b      	sxth	r3, r3
 80028ce:	4313      	orrs	r3, r2
 80028d0:	b21b      	sxth	r3, r3
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <CanRecieverCallback+0x1b4>)
 80028d6:	809a      	strh	r2, [r3, #4]
		setKincoErrorStatus(&Kincoparameter.Error_status, Kincoparameter.Error_code);
 80028d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002910 <CanRecieverCallback+0x1b4>)
 80028da:	889b      	ldrh	r3, [r3, #4]
 80028dc:	4619      	mov	r1, r3
 80028de:	480e      	ldr	r0, [pc, #56]	@ (8002918 <CanRecieverCallback+0x1bc>)
 80028e0:	f7ff fe7c 	bl	80025dc <setKincoErrorStatus>
 80028e4:	e009      	b.n	80028fa <CanRecieverCallback+0x19e>
	}else if (MesRx.Canid > 0x700)
 80028e6:	4b09      	ldr	r3, [pc, #36]	@ (800290c <CanRecieverCallback+0x1b0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028ee:	d904      	bls.n	80028fa <CanRecieverCallback+0x19e>
	{
		MotorIsConnected(MesRx.Canid);
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <CanRecieverCallback+0x1b0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff1d 	bl	8002734 <MotorIsConnected>
	}

	readParameter();
 80028fa:	f000 fb69 	bl	8002fd0 <readParameter>
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002908:	20000298 	.word	0x20000298
 800290c:	20000318 	.word	0x20000318
 8002910:	2000032c 	.word	0x2000032c
 8002914:	004e2000 	.word	0x004e2000
 8002918:	20000332 	.word	0x20000332

0800291c <CreateMessage>:
Message_Kinco_Can CreateMessage( uint32_t Res, uint32_t value )
{
 800291c:	b4b0      	push	{r4, r5, r7}
 800291e:	b091      	sub	sp, #68	@ 0x44
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
	uint8_t byteAdd[4];
	uint8_t byteval[4];
	uint8_t mes[8];
	Message_Kinco_Can candata;
	//candata.Canid = motorid ;
	INT_TO_UINT8_ARRAY(Res, byteAdd);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	0e1b      	lsrs	r3, r3, #24
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	INT_TO_UINT8_ARRAY(value, byteval);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0e1b      	lsrs	r3, r3, #24
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t ObjectSubindex = 0x23;
 8002974:	2323      	movs	r3, #35	@ 0x23
 8002976:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	mes[0] = ObjectSubindex;
 800297a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800297e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	mes[1] = byteAdd[1];
 8002982:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002986:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	mes[2] = byteAdd[0];
 800298a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800298e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	mes[3] = byteAdd[2];
 8002992:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	mes[4] = byteval[3];
 800299a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800299e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	mes[5] = byteval[2];
 80029a2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80029a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	mes[6] = byteval[1];
 80029aa:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80029ae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	mes[7] = byteval[0];
 80029b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80029b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
//	mes[8] = '\00';
	candata.Res = ((uint16_t)byteAdd[0]<< 8) | byteAdd[1];
 80029ba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80029be:	b21b      	sxth	r3, r3
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	4313      	orrs	r3, r2
 80029cc:	b21b      	sxth	r3, r3
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	833b      	strh	r3, [r7, #24]
	memcpy(candata.mes,mes,8);
 80029d2:	f107 021e 	add.w	r2, r7, #30
 80029d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029da:	cb03      	ldmia	r3!, {r0, r1}
 80029dc:	6010      	str	r0, [r2, #0]
 80029de:	6051      	str	r1, [r2, #4]
	for(int x=4; x <8; x++)
 80029e0:	2304      	movs	r3, #4
 80029e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029e4:	e00d      	b.n	8002a02 <CreateMessage+0xe6>
	{
		candata.value[x-4] = mes[x];
 80029e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029e8:	3b04      	subs	r3, #4
 80029ea:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80029ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029f0:	440a      	add	r2, r1
 80029f2:	7812      	ldrb	r2, [r2, #0]
 80029f4:	3340      	adds	r3, #64	@ 0x40
 80029f6:	443b      	add	r3, r7
 80029f8:	f803 2c26 	strb.w	r2, [r3, #-38]
	for(int x=4; x <8; x++)
 80029fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029fe:	3301      	adds	r3, #1
 8002a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a04:	2b07      	cmp	r3, #7
 8002a06:	ddee      	ble.n	80029e6 <CreateMessage+0xca>
	}
	return candata;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	461d      	mov	r5, r3
 8002a0c:	f107 0414 	add.w	r4, r7, #20
 8002a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	602b      	str	r3, [r5, #0]
}
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	3744      	adds	r7, #68	@ 0x44
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bcb0      	pop	{r4, r5, r7}
 8002a20:	4770      	bx	lr
	...

08002a24 <MotorInit>:

void MotorInit(CAN_HandleTypeDef *hcan)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	  Can_begin(&Cankinco, hcan, 0 );
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	480a      	ldr	r0, [pc, #40]	@ (8002a5c <MotorInit+0x38>)
 8002a32:	f7ff fbcd 	bl	80021d0 <Can_begin>
	  CanCofigfilter(&Cankinco, FilterHigh, FilterLow);
 8002a36:	2211      	movs	r2, #17
 8002a38:	2111      	movs	r1, #17
 8002a3a:	4808      	ldr	r0, [pc, #32]	@ (8002a5c <MotorInit+0x38>)
 8002a3c:	f7ff fc3c 	bl	80022b8 <CanCofigfilter>
	  Cankinco.CanRxIT_Callback = CanRecieverCallback;
 8002a40:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <MotorInit+0x38>)
 8002a42:	4a07      	ldr	r2, [pc, #28]	@ (8002a60 <MotorInit+0x3c>)
 8002a44:	67da      	str	r2, [r3, #124]	@ 0x7c
	  Can_Start(&Cankinco, MotorID[0]);
 8002a46:	4b07      	ldr	r3, [pc, #28]	@ (8002a64 <MotorInit+0x40>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4803      	ldr	r0, [pc, #12]	@ (8002a5c <MotorInit+0x38>)
 8002a4e:	f7ff fc69 	bl	8002324 <Can_Start>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000298 	.word	0x20000298
 8002a60:	0800275d 	.word	0x0800275d
 8002a64:	20000030 	.word	0x20000030

08002a68 <SetOperationMode>:

bool SetOperationMode(uint32_t vl, uint32_t id)
{
 8002a68:	b5b0      	push	{r4, r5, r7, lr}
 8002a6a:	b08e      	sub	sp, #56	@ 0x38
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	61f8      	str	r0, [r7, #28]
 8002a70:	61b9      	str	r1, [r7, #24]
    Message_Kinco_Can temp;
    Cankinco.Can_txHeader.StdId = id ;
 8002a72:	4a21      	ldr	r2, [pc, #132]	@ (8002af8 <SetOperationMode+0x90>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	62d3      	str	r3, [r2, #44]	@ 0x2c
    uint16_t timeout = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    temp = CreateMessage(OperationModeRes, vl);
 8002a7c:	463b      	mov	r3, r7
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	491e      	ldr	r1, [pc, #120]	@ (8002afc <SetOperationMode+0x94>)
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff4a 	bl	800291c <CreateMessage>
 8002a88:	f107 0420 	add.w	r4, r7, #32
 8002a8c:	463d      	mov	r5, r7
 8002a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a92:	682b      	ldr	r3, [r5, #0]
 8002a94:	6023      	str	r3, [r4, #0]
    temp.mes[0] = 0x2F;
 8002a96:	232f      	movs	r3, #47	@ 0x2f
 8002a98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    do {
        Can_Write(&Cankinco, temp.mes, DATA_BYTE_6);
 8002a9c:	f107 0320 	add.w	r3, r7, #32
 8002aa0:	330a      	adds	r3, #10
 8002aa2:	2206      	movs	r2, #6
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4814      	ldr	r0, [pc, #80]	@ (8002af8 <SetOperationMode+0x90>)
 8002aa8:	f7ff fbea 	bl	8002280 <Can_Write>
        timeout++;
 8002aac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002aae:	3301      	adds	r3, #1
 8002ab0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        osDelay(100);
 8002ab2:	2064      	movs	r0, #100	@ 0x64
 8002ab4:	f003 fa56 	bl	8005f64 <osDelay>
    } while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 20);
 8002ab8:	f107 0320 	add.w	r3, r7, #32
 8002abc:	3306      	adds	r3, #6
 8002abe:	2204      	movs	r2, #4
 8002ac0:	490f      	ldr	r1, [pc, #60]	@ (8002b00 <SetOperationMode+0x98>)
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f006 f8e8 	bl	8008c98 <memcmp>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <SetOperationMode+0x6c>
 8002ace:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002ad0:	2b13      	cmp	r3, #19
 8002ad2:	d9e3      	bls.n	8002a9c <SetOperationMode+0x34>

    return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true  ;
 8002ad4:	f107 0320 	add.w	r3, r7, #32
 8002ad8:	3306      	adds	r3, #6
 8002ada:	2204      	movs	r2, #4
 8002adc:	4908      	ldr	r1, [pc, #32]	@ (8002b00 <SetOperationMode+0x98>)
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f006 f8da 	bl	8008c98 <memcmp>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf14      	ite	ne
 8002aea:	2301      	movne	r3, #1
 8002aec:	2300      	moveq	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3738      	adds	r7, #56	@ 0x38
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bdb0      	pop	{r4, r5, r7, pc}
 8002af8:	20000298 	.word	0x20000298
 8002afc:	60600008 	.word	0x60600008
 8002b00:	2000031e 	.word	0x2000031e

08002b04 <SetControlWord>:

bool SetControlWord (uint32_t vl, uint32_t id)
{
 8002b04:	b5b0      	push	{r4, r5, r7, lr}
 8002b06:	b08e      	sub	sp, #56	@ 0x38
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	61f8      	str	r0, [r7, #28]
 8002b0c:	61b9      	str	r1, [r7, #24]
	Message_Kinco_Can temp ;
	Cankinco.Can_txHeader.StdId = id ;
 8002b0e:	4a21      	ldr	r2, [pc, #132]	@ (8002b94 <SetControlWord+0x90>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	62d3      	str	r3, [r2, #44]	@ 0x2c
	uint16_t timeout = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	86fb      	strh	r3, [r7, #54]	@ 0x36
	temp = CreateMessage(ControlWordRes, vl);
 8002b18:	463b      	mov	r3, r7
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	491e      	ldr	r1, [pc, #120]	@ (8002b98 <SetControlWord+0x94>)
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fefc 	bl	800291c <CreateMessage>
 8002b24:	f107 0420 	add.w	r4, r7, #32
 8002b28:	463d      	mov	r5, r7
 8002b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2e:	682b      	ldr	r3, [r5, #0]
 8002b30:	6023      	str	r3, [r4, #0]
	temp.mes[0] = 0x2B;
 8002b32:	232b      	movs	r3, #43	@ 0x2b
 8002b34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	do {
		Can_Write(&Cankinco, temp.mes, DATA_BYTE_6);
 8002b38:	f107 0320 	add.w	r3, r7, #32
 8002b3c:	330a      	adds	r3, #10
 8002b3e:	2206      	movs	r2, #6
 8002b40:	4619      	mov	r1, r3
 8002b42:	4814      	ldr	r0, [pc, #80]	@ (8002b94 <SetControlWord+0x90>)
 8002b44:	f7ff fb9c 	bl	8002280 <Can_Write>
		timeout ++ ;
 8002b48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
		osDelay(100);
 8002b4e:	2064      	movs	r0, #100	@ 0x64
 8002b50:	f003 fa08 	bl	8005f64 <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 20);
 8002b54:	f107 0320 	add.w	r3, r7, #32
 8002b58:	3306      	adds	r3, #6
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	490f      	ldr	r1, [pc, #60]	@ (8002b9c <SetControlWord+0x98>)
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f006 f89a 	bl	8008c98 <memcmp>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <SetControlWord+0x6c>
 8002b6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002b6c:	2b13      	cmp	r3, #19
 8002b6e:	d9e3      	bls.n	8002b38 <SetControlWord+0x34>

    return memcmp(temp.value, MesRx.value, 4) == 0 ? false :  true ;
 8002b70:	f107 0320 	add.w	r3, r7, #32
 8002b74:	3306      	adds	r3, #6
 8002b76:	2204      	movs	r2, #4
 8002b78:	4908      	ldr	r1, [pc, #32]	@ (8002b9c <SetControlWord+0x98>)
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f006 f88c 	bl	8008c98 <memcmp>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3738      	adds	r7, #56	@ 0x38
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bdb0      	pop	{r4, r5, r7, pc}
 8002b94:	20000298 	.word	0x20000298
 8002b98:	60400010 	.word	0x60400010
 8002b9c:	2000031e 	.word	0x2000031e

08002ba0 <SDOProfileAcc>:
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
}
bool SDOProfileAcc(int vl, uint32_t id)
{
 8002ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba4:	b097      	sub	sp, #92	@ 0x5c
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002baa:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	Cankinco.Can_txHeader.StdId = id ;
 8002bac:	484d      	ldr	r0, [pc, #308]	@ (8002ce4 <SDOProfileAcc+0x144>)
 8002bae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bb0:	62c1      	str	r1, [r0, #44]	@ 0x2c
	int64_t dec = RPS_TO_DEC(vl);
 8002bb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bb4:	17c8      	asrs	r0, r1, #31
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4681      	mov	r9, r0
 8002bba:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002bbe:	f04f 0000 	mov.w	r0, #0
 8002bc2:	f04f 0100 	mov.w	r1, #0
 8002bc6:	e9c7 0100 	strd	r0, r1, [r7]
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	008e      	lsls	r6, r1, #2
 8002bce:	607e      	str	r6, [r7, #4]
 8002bd0:	687e      	ldr	r6, [r7, #4]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8002bd8:	607e      	str	r6, [r7, #4]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	0089      	lsls	r1, r1, #2
 8002bde:	6039      	str	r1, [r7, #0]
 8002be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002be4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002be8:	4601      	mov	r1, r0
 8002bea:	eb11 0408 	adds.w	r4, r1, r8
 8002bee:	68f9      	ldr	r1, [r7, #12]
 8002bf0:	eb41 0509 	adc.w	r5, r1, r9
 8002bf4:	f04f 0000 	mov.w	r0, #0
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	00e9      	lsls	r1, r5, #3
 8002bfe:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002c02:	00e0      	lsls	r0, r4, #3
 8002c04:	4604      	mov	r4, r0
 8002c06:	460d      	mov	r5, r1
 8002c08:	ebb4 0208 	subs.w	r2, r4, r8
 8002c0c:	eb65 0309 	sbc.w	r3, r5, r9
 8002c10:	f04f 0000 	mov.w	r0, #0
 8002c14:	f04f 0100 	mov.w	r1, #0
 8002c18:	0119      	lsls	r1, r3, #4
 8002c1a:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002c1e:	0110      	lsls	r0, r2, #4
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	eb12 0a08 	adds.w	sl, r2, r8
 8002c28:	eb43 0b09 	adc.w	fp, r3, r9
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	ea4f 530b 	mov.w	r3, fp, lsl #20
 8002c38:	ea43 331a 	orr.w	r3, r3, sl, lsr #12
 8002c3c:	ea4f 520a 	mov.w	r2, sl, lsl #20
 8002c40:	4692      	mov	sl, r2
 8002c42:	469b      	mov	fp, r3
 8002c44:	4650      	mov	r0, sl
 8002c46:	4659      	mov	r1, fp
 8002c48:	4a27      	ldr	r2, [pc, #156]	@ (8002ce8 <SDOProfileAcc+0x148>)
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f7fd feb5 	bl	80009bc <__aeabi_ldivmod>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(ProfileAccRes, dec);
 8002c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4922      	ldr	r1, [pc, #136]	@ (8002cec <SDOProfileAcc+0x14c>)
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fe5a 	bl	800291c <CreateMessage>
 8002c68:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002c6c:	f107 0510 	add.w	r5, r7, #16
 8002c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	6023      	str	r3, [r4, #0]
	uint16_t timeout = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	do {
		Can_Write(&Cankinco, temp.mes, DATA_BYTE_8);
 8002c7e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c82:	330a      	adds	r3, #10
 8002c84:	2208      	movs	r2, #8
 8002c86:	4619      	mov	r1, r3
 8002c88:	4816      	ldr	r0, [pc, #88]	@ (8002ce4 <SDOProfileAcc+0x144>)
 8002c8a:	f7ff faf9 	bl	8002280 <Can_Write>
		timeout++;
 8002c8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002c92:	3301      	adds	r3, #1
 8002c94:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		osDelay(20);
 8002c98:	2014      	movs	r0, #20
 8002c9a:	f003 f963 	bl	8005f64 <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);
 8002c9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ca2:	3306      	adds	r3, #6
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	4912      	ldr	r1, [pc, #72]	@ (8002cf0 <SDOProfileAcc+0x150>)
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f005 fff5 	bl	8008c98 <memcmp>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <SDOProfileAcc+0x11c>
 8002cb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002cb8:	2b63      	cmp	r3, #99	@ 0x63
 8002cba:	d9e0      	bls.n	8002c7e <SDOProfileAcc+0xde>

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
 8002cbc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cc0:	3306      	adds	r3, #6
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	490a      	ldr	r1, [pc, #40]	@ (8002cf0 <SDOProfileAcc+0x150>)
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f005 ffe6 	bl	8008c98 <memcmp>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	375c      	adds	r7, #92	@ 0x5c
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000298 	.word	0x20000298
 8002ce8:	003d0900 	.word	0x003d0900
 8002cec:	60830020 	.word	0x60830020
 8002cf0:	2000031e 	.word	0x2000031e

08002cf4 <SDOProfileDec>:
bool SDOProfileDec(int vl, uint32_t id)
{
 8002cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf8:	b097      	sub	sp, #92	@ 0x5c
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002cfe:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	Cankinco.Can_txHeader.StdId = id ;
 8002d00:	484d      	ldr	r0, [pc, #308]	@ (8002e38 <SDOProfileDec+0x144>)
 8002d02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d04:	62c1      	str	r1, [r0, #44]	@ 0x2c
	int64_t dec = RPS_TO_DEC(vl);
 8002d06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d08:	17c8      	asrs	r0, r1, #31
 8002d0a:	4688      	mov	r8, r1
 8002d0c:	4681      	mov	r9, r0
 8002d0e:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002d12:	f04f 0000 	mov.w	r0, #0
 8002d16:	f04f 0100 	mov.w	r1, #0
 8002d1a:	e9c7 0100 	strd	r0, r1, [r7]
 8002d1e:	68f9      	ldr	r1, [r7, #12]
 8002d20:	008e      	lsls	r6, r1, #2
 8002d22:	607e      	str	r6, [r7, #4]
 8002d24:	687e      	ldr	r6, [r7, #4]
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8002d2c:	607e      	str	r6, [r7, #4]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	0089      	lsls	r1, r1, #2
 8002d32:	6039      	str	r1, [r7, #0]
 8002d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d38:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002d3c:	4601      	mov	r1, r0
 8002d3e:	eb11 0408 	adds.w	r4, r1, r8
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	eb41 0509 	adc.w	r5, r1, r9
 8002d48:	f04f 0000 	mov.w	r0, #0
 8002d4c:	f04f 0100 	mov.w	r1, #0
 8002d50:	00e9      	lsls	r1, r5, #3
 8002d52:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002d56:	00e0      	lsls	r0, r4, #3
 8002d58:	4604      	mov	r4, r0
 8002d5a:	460d      	mov	r5, r1
 8002d5c:	ebb4 0208 	subs.w	r2, r4, r8
 8002d60:	eb65 0309 	sbc.w	r3, r5, r9
 8002d64:	f04f 0000 	mov.w	r0, #0
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	0119      	lsls	r1, r3, #4
 8002d6e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002d72:	0110      	lsls	r0, r2, #4
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	eb12 0a08 	adds.w	sl, r2, r8
 8002d7c:	eb43 0b09 	adc.w	fp, r3, r9
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	ea4f 530b 	mov.w	r3, fp, lsl #20
 8002d8c:	ea43 331a 	orr.w	r3, r3, sl, lsr #12
 8002d90:	ea4f 520a 	mov.w	r2, sl, lsl #20
 8002d94:	4692      	mov	sl, r2
 8002d96:	469b      	mov	fp, r3
 8002d98:	4650      	mov	r0, sl
 8002d9a:	4659      	mov	r1, fp
 8002d9c:	4a27      	ldr	r2, [pc, #156]	@ (8002e3c <SDOProfileDec+0x148>)
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	f7fd fe0b 	bl	80009bc <__aeabi_ldivmod>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(ProfileDecRes, dec);
 8002dae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002db0:	f107 0310 	add.w	r3, r7, #16
 8002db4:	4922      	ldr	r1, [pc, #136]	@ (8002e40 <SDOProfileDec+0x14c>)
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fdb0 	bl	800291c <CreateMessage>
 8002dbc:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002dc0:	f107 0510 	add.w	r5, r7, #16
 8002dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dc8:	682b      	ldr	r3, [r5, #0]
 8002dca:	6023      	str	r3, [r4, #0]
	uint16_t timeout = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	do {
		Can_Write(&Cankinco, temp.mes, DATA_BYTE_8);
 8002dd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002dd6:	330a      	adds	r3, #10
 8002dd8:	2208      	movs	r2, #8
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4816      	ldr	r0, [pc, #88]	@ (8002e38 <SDOProfileDec+0x144>)
 8002dde:	f7ff fa4f 	bl	8002280 <Can_Write>
		timeout++;
 8002de2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002de6:	3301      	adds	r3, #1
 8002de8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
		osDelay(20);
 8002dec:	2014      	movs	r0, #20
 8002dee:	f003 f8b9 	bl	8005f64 <osDelay>
	} while (memcmp(temp.value, MesRx.value, 4) != 0 && timeout < 100);
 8002df2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002df6:	3306      	adds	r3, #6
 8002df8:	2204      	movs	r2, #4
 8002dfa:	4912      	ldr	r1, [pc, #72]	@ (8002e44 <SDOProfileDec+0x150>)
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f005 ff4b 	bl	8008c98 <memcmp>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <SDOProfileDec+0x11c>
 8002e08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002e0c:	2b63      	cmp	r3, #99	@ 0x63
 8002e0e:	d9e0      	bls.n	8002dd2 <SDOProfileDec+0xde>

	return memcmp(temp.value, MesRx.value, 4) == 0 ?  false : true ;
 8002e10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e14:	3306      	adds	r3, #6
 8002e16:	2204      	movs	r2, #4
 8002e18:	490a      	ldr	r1, [pc, #40]	@ (8002e44 <SDOProfileDec+0x150>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f005 ff3c 	bl	8008c98 <memcmp>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3

}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	375c      	adds	r7, #92	@ 0x5c
 8002e30:	46bd      	mov	sp, r7
 8002e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e36:	bf00      	nop
 8002e38:	20000298 	.word	0x20000298
 8002e3c:	003d0900 	.word	0x003d0900
 8002e40:	60840020 	.word	0x60840020
 8002e44:	2000031e 	.word	0x2000031e

08002e48 <SetSpeed>:

    return memcmp(temp.value, MesRx.value, 4) == 0 ? false :  true ;
}

void SetSpeed(int vl, uint32_t TPDO)
{
 8002e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4c:	b095      	sub	sp, #84	@ 0x54
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002e52:	62b9      	str	r1, [r7, #40]	@ 0x28
	Message_Kinco_Can temp;
	int64_t dec = RPM_TO_DEC(vl);
 8002e54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e56:	17c8      	asrs	r0, r1, #31
 8002e58:	4688      	mov	r8, r1
 8002e5a:	4681      	mov	r9, r0
 8002e5c:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002e60:	f04f 0000 	mov.w	r0, #0
 8002e64:	f04f 0100 	mov.w	r1, #0
 8002e68:	e9c7 0100 	strd	r0, r1, [r7]
 8002e6c:	68f9      	ldr	r1, [r7, #12]
 8002e6e:	008e      	lsls	r6, r1, #2
 8002e70:	607e      	str	r6, [r7, #4]
 8002e72:	687e      	ldr	r6, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	ea46 7691 	orr.w	r6, r6, r1, lsr #30
 8002e7a:	607e      	str	r6, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	0089      	lsls	r1, r1, #2
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e86:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002e8a:	4601      	mov	r1, r0
 8002e8c:	eb11 0408 	adds.w	r4, r1, r8
 8002e90:	68f9      	ldr	r1, [r7, #12]
 8002e92:	eb41 0509 	adc.w	r5, r1, r9
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	00e9      	lsls	r1, r5, #3
 8002ea0:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002ea4:	00e0      	lsls	r0, r4, #3
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	460d      	mov	r5, r1
 8002eaa:	ebb4 0208 	subs.w	r2, r4, r8
 8002eae:	eb65 0309 	sbc.w	r3, r5, r9
 8002eb2:	f04f 0000 	mov.w	r0, #0
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	0119      	lsls	r1, r3, #4
 8002ebc:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002ec0:	0110      	lsls	r0, r2, #4
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	eb12 0a08 	adds.w	sl, r2, r8
 8002eca:	eb43 0b09 	adc.w	fp, r3, r9
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	ea4f 334b 	mov.w	r3, fp, lsl #13
 8002eda:	ea43 43da 	orr.w	r3, r3, sl, lsr #19
 8002ede:	ea4f 324a 	mov.w	r2, sl, lsl #13
 8002ee2:	4692      	mov	sl, r2
 8002ee4:	469b      	mov	fp, r3
 8002ee6:	4650      	mov	r0, sl
 8002ee8:	4659      	mov	r1, fp
 8002eea:	f240 7253 	movw	r2, #1875	@ 0x753
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	f7fd fd63 	bl	80009bc <__aeabi_ldivmod>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	temp = CreateMessage(TargetSpeedRes, dec);
 8002efe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f00:	f107 0310 	add.w	r3, r7, #16
 8002f04:	490d      	ldr	r1, [pc, #52]	@ (8002f3c <SetSpeed+0xf4>)
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fd08 	bl	800291c <CreateMessage>
 8002f0c:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8002f10:	f107 0510 	add.w	r5, r7, #16
 8002f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f18:	682b      	ldr	r3, [r5, #0]
 8002f1a:	6023      	str	r3, [r4, #0]
	Cankinco.Can_txHeader.StdId = TPDO;
 8002f1c:	4a08      	ldr	r2, [pc, #32]	@ (8002f40 <SetSpeed+0xf8>)
 8002f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f20:	62d3      	str	r3, [r2, #44]	@ 0x2c
	Can_Write(&Cankinco, temp.value, DATA_BYTE_4);
 8002f22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f26:	3306      	adds	r3, #6
 8002f28:	2204      	movs	r2, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4804      	ldr	r0, [pc, #16]	@ (8002f40 <SetSpeed+0xf8>)
 8002f2e:	f7ff f9a7 	bl	8002280 <Can_Write>

}
 8002f32:	bf00      	nop
 8002f34:	3754      	adds	r7, #84	@ 0x54
 8002f36:	46bd      	mov	sp, r7
 8002f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f3c:	60ff0020 	.word	0x60ff0020
 8002f40:	20000298 	.word	0x20000298

08002f44 <NMTmanagement>:

bool NMTmanagement (NMT_Command cmd, uint32_t MotorID)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[3] = {cmd, MotorID };
 8002f50:	f107 0308 	add.w	r3, r7, #8
 8002f54:	2100      	movs	r1, #0
 8002f56:	460a      	mov	r2, r1
 8002f58:	801a      	strh	r2, [r3, #0]
 8002f5a:	460a      	mov	r2, r1
 8002f5c:	709a      	strb	r2, [r3, #2]
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	723b      	strb	r3, [r7, #8]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	727b      	strb	r3, [r7, #9]
	Cankinco.Can_txHeader.StdId = 0x0000;
 8002f68:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <NMTmanagement+0x80>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
	uint16_t timeout = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	81fb      	strh	r3, [r7, #14]
	do {
		Can_Write(&Cankinco, buf, DATA_BYTE_2);
 8002f72:	f107 0308 	add.w	r3, r7, #8
 8002f76:	2202      	movs	r2, #2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4812      	ldr	r0, [pc, #72]	@ (8002fc4 <NMTmanagement+0x80>)
 8002f7c:	f7ff f980 	bl	8002280 <Can_Write>
		timeout++;
 8002f80:	89fb      	ldrh	r3, [r7, #14]
 8002f82:	3301      	adds	r3, #1
 8002f84:	81fb      	strh	r3, [r7, #14]
		osDelay(50);
 8002f86:	2032      	movs	r0, #50	@ 0x32
 8002f88:	f002 ffec 	bl	8005f64 <osDelay>
	} while (MesRx.Canid != EncoderID[MotorID-1] && timeout < 10);
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <NMTmanagement+0x84>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	490d      	ldr	r1, [pc, #52]	@ (8002fcc <NMTmanagement+0x88>)
 8002f96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d002      	beq.n	8002fa4 <NMTmanagement+0x60>
 8002f9e:	89fb      	ldrh	r3, [r7, #14]
 8002fa0:	2b09      	cmp	r3, #9
 8002fa2:	d9e6      	bls.n	8002f72 <NMTmanagement+0x2e>

	return MesRx.Canid == EncoderID[MotorID-1]? false : true ;
 8002fa4:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <NMTmanagement+0x84>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	4907      	ldr	r1, [pc, #28]	@ (8002fcc <NMTmanagement+0x88>)
 8002fae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	bf14      	ite	ne
 8002fb6:	2301      	movne	r3, #1
 8002fb8:	2300      	moveq	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000298 	.word	0x20000298
 8002fc8:	20000318 	.word	0x20000318
 8002fcc:	20000040 	.word	0x20000040

08002fd0 <readParameter>:

void readParameter()
{
 8002fd0:	b490      	push	{r4, r7}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
	for(int i=0; i<MNum; i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	e05f      	b.n	800309c <readParameter+0xcc>
	{
		if(MesRx.Canid == EncoderID[i])
 8002fdc:	4b34      	ldr	r3, [pc, #208]	@ (80030b0 <readParameter+0xe0>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4934      	ldr	r1, [pc, #208]	@ (80030b4 <readParameter+0xe4>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d116      	bne.n	800301a <readParameter+0x4a>
		{
			Kincoparam[i].SpeedReal = Kincoparameter.SpeedReal;
 8002fec:	4b32      	ldr	r3, [pc, #200]	@ (80030b8 <readParameter+0xe8>)
 8002fee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ff0:	4832      	ldr	r0, [pc, #200]	@ (80030bc <readParameter+0xec>)
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4403      	add	r3, r0
 8002ffe:	3324      	adds	r3, #36	@ 0x24
 8003000:	6019      	str	r1, [r3, #0]
			Kincoparam[i].PosActual = Kincoparameter.PosActual;
 8003002:	4b2d      	ldr	r3, [pc, #180]	@ (80030b8 <readParameter+0xe8>)
 8003004:	6a19      	ldr	r1, [r3, #32]
 8003006:	482d      	ldr	r0, [pc, #180]	@ (80030bc <readParameter+0xec>)
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4403      	add	r3, r0
 8003014:	3320      	adds	r3, #32
 8003016:	6019      	str	r1, [r3, #0]
 8003018:	e03d      	b.n	8003096 <readParameter+0xc6>
		} else if (MesRx.Canid == CurrentID[i])
 800301a:	4b25      	ldr	r3, [pc, #148]	@ (80030b0 <readParameter+0xe0>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4928      	ldr	r1, [pc, #160]	@ (80030c0 <readParameter+0xf0>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003026:	429a      	cmp	r2, r3
 8003028:	d135      	bne.n	8003096 <readParameter+0xc6>
		{
			Kincoparam[i].Error_code   = Kincoparameter.Error_code ;
 800302a:	4b23      	ldr	r3, [pc, #140]	@ (80030b8 <readParameter+0xe8>)
 800302c:	8898      	ldrh	r0, [r3, #4]
 800302e:	4923      	ldr	r1, [pc, #140]	@ (80030bc <readParameter+0xec>)
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	440b      	add	r3, r1
 800303c:	3304      	adds	r3, #4
 800303e:	4602      	mov	r2, r0
 8003040:	801a      	strh	r2, [r3, #0]
			Kincoparam[i].Error_status = Kincoparameter.Error_status;
 8003042:	491e      	ldr	r1, [pc, #120]	@ (80030bc <readParameter+0xec>)
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	4a19      	ldr	r2, [pc, #100]	@ (80030b8 <readParameter+0xe8>)
 8003052:	3306      	adds	r3, #6
 8003054:	3206      	adds	r2, #6
 8003056:	6814      	ldr	r4, [r2, #0]
 8003058:	6850      	ldr	r0, [r2, #4]
 800305a:	6891      	ldr	r1, [r2, #8]
 800305c:	68d2      	ldr	r2, [r2, #12]
 800305e:	601c      	str	r4, [r3, #0]
 8003060:	6058      	str	r0, [r3, #4]
 8003062:	6099      	str	r1, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
			Kincoparam[i].I_q          = Kincoparameter.I_q;
 8003066:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <readParameter+0xe8>)
 8003068:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800306c:	4913      	ldr	r1, [pc, #76]	@ (80030bc <readParameter+0xec>)
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	440b      	add	r3, r1
 800307a:	3302      	adds	r3, #2
 800307c:	4602      	mov	r2, r0
 800307e:	801a      	strh	r2, [r3, #0]
			Kincoparam[i].motorconnect = Kincoparameter.motorconnect;
 8003080:	4b0d      	ldr	r3, [pc, #52]	@ (80030b8 <readParameter+0xe8>)
 8003082:	7818      	ldrb	r0, [r3, #0]
 8003084:	490d      	ldr	r1, [pc, #52]	@ (80030bc <readParameter+0xec>)
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	4602      	mov	r2, r0
 8003094:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<MNum; i++)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3301      	adds	r3, #1
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	dd9c      	ble.n	8002fdc <readParameter+0xc>
		}

	}
}
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc90      	pop	{r4, r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000318 	.word	0x20000318
 80030b4:	20000040 	.word	0x20000040
 80030b8:	2000032c 	.word	0x2000032c
 80030bc:	20000354 	.word	0x20000354
 80030c0:	20000048 	.word	0x20000048

080030c4 <motorControl>:

void motorControl( bool en, bool error, uint8_t dir, double speed )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	ed87 0b00 	vstr	d0, [r7]
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	460b      	mov	r3, r1
 80030d4:	73bb      	strb	r3, [r7, #14]
 80030d6:	4613      	mov	r3, r2
 80030d8:	737b      	strb	r3, [r7, #13]
	static bool isStop;
	if ((!en || error) && isStop == false)
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	f083 0301 	eor.w	r3, r3, #1
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d102      	bne.n	80030ec <motorControl+0x28>
 80030e6:	7bbb      	ldrb	r3, [r7, #14]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d016      	beq.n	800311a <motorControl+0x56>
 80030ec:	4b2d      	ldr	r3, [pc, #180]	@ (80031a4 <motorControl+0xe0>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	f083 0301 	eor.w	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00f      	beq.n	800311a <motorControl+0x56>
	{
		Kincoparameter.TargetSpeed = 0 ;
 80030fa:	4b2b      	ldr	r3, [pc, #172]	@ (80031a8 <motorControl+0xe4>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
		SetControlWord(ControlWord_DIS, MotorID[0]); // disable motor
 8003100:	4b2a      	ldr	r3, [pc, #168]	@ (80031ac <motorControl+0xe8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4619      	mov	r1, r3
 8003106:	2006      	movs	r0, #6
 8003108:	f7ff fcfc 	bl	8002b04 <SetControlWord>
		isStop = true ;
 800310c:	4b25      	ldr	r3, [pc, #148]	@ (80031a4 <motorControl+0xe0>)
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
		printf("admin stop/////////////////////////\n");
 8003112:	4827      	ldr	r0, [pc, #156]	@ (80031b0 <motorControl+0xec>)
 8003114:	f005 fce0 	bl	8008ad8 <puts>
			Kincoparameter.TargetSpeed = 0 ;
		}
		SetSpeed(Kincoparameter.TargetSpeed, SetSpeedPDO[0]);
	}

}
 8003118:	e040      	b.n	800319c <motorControl+0xd8>
	} else if(en && !error)
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d03d      	beq.n	800319c <motorControl+0xd8>
 8003120:	7bbb      	ldrb	r3, [r7, #14]
 8003122:	f083 0301 	eor.w	r3, r3, #1
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d037      	beq.n	800319c <motorControl+0xd8>
		if(isStop)
 800312c:	4b1d      	ldr	r3, [pc, #116]	@ (80031a4 <motorControl+0xe0>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <motorControl+0x88>
			SetControlWord(ControlWord_EN, MotorID[0]); // enable motor
 8003134:	4b1d      	ldr	r3, [pc, #116]	@ (80031ac <motorControl+0xe8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	200f      	movs	r0, #15
 800313c:	f7ff fce2 	bl	8002b04 <SetControlWord>
			isStop = false;
 8003140:	4b18      	ldr	r3, [pc, #96]	@ (80031a4 <motorControl+0xe0>)
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
			printf("admin disstop/////////////////////////\n");
 8003146:	481b      	ldr	r0, [pc, #108]	@ (80031b4 <motorControl+0xf0>)
 8003148:	f005 fcc6 	bl	8008ad8 <puts>
		if(dir == 1 || dir == 2)
 800314c:	7b7b      	ldrb	r3, [r7, #13]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d002      	beq.n	8003158 <motorControl+0x94>
 8003152:	7b7b      	ldrb	r3, [r7, #13]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d107      	bne.n	8003168 <motorControl+0xa4>
			Kincoparameter.TargetSpeed = speedToRpm(speed);
 8003158:	ed97 0b00 	vldr	d0, [r7]
 800315c:	f000 f82e 	bl	80031bc <speedToRpm>
 8003160:	4603      	mov	r3, r0
 8003162:	4a11      	ldr	r2, [pc, #68]	@ (80031a8 <motorControl+0xe4>)
 8003164:	6193      	str	r3, [r2, #24]
 8003166:	e011      	b.n	800318c <motorControl+0xc8>
		}else if(dir == 3 || dir == 4)
 8003168:	7b7b      	ldrb	r3, [r7, #13]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d002      	beq.n	8003174 <motorControl+0xb0>
 800316e:	7b7b      	ldrb	r3, [r7, #13]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d108      	bne.n	8003186 <motorControl+0xc2>
			Kincoparameter.TargetSpeed = -speedToRpm(speed);
 8003174:	ed97 0b00 	vldr	d0, [r7]
 8003178:	f000 f820 	bl	80031bc <speedToRpm>
 800317c:	4603      	mov	r3, r0
 800317e:	425b      	negs	r3, r3
 8003180:	4a09      	ldr	r2, [pc, #36]	@ (80031a8 <motorControl+0xe4>)
 8003182:	6193      	str	r3, [r2, #24]
 8003184:	e002      	b.n	800318c <motorControl+0xc8>
			Kincoparameter.TargetSpeed = 0 ;
 8003186:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <motorControl+0xe4>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
		SetSpeed(Kincoparameter.TargetSpeed, SetSpeedPDO[0]);
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <motorControl+0xe4>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	4a09      	ldr	r2, [pc, #36]	@ (80031b8 <motorControl+0xf4>)
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fe56 	bl	8002e48 <SetSpeed>
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	200003a5 	.word	0x200003a5
 80031a8:	2000032c 	.word	0x2000032c
 80031ac:	20000030 	.word	0x20000030
 80031b0:	0800927c 	.word	0x0800927c
 80031b4:	080092a0 	.word	0x080092a0
 80031b8:	20000038 	.word	0x20000038

080031bc <speedToRpm>:
    // Calculate speed (m/s)
    double speed = (wheelCircumference * wheelRPM) / 60.0;
	return speed ;
}
int speedToRpm (double speed)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	ed87 0b00 	vstr	d0, [r7]
    // Calculate Circumference (C = pi * D)
    double wheelCircumference =  whellConfig.PI * whellConfig.wheelDiameter;
 80031c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003230 <speedToRpm+0x74>)
 80031c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031cc:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <speedToRpm+0x74>)
 80031ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031d2:	f7fd f9b9 	bl	8000548 <__aeabi_dmul>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// Calculate rpm
	double wheelRPM = (speed*60)/wheelCircumference;
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	4b14      	ldr	r3, [pc, #80]	@ (8003234 <speedToRpm+0x78>)
 80031e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031e8:	f7fd f9ae 	bl	8000548 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f8:	f7fd fad0 	bl	800079c <__aeabi_ddiv>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int rpm = wheelRPM * whellConfig.ratio ;
 8003204:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <speedToRpm+0x74>)
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd f933 	bl	8000474 <__aeabi_i2d>
 800320e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003212:	f7fd f999 	bl	8000548 <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	f7fd fba5 	bl	800096c <__aeabi_d2iz>
 8003222:	4603      	mov	r3, r0
 8003224:	60fb      	str	r3, [r7, #12]
	return rpm ;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3720      	adds	r7, #32
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000018 	.word	0x20000018
 8003234:	404e0000 	.word	0x404e0000

08003238 <speedToRps>:

int speedToRps (double speed)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	ed87 0b00 	vstr	d0, [r7]
	return (speedToRpm(speed)/60);
 8003242:	ed97 0b00 	vldr	d0, [r7]
 8003246:	f7ff ffb9 	bl	80031bc <speedToRpm>
 800324a:	4603      	mov	r3, r0
 800324c:	4a05      	ldr	r2, [pc, #20]	@ (8003264 <speedToRps+0x2c>)
 800324e:	fb82 1203 	smull	r1, r2, r2, r3
 8003252:	441a      	add	r2, r3
 8003254:	1152      	asrs	r2, r2, #5
 8003256:	17db      	asrs	r3, r3, #31
 8003258:	1ad3      	subs	r3, r2, r3
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	88888889 	.word	0x88888889

08003268 <hydraulicSetState>:
/**
 * @brief    Xuất tín hiệu điều khiển xylanh.
 * @param state: bảng trạng thái điều khiển xylanh
 */

void hydraulicSetState(struct HydraulicTableControl state) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, (GPIO_PinState) state.valve2);
 8003270:	797b      	ldrb	r3, [r7, #5]
 8003272:	461a      	mov	r2, r3
 8003274:	2120      	movs	r1, #32
 8003276:	481d      	ldr	r0, [pc, #116]	@ (80032ec <hydraulicSetState+0x84>)
 8003278:	f001 f9dc 	bl	8004634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, (GPIO_PinState) state.valve3);
 800327c:	79bb      	ldrb	r3, [r7, #6]
 800327e:	461a      	mov	r2, r3
 8003280:	2140      	movs	r1, #64	@ 0x40
 8003282:	481a      	ldr	r0, [pc, #104]	@ (80032ec <hydraulicSetState+0x84>)
 8003284:	f001 f9d6 	bl	8004634 <HAL_GPIO_WritePin>

	if (state.pump == 1) {
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d114      	bne.n	80032b8 <hydraulicSetState+0x50>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, (GPIO_PinState) state.valve1);
 800328e:	793b      	ldrb	r3, [r7, #4]
 8003290:	461a      	mov	r2, r3
 8003292:	2110      	movs	r1, #16
 8003294:	4815      	ldr	r0, [pc, #84]	@ (80032ec <hydraulicSetState+0x84>)
 8003296:	f001 f9cd 	bl	8004634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, (GPIO_PinState) state.pump);
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	461a      	mov	r2, r3
 800329e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032a2:	4812      	ldr	r0, [pc, #72]	@ (80032ec <hydraulicSetState+0x84>)
 80032a4:	f001 f9c6 	bl	8004634 <HAL_GPIO_WritePin>
		mcp4922.setDAC(1024, 1024);
 80032a8:	4b11      	ldr	r3, [pc, #68]	@ (80032f0 <hydraulicSetState+0x88>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80032b0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80032b4:	4798      	blx	r3
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, (GPIO_PinState) state.valve1);
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, (GPIO_PinState) state.pump);
		mcp4922.setDAC(0, 0);

	}
}
 80032b6:	e014      	b.n	80032e2 <hydraulicSetState+0x7a>
		osDelay(100);
 80032b8:	2064      	movs	r0, #100	@ 0x64
 80032ba:	f002 fe53 	bl	8005f64 <osDelay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, (GPIO_PinState) state.valve1);
 80032be:	793b      	ldrb	r3, [r7, #4]
 80032c0:	461a      	mov	r2, r3
 80032c2:	2110      	movs	r1, #16
 80032c4:	4809      	ldr	r0, [pc, #36]	@ (80032ec <hydraulicSetState+0x84>)
 80032c6:	f001 f9b5 	bl	8004634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, (GPIO_PinState) state.pump);
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	461a      	mov	r2, r3
 80032ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032d2:	4806      	ldr	r0, [pc, #24]	@ (80032ec <hydraulicSetState+0x84>)
 80032d4:	f001 f9ae 	bl	8004634 <HAL_GPIO_WritePin>
		mcp4922.setDAC(0, 0);
 80032d8:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <hydraulicSetState+0x88>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2100      	movs	r1, #0
 80032de:	2000      	movs	r0, #0
 80032e0:	4798      	blx	r3
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40021800 	.word	0x40021800
 80032f0:	2000000c 	.word	0x2000000c

080032f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <HAL_Init+0x40>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003334 <HAL_Init+0x40>)
 80032fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <HAL_Init+0x40>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0a      	ldr	r2, [pc, #40]	@ (8003334 <HAL_Init+0x40>)
 800330a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800330e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003310:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <HAL_Init+0x40>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a07      	ldr	r2, [pc, #28]	@ (8003334 <HAL_Init+0x40>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800331c:	2003      	movs	r0, #3
 800331e:	f000 ff93 	bl	8004248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003322:	200f      	movs	r0, #15
 8003324:	f000 f808 	bl	8003338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003328:	f7fe fc76 	bl	8001c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00

08003338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003340:	4b12      	ldr	r3, [pc, #72]	@ (800338c <HAL_InitTick+0x54>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <HAL_InitTick+0x58>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4619      	mov	r1, r3
 800334a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800334e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003352:	fbb2 f3f3 	udiv	r3, r2, r3
 8003356:	4618      	mov	r0, r3
 8003358:	f000 ffab 	bl	80042b2 <HAL_SYSTICK_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e00e      	b.n	8003384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b0f      	cmp	r3, #15
 800336a:	d80a      	bhi.n	8003382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800336c:	2200      	movs	r2, #0
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	f000 ff73 	bl	800425e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003378:	4a06      	ldr	r2, [pc, #24]	@ (8003394 <HAL_InitTick+0x5c>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000000 	.word	0x20000000
 8003390:	20000054 	.word	0x20000054
 8003394:	20000050 	.word	0x20000050

08003398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800339c:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <HAL_IncTick+0x20>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <HAL_IncTick+0x24>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	4a04      	ldr	r2, [pc, #16]	@ (80033bc <HAL_IncTick+0x24>)
 80033aa:	6013      	str	r3, [r2, #0]
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000054 	.word	0x20000054
 80033bc:	200003a8 	.word	0x200003a8

080033c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return uwTick;
 80033c4:	4b03      	ldr	r3, [pc, #12]	@ (80033d4 <HAL_GetTick+0x14>)
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	200003a8 	.word	0x200003a8

080033d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e0ed      	b.n	80035c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fc3a 	bl	8001c70 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800340c:	f7ff ffd8 	bl	80033c0 <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003412:	e012      	b.n	800343a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003414:	f7ff ffd4 	bl	80033c0 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b0a      	cmp	r3, #10
 8003420:	d90b      	bls.n	800343a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2205      	movs	r2, #5
 8003432:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e0c5      	b.n	80035c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0e5      	beq.n	8003414 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0202 	bic.w	r2, r2, #2
 8003456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003458:	f7ff ffb2 	bl	80033c0 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800345e:	e012      	b.n	8003486 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003460:	f7ff ffae 	bl	80033c0 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b0a      	cmp	r3, #10
 800346c:	d90b      	bls.n	8003486 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2205      	movs	r2, #5
 800347e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e09f      	b.n	80035c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e5      	bne.n	8003460 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7e1b      	ldrb	r3, [r3, #24]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d108      	bne.n	80034ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e007      	b.n	80034be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7e5b      	ldrb	r3, [r3, #25]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d108      	bne.n	80034d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e007      	b.n	80034e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7e9b      	ldrb	r3, [r3, #26]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d108      	bne.n	8003502 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0220 	orr.w	r2, r2, #32
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	e007      	b.n	8003512 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0220 	bic.w	r2, r2, #32
 8003510:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	7edb      	ldrb	r3, [r3, #27]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d108      	bne.n	800352c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0210 	bic.w	r2, r2, #16
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e007      	b.n	800353c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0210 	orr.w	r2, r2, #16
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7f1b      	ldrb	r3, [r3, #28]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d108      	bne.n	8003556 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0208 	orr.w	r2, r2, #8
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e007      	b.n	8003566 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0208 	bic.w	r2, r2, #8
 8003564:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	7f5b      	ldrb	r3, [r3, #29]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d108      	bne.n	8003580 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0204 	orr.w	r2, r2, #4
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e007      	b.n	8003590 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0204 	bic.w	r2, r2, #4
 800358e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	ea42 0103 	orr.w	r1, r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	1e5a      	subs	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d003      	beq.n	80035f6 <HAL_CAN_ConfigFilter+0x26>
 80035ee:	7cfb      	ldrb	r3, [r7, #19]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	f040 80be 	bne.w	8003772 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80035f6:	4b65      	ldr	r3, [pc, #404]	@ (800378c <HAL_CAN_ConfigFilter+0x1bc>)
 80035f8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003600:	f043 0201 	orr.w	r2, r3, #1
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003610:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	431a      	orrs	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	2201      	movs	r2, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	43db      	mvns	r3, r3
 8003648:	401a      	ands	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d123      	bne.n	80036a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	43db      	mvns	r3, r3
 8003662:	401a      	ands	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800367a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3248      	adds	r2, #72	@ 0x48
 8003680:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003694:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003696:	6979      	ldr	r1, [r7, #20]
 8003698:	3348      	adds	r3, #72	@ 0x48
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d122      	bne.n	80036ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	3248      	adds	r2, #72	@ 0x48
 80036ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036e4:	6979      	ldr	r1, [r7, #20]
 80036e6:	3348      	adds	r3, #72	@ 0x48
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	440b      	add	r3, r1
 80036ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	43db      	mvns	r3, r3
 8003700:	401a      	ands	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003708:	e007      	b.n	800371a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	431a      	orrs	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43db      	mvns	r3, r3
 800372c:	401a      	ands	r2, r3
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003734:	e007      	b.n	8003746 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	431a      	orrs	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	431a      	orrs	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003764:	f023 0201 	bic.w	r2, r3, #1
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e006      	b.n	8003780 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
  }
}
 8003780:	4618      	mov	r0, r3
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	40006400 	.word	0x40006400

08003790 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d12e      	bne.n	8003802 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037bc:	f7ff fe00 	bl	80033c0 <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037c2:	e012      	b.n	80037ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037c4:	f7ff fdfc 	bl	80033c0 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b0a      	cmp	r3, #10
 80037d0:	d90b      	bls.n	80037ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2205      	movs	r2, #5
 80037e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e012      	b.n	8003810 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e006      	b.n	8003810 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
  }
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	@ 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003836:	7ffb      	ldrb	r3, [r7, #31]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d003      	beq.n	8003844 <HAL_CAN_AddTxMessage+0x2c>
 800383c:	7ffb      	ldrb	r3, [r7, #31]
 800383e:	2b02      	cmp	r3, #2
 8003840:	f040 80ad 	bne.w	800399e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8095 	beq.w	800398e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	0e1b      	lsrs	r3, r3, #24
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800386e:	2201      	movs	r2, #1
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	409a      	lsls	r2, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10d      	bne.n	800389c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800388a:	68f9      	ldr	r1, [r7, #12]
 800388c:	6809      	ldr	r1, [r1, #0]
 800388e:	431a      	orrs	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	3318      	adds	r3, #24
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	440b      	add	r3, r1
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e00f      	b.n	80038bc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038a6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038ac:	68f9      	ldr	r1, [r7, #12]
 80038ae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80038b0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3318      	adds	r3, #24
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	440b      	add	r3, r1
 80038ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3318      	adds	r3, #24
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	440b      	add	r3, r1
 80038cc:	3304      	adds	r3, #4
 80038ce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	7d1b      	ldrb	r3, [r3, #20]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d111      	bne.n	80038fc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3318      	adds	r3, #24
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	6811      	ldr	r1, [r2, #0]
 80038ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3318      	adds	r3, #24
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	440b      	add	r3, r1
 80038f8:	3304      	adds	r3, #4
 80038fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3307      	adds	r3, #7
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	061a      	lsls	r2, r3, #24
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3306      	adds	r3, #6
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3305      	adds	r3, #5
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	4313      	orrs	r3, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	3204      	adds	r2, #4
 800391c:	7812      	ldrb	r2, [r2, #0]
 800391e:	4610      	mov	r0, r2
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	6811      	ldr	r1, [r2, #0]
 8003924:	ea43 0200 	orr.w	r2, r3, r0
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	440b      	add	r3, r1
 800392e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003932:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3303      	adds	r3, #3
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	061a      	lsls	r2, r3, #24
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3302      	adds	r3, #2
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3301      	adds	r3, #1
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	4313      	orrs	r3, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	7812      	ldrb	r2, [r2, #0]
 8003954:	4610      	mov	r0, r2
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	6811      	ldr	r1, [r2, #0]
 800395a:	ea43 0200 	orr.w	r2, r3, r0
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	440b      	add	r3, r1
 8003964:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003968:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3318      	adds	r3, #24
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	4413      	add	r3, r2
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	6811      	ldr	r1, [r2, #0]
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	3318      	adds	r3, #24
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	440b      	add	r3, r1
 8003988:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e00e      	b.n	80039ac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e006      	b.n	80039ac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3724      	adds	r7, #36	@ 0x24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039cc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d003      	beq.n	80039dc <HAL_CAN_GetRxMessage+0x24>
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	f040 8103 	bne.w	8003be2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10e      	bne.n	8003a00 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d116      	bne.n	8003a1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0f7      	b.n	8003bf0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d107      	bne.n	8003a1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0e8      	b.n	8003bf0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	331b      	adds	r3, #27
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	4413      	add	r3, r2
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0204 	and.w	r2, r3, #4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10c      	bne.n	8003a56 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	331b      	adds	r3, #27
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	4413      	add	r3, r2
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	0d5b      	lsrs	r3, r3, #21
 8003a4c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e00b      	b.n	8003a6e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	331b      	adds	r3, #27
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	4413      	add	r3, r2
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	331b      	adds	r3, #27
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	4413      	add	r3, r2
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0202 	and.w	r2, r3, #2
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	331b      	adds	r3, #27
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	4413      	add	r3, r2
 8003a90:	3304      	adds	r3, #4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	611a      	str	r2, [r3, #16]
 8003aa2:	e00b      	b.n	8003abc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	331b      	adds	r3, #27
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	4413      	add	r3, r2
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 020f 	and.w	r2, r3, #15
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	331b      	adds	r3, #27
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3304      	adds	r3, #4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	331b      	adds	r3, #27
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	4413      	add	r3, r2
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	0a1a      	lsrs	r2, r3, #8
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	3301      	adds	r3, #1
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	0c1a      	lsrs	r2, r3, #16
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	3302      	adds	r3, #2
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	0e1a      	lsrs	r2, r3, #24
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	3303      	adds	r3, #3
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	3304      	adds	r3, #4
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0a1a      	lsrs	r2, r3, #8
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	3305      	adds	r3, #5
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0c1a      	lsrs	r2, r3, #16
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	3306      	adds	r3, #6
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0e1a      	lsrs	r2, r3, #24
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	3307      	adds	r3, #7
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d108      	bne.n	8003bce <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0220 	orr.w	r2, r2, #32
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	e007      	b.n	8003bde <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0220 	orr.w	r2, r2, #32
 8003bdc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e006      	b.n	8003bf0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c0c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d002      	beq.n	8003c1a <HAL_CAN_ActivateNotification+0x1e>
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d109      	bne.n	8003c2e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6959      	ldr	r1, [r3, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e006      	b.n	8003c3c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	@ 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c50:	2300      	movs	r3, #0
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d07c      	beq.n	8003d88 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d023      	beq.n	8003ce0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f983 	bl	8003fb6 <HAL_CAN_TxMailbox0CompleteCallback>
 8003cb0:	e016      	b.n	8003ce0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc4:	e00c      	b.n	8003ce0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd8:	e002      	b.n	8003ce0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f989 	bl	8003ff2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d024      	beq.n	8003d34 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cf2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f963 	bl	8003fca <HAL_CAN_TxMailbox1CompleteCallback>
 8003d04:	e016      	b.n	8003d34 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d004      	beq.n	8003d1a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d18:	e00c      	b.n	8003d34 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d2c:	e002      	b.n	8003d34 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f969 	bl	8004006 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d024      	beq.n	8003d88 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003d46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f943 	bl	8003fde <HAL_CAN_TxMailbox2CompleteCallback>
 8003d58:	e016      	b.n	8003d88 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d004      	beq.n	8003d6e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d6c:	e00c      	b.n	8003d88 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d80:	e002      	b.n	8003d88 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f949 	bl	800401a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2210      	movs	r2, #16
 8003daa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d006      	beq.n	8003dce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f930 	bl	800402e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fe fa18 	bl	800221c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00c      	beq.n	8003e10 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d006      	beq.n	8003e32 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f912 	bl	8004056 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f8f9 	bl	8004042 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d006      	beq.n	8003e72 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f8fc 	bl	800406a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00b      	beq.n	8003e94 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d006      	beq.n	8003e94 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f8f5 	bl	800407e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d07b      	beq.n	8003f96 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d072      	beq.n	8003f8e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	f043 0302 	orr.w	r3, r3, #2
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	f043 0304 	orr.w	r3, r3, #4
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d043      	beq.n	8003f8e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d03e      	beq.n	8003f8e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f16:	2b60      	cmp	r3, #96	@ 0x60
 8003f18:	d02b      	beq.n	8003f72 <HAL_CAN_IRQHandler+0x32a>
 8003f1a:	2b60      	cmp	r3, #96	@ 0x60
 8003f1c:	d82e      	bhi.n	8003f7c <HAL_CAN_IRQHandler+0x334>
 8003f1e:	2b50      	cmp	r3, #80	@ 0x50
 8003f20:	d022      	beq.n	8003f68 <HAL_CAN_IRQHandler+0x320>
 8003f22:	2b50      	cmp	r3, #80	@ 0x50
 8003f24:	d82a      	bhi.n	8003f7c <HAL_CAN_IRQHandler+0x334>
 8003f26:	2b40      	cmp	r3, #64	@ 0x40
 8003f28:	d019      	beq.n	8003f5e <HAL_CAN_IRQHandler+0x316>
 8003f2a:	2b40      	cmp	r3, #64	@ 0x40
 8003f2c:	d826      	bhi.n	8003f7c <HAL_CAN_IRQHandler+0x334>
 8003f2e:	2b30      	cmp	r3, #48	@ 0x30
 8003f30:	d010      	beq.n	8003f54 <HAL_CAN_IRQHandler+0x30c>
 8003f32:	2b30      	cmp	r3, #48	@ 0x30
 8003f34:	d822      	bhi.n	8003f7c <HAL_CAN_IRQHandler+0x334>
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d002      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x2f8>
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d005      	beq.n	8003f4a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f3e:	e01d      	b.n	8003f7c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	f043 0308 	orr.w	r3, r3, #8
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f48:	e019      	b.n	8003f7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	f043 0310 	orr.w	r3, r3, #16
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f52:	e014      	b.n	8003f7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	f043 0320 	orr.w	r3, r3, #32
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f5c:	e00f      	b.n	8003f7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f66:	e00a      	b.n	8003f7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f70:	e005      	b.n	8003f7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f7a:	e000      	b.n	8003f7e <HAL_CAN_IRQHandler+0x336>
            break;
 8003f7c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003f8c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2204      	movs	r2, #4
 8003f94:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f872 	bl	8004092 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003fae:	bf00      	nop
 8003fb0:	3728      	adds	r7, #40	@ 0x28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b8:	4b0c      	ldr	r3, [pc, #48]	@ (80040ec <__NVIC_SetPriorityGrouping+0x44>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040c4:	4013      	ands	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040da:	4a04      	ldr	r2, [pc, #16]	@ (80040ec <__NVIC_SetPriorityGrouping+0x44>)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	60d3      	str	r3, [r2, #12]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f4:	4b04      	ldr	r3, [pc, #16]	@ (8004108 <__NVIC_GetPriorityGrouping+0x18>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	f003 0307 	and.w	r3, r3, #7
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	2b00      	cmp	r3, #0
 800411c:	db0b      	blt.n	8004136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	f003 021f 	and.w	r2, r3, #31
 8004124:	4907      	ldr	r1, [pc, #28]	@ (8004144 <__NVIC_EnableIRQ+0x38>)
 8004126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2001      	movs	r0, #1
 800412e:	fa00 f202 	lsl.w	r2, r0, r2
 8004132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000e100 	.word	0xe000e100

08004148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	6039      	str	r1, [r7, #0]
 8004152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004158:	2b00      	cmp	r3, #0
 800415a:	db0a      	blt.n	8004172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	490c      	ldr	r1, [pc, #48]	@ (8004194 <__NVIC_SetPriority+0x4c>)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	0112      	lsls	r2, r2, #4
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	440b      	add	r3, r1
 800416c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004170:	e00a      	b.n	8004188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4908      	ldr	r1, [pc, #32]	@ (8004198 <__NVIC_SetPriority+0x50>)
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	3b04      	subs	r3, #4
 8004180:	0112      	lsls	r2, r2, #4
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	440b      	add	r3, r1
 8004186:	761a      	strb	r2, [r3, #24]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000e100 	.word	0xe000e100
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800419c:	b480      	push	{r7}
 800419e:	b089      	sub	sp, #36	@ 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f1c3 0307 	rsb	r3, r3, #7
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	bf28      	it	cs
 80041ba:	2304      	movcs	r3, #4
 80041bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2b06      	cmp	r3, #6
 80041c4:	d902      	bls.n	80041cc <NVIC_EncodePriority+0x30>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3b03      	subs	r3, #3
 80041ca:	e000      	b.n	80041ce <NVIC_EncodePriority+0x32>
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	401a      	ands	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e4:	f04f 31ff 	mov.w	r1, #4294967295
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	43d9      	mvns	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f4:	4313      	orrs	r3, r2
         );
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3724      	adds	r7, #36	@ 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3b01      	subs	r3, #1
 8004210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004214:	d301      	bcc.n	800421a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004216:	2301      	movs	r3, #1
 8004218:	e00f      	b.n	800423a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800421a:	4a0a      	ldr	r2, [pc, #40]	@ (8004244 <SysTick_Config+0x40>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004222:	210f      	movs	r1, #15
 8004224:	f04f 30ff 	mov.w	r0, #4294967295
 8004228:	f7ff ff8e 	bl	8004148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800422c:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <SysTick_Config+0x40>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004232:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <SysTick_Config+0x40>)
 8004234:	2207      	movs	r2, #7
 8004236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	e000e010 	.word	0xe000e010

08004248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ff29 	bl	80040a8 <__NVIC_SetPriorityGrouping>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800425e:	b580      	push	{r7, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	4603      	mov	r3, r0
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004270:	f7ff ff3e 	bl	80040f0 <__NVIC_GetPriorityGrouping>
 8004274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	f7ff ff8e 	bl	800419c <NVIC_EncodePriority>
 8004280:	4602      	mov	r2, r0
 8004282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff5d 	bl	8004148 <__NVIC_SetPriority>
}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	4603      	mov	r3, r0
 800429e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff31 	bl	800410c <__NVIC_EnableIRQ>
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff ffa2 	bl	8004204 <SysTick_Config>
 80042c0:	4603      	mov	r3, r0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b089      	sub	sp, #36	@ 0x24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042de:	2300      	movs	r3, #0
 80042e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	e16b      	b.n	80045c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042e8:	2201      	movs	r2, #1
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4013      	ands	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	429a      	cmp	r2, r3
 8004302:	f040 815a 	bne.w	80045ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b01      	cmp	r3, #1
 8004310:	d005      	beq.n	800431e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800431a:	2b02      	cmp	r3, #2
 800431c:	d130      	bne.n	8004380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	2203      	movs	r2, #3
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004354:	2201      	movs	r2, #1
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 0201 	and.w	r2, r3, #1
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b03      	cmp	r3, #3
 800438a:	d017      	beq.n	80043bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	2203      	movs	r2, #3
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d123      	bne.n	8004410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	08da      	lsrs	r2, r3, #3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3208      	adds	r2, #8
 80043d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	220f      	movs	r2, #15
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	43db      	mvns	r3, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4013      	ands	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	08da      	lsrs	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3208      	adds	r2, #8
 800440a:	69b9      	ldr	r1, [r7, #24]
 800440c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 0203 	and.w	r2, r3, #3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80b4 	beq.w	80045ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	4b60      	ldr	r3, [pc, #384]	@ (80045d8 <HAL_GPIO_Init+0x30c>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	4a5f      	ldr	r2, [pc, #380]	@ (80045d8 <HAL_GPIO_Init+0x30c>)
 800445c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004460:	6453      	str	r3, [r2, #68]	@ 0x44
 8004462:	4b5d      	ldr	r3, [pc, #372]	@ (80045d8 <HAL_GPIO_Init+0x30c>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800446e:	4a5b      	ldr	r2, [pc, #364]	@ (80045dc <HAL_GPIO_Init+0x310>)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	089b      	lsrs	r3, r3, #2
 8004474:	3302      	adds	r3, #2
 8004476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	220f      	movs	r2, #15
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a52      	ldr	r2, [pc, #328]	@ (80045e0 <HAL_GPIO_Init+0x314>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d02b      	beq.n	80044f2 <HAL_GPIO_Init+0x226>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a51      	ldr	r2, [pc, #324]	@ (80045e4 <HAL_GPIO_Init+0x318>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d025      	beq.n	80044ee <HAL_GPIO_Init+0x222>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a50      	ldr	r2, [pc, #320]	@ (80045e8 <HAL_GPIO_Init+0x31c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01f      	beq.n	80044ea <HAL_GPIO_Init+0x21e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a4f      	ldr	r2, [pc, #316]	@ (80045ec <HAL_GPIO_Init+0x320>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d019      	beq.n	80044e6 <HAL_GPIO_Init+0x21a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a4e      	ldr	r2, [pc, #312]	@ (80045f0 <HAL_GPIO_Init+0x324>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <HAL_GPIO_Init+0x216>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a4d      	ldr	r2, [pc, #308]	@ (80045f4 <HAL_GPIO_Init+0x328>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00d      	beq.n	80044de <HAL_GPIO_Init+0x212>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4c      	ldr	r2, [pc, #304]	@ (80045f8 <HAL_GPIO_Init+0x32c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d007      	beq.n	80044da <HAL_GPIO_Init+0x20e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4b      	ldr	r2, [pc, #300]	@ (80045fc <HAL_GPIO_Init+0x330>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <HAL_GPIO_Init+0x20a>
 80044d2:	2307      	movs	r3, #7
 80044d4:	e00e      	b.n	80044f4 <HAL_GPIO_Init+0x228>
 80044d6:	2308      	movs	r3, #8
 80044d8:	e00c      	b.n	80044f4 <HAL_GPIO_Init+0x228>
 80044da:	2306      	movs	r3, #6
 80044dc:	e00a      	b.n	80044f4 <HAL_GPIO_Init+0x228>
 80044de:	2305      	movs	r3, #5
 80044e0:	e008      	b.n	80044f4 <HAL_GPIO_Init+0x228>
 80044e2:	2304      	movs	r3, #4
 80044e4:	e006      	b.n	80044f4 <HAL_GPIO_Init+0x228>
 80044e6:	2303      	movs	r3, #3
 80044e8:	e004      	b.n	80044f4 <HAL_GPIO_Init+0x228>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e002      	b.n	80044f4 <HAL_GPIO_Init+0x228>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <HAL_GPIO_Init+0x228>
 80044f2:	2300      	movs	r3, #0
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	f002 0203 	and.w	r2, r2, #3
 80044fa:	0092      	lsls	r2, r2, #2
 80044fc:	4093      	lsls	r3, r2
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004504:	4935      	ldr	r1, [pc, #212]	@ (80045dc <HAL_GPIO_Init+0x310>)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	3302      	adds	r3, #2
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004512:	4b3b      	ldr	r3, [pc, #236]	@ (8004600 <HAL_GPIO_Init+0x334>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	43db      	mvns	r3, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004536:	4a32      	ldr	r2, [pc, #200]	@ (8004600 <HAL_GPIO_Init+0x334>)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800453c:	4b30      	ldr	r3, [pc, #192]	@ (8004600 <HAL_GPIO_Init+0x334>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	43db      	mvns	r3, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004560:	4a27      	ldr	r2, [pc, #156]	@ (8004600 <HAL_GPIO_Init+0x334>)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004566:	4b26      	ldr	r3, [pc, #152]	@ (8004600 <HAL_GPIO_Init+0x334>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800458a:	4a1d      	ldr	r2, [pc, #116]	@ (8004600 <HAL_GPIO_Init+0x334>)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004590:	4b1b      	ldr	r3, [pc, #108]	@ (8004600 <HAL_GPIO_Init+0x334>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b4:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <HAL_GPIO_Init+0x334>)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3301      	adds	r3, #1
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b0f      	cmp	r3, #15
 80045c4:	f67f ae90 	bls.w	80042e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	3724      	adds	r7, #36	@ 0x24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40013800 	.word	0x40013800
 80045e0:	40020000 	.word	0x40020000
 80045e4:	40020400 	.word	0x40020400
 80045e8:	40020800 	.word	0x40020800
 80045ec:	40020c00 	.word	0x40020c00
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40021400 	.word	0x40021400
 80045f8:	40021800 	.word	0x40021800
 80045fc:	40021c00 	.word	0x40021c00
 8004600:	40013c00 	.word	0x40013c00

08004604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e001      	b.n	8004626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004650:	e003      	b.n	800465a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004652:	887b      	ldrh	r3, [r7, #2]
 8004654:	041a      	lsls	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	619a      	str	r2, [r3, #24]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e267      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d075      	beq.n	8004772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004686:	4b88      	ldr	r3, [pc, #544]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b04      	cmp	r3, #4
 8004690:	d00c      	beq.n	80046ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004692:	4b85      	ldr	r3, [pc, #532]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800469a:	2b08      	cmp	r3, #8
 800469c:	d112      	bne.n	80046c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800469e:	4b82      	ldr	r3, [pc, #520]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046aa:	d10b      	bne.n	80046c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ac:	4b7e      	ldr	r3, [pc, #504]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d05b      	beq.n	8004770 <HAL_RCC_OscConfig+0x108>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d157      	bne.n	8004770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e242      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046cc:	d106      	bne.n	80046dc <HAL_RCC_OscConfig+0x74>
 80046ce:	4b76      	ldr	r3, [pc, #472]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a75      	ldr	r2, [pc, #468]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e01d      	b.n	8004718 <HAL_RCC_OscConfig+0xb0>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046e4:	d10c      	bne.n	8004700 <HAL_RCC_OscConfig+0x98>
 80046e6:	4b70      	ldr	r3, [pc, #448]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a6f      	ldr	r2, [pc, #444]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80046ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	4b6d      	ldr	r3, [pc, #436]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a6c      	ldr	r2, [pc, #432]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80046f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e00b      	b.n	8004718 <HAL_RCC_OscConfig+0xb0>
 8004700:	4b69      	ldr	r3, [pc, #420]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a68      	ldr	r2, [pc, #416]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 8004706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	4b66      	ldr	r3, [pc, #408]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a65      	ldr	r2, [pc, #404]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 8004712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d013      	beq.n	8004748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004720:	f7fe fe4e 	bl	80033c0 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004728:	f7fe fe4a 	bl	80033c0 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	@ 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e207      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473a:	4b5b      	ldr	r3, [pc, #364]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0xc0>
 8004746:	e014      	b.n	8004772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fe fe3a 	bl	80033c0 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004750:	f7fe fe36 	bl	80033c0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b64      	cmp	r3, #100	@ 0x64
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e1f3      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004762:	4b51      	ldr	r3, [pc, #324]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0xe8>
 800476e:	e000      	b.n	8004772 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d063      	beq.n	8004846 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800477e:	4b4a      	ldr	r3, [pc, #296]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800478a:	4b47      	ldr	r3, [pc, #284]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004792:	2b08      	cmp	r3, #8
 8004794:	d11c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004796:	4b44      	ldr	r3, [pc, #272]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d116      	bne.n	80047d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a2:	4b41      	ldr	r3, [pc, #260]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <HAL_RCC_OscConfig+0x152>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d001      	beq.n	80047ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e1c7      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ba:	4b3b      	ldr	r3, [pc, #236]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4937      	ldr	r1, [pc, #220]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ce:	e03a      	b.n	8004846 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d020      	beq.n	800481a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d8:	4b34      	ldr	r3, [pc, #208]	@ (80048ac <HAL_RCC_OscConfig+0x244>)
 80047da:	2201      	movs	r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047de:	f7fe fdef 	bl	80033c0 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e6:	f7fe fdeb 	bl	80033c0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e1a8      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f8:	4b2b      	ldr	r3, [pc, #172]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004804:	4b28      	ldr	r3, [pc, #160]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	4925      	ldr	r1, [pc, #148]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 8004814:	4313      	orrs	r3, r2
 8004816:	600b      	str	r3, [r1, #0]
 8004818:	e015      	b.n	8004846 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481a:	4b24      	ldr	r3, [pc, #144]	@ (80048ac <HAL_RCC_OscConfig+0x244>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fe fdce 	bl	80033c0 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004828:	f7fe fdca 	bl	80033c0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e187      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483a:	4b1b      	ldr	r3, [pc, #108]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d036      	beq.n	80048c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d016      	beq.n	8004888 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800485a:	4b15      	ldr	r3, [pc, #84]	@ (80048b0 <HAL_RCC_OscConfig+0x248>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004860:	f7fe fdae 	bl	80033c0 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004868:	f7fe fdaa 	bl	80033c0 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e167      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487a:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <HAL_RCC_OscConfig+0x240>)
 800487c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x200>
 8004886:	e01b      	b.n	80048c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004888:	4b09      	ldr	r3, [pc, #36]	@ (80048b0 <HAL_RCC_OscConfig+0x248>)
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488e:	f7fe fd97 	bl	80033c0 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004894:	e00e      	b.n	80048b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004896:	f7fe fd93 	bl	80033c0 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d907      	bls.n	80048b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e150      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
 80048a8:	40023800 	.word	0x40023800
 80048ac:	42470000 	.word	0x42470000
 80048b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b4:	4b88      	ldr	r3, [pc, #544]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 80048b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1ea      	bne.n	8004896 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8097 	beq.w	80049fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ce:	2300      	movs	r3, #0
 80048d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d2:	4b81      	ldr	r3, [pc, #516]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10f      	bne.n	80048fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 80048e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80048ee:	4b7a      	ldr	r3, [pc, #488]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fa:	2301      	movs	r3, #1
 80048fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fe:	4b77      	ldr	r3, [pc, #476]	@ (8004adc <HAL_RCC_OscConfig+0x474>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d118      	bne.n	800493c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490a:	4b74      	ldr	r3, [pc, #464]	@ (8004adc <HAL_RCC_OscConfig+0x474>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a73      	ldr	r2, [pc, #460]	@ (8004adc <HAL_RCC_OscConfig+0x474>)
 8004910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004916:	f7fe fd53 	bl	80033c0 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491e:	f7fe fd4f 	bl	80033c0 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e10c      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004930:	4b6a      	ldr	r3, [pc, #424]	@ (8004adc <HAL_RCC_OscConfig+0x474>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f0      	beq.n	800491e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d106      	bne.n	8004952 <HAL_RCC_OscConfig+0x2ea>
 8004944:	4b64      	ldr	r3, [pc, #400]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004948:	4a63      	ldr	r2, [pc, #396]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004950:	e01c      	b.n	800498c <HAL_RCC_OscConfig+0x324>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b05      	cmp	r3, #5
 8004958:	d10c      	bne.n	8004974 <HAL_RCC_OscConfig+0x30c>
 800495a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 8004960:	f043 0304 	orr.w	r3, r3, #4
 8004964:	6713      	str	r3, [r2, #112]	@ 0x70
 8004966:	4b5c      	ldr	r3, [pc, #368]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6713      	str	r3, [r2, #112]	@ 0x70
 8004972:	e00b      	b.n	800498c <HAL_RCC_OscConfig+0x324>
 8004974:	4b58      	ldr	r3, [pc, #352]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 8004976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004978:	4a57      	ldr	r2, [pc, #348]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004980:	4b55      	ldr	r3, [pc, #340]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004984:	4a54      	ldr	r2, [pc, #336]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 8004986:	f023 0304 	bic.w	r3, r3, #4
 800498a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d015      	beq.n	80049c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fe fd14 	bl	80033c0 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499a:	e00a      	b.n	80049b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499c:	f7fe fd10 	bl	80033c0 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e0cb      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b2:	4b49      	ldr	r3, [pc, #292]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0ee      	beq.n	800499c <HAL_RCC_OscConfig+0x334>
 80049be:	e014      	b.n	80049ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c0:	f7fe fcfe 	bl	80033c0 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c6:	e00a      	b.n	80049de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c8:	f7fe fcfa 	bl	80033c0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e0b5      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049de:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1ee      	bne.n	80049c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d105      	bne.n	80049fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f0:	4b39      	ldr	r3, [pc, #228]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	4a38      	ldr	r2, [pc, #224]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 80049f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 80a1 	beq.w	8004b48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a06:	4b34      	ldr	r3, [pc, #208]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d05c      	beq.n	8004acc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d141      	bne.n	8004a9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1a:	4b31      	ldr	r3, [pc, #196]	@ (8004ae0 <HAL_RCC_OscConfig+0x478>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fe fcce 	bl	80033c0 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fe fcca 	bl	80033c0 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e087      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3a:	4b27      	ldr	r3, [pc, #156]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	019b      	lsls	r3, r3, #6
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5c:	085b      	lsrs	r3, r3, #1
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	041b      	lsls	r3, r3, #16
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a68:	061b      	lsls	r3, r3, #24
 8004a6a:	491b      	ldr	r1, [pc, #108]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae0 <HAL_RCC_OscConfig+0x478>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a76:	f7fe fca3 	bl	80033c0 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fe fc9f 	bl	80033c0 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e05c      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a90:	4b11      	ldr	r3, [pc, #68]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0x416>
 8004a9c:	e054      	b.n	8004b48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ae0 <HAL_RCC_OscConfig+0x478>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fe fc8c 	bl	80033c0 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fe fc88 	bl	80033c0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e045      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x444>
 8004aca:	e03d      	b.n	8004b48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e038      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	40007000 	.word	0x40007000
 8004ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b54 <HAL_RCC_OscConfig+0x4ec>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d028      	beq.n	8004b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d121      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d11a      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b14:	4013      	ands	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d111      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d107      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40023800 	.word	0x40023800

08004b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0cc      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b6c:	4b68      	ldr	r3, [pc, #416]	@ (8004d10 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d90c      	bls.n	8004b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7a:	4b65      	ldr	r3, [pc, #404]	@ (8004d10 <HAL_RCC_ClockConfig+0x1b8>)
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b82:	4b63      	ldr	r3, [pc, #396]	@ (8004d10 <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0b8      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d020      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bac:	4b59      	ldr	r3, [pc, #356]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4a58      	ldr	r2, [pc, #352]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc4:	4b53      	ldr	r3, [pc, #332]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4a52      	ldr	r2, [pc, #328]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd0:	4b50      	ldr	r3, [pc, #320]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	494d      	ldr	r1, [pc, #308]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d044      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d107      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf6:	4b47      	ldr	r3, [pc, #284]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d119      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e07f      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d107      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c16:	4b3f      	ldr	r3, [pc, #252]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e06f      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c26:	4b3b      	ldr	r3, [pc, #236]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e067      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c36:	4b37      	ldr	r3, [pc, #220]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f023 0203 	bic.w	r2, r3, #3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4934      	ldr	r1, [pc, #208]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c48:	f7fe fbba 	bl	80033c0 <HAL_GetTick>
 8004c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	e00a      	b.n	8004c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c50:	f7fe fbb6 	bl	80033c0 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e04f      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c66:	4b2b      	ldr	r3, [pc, #172]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 020c 	and.w	r2, r3, #12
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d1eb      	bne.n	8004c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c78:	4b25      	ldr	r3, [pc, #148]	@ (8004d10 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d20c      	bcs.n	8004ca0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c86:	4b22      	ldr	r3, [pc, #136]	@ (8004d10 <HAL_RCC_ClockConfig+0x1b8>)
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8e:	4b20      	ldr	r3, [pc, #128]	@ (8004d10 <HAL_RCC_ClockConfig+0x1b8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d001      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e032      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cac:	4b19      	ldr	r3, [pc, #100]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4916      	ldr	r1, [pc, #88]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cca:	4b12      	ldr	r3, [pc, #72]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	490e      	ldr	r1, [pc, #56]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cde:	f000 f821 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	490a      	ldr	r1, [pc, #40]	@ (8004d18 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf0:	5ccb      	ldrb	r3, [r1, r3]
 8004cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf6:	4a09      	ldr	r2, [pc, #36]	@ (8004d1c <HAL_RCC_ClockConfig+0x1c4>)
 8004cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cfa:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <HAL_RCC_ClockConfig+0x1c8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fe fb1a 	bl	8003338 <HAL_InitTick>

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40023c00 	.word	0x40023c00
 8004d14:	40023800 	.word	0x40023800
 8004d18:	0800934c 	.word	0x0800934c
 8004d1c:	20000000 	.word	0x20000000
 8004d20:	20000050 	.word	0x20000050

08004d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d28:	b090      	sub	sp, #64	@ 0x40
 8004d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d3c:	4b59      	ldr	r3, [pc, #356]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d00d      	beq.n	8004d64 <HAL_RCC_GetSysClockFreq+0x40>
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	f200 80a1 	bhi.w	8004e90 <HAL_RCC_GetSysClockFreq+0x16c>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x34>
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d003      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d56:	e09b      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d58:	4b53      	ldr	r3, [pc, #332]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d5c:	e09b      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d5e:	4b53      	ldr	r3, [pc, #332]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x188>)
 8004d60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d62:	e098      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d64:	4b4f      	ldr	r3, [pc, #316]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d6e:	4b4d      	ldr	r3, [pc, #308]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d028      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	099b      	lsrs	r3, r3, #6
 8004d80:	2200      	movs	r2, #0
 8004d82:	623b      	str	r3, [r7, #32]
 8004d84:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	4b47      	ldr	r3, [pc, #284]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x188>)
 8004d90:	fb03 f201 	mul.w	r2, r3, r1
 8004d94:	2300      	movs	r3, #0
 8004d96:	fb00 f303 	mul.w	r3, r0, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	4a43      	ldr	r2, [pc, #268]	@ (8004eac <HAL_RCC_GetSysClockFreq+0x188>)
 8004d9e:	fba0 1202 	umull	r1, r2, r0, r2
 8004da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004da4:	460a      	mov	r2, r1
 8004da6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004daa:	4413      	add	r3, r2
 8004dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db0:	2200      	movs	r2, #0
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	61fa      	str	r2, [r7, #28]
 8004db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004dbe:	f7fb fe4d 	bl	8000a5c <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dca:	e053      	b.n	8004e74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dcc:	4b35      	ldr	r3, [pc, #212]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	099b      	lsrs	r3, r3, #6
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	617a      	str	r2, [r7, #20]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004dde:	f04f 0b00 	mov.w	fp, #0
 8004de2:	4652      	mov	r2, sl
 8004de4:	465b      	mov	r3, fp
 8004de6:	f04f 0000 	mov.w	r0, #0
 8004dea:	f04f 0100 	mov.w	r1, #0
 8004dee:	0159      	lsls	r1, r3, #5
 8004df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df4:	0150      	lsls	r0, r2, #5
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	ebb2 080a 	subs.w	r8, r2, sl
 8004dfe:	eb63 090b 	sbc.w	r9, r3, fp
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e16:	ebb2 0408 	subs.w	r4, r2, r8
 8004e1a:	eb63 0509 	sbc.w	r5, r3, r9
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	00eb      	lsls	r3, r5, #3
 8004e28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e2c:	00e2      	lsls	r2, r4, #3
 8004e2e:	4614      	mov	r4, r2
 8004e30:	461d      	mov	r5, r3
 8004e32:	eb14 030a 	adds.w	r3, r4, sl
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	eb45 030b 	adc.w	r3, r5, fp
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	028b      	lsls	r3, r1, #10
 8004e4e:	4621      	mov	r1, r4
 8004e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e54:	4621      	mov	r1, r4
 8004e56:	028a      	lsls	r2, r1, #10
 8004e58:	4610      	mov	r0, r2
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5e:	2200      	movs	r2, #0
 8004e60:	60bb      	str	r3, [r7, #8]
 8004e62:	60fa      	str	r2, [r7, #12]
 8004e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e68:	f7fb fdf8 	bl	8000a5c <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4613      	mov	r3, r2
 8004e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	3301      	adds	r3, #1
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004e84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e8e:	e002      	b.n	8004e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e90:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3740      	adds	r7, #64	@ 0x40
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	00f42400 	.word	0x00f42400
 8004eac:	017d7840 	.word	0x017d7840

08004eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb4:	4b03      	ldr	r3, [pc, #12]	@ (8004ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	20000000 	.word	0x20000000

08004ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ecc:	f7ff fff0 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	4b05      	ldr	r3, [pc, #20]	@ (8004ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	0a9b      	lsrs	r3, r3, #10
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	4903      	ldr	r1, [pc, #12]	@ (8004eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ede:	5ccb      	ldrb	r3, [r1, r3]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	0800935c 	.word	0x0800935c

08004ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ef4:	f7ff ffdc 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0b5b      	lsrs	r3, r3, #13
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4903      	ldr	r1, [pc, #12]	@ (8004f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40023800 	.word	0x40023800
 8004f14:	0800935c 	.word	0x0800935c

08004f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e07b      	b.n	8005022 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d108      	bne.n	8004f44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f3a:	d009      	beq.n	8004f50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	61da      	str	r2, [r3, #28]
 8004f42:	e005      	b.n	8004f50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fc ff30 	bl	8001dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd4:	ea42 0103 	orr.w	r1, r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fdc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	0c1b      	lsrs	r3, r3, #16
 8004fee:	f003 0104 	and.w	r1, r3, #4
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	f003 0210 	and.w	r2, r3, #16
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005010:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b088      	sub	sp, #32
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	603b      	str	r3, [r7, #0]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800503a:	f7fe f9c1 	bl	80033c0 <HAL_GetTick>
 800503e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d001      	beq.n	8005054 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005050:	2302      	movs	r3, #2
 8005052:	e12a      	b.n	80052aa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_SPI_Transmit+0x36>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e122      	b.n	80052aa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_SPI_Transmit+0x48>
 800506e:	2302      	movs	r3, #2
 8005070:	e11b      	b.n	80052aa <HAL_SPI_Transmit+0x280>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2203      	movs	r2, #3
 800507e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c0:	d10f      	bne.n	80050e2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ec:	2b40      	cmp	r3, #64	@ 0x40
 80050ee:	d007      	beq.n	8005100 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005108:	d152      	bne.n	80051b0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_SPI_Transmit+0xee>
 8005112:	8b7b      	ldrh	r3, [r7, #26]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d145      	bne.n	80051a4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	881a      	ldrh	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005128:	1c9a      	adds	r2, r3, #2
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800513c:	e032      	b.n	80051a4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b02      	cmp	r3, #2
 800514a:	d112      	bne.n	8005172 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	881a      	ldrh	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	1c9a      	adds	r2, r3, #2
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005170:	e018      	b.n	80051a4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005172:	f7fe f925 	bl	80033c0 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d803      	bhi.n	800518a <HAL_SPI_Transmit+0x160>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d102      	bne.n	8005190 <HAL_SPI_Transmit+0x166>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e082      	b.n	80052aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1c7      	bne.n	800513e <HAL_SPI_Transmit+0x114>
 80051ae:	e053      	b.n	8005258 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_SPI_Transmit+0x194>
 80051b8:	8b7b      	ldrh	r3, [r7, #26]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d147      	bne.n	800524e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	7812      	ldrb	r2, [r2, #0]
 80051ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051e4:	e033      	b.n	800524e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d113      	bne.n	800521c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	86da      	strh	r2, [r3, #54]	@ 0x36
 800521a:	e018      	b.n	800524e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521c:	f7fe f8d0 	bl	80033c0 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d803      	bhi.n	8005234 <HAL_SPI_Transmit+0x20a>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d102      	bne.n	800523a <HAL_SPI_Transmit+0x210>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e02d      	b.n	80052aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1c6      	bne.n	80051e6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fa59 	bl	8005714 <SPI_EndRxTxTransaction>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80052a8:	2300      	movs	r3, #0
  }
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b08a      	sub	sp, #40	@ 0x28
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052c0:	2301      	movs	r3, #1
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052c4:	f7fe f87c 	bl	80033c0 <HAL_GetTick>
 80052c8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052d0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80052d8:	887b      	ldrh	r3, [r7, #2]
 80052da:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052dc:	7ffb      	ldrb	r3, [r7, #31]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d00c      	beq.n	80052fc <HAL_SPI_TransmitReceive+0x4a>
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052e8:	d106      	bne.n	80052f8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <HAL_SPI_TransmitReceive+0x46>
 80052f2:	7ffb      	ldrb	r3, [r7, #31]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d001      	beq.n	80052fc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80052f8:	2302      	movs	r3, #2
 80052fa:	e17f      	b.n	80055fc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_SPI_TransmitReceive+0x5c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_SPI_TransmitReceive+0x5c>
 8005308:	887b      	ldrh	r3, [r7, #2]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e174      	b.n	80055fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_SPI_TransmitReceive+0x6e>
 800531c:	2302      	movs	r3, #2
 800531e:	e16d      	b.n	80055fc <HAL_SPI_TransmitReceive+0x34a>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b04      	cmp	r3, #4
 8005332:	d003      	beq.n	800533c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2205      	movs	r2, #5
 8005338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	887a      	ldrh	r2, [r7, #2]
 800534c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	887a      	ldrh	r2, [r7, #2]
 8005352:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	887a      	ldrh	r2, [r7, #2]
 800535e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	887a      	ldrh	r2, [r7, #2]
 8005364:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b40      	cmp	r3, #64	@ 0x40
 800537e:	d007      	beq.n	8005390 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800538e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005398:	d17e      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_SPI_TransmitReceive+0xf6>
 80053a2:	8afb      	ldrh	r3, [r7, #22]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d16c      	bne.n	8005482 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ac:	881a      	ldrh	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b8:	1c9a      	adds	r2, r3, #2
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053cc:	e059      	b.n	8005482 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d11b      	bne.n	8005414 <HAL_SPI_TransmitReceive+0x162>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d016      	beq.n	8005414 <HAL_SPI_TransmitReceive+0x162>
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d113      	bne.n	8005414 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f0:	881a      	ldrh	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fc:	1c9a      	adds	r2, r3, #2
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b01      	cmp	r3, #1
 8005420:	d119      	bne.n	8005456 <HAL_SPI_TransmitReceive+0x1a4>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d014      	beq.n	8005456 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005436:	b292      	uxth	r2, r2
 8005438:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	1c9a      	adds	r2, r3, #2
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005452:	2301      	movs	r3, #1
 8005454:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005456:	f7fd ffb3 	bl	80033c0 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005462:	429a      	cmp	r2, r3
 8005464:	d80d      	bhi.n	8005482 <HAL_SPI_TransmitReceive+0x1d0>
 8005466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d009      	beq.n	8005482 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e0bc      	b.n	80055fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1a0      	bne.n	80053ce <HAL_SPI_TransmitReceive+0x11c>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d19b      	bne.n	80053ce <HAL_SPI_TransmitReceive+0x11c>
 8005496:	e082      	b.n	800559e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_SPI_TransmitReceive+0x1f4>
 80054a0:	8afb      	ldrh	r3, [r7, #22]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d171      	bne.n	800558a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	330c      	adds	r3, #12
 80054b0:	7812      	ldrb	r2, [r2, #0]
 80054b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054cc:	e05d      	b.n	800558a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d11c      	bne.n	8005516 <HAL_SPI_TransmitReceive+0x264>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d017      	beq.n	8005516 <HAL_SPI_TransmitReceive+0x264>
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d114      	bne.n	8005516 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b01      	cmp	r3, #1
 8005522:	d119      	bne.n	8005558 <HAL_SPI_TransmitReceive+0x2a6>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d014      	beq.n	8005558 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005538:	b2d2      	uxtb	r2, r2
 800553a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005554:	2301      	movs	r3, #1
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005558:	f7fd ff32 	bl	80033c0 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005564:	429a      	cmp	r2, r3
 8005566:	d803      	bhi.n	8005570 <HAL_SPI_TransmitReceive+0x2be>
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556e:	d102      	bne.n	8005576 <HAL_SPI_TransmitReceive+0x2c4>
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e038      	b.n	80055fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d19c      	bne.n	80054ce <HAL_SPI_TransmitReceive+0x21c>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d197      	bne.n	80054ce <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f8b6 	bl	8005714 <SPI_EndRxTxTransaction>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d008      	beq.n	80055c0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e01d      	b.n	80055fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80055fa:	2300      	movs	r3, #0
  }
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3728      	adds	r7, #40	@ 0x28
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005614:	f7fd fed4 	bl	80033c0 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	4413      	add	r3, r2
 8005622:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005624:	f7fd fecc 	bl	80033c0 <HAL_GetTick>
 8005628:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800562a:	4b39      	ldr	r3, [pc, #228]	@ (8005710 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	015b      	lsls	r3, r3, #5
 8005630:	0d1b      	lsrs	r3, r3, #20
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	fb02 f303 	mul.w	r3, r2, r3
 8005638:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800563a:	e054      	b.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d050      	beq.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005644:	f7fd febc 	bl	80033c0 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	429a      	cmp	r2, r3
 8005652:	d902      	bls.n	800565a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d13d      	bne.n	80056d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005672:	d111      	bne.n	8005698 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800567c:	d004      	beq.n	8005688 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005686:	d107      	bne.n	8005698 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056a0:	d10f      	bne.n	80056c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e017      	b.n	8005706 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4013      	ands	r3, r2
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	bf0c      	ite	eq
 80056f6:	2301      	moveq	r3, #1
 80056f8:	2300      	movne	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	429a      	cmp	r2, r3
 8005702:	d19b      	bne.n	800563c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3720      	adds	r7, #32
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20000000 	.word	0x20000000

08005714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af02      	add	r7, sp, #8
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2201      	movs	r2, #1
 8005728:	2102      	movs	r1, #2
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f7ff ff6a 	bl	8005604 <SPI_WaitFlagStateUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e032      	b.n	80057ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005746:	4b1b      	ldr	r3, [pc, #108]	@ (80057b4 <SPI_EndRxTxTransaction+0xa0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1b      	ldr	r2, [pc, #108]	@ (80057b8 <SPI_EndRxTxTransaction+0xa4>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	0d5b      	lsrs	r3, r3, #21
 8005752:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005764:	d112      	bne.n	800578c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2200      	movs	r2, #0
 800576e:	2180      	movs	r1, #128	@ 0x80
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f7ff ff47 	bl	8005604 <SPI_WaitFlagStateUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d016      	beq.n	80057aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005780:	f043 0220 	orr.w	r2, r3, #32
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e00f      	b.n	80057ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	3b01      	subs	r3, #1
 8005796:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a2:	2b80      	cmp	r3, #128	@ 0x80
 80057a4:	d0f2      	beq.n	800578c <SPI_EndRxTxTransaction+0x78>
 80057a6:	e000      	b.n	80057aa <SPI_EndRxTxTransaction+0x96>
        break;
 80057a8:	bf00      	nop
  }

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000000 	.word	0x20000000
 80057b8:	165e9f81 	.word	0x165e9f81

080057bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e042      	b.n	8005854 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fc fb90 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2224      	movs	r2, #36	@ 0x24
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f82b 	bl	800585c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800585c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005860:	b0c0      	sub	sp, #256	@ 0x100
 8005862:	af00      	add	r7, sp, #0
 8005864:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005878:	68d9      	ldr	r1, [r3, #12]
 800587a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	ea40 0301 	orr.w	r3, r0, r1
 8005884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	431a      	orrs	r2, r3
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	431a      	orrs	r2, r3
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058b4:	f021 010c 	bic.w	r1, r1, #12
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058c2:	430b      	orrs	r3, r1
 80058c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d6:	6999      	ldr	r1, [r3, #24]
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	ea40 0301 	orr.w	r3, r0, r1
 80058e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	4b8f      	ldr	r3, [pc, #572]	@ (8005b28 <UART_SetConfig+0x2cc>)
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d005      	beq.n	80058fc <UART_SetConfig+0xa0>
 80058f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b8d      	ldr	r3, [pc, #564]	@ (8005b2c <UART_SetConfig+0x2d0>)
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d104      	bne.n	8005906 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058fc:	f7ff faf8 	bl	8004ef0 <HAL_RCC_GetPCLK2Freq>
 8005900:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005904:	e003      	b.n	800590e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005906:	f7ff fadf 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
 800590a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005918:	f040 810c 	bne.w	8005b34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800591c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005920:	2200      	movs	r2, #0
 8005922:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005926:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800592a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800592e:	4622      	mov	r2, r4
 8005930:	462b      	mov	r3, r5
 8005932:	1891      	adds	r1, r2, r2
 8005934:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005936:	415b      	adcs	r3, r3
 8005938:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800593a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800593e:	4621      	mov	r1, r4
 8005940:	eb12 0801 	adds.w	r8, r2, r1
 8005944:	4629      	mov	r1, r5
 8005946:	eb43 0901 	adc.w	r9, r3, r1
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005956:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800595a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800595e:	4690      	mov	r8, r2
 8005960:	4699      	mov	r9, r3
 8005962:	4623      	mov	r3, r4
 8005964:	eb18 0303 	adds.w	r3, r8, r3
 8005968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800596c:	462b      	mov	r3, r5
 800596e:	eb49 0303 	adc.w	r3, r9, r3
 8005972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005982:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005986:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800598a:	460b      	mov	r3, r1
 800598c:	18db      	adds	r3, r3, r3
 800598e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005990:	4613      	mov	r3, r2
 8005992:	eb42 0303 	adc.w	r3, r2, r3
 8005996:	657b      	str	r3, [r7, #84]	@ 0x54
 8005998:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800599c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059a0:	f7fb f85c 	bl	8000a5c <__aeabi_uldivmod>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4b61      	ldr	r3, [pc, #388]	@ (8005b30 <UART_SetConfig+0x2d4>)
 80059aa:	fba3 2302 	umull	r2, r3, r3, r2
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	011c      	lsls	r4, r3, #4
 80059b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80059c4:	4642      	mov	r2, r8
 80059c6:	464b      	mov	r3, r9
 80059c8:	1891      	adds	r1, r2, r2
 80059ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80059cc:	415b      	adcs	r3, r3
 80059ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059d4:	4641      	mov	r1, r8
 80059d6:	eb12 0a01 	adds.w	sl, r2, r1
 80059da:	4649      	mov	r1, r9
 80059dc:	eb43 0b01 	adc.w	fp, r3, r1
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059f4:	4692      	mov	sl, r2
 80059f6:	469b      	mov	fp, r3
 80059f8:	4643      	mov	r3, r8
 80059fa:	eb1a 0303 	adds.w	r3, sl, r3
 80059fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a02:	464b      	mov	r3, r9
 8005a04:	eb4b 0303 	adc.w	r3, fp, r3
 8005a08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a20:	460b      	mov	r3, r1
 8005a22:	18db      	adds	r3, r3, r3
 8005a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a26:	4613      	mov	r3, r2
 8005a28:	eb42 0303 	adc.w	r3, r2, r3
 8005a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a36:	f7fb f811 	bl	8000a5c <__aeabi_uldivmod>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4b3b      	ldr	r3, [pc, #236]	@ (8005b30 <UART_SetConfig+0x2d4>)
 8005a42:	fba3 2301 	umull	r2, r3, r3, r1
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	2264      	movs	r2, #100	@ 0x64
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
 8005a4e:	1acb      	subs	r3, r1, r3
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a56:	4b36      	ldr	r3, [pc, #216]	@ (8005b30 <UART_SetConfig+0x2d4>)
 8005a58:	fba3 2302 	umull	r2, r3, r3, r2
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a64:	441c      	add	r4, r3
 8005a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a78:	4642      	mov	r2, r8
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	1891      	adds	r1, r2, r2
 8005a7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a80:	415b      	adcs	r3, r3
 8005a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a88:	4641      	mov	r1, r8
 8005a8a:	1851      	adds	r1, r2, r1
 8005a8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a8e:	4649      	mov	r1, r9
 8005a90:	414b      	adcs	r3, r1
 8005a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005aa0:	4659      	mov	r1, fp
 8005aa2:	00cb      	lsls	r3, r1, #3
 8005aa4:	4651      	mov	r1, sl
 8005aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aaa:	4651      	mov	r1, sl
 8005aac:	00ca      	lsls	r2, r1, #3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	189b      	adds	r3, r3, r2
 8005ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005abc:	464b      	mov	r3, r9
 8005abe:	460a      	mov	r2, r1
 8005ac0:	eb42 0303 	adc.w	r3, r2, r3
 8005ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ad4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ad8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005adc:	460b      	mov	r3, r1
 8005ade:	18db      	adds	r3, r3, r3
 8005ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	eb42 0303 	adc.w	r3, r2, r3
 8005ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005aee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005af2:	f7fa ffb3 	bl	8000a5c <__aeabi_uldivmod>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4b0d      	ldr	r3, [pc, #52]	@ (8005b30 <UART_SetConfig+0x2d4>)
 8005afc:	fba3 1302 	umull	r1, r3, r3, r2
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	2164      	movs	r1, #100	@ 0x64
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	3332      	adds	r3, #50	@ 0x32
 8005b0e:	4a08      	ldr	r2, [pc, #32]	@ (8005b30 <UART_SetConfig+0x2d4>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	f003 0207 	and.w	r2, r3, #7
 8005b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4422      	add	r2, r4
 8005b22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b24:	e106      	b.n	8005d34 <UART_SetConfig+0x4d8>
 8005b26:	bf00      	nop
 8005b28:	40011000 	.word	0x40011000
 8005b2c:	40011400 	.word	0x40011400
 8005b30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b46:	4642      	mov	r2, r8
 8005b48:	464b      	mov	r3, r9
 8005b4a:	1891      	adds	r1, r2, r2
 8005b4c:	6239      	str	r1, [r7, #32]
 8005b4e:	415b      	adcs	r3, r3
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b56:	4641      	mov	r1, r8
 8005b58:	1854      	adds	r4, r2, r1
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	eb43 0501 	adc.w	r5, r3, r1
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	00eb      	lsls	r3, r5, #3
 8005b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b6e:	00e2      	lsls	r2, r4, #3
 8005b70:	4614      	mov	r4, r2
 8005b72:	461d      	mov	r5, r3
 8005b74:	4643      	mov	r3, r8
 8005b76:	18e3      	adds	r3, r4, r3
 8005b78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b7c:	464b      	mov	r3, r9
 8005b7e:	eb45 0303 	adc.w	r3, r5, r3
 8005b82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	008b      	lsls	r3, r1, #2
 8005ba6:	4621      	mov	r1, r4
 8005ba8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bac:	4621      	mov	r1, r4
 8005bae:	008a      	lsls	r2, r1, #2
 8005bb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bb4:	f7fa ff52 	bl	8000a5c <__aeabi_uldivmod>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4b60      	ldr	r3, [pc, #384]	@ (8005d40 <UART_SetConfig+0x4e4>)
 8005bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	011c      	lsls	r4, r3, #4
 8005bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005bd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005bd8:	4642      	mov	r2, r8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	1891      	adds	r1, r2, r2
 8005bde:	61b9      	str	r1, [r7, #24]
 8005be0:	415b      	adcs	r3, r3
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005be8:	4641      	mov	r1, r8
 8005bea:	1851      	adds	r1, r2, r1
 8005bec:	6139      	str	r1, [r7, #16]
 8005bee:	4649      	mov	r1, r9
 8005bf0:	414b      	adcs	r3, r1
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c00:	4659      	mov	r1, fp
 8005c02:	00cb      	lsls	r3, r1, #3
 8005c04:	4651      	mov	r1, sl
 8005c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c0a:	4651      	mov	r1, sl
 8005c0c:	00ca      	lsls	r2, r1, #3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	4619      	mov	r1, r3
 8005c12:	4603      	mov	r3, r0
 8005c14:	4642      	mov	r2, r8
 8005c16:	189b      	adds	r3, r3, r2
 8005c18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c1c:	464b      	mov	r3, r9
 8005c1e:	460a      	mov	r2, r1
 8005c20:	eb42 0303 	adc.w	r3, r2, r3
 8005c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c40:	4649      	mov	r1, r9
 8005c42:	008b      	lsls	r3, r1, #2
 8005c44:	4641      	mov	r1, r8
 8005c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c4a:	4641      	mov	r1, r8
 8005c4c:	008a      	lsls	r2, r1, #2
 8005c4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c52:	f7fa ff03 	bl	8000a5c <__aeabi_uldivmod>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4b38      	ldr	r3, [pc, #224]	@ (8005d40 <UART_SetConfig+0x4e4>)
 8005c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	2264      	movs	r2, #100	@ 0x64
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	1acb      	subs	r3, r1, r3
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	3332      	adds	r3, #50	@ 0x32
 8005c70:	4a33      	ldr	r2, [pc, #204]	@ (8005d40 <UART_SetConfig+0x4e4>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c7c:	441c      	add	r4, r3
 8005c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c82:	2200      	movs	r2, #0
 8005c84:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c86:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c8c:	4642      	mov	r2, r8
 8005c8e:	464b      	mov	r3, r9
 8005c90:	1891      	adds	r1, r2, r2
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	415b      	adcs	r3, r3
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	1851      	adds	r1, r2, r1
 8005ca0:	6039      	str	r1, [r7, #0]
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	414b      	adcs	r3, r1
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cb4:	4659      	mov	r1, fp
 8005cb6:	00cb      	lsls	r3, r1, #3
 8005cb8:	4651      	mov	r1, sl
 8005cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cbe:	4651      	mov	r1, sl
 8005cc0:	00ca      	lsls	r2, r1, #3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	4642      	mov	r2, r8
 8005cca:	189b      	adds	r3, r3, r2
 8005ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cce:	464b      	mov	r3, r9
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	eb42 0303 	adc.w	r3, r2, r3
 8005cd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ce2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	008b      	lsls	r3, r1, #2
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	008a      	lsls	r2, r1, #2
 8005cfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d02:	f7fa feab 	bl	8000a5c <__aeabi_uldivmod>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d40 <UART_SetConfig+0x4e4>)
 8005d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	2164      	movs	r1, #100	@ 0x64
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	3332      	adds	r3, #50	@ 0x32
 8005d1e:	4a08      	ldr	r2, [pc, #32]	@ (8005d40 <UART_SetConfig+0x4e4>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	f003 020f 	and.w	r2, r3, #15
 8005d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4422      	add	r2, r4
 8005d32:	609a      	str	r2, [r3, #8]
}
 8005d34:	bf00      	nop
 8005d36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d40:	51eb851f 	.word	0x51eb851f

08005d44 <__NVIC_SetPriority>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	6039      	str	r1, [r7, #0]
 8005d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	db0a      	blt.n	8005d6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	490c      	ldr	r1, [pc, #48]	@ (8005d90 <__NVIC_SetPriority+0x4c>)
 8005d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d62:	0112      	lsls	r2, r2, #4
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	440b      	add	r3, r1
 8005d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005d6c:	e00a      	b.n	8005d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	4908      	ldr	r1, [pc, #32]	@ (8005d94 <__NVIC_SetPriority+0x50>)
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	3b04      	subs	r3, #4
 8005d7c:	0112      	lsls	r2, r2, #4
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	440b      	add	r3, r1
 8005d82:	761a      	strb	r2, [r3, #24]
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	e000e100 	.word	0xe000e100
 8005d94:	e000ed00 	.word	0xe000ed00

08005d98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	f06f 0004 	mvn.w	r0, #4
 8005da2:	f7ff ffcf 	bl	8005d44 <__NVIC_SetPriority>
#endif
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db2:	f3ef 8305 	mrs	r3, IPSR
 8005db6:	603b      	str	r3, [r7, #0]
  return(result);
 8005db8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005dbe:	f06f 0305 	mvn.w	r3, #5
 8005dc2:	607b      	str	r3, [r7, #4]
 8005dc4:	e00c      	b.n	8005de0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <osKernelInitialize+0x44>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d105      	bne.n	8005dda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005dce:	4b08      	ldr	r3, [pc, #32]	@ (8005df0 <osKernelInitialize+0x44>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	607b      	str	r3, [r7, #4]
 8005dd8:	e002      	b.n	8005de0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005dda:	f04f 33ff 	mov.w	r3, #4294967295
 8005dde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005de0:	687b      	ldr	r3, [r7, #4]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	200003ac 	.word	0x200003ac

08005df4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dfa:	f3ef 8305 	mrs	r3, IPSR
 8005dfe:	603b      	str	r3, [r7, #0]
  return(result);
 8005e00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e06:	f06f 0305 	mvn.w	r3, #5
 8005e0a:	607b      	str	r3, [r7, #4]
 8005e0c:	e010      	b.n	8005e30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e3c <osKernelStart+0x48>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d109      	bne.n	8005e2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e16:	f7ff ffbf 	bl	8005d98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e1a:	4b08      	ldr	r3, [pc, #32]	@ (8005e3c <osKernelStart+0x48>)
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e20:	f001 f87a 	bl	8006f18 <vTaskStartScheduler>
      stat = osOK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	e002      	b.n	8005e30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e30:	687b      	ldr	r3, [r7, #4]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	200003ac 	.word	0x200003ac

08005e40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08e      	sub	sp, #56	@ 0x38
 8005e44:	af04      	add	r7, sp, #16
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e50:	f3ef 8305 	mrs	r3, IPSR
 8005e54:	617b      	str	r3, [r7, #20]
  return(result);
 8005e56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d17e      	bne.n	8005f5a <osThreadNew+0x11a>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d07b      	beq.n	8005f5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e62:	2380      	movs	r3, #128	@ 0x80
 8005e64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e66:	2318      	movs	r3, #24
 8005e68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d045      	beq.n	8005f06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <osThreadNew+0x48>
        name = attr->name;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <osThreadNew+0x6e>
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	2b38      	cmp	r3, #56	@ 0x38
 8005ea0:	d805      	bhi.n	8005eae <osThreadNew+0x6e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <osThreadNew+0x72>
        return (NULL);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e054      	b.n	8005f5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	089b      	lsrs	r3, r3, #2
 8005ec0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00e      	beq.n	8005ee8 <osThreadNew+0xa8>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	2b5b      	cmp	r3, #91	@ 0x5b
 8005ed0:	d90a      	bls.n	8005ee8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d006      	beq.n	8005ee8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <osThreadNew+0xa8>
        mem = 1;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	e010      	b.n	8005f0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10c      	bne.n	8005f0a <osThreadNew+0xca>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d108      	bne.n	8005f0a <osThreadNew+0xca>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d104      	bne.n	8005f0a <osThreadNew+0xca>
          mem = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61bb      	str	r3, [r7, #24]
 8005f04:	e001      	b.n	8005f0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d110      	bne.n	8005f32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f18:	9202      	str	r2, [sp, #8]
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	6a3a      	ldr	r2, [r7, #32]
 8005f24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fe1a 	bl	8006b60 <xTaskCreateStatic>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	e013      	b.n	8005f5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d110      	bne.n	8005f5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	f107 0310 	add.w	r3, r7, #16
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fe68 	bl	8006c20 <xTaskCreate>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d001      	beq.n	8005f5a <osThreadNew+0x11a>
            hTask = NULL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f5a:	693b      	ldr	r3, [r7, #16]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3728      	adds	r7, #40	@ 0x28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f6c:	f3ef 8305 	mrs	r3, IPSR
 8005f70:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <osDelay+0x1c>
    stat = osErrorISR;
 8005f78:	f06f 0305 	mvn.w	r3, #5
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	e007      	b.n	8005f90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 ff8e 	bl	8006eac <vTaskDelay>
    }
  }

  return (stat);
 8005f90:	68fb      	ldr	r3, [r7, #12]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a07      	ldr	r2, [pc, #28]	@ (8005fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4a06      	ldr	r2, [pc, #24]	@ (8005fcc <vApplicationGetIdleTaskMemory+0x30>)
 8005fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2280      	movs	r2, #128	@ 0x80
 8005fb8:	601a      	str	r2, [r3, #0]
}
 8005fba:	bf00      	nop
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	200003b0 	.word	0x200003b0
 8005fcc:	2000040c 	.word	0x2000040c

08005fd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4a07      	ldr	r2, [pc, #28]	@ (8005ffc <vApplicationGetTimerTaskMemory+0x2c>)
 8005fe0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4a06      	ldr	r2, [pc, #24]	@ (8006000 <vApplicationGetTimerTaskMemory+0x30>)
 8005fe6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fee:	601a      	str	r2, [r3, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	2000060c 	.word	0x2000060c
 8006000:	20000668 	.word	0x20000668

08006004 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f103 0208 	add.w	r2, r3, #8
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f04f 32ff 	mov.w	r2, #4294967295
 800601c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f103 0208 	add.w	r2, r3, #8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f103 0208 	add.w	r2, r3, #8
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d103      	bne.n	80060c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	e00c      	b.n	80060e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3308      	adds	r3, #8
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e002      	b.n	80060d4 <vListInsert+0x2e>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d2f6      	bcs.n	80060ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	601a      	str	r2, [r3, #0]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6892      	ldr	r2, [r2, #8]
 800612e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6852      	ldr	r2, [r2, #4]
 8006138:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d103      	bne.n	800614c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	1e5a      	subs	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10b      	bne.n	8006198 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006198:	f002 f876 	bl	8008288 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a4:	68f9      	ldr	r1, [r7, #12]
 80061a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	441a      	add	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c8:	3b01      	subs	r3, #1
 80061ca:	68f9      	ldr	r1, [r7, #12]
 80061cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061ce:	fb01 f303 	mul.w	r3, r1, r3
 80061d2:	441a      	add	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	22ff      	movs	r2, #255	@ 0xff
 80061dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	22ff      	movs	r2, #255	@ 0xff
 80061e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d114      	bne.n	8006218 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01a      	beq.n	800622c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3310      	adds	r3, #16
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 f91a 	bl	8007434 <xTaskRemoveFromEventList>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d012      	beq.n	800622c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006206:	4b0d      	ldr	r3, [pc, #52]	@ (800623c <xQueueGenericReset+0xd0>)
 8006208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	e009      	b.n	800622c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3310      	adds	r3, #16
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fef1 	bl	8006004 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3324      	adds	r3, #36	@ 0x24
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff feec 	bl	8006004 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800622c:	f002 f85e 	bl	80082ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006230:	2301      	movs	r3, #1
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08e      	sub	sp, #56	@ 0x38
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10b      	bne.n	800626c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006266:	bf00      	nop
 8006268:	bf00      	nop
 800626a:	e7fd      	b.n	8006268 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10b      	bne.n	800628a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	e7fd      	b.n	8006286 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <xQueueGenericCreateStatic+0x56>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <xQueueGenericCreateStatic+0x5a>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <xQueueGenericCreateStatic+0x5c>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	623b      	str	r3, [r7, #32]
}
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	e7fd      	b.n	80062b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d102      	bne.n	80062c4 <xQueueGenericCreateStatic+0x84>
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <xQueueGenericCreateStatic+0x88>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <xQueueGenericCreateStatic+0x8a>
 80062c8:	2300      	movs	r3, #0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	61fb      	str	r3, [r7, #28]
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	e7fd      	b.n	80062e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062e6:	2350      	movs	r3, #80	@ 0x50
 80062e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b50      	cmp	r3, #80	@ 0x50
 80062ee:	d00b      	beq.n	8006308 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	61bb      	str	r3, [r7, #24]
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	e7fd      	b.n	8006304 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006308:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800630e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00d      	beq.n	8006330 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800631c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	4613      	mov	r3, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f805 	bl	800633a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006332:	4618      	mov	r0, r3
 8006334:	3730      	adds	r7, #48	@ 0x30
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	607a      	str	r2, [r7, #4]
 8006346:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d103      	bne.n	8006356 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e002      	b.n	800635c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006368:	2101      	movs	r1, #1
 800636a:	69b8      	ldr	r0, [r7, #24]
 800636c:	f7ff fefe 	bl	800616c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	78fa      	ldrb	r2, [r7, #3]
 8006374:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08e      	sub	sp, #56	@ 0x38
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800638e:	2300      	movs	r3, #0
 8006390:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10b      	bne.n	80063b4 <xQueueGenericSend+0x34>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063ae:	bf00      	nop
 80063b0:	bf00      	nop
 80063b2:	e7fd      	b.n	80063b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d103      	bne.n	80063c2 <xQueueGenericSend+0x42>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <xQueueGenericSend+0x46>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <xQueueGenericSend+0x48>
 80063c6:	2300      	movs	r3, #0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10b      	bne.n	80063e4 <xQueueGenericSend+0x64>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063de:	bf00      	nop
 80063e0:	bf00      	nop
 80063e2:	e7fd      	b.n	80063e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d103      	bne.n	80063f2 <xQueueGenericSend+0x72>
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <xQueueGenericSend+0x76>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <xQueueGenericSend+0x78>
 80063f6:	2300      	movs	r3, #0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10b      	bne.n	8006414 <xQueueGenericSend+0x94>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	623b      	str	r3, [r7, #32]
}
 800640e:	bf00      	nop
 8006410:	bf00      	nop
 8006412:	e7fd      	b.n	8006410 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006414:	f001 f9ce 	bl	80077b4 <xTaskGetSchedulerState>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d102      	bne.n	8006424 <xQueueGenericSend+0xa4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <xQueueGenericSend+0xa8>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <xQueueGenericSend+0xaa>
 8006428:	2300      	movs	r3, #0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10b      	bne.n	8006446 <xQueueGenericSend+0xc6>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	61fb      	str	r3, [r7, #28]
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	e7fd      	b.n	8006442 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006446:	f001 ff1f 	bl	8008288 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800644e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006452:	429a      	cmp	r2, r3
 8006454:	d302      	bcc.n	800645c <xQueueGenericSend+0xdc>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d129      	bne.n	80064b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006462:	f000 fa0f 	bl	8006884 <prvCopyDataToQueue>
 8006466:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006472:	3324      	adds	r3, #36	@ 0x24
 8006474:	4618      	mov	r0, r3
 8006476:	f000 ffdd 	bl	8007434 <xTaskRemoveFromEventList>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d013      	beq.n	80064a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006480:	4b3f      	ldr	r3, [pc, #252]	@ (8006580 <xQueueGenericSend+0x200>)
 8006482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	e00a      	b.n	80064a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006498:	4b39      	ldr	r3, [pc, #228]	@ (8006580 <xQueueGenericSend+0x200>)
 800649a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064a8:	f001 ff20 	bl	80082ec <vPortExitCritical>
				return pdPASS;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e063      	b.n	8006578 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064b6:	f001 ff19 	bl	80082ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e05c      	b.n	8006578 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d106      	bne.n	80064d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	4618      	mov	r0, r3
 80064ca:	f001 f817 	bl	80074fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ce:	2301      	movs	r3, #1
 80064d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064d2:	f001 ff0b 	bl	80082ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064d6:	f000 fd87 	bl	8006fe8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064da:	f001 fed5 	bl	8008288 <vPortEnterCritical>
 80064de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ea:	d103      	bne.n	80064f4 <xQueueGenericSend+0x174>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064fa:	b25b      	sxtb	r3, r3
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d103      	bne.n	800650a <xQueueGenericSend+0x18a>
 8006502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800650a:	f001 feef 	bl	80082ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800650e:	1d3a      	adds	r2, r7, #4
 8006510:	f107 0314 	add.w	r3, r7, #20
 8006514:	4611      	mov	r1, r2
 8006516:	4618      	mov	r0, r3
 8006518:	f001 f806 	bl	8007528 <xTaskCheckForTimeOut>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d124      	bne.n	800656c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006522:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006524:	f000 faa6 	bl	8006a74 <prvIsQueueFull>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d018      	beq.n	8006560 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800652e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006530:	3310      	adds	r3, #16
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f000 ff2a 	bl	8007390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800653c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800653e:	f000 fa31 	bl	80069a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006542:	f000 fd5f 	bl	8007004 <xTaskResumeAll>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	f47f af7c 	bne.w	8006446 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800654e:	4b0c      	ldr	r3, [pc, #48]	@ (8006580 <xQueueGenericSend+0x200>)
 8006550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	e772      	b.n	8006446 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006560:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006562:	f000 fa1f 	bl	80069a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006566:	f000 fd4d 	bl	8007004 <xTaskResumeAll>
 800656a:	e76c      	b.n	8006446 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800656c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800656e:	f000 fa19 	bl	80069a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006572:	f000 fd47 	bl	8007004 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006576:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006578:	4618      	mov	r0, r3
 800657a:	3738      	adds	r7, #56	@ 0x38
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b090      	sub	sp, #64	@ 0x40
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10b      	bne.n	80065b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	e7fd      	b.n	80065b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <xQueueGenericSendFromISR+0x3e>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <xQueueGenericSendFromISR+0x42>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <xQueueGenericSendFromISR+0x44>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10b      	bne.n	80065e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	e7fd      	b.n	80065e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d103      	bne.n	80065f2 <xQueueGenericSendFromISR+0x6e>
 80065ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <xQueueGenericSendFromISR+0x72>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <xQueueGenericSendFromISR+0x74>
 80065f6:	2300      	movs	r3, #0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10b      	bne.n	8006614 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	623b      	str	r3, [r7, #32]
}
 800660e:	bf00      	nop
 8006610:	bf00      	nop
 8006612:	e7fd      	b.n	8006610 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006614:	f001 ff18 	bl	8008448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006618:	f3ef 8211 	mrs	r2, BASEPRI
 800661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	61fa      	str	r2, [r7, #28]
 800662e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006630:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663c:	429a      	cmp	r2, r3
 800663e:	d302      	bcc.n	8006646 <xQueueGenericSendFromISR+0xc2>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d12f      	bne.n	80066a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006648:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800664c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006654:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800665c:	f000 f912 	bl	8006884 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006660:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d112      	bne.n	8006690 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800666a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666e:	2b00      	cmp	r3, #0
 8006670:	d016      	beq.n	80066a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006674:	3324      	adds	r3, #36	@ 0x24
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fedc 	bl	8007434 <xTaskRemoveFromEventList>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00e      	beq.n	80066a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e007      	b.n	80066a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006690:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006694:	3301      	adds	r3, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	b25a      	sxtb	r2, r3
 800669a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80066a0:	2301      	movs	r3, #1
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80066a4:	e001      	b.n	80066aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3740      	adds	r7, #64	@ 0x40
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08c      	sub	sp, #48	@ 0x30
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80066cc:	2300      	movs	r3, #0
 80066ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <xQueueReceive+0x32>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	623b      	str	r3, [r7, #32]
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d103      	bne.n	8006700 <xQueueReceive+0x40>
 80066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <xQueueReceive+0x44>
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <xQueueReceive+0x46>
 8006704:	2300      	movs	r3, #0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10b      	bne.n	8006722 <xQueueReceive+0x62>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	61fb      	str	r3, [r7, #28]
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006722:	f001 f847 	bl	80077b4 <xTaskGetSchedulerState>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d102      	bne.n	8006732 <xQueueReceive+0x72>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <xQueueReceive+0x76>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <xQueueReceive+0x78>
 8006736:	2300      	movs	r3, #0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10b      	bne.n	8006754 <xQueueReceive+0x94>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	61bb      	str	r3, [r7, #24]
}
 800674e:	bf00      	nop
 8006750:	bf00      	nop
 8006752:	e7fd      	b.n	8006750 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006754:	f001 fd98 	bl	8008288 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01f      	beq.n	80067a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006768:	f000 f8f6 	bl	8006958 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	1e5a      	subs	r2, r3, #1
 8006770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006772:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00f      	beq.n	800679c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800677c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677e:	3310      	adds	r3, #16
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fe57 	bl	8007434 <xTaskRemoveFromEventList>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800678c:	4b3c      	ldr	r3, [pc, #240]	@ (8006880 <xQueueReceive+0x1c0>)
 800678e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800679c:	f001 fda6 	bl	80082ec <vPortExitCritical>
				return pdPASS;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e069      	b.n	8006878 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d103      	bne.n	80067b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067aa:	f001 fd9f 	bl	80082ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e062      	b.n	8006878 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067b8:	f107 0310 	add.w	r3, r7, #16
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fe9d 	bl	80074fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067c2:	2301      	movs	r3, #1
 80067c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067c6:	f001 fd91 	bl	80082ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067ca:	f000 fc0d 	bl	8006fe8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ce:	f001 fd5b 	bl	8008288 <vPortEnterCritical>
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067d8:	b25b      	sxtb	r3, r3
 80067da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067de:	d103      	bne.n	80067e8 <xQueueReceive+0x128>
 80067e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067ee:	b25b      	sxtb	r3, r3
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d103      	bne.n	80067fe <xQueueReceive+0x13e>
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067fe:	f001 fd75 	bl	80082ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006802:	1d3a      	adds	r2, r7, #4
 8006804:	f107 0310 	add.w	r3, r7, #16
 8006808:	4611      	mov	r1, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fe8c 	bl	8007528 <xTaskCheckForTimeOut>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d123      	bne.n	800685e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006818:	f000 f916 	bl	8006a48 <prvIsQueueEmpty>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d017      	beq.n	8006852 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	3324      	adds	r3, #36	@ 0x24
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	4611      	mov	r1, r2
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fdb0 	bl	8007390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006830:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006832:	f000 f8b7 	bl	80069a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006836:	f000 fbe5 	bl	8007004 <xTaskResumeAll>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d189      	bne.n	8006754 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006840:	4b0f      	ldr	r3, [pc, #60]	@ (8006880 <xQueueReceive+0x1c0>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	e780      	b.n	8006754 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006854:	f000 f8a6 	bl	80069a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006858:	f000 fbd4 	bl	8007004 <xTaskResumeAll>
 800685c:	e77a      	b.n	8006754 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800685e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006860:	f000 f8a0 	bl	80069a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006864:	f000 fbce 	bl	8007004 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006868:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800686a:	f000 f8ed 	bl	8006a48 <prvIsQueueEmpty>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	f43f af6f 	beq.w	8006754 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006876:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006878:	4618      	mov	r0, r3
 800687a:	3730      	adds	r7, #48	@ 0x30
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006898:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10d      	bne.n	80068be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d14d      	bne.n	8006946 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 ff9e 	bl	80077f0 <xTaskPriorityDisinherit>
 80068b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	609a      	str	r2, [r3, #8]
 80068bc:	e043      	b.n	8006946 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d119      	bne.n	80068f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6858      	ldr	r0, [r3, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068cc:	461a      	mov	r2, r3
 80068ce:	68b9      	ldr	r1, [r7, #8]
 80068d0:	f002 fa6d 	bl	8008dae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068dc:	441a      	add	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d32b      	bcc.n	8006946 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	605a      	str	r2, [r3, #4]
 80068f6:	e026      	b.n	8006946 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68d8      	ldr	r0, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006900:	461a      	mov	r2, r3
 8006902:	68b9      	ldr	r1, [r7, #8]
 8006904:	f002 fa53 	bl	8008dae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006910:	425b      	negs	r3, r3
 8006912:	441a      	add	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d207      	bcs.n	8006934 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692c:	425b      	negs	r3, r3
 800692e:	441a      	add	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d105      	bne.n	8006946 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	3b01      	subs	r3, #1
 8006944:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800694e:	697b      	ldr	r3, [r7, #20]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d018      	beq.n	800699c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006972:	441a      	add	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	429a      	cmp	r2, r3
 8006982:	d303      	bcc.n	800698c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68d9      	ldr	r1, [r3, #12]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006994:	461a      	mov	r2, r3
 8006996:	6838      	ldr	r0, [r7, #0]
 8006998:	f002 fa09 	bl	8008dae <memcpy>
	}
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069ac:	f001 fc6c 	bl	8008288 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069b8:	e011      	b.n	80069de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d012      	beq.n	80069e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3324      	adds	r3, #36	@ 0x24
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fd34 	bl	8007434 <xTaskRemoveFromEventList>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069d2:	f000 fe0d 	bl	80075f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	3b01      	subs	r3, #1
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dce9      	bgt.n	80069ba <prvUnlockQueue+0x16>
 80069e6:	e000      	b.n	80069ea <prvUnlockQueue+0x46>
					break;
 80069e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	22ff      	movs	r2, #255	@ 0xff
 80069ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80069f2:	f001 fc7b 	bl	80082ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069f6:	f001 fc47 	bl	8008288 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a02:	e011      	b.n	8006a28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d012      	beq.n	8006a32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3310      	adds	r3, #16
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fd0f 	bl	8007434 <xTaskRemoveFromEventList>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a1c:	f000 fde8 	bl	80075f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dce9      	bgt.n	8006a04 <prvUnlockQueue+0x60>
 8006a30:	e000      	b.n	8006a34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	22ff      	movs	r2, #255	@ 0xff
 8006a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a3c:	f001 fc56 	bl	80082ec <vPortExitCritical>
}
 8006a40:	bf00      	nop
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a50:	f001 fc1a 	bl	8008288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	e001      	b.n	8006a66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a66:	f001 fc41 	bl	80082ec <vPortExitCritical>

	return xReturn;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a7c:	f001 fc04 	bl	8008288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d102      	bne.n	8006a92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e001      	b.n	8006a96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a96:	f001 fc29 	bl	80082ec <vPortExitCritical>

	return xReturn;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	e014      	b.n	8006ade <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8006af4 <vQueueAddToRegistry+0x50>)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10b      	bne.n	8006ad8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ac0:	490c      	ldr	r1, [pc, #48]	@ (8006af4 <vQueueAddToRegistry+0x50>)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aca:	4a0a      	ldr	r2, [pc, #40]	@ (8006af4 <vQueueAddToRegistry+0x50>)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	4413      	add	r3, r2
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ad6:	e006      	b.n	8006ae6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b07      	cmp	r3, #7
 8006ae2:	d9e7      	bls.n	8006ab4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000a68 	.word	0x20000a68

08006af8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b08:	f001 fbbe 	bl	8008288 <vPortEnterCritical>
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b12:	b25b      	sxtb	r3, r3
 8006b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b18:	d103      	bne.n	8006b22 <vQueueWaitForMessageRestricted+0x2a>
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b28:	b25b      	sxtb	r3, r3
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d103      	bne.n	8006b38 <vQueueWaitForMessageRestricted+0x40>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b38:	f001 fbd8 	bl	80082ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d106      	bne.n	8006b52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	3324      	adds	r3, #36	@ 0x24
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fc45 	bl	80073dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b52:	6978      	ldr	r0, [r7, #20]
 8006b54:	f7ff ff26 	bl	80069a4 <prvUnlockQueue>
	}
 8006b58:	bf00      	nop
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08e      	sub	sp, #56	@ 0x38
 8006b64:	af04      	add	r7, sp, #16
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10b      	bne.n	8006b8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	623b      	str	r3, [r7, #32]
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10b      	bne.n	8006baa <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	61fb      	str	r3, [r7, #28]
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	e7fd      	b.n	8006ba6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006baa:	235c      	movs	r3, #92	@ 0x5c
 8006bac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b5c      	cmp	r3, #92	@ 0x5c
 8006bb2:	d00b      	beq.n	8006bcc <xTaskCreateStatic+0x6c>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	61bb      	str	r3, [r7, #24]
}
 8006bc6:	bf00      	nop
 8006bc8:	bf00      	nop
 8006bca:	e7fd      	b.n	8006bc8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006bcc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01e      	beq.n	8006c12 <xTaskCreateStatic+0xb2>
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d01b      	beq.n	8006c12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bec:	2300      	movs	r3, #0
 8006bee:	9303      	str	r3, [sp, #12]
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	9302      	str	r3, [sp, #8]
 8006bf4:	f107 0314 	add.w	r3, r7, #20
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f850 	bl	8006caa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c0c:	f000 f8de 	bl	8006dcc <prvAddNewTaskToReadyList>
 8006c10:	e001      	b.n	8006c16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c16:	697b      	ldr	r3, [r7, #20]
	}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3728      	adds	r7, #40	@ 0x28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08c      	sub	sp, #48	@ 0x30
 8006c24:	af04      	add	r7, sp, #16
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c30:	88fb      	ldrh	r3, [r7, #6]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f001 fc49 	bl	80084cc <pvPortMalloc>
 8006c3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00e      	beq.n	8006c60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c42:	205c      	movs	r0, #92	@ 0x5c
 8006c44:	f001 fc42 	bl	80084cc <pvPortMalloc>
 8006c48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c56:	e005      	b.n	8006c64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c58:	6978      	ldr	r0, [r7, #20]
 8006c5a:	f001 fd05 	bl	8008668 <vPortFree>
 8006c5e:	e001      	b.n	8006c64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d017      	beq.n	8006c9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c72:	88fa      	ldrh	r2, [r7, #6]
 8006c74:	2300      	movs	r3, #0
 8006c76:	9303      	str	r3, [sp, #12]
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	9302      	str	r3, [sp, #8]
 8006c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	68b9      	ldr	r1, [r7, #8]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f80e 	bl	8006caa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c8e:	69f8      	ldr	r0, [r7, #28]
 8006c90:	f000 f89c 	bl	8006dcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c94:	2301      	movs	r3, #1
 8006c96:	61bb      	str	r3, [r7, #24]
 8006c98:	e002      	b.n	8006ca0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ca0:	69bb      	ldr	r3, [r7, #24]
	}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b088      	sub	sp, #32
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]
 8006cb6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	21a5      	movs	r1, #165	@ 0xa5
 8006cc4:	f001 fff8 	bl	8008cb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	f023 0307 	bic.w	r3, r3, #7
 8006ce0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00b      	beq.n	8006d04 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	617b      	str	r3, [r7, #20]
}
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
 8006d02:	e7fd      	b.n	8006d00 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d01f      	beq.n	8006d4a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	e012      	b.n	8006d36 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	4413      	add	r3, r2
 8006d16:	7819      	ldrb	r1, [r3, #0]
 8006d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	3334      	adds	r3, #52	@ 0x34
 8006d20:	460a      	mov	r2, r1
 8006d22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d006      	beq.n	8006d3e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	3301      	adds	r3, #1
 8006d34:	61fb      	str	r3, [r7, #28]
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	2b0f      	cmp	r3, #15
 8006d3a:	d9e9      	bls.n	8006d10 <prvInitialiseNewTask+0x66>
 8006d3c:	e000      	b.n	8006d40 <prvInitialiseNewTask+0x96>
			{
				break;
 8006d3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d48:	e003      	b.n	8006d52 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d54:	2b37      	cmp	r3, #55	@ 0x37
 8006d56:	d901      	bls.n	8006d5c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d58:	2337      	movs	r3, #55	@ 0x37
 8006d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d60:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d66:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	3304      	adds	r3, #4
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff f966 	bl	8006044 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	3318      	adds	r3, #24
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff f961 	bl	8006044 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d96:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	68f9      	ldr	r1, [r7, #12]
 8006daa:	69b8      	ldr	r0, [r7, #24]
 8006dac:	f001 f93e 	bl	800802c <pxPortInitialiseStack>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dc2:	bf00      	nop
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006dd4:	f001 fa58 	bl	8008288 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8006e90 <prvAddNewTaskToReadyList+0xc4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	4a2c      	ldr	r2, [pc, #176]	@ (8006e90 <prvAddNewTaskToReadyList+0xc4>)
 8006de0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006de2:	4b2c      	ldr	r3, [pc, #176]	@ (8006e94 <prvAddNewTaskToReadyList+0xc8>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d109      	bne.n	8006dfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dea:	4a2a      	ldr	r2, [pc, #168]	@ (8006e94 <prvAddNewTaskToReadyList+0xc8>)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006df0:	4b27      	ldr	r3, [pc, #156]	@ (8006e90 <prvAddNewTaskToReadyList+0xc4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d110      	bne.n	8006e1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006df8:	f000 fc1e 	bl	8007638 <prvInitialiseTaskLists>
 8006dfc:	e00d      	b.n	8006e1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dfe:	4b26      	ldr	r3, [pc, #152]	@ (8006e98 <prvAddNewTaskToReadyList+0xcc>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e06:	4b23      	ldr	r3, [pc, #140]	@ (8006e94 <prvAddNewTaskToReadyList+0xc8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d802      	bhi.n	8006e1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e14:	4a1f      	ldr	r2, [pc, #124]	@ (8006e94 <prvAddNewTaskToReadyList+0xc8>)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e1a:	4b20      	ldr	r3, [pc, #128]	@ (8006e9c <prvAddNewTaskToReadyList+0xd0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	4a1e      	ldr	r2, [pc, #120]	@ (8006e9c <prvAddNewTaskToReadyList+0xd0>)
 8006e22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e24:	4b1d      	ldr	r3, [pc, #116]	@ (8006e9c <prvAddNewTaskToReadyList+0xd0>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e30:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea0 <prvAddNewTaskToReadyList+0xd4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d903      	bls.n	8006e40 <prvAddNewTaskToReadyList+0x74>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	4a18      	ldr	r2, [pc, #96]	@ (8006ea0 <prvAddNewTaskToReadyList+0xd4>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4a15      	ldr	r2, [pc, #84]	@ (8006ea4 <prvAddNewTaskToReadyList+0xd8>)
 8006e4e:	441a      	add	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3304      	adds	r3, #4
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f7ff f901 	bl	800605e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e5c:	f001 fa46 	bl	80082ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e60:	4b0d      	ldr	r3, [pc, #52]	@ (8006e98 <prvAddNewTaskToReadyList+0xcc>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00e      	beq.n	8006e86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e68:	4b0a      	ldr	r3, [pc, #40]	@ (8006e94 <prvAddNewTaskToReadyList+0xc8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d207      	bcs.n	8006e86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea8 <prvAddNewTaskToReadyList+0xdc>)
 8006e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000f7c 	.word	0x20000f7c
 8006e94:	20000aa8 	.word	0x20000aa8
 8006e98:	20000f88 	.word	0x20000f88
 8006e9c:	20000f98 	.word	0x20000f98
 8006ea0:	20000f84 	.word	0x20000f84
 8006ea4:	20000aac 	.word	0x20000aac
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d018      	beq.n	8006ef0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ebe:	4b14      	ldr	r3, [pc, #80]	@ (8006f10 <vTaskDelay+0x64>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00b      	beq.n	8006ede <vTaskDelay+0x32>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	60bb      	str	r3, [r7, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	bf00      	nop
 8006edc:	e7fd      	b.n	8006eda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ede:	f000 f883 	bl	8006fe8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fcf3 	bl	80078d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eea:	f000 f88b 	bl	8007004 <xTaskResumeAll>
 8006eee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d107      	bne.n	8006f06 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006ef6:	4b07      	ldr	r3, [pc, #28]	@ (8006f14 <vTaskDelay+0x68>)
 8006ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f06:	bf00      	nop
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000fa4 	.word	0x20000fa4
 8006f14:	e000ed04 	.word	0xe000ed04

08006f18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	@ 0x28
 8006f1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f26:	463a      	mov	r2, r7
 8006f28:	1d39      	adds	r1, r7, #4
 8006f2a:	f107 0308 	add.w	r3, r7, #8
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7ff f834 	bl	8005f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	9202      	str	r2, [sp, #8]
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	2300      	movs	r3, #0
 8006f44:	460a      	mov	r2, r1
 8006f46:	4922      	ldr	r1, [pc, #136]	@ (8006fd0 <vTaskStartScheduler+0xb8>)
 8006f48:	4822      	ldr	r0, [pc, #136]	@ (8006fd4 <vTaskStartScheduler+0xbc>)
 8006f4a:	f7ff fe09 	bl	8006b60 <xTaskCreateStatic>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	4a21      	ldr	r2, [pc, #132]	@ (8006fd8 <vTaskStartScheduler+0xc0>)
 8006f52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f54:	4b20      	ldr	r3, [pc, #128]	@ (8006fd8 <vTaskStartScheduler+0xc0>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e001      	b.n	8006f66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d102      	bne.n	8006f72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f6c:	f000 fd04 	bl	8007978 <xTimerCreateTimerTask>
 8006f70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d116      	bne.n	8006fa6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	613b      	str	r3, [r7, #16]
}
 8006f8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f8c:	4b13      	ldr	r3, [pc, #76]	@ (8006fdc <vTaskStartScheduler+0xc4>)
 8006f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f94:	4b12      	ldr	r3, [pc, #72]	@ (8006fe0 <vTaskStartScheduler+0xc8>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f9a:	4b12      	ldr	r3, [pc, #72]	@ (8006fe4 <vTaskStartScheduler+0xcc>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fa0:	f001 f8ce 	bl	8008140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fa4:	e00f      	b.n	8006fc6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fac:	d10b      	bne.n	8006fc6 <vTaskStartScheduler+0xae>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	60fb      	str	r3, [r7, #12]
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	e7fd      	b.n	8006fc2 <vTaskStartScheduler+0xaa>
}
 8006fc6:	bf00      	nop
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	080092c8 	.word	0x080092c8
 8006fd4:	08007609 	.word	0x08007609
 8006fd8:	20000fa0 	.word	0x20000fa0
 8006fdc:	20000f9c 	.word	0x20000f9c
 8006fe0:	20000f88 	.word	0x20000f88
 8006fe4:	20000f80 	.word	0x20000f80

08006fe8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fec:	4b04      	ldr	r3, [pc, #16]	@ (8007000 <vTaskSuspendAll+0x18>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	4a03      	ldr	r2, [pc, #12]	@ (8007000 <vTaskSuspendAll+0x18>)
 8006ff4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ff6:	bf00      	nop
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	20000fa4 	.word	0x20000fa4

08007004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800700e:	2300      	movs	r3, #0
 8007010:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007012:	4b42      	ldr	r3, [pc, #264]	@ (800711c <xTaskResumeAll+0x118>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10b      	bne.n	8007032 <xTaskResumeAll+0x2e>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	603b      	str	r3, [r7, #0]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007032:	f001 f929 	bl	8008288 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007036:	4b39      	ldr	r3, [pc, #228]	@ (800711c <xTaskResumeAll+0x118>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3b01      	subs	r3, #1
 800703c:	4a37      	ldr	r2, [pc, #220]	@ (800711c <xTaskResumeAll+0x118>)
 800703e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007040:	4b36      	ldr	r3, [pc, #216]	@ (800711c <xTaskResumeAll+0x118>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d162      	bne.n	800710e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007048:	4b35      	ldr	r3, [pc, #212]	@ (8007120 <xTaskResumeAll+0x11c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d05e      	beq.n	800710e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007050:	e02f      	b.n	80070b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007052:	4b34      	ldr	r3, [pc, #208]	@ (8007124 <xTaskResumeAll+0x120>)
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3318      	adds	r3, #24
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff f85a 	bl	8006118 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3304      	adds	r3, #4
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff f855 	bl	8006118 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007072:	4b2d      	ldr	r3, [pc, #180]	@ (8007128 <xTaskResumeAll+0x124>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d903      	bls.n	8007082 <xTaskResumeAll+0x7e>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	4a2a      	ldr	r2, [pc, #168]	@ (8007128 <xTaskResumeAll+0x124>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4a27      	ldr	r2, [pc, #156]	@ (800712c <xTaskResumeAll+0x128>)
 8007090:	441a      	add	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f7fe ffe0 	bl	800605e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a2:	4b23      	ldr	r3, [pc, #140]	@ (8007130 <xTaskResumeAll+0x12c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d302      	bcc.n	80070b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80070ac:	4b21      	ldr	r3, [pc, #132]	@ (8007134 <xTaskResumeAll+0x130>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007124 <xTaskResumeAll+0x120>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1cb      	bne.n	8007052 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070c0:	f000 fb58 	bl	8007774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070c4:	4b1c      	ldr	r3, [pc, #112]	@ (8007138 <xTaskResumeAll+0x134>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d010      	beq.n	80070f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070d0:	f000 f846 	bl	8007160 <xTaskIncrementTick>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80070da:	4b16      	ldr	r3, [pc, #88]	@ (8007134 <xTaskResumeAll+0x130>)
 80070dc:	2201      	movs	r2, #1
 80070de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1f1      	bne.n	80070d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80070ec:	4b12      	ldr	r3, [pc, #72]	@ (8007138 <xTaskResumeAll+0x134>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070f2:	4b10      	ldr	r3, [pc, #64]	@ (8007134 <xTaskResumeAll+0x130>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070fa:	2301      	movs	r3, #1
 80070fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070fe:	4b0f      	ldr	r3, [pc, #60]	@ (800713c <xTaskResumeAll+0x138>)
 8007100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800710e:	f001 f8ed 	bl	80082ec <vPortExitCritical>

	return xAlreadyYielded;
 8007112:	68bb      	ldr	r3, [r7, #8]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20000fa4 	.word	0x20000fa4
 8007120:	20000f7c 	.word	0x20000f7c
 8007124:	20000f3c 	.word	0x20000f3c
 8007128:	20000f84 	.word	0x20000f84
 800712c:	20000aac 	.word	0x20000aac
 8007130:	20000aa8 	.word	0x20000aa8
 8007134:	20000f90 	.word	0x20000f90
 8007138:	20000f8c 	.word	0x20000f8c
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007146:	4b05      	ldr	r3, [pc, #20]	@ (800715c <xTaskGetTickCount+0x1c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800714c:	687b      	ldr	r3, [r7, #4]
}
 800714e:	4618      	mov	r0, r3
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	20000f80 	.word	0x20000f80

08007160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800716a:	4b4f      	ldr	r3, [pc, #316]	@ (80072a8 <xTaskIncrementTick+0x148>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	f040 8090 	bne.w	8007294 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007174:	4b4d      	ldr	r3, [pc, #308]	@ (80072ac <xTaskIncrementTick+0x14c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3301      	adds	r3, #1
 800717a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800717c:	4a4b      	ldr	r2, [pc, #300]	@ (80072ac <xTaskIncrementTick+0x14c>)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d121      	bne.n	80071cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007188:	4b49      	ldr	r3, [pc, #292]	@ (80072b0 <xTaskIncrementTick+0x150>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00b      	beq.n	80071aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	603b      	str	r3, [r7, #0]
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	e7fd      	b.n	80071a6 <xTaskIncrementTick+0x46>
 80071aa:	4b41      	ldr	r3, [pc, #260]	@ (80072b0 <xTaskIncrementTick+0x150>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	4b40      	ldr	r3, [pc, #256]	@ (80072b4 <xTaskIncrementTick+0x154>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a3e      	ldr	r2, [pc, #248]	@ (80072b0 <xTaskIncrementTick+0x150>)
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	4a3e      	ldr	r2, [pc, #248]	@ (80072b4 <xTaskIncrementTick+0x154>)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	4b3e      	ldr	r3, [pc, #248]	@ (80072b8 <xTaskIncrementTick+0x158>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3301      	adds	r3, #1
 80071c4:	4a3c      	ldr	r2, [pc, #240]	@ (80072b8 <xTaskIncrementTick+0x158>)
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	f000 fad4 	bl	8007774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071cc:	4b3b      	ldr	r3, [pc, #236]	@ (80072bc <xTaskIncrementTick+0x15c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d349      	bcc.n	800726a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071d6:	4b36      	ldr	r3, [pc, #216]	@ (80072b0 <xTaskIncrementTick+0x150>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e0:	4b36      	ldr	r3, [pc, #216]	@ (80072bc <xTaskIncrementTick+0x15c>)
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295
 80071e6:	601a      	str	r2, [r3, #0]
					break;
 80071e8:	e03f      	b.n	800726a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ea:	4b31      	ldr	r3, [pc, #196]	@ (80072b0 <xTaskIncrementTick+0x150>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d203      	bcs.n	800720a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007202:	4a2e      	ldr	r2, [pc, #184]	@ (80072bc <xTaskIncrementTick+0x15c>)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007208:	e02f      	b.n	800726a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	3304      	adds	r3, #4
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe ff82 	bl	8006118 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	3318      	adds	r3, #24
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe ff79 	bl	8006118 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722a:	4b25      	ldr	r3, [pc, #148]	@ (80072c0 <xTaskIncrementTick+0x160>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	429a      	cmp	r2, r3
 8007230:	d903      	bls.n	800723a <xTaskIncrementTick+0xda>
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007236:	4a22      	ldr	r2, [pc, #136]	@ (80072c0 <xTaskIncrementTick+0x160>)
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4a1f      	ldr	r2, [pc, #124]	@ (80072c4 <xTaskIncrementTick+0x164>)
 8007248:	441a      	add	r2, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	3304      	adds	r3, #4
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7fe ff04 	bl	800605e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800725a:	4b1b      	ldr	r3, [pc, #108]	@ (80072c8 <xTaskIncrementTick+0x168>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007260:	429a      	cmp	r2, r3
 8007262:	d3b8      	bcc.n	80071d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007268:	e7b5      	b.n	80071d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800726a:	4b17      	ldr	r3, [pc, #92]	@ (80072c8 <xTaskIncrementTick+0x168>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007270:	4914      	ldr	r1, [pc, #80]	@ (80072c4 <xTaskIncrementTick+0x164>)
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	440b      	add	r3, r1
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d901      	bls.n	8007286 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007286:	4b11      	ldr	r3, [pc, #68]	@ (80072cc <xTaskIncrementTick+0x16c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d007      	beq.n	800729e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800728e:	2301      	movs	r3, #1
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	e004      	b.n	800729e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007294:	4b0e      	ldr	r3, [pc, #56]	@ (80072d0 <xTaskIncrementTick+0x170>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3301      	adds	r3, #1
 800729a:	4a0d      	ldr	r2, [pc, #52]	@ (80072d0 <xTaskIncrementTick+0x170>)
 800729c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800729e:	697b      	ldr	r3, [r7, #20]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20000fa4 	.word	0x20000fa4
 80072ac:	20000f80 	.word	0x20000f80
 80072b0:	20000f34 	.word	0x20000f34
 80072b4:	20000f38 	.word	0x20000f38
 80072b8:	20000f94 	.word	0x20000f94
 80072bc:	20000f9c 	.word	0x20000f9c
 80072c0:	20000f84 	.word	0x20000f84
 80072c4:	20000aac 	.word	0x20000aac
 80072c8:	20000aa8 	.word	0x20000aa8
 80072cc:	20000f90 	.word	0x20000f90
 80072d0:	20000f8c 	.word	0x20000f8c

080072d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072da:	4b28      	ldr	r3, [pc, #160]	@ (800737c <vTaskSwitchContext+0xa8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072e2:	4b27      	ldr	r3, [pc, #156]	@ (8007380 <vTaskSwitchContext+0xac>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072e8:	e042      	b.n	8007370 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80072ea:	4b25      	ldr	r3, [pc, #148]	@ (8007380 <vTaskSwitchContext+0xac>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f0:	4b24      	ldr	r3, [pc, #144]	@ (8007384 <vTaskSwitchContext+0xb0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	e011      	b.n	800731c <vTaskSwitchContext+0x48>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10b      	bne.n	8007316 <vTaskSwitchContext+0x42>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <vTaskSwitchContext+0x3e>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3b01      	subs	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	491a      	ldr	r1, [pc, #104]	@ (8007388 <vTaskSwitchContext+0xb4>)
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	440b      	add	r3, r1
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0e3      	beq.n	80072f8 <vTaskSwitchContext+0x24>
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4a13      	ldr	r2, [pc, #76]	@ (8007388 <vTaskSwitchContext+0xb4>)
 800733c:	4413      	add	r3, r2
 800733e:	60bb      	str	r3, [r7, #8]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	605a      	str	r2, [r3, #4]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	3308      	adds	r3, #8
 8007352:	429a      	cmp	r2, r3
 8007354:	d104      	bne.n	8007360 <vTaskSwitchContext+0x8c>
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	605a      	str	r2, [r3, #4]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	4a09      	ldr	r2, [pc, #36]	@ (800738c <vTaskSwitchContext+0xb8>)
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4a06      	ldr	r2, [pc, #24]	@ (8007384 <vTaskSwitchContext+0xb0>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6013      	str	r3, [r2, #0]
}
 8007370:	bf00      	nop
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	20000fa4 	.word	0x20000fa4
 8007380:	20000f90 	.word	0x20000f90
 8007384:	20000f84 	.word	0x20000f84
 8007388:	20000aac 	.word	0x20000aac
 800738c:	20000aa8 	.word	0x20000aa8

08007390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10b      	bne.n	80073b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60fb      	str	r3, [r7, #12]
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	e7fd      	b.n	80073b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073b8:	4b07      	ldr	r3, [pc, #28]	@ (80073d8 <vTaskPlaceOnEventList+0x48>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3318      	adds	r3, #24
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fe fe70 	bl	80060a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073c6:	2101      	movs	r1, #1
 80073c8:	6838      	ldr	r0, [r7, #0]
 80073ca:	f000 fa81 	bl	80078d0 <prvAddCurrentTaskToDelayedList>
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000aa8 	.word	0x20000aa8

080073dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10b      	bne.n	8007406 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	617b      	str	r3, [r7, #20]
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	e7fd      	b.n	8007402 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007406:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <vTaskPlaceOnEventListRestricted+0x54>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3318      	adds	r3, #24
 800740c:	4619      	mov	r1, r3
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7fe fe25 	bl	800605e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800741a:	f04f 33ff 	mov.w	r3, #4294967295
 800741e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f000 fa54 	bl	80078d0 <prvAddCurrentTaskToDelayedList>
	}
 8007428:	bf00      	nop
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20000aa8 	.word	0x20000aa8

08007434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10b      	bne.n	8007462 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	60fb      	str	r3, [r7, #12]
}
 800745c:	bf00      	nop
 800745e:	bf00      	nop
 8007460:	e7fd      	b.n	800745e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	3318      	adds	r3, #24
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fe56 	bl	8006118 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800746c:	4b1d      	ldr	r3, [pc, #116]	@ (80074e4 <xTaskRemoveFromEventList+0xb0>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d11d      	bne.n	80074b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	3304      	adds	r3, #4
 8007478:	4618      	mov	r0, r3
 800747a:	f7fe fe4d 	bl	8006118 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007482:	4b19      	ldr	r3, [pc, #100]	@ (80074e8 <xTaskRemoveFromEventList+0xb4>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d903      	bls.n	8007492 <xTaskRemoveFromEventList+0x5e>
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	4a16      	ldr	r2, [pc, #88]	@ (80074e8 <xTaskRemoveFromEventList+0xb4>)
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4a13      	ldr	r2, [pc, #76]	@ (80074ec <xTaskRemoveFromEventList+0xb8>)
 80074a0:	441a      	add	r2, r3
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f7fe fdd8 	bl	800605e <vListInsertEnd>
 80074ae:	e005      	b.n	80074bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	3318      	adds	r3, #24
 80074b4:	4619      	mov	r1, r3
 80074b6:	480e      	ldr	r0, [pc, #56]	@ (80074f0 <xTaskRemoveFromEventList+0xbc>)
 80074b8:	f7fe fdd1 	bl	800605e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c0:	4b0c      	ldr	r3, [pc, #48]	@ (80074f4 <xTaskRemoveFromEventList+0xc0>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d905      	bls.n	80074d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074ca:	2301      	movs	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074ce:	4b0a      	ldr	r3, [pc, #40]	@ (80074f8 <xTaskRemoveFromEventList+0xc4>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e001      	b.n	80074da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074da:	697b      	ldr	r3, [r7, #20]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20000fa4 	.word	0x20000fa4
 80074e8:	20000f84 	.word	0x20000f84
 80074ec:	20000aac 	.word	0x20000aac
 80074f0:	20000f3c 	.word	0x20000f3c
 80074f4:	20000aa8 	.word	0x20000aa8
 80074f8:	20000f90 	.word	0x20000f90

080074fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007504:	4b06      	ldr	r3, [pc, #24]	@ (8007520 <vTaskInternalSetTimeOutState+0x24>)
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800750c:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <vTaskInternalSetTimeOutState+0x28>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	605a      	str	r2, [r3, #4]
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	20000f94 	.word	0x20000f94
 8007524:	20000f80 	.word	0x20000f80

08007528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10b      	bne.n	8007550 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	613b      	str	r3, [r7, #16]
}
 800754a:	bf00      	nop
 800754c:	bf00      	nop
 800754e:	e7fd      	b.n	800754c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10b      	bne.n	800756e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	60fb      	str	r3, [r7, #12]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800756e:	f000 fe8b 	bl	8008288 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007572:	4b1d      	ldr	r3, [pc, #116]	@ (80075e8 <xTaskCheckForTimeOut+0xc0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758a:	d102      	bne.n	8007592 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800758c:	2300      	movs	r3, #0
 800758e:	61fb      	str	r3, [r7, #28]
 8007590:	e023      	b.n	80075da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	4b15      	ldr	r3, [pc, #84]	@ (80075ec <xTaskCheckForTimeOut+0xc4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	429a      	cmp	r2, r3
 800759c:	d007      	beq.n	80075ae <xTaskCheckForTimeOut+0x86>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d302      	bcc.n	80075ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80075a8:	2301      	movs	r3, #1
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	e015      	b.n	80075da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d20b      	bcs.n	80075d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff ff99 	bl	80074fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	e004      	b.n	80075da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075d6:	2301      	movs	r3, #1
 80075d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075da:	f000 fe87 	bl	80082ec <vPortExitCritical>

	return xReturn;
 80075de:	69fb      	ldr	r3, [r7, #28]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20000f80 	.word	0x20000f80
 80075ec:	20000f94 	.word	0x20000f94

080075f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075f4:	4b03      	ldr	r3, [pc, #12]	@ (8007604 <vTaskMissedYield+0x14>)
 80075f6:	2201      	movs	r2, #1
 80075f8:	601a      	str	r2, [r3, #0]
}
 80075fa:	bf00      	nop
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	20000f90 	.word	0x20000f90

08007608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007610:	f000 f852 	bl	80076b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007614:	4b06      	ldr	r3, [pc, #24]	@ (8007630 <prvIdleTask+0x28>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d9f9      	bls.n	8007610 <prvIdleTask+0x8>
			{
				taskYIELD();
 800761c:	4b05      	ldr	r3, [pc, #20]	@ (8007634 <prvIdleTask+0x2c>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800762c:	e7f0      	b.n	8007610 <prvIdleTask+0x8>
 800762e:	bf00      	nop
 8007630:	20000aac 	.word	0x20000aac
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800763e:	2300      	movs	r3, #0
 8007640:	607b      	str	r3, [r7, #4]
 8007642:	e00c      	b.n	800765e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4a12      	ldr	r2, [pc, #72]	@ (8007698 <prvInitialiseTaskLists+0x60>)
 8007650:	4413      	add	r3, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fcd6 	bl	8006004 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3301      	adds	r3, #1
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b37      	cmp	r3, #55	@ 0x37
 8007662:	d9ef      	bls.n	8007644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007664:	480d      	ldr	r0, [pc, #52]	@ (800769c <prvInitialiseTaskLists+0x64>)
 8007666:	f7fe fccd 	bl	8006004 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800766a:	480d      	ldr	r0, [pc, #52]	@ (80076a0 <prvInitialiseTaskLists+0x68>)
 800766c:	f7fe fcca 	bl	8006004 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007670:	480c      	ldr	r0, [pc, #48]	@ (80076a4 <prvInitialiseTaskLists+0x6c>)
 8007672:	f7fe fcc7 	bl	8006004 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007676:	480c      	ldr	r0, [pc, #48]	@ (80076a8 <prvInitialiseTaskLists+0x70>)
 8007678:	f7fe fcc4 	bl	8006004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800767c:	480b      	ldr	r0, [pc, #44]	@ (80076ac <prvInitialiseTaskLists+0x74>)
 800767e:	f7fe fcc1 	bl	8006004 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007682:	4b0b      	ldr	r3, [pc, #44]	@ (80076b0 <prvInitialiseTaskLists+0x78>)
 8007684:	4a05      	ldr	r2, [pc, #20]	@ (800769c <prvInitialiseTaskLists+0x64>)
 8007686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007688:	4b0a      	ldr	r3, [pc, #40]	@ (80076b4 <prvInitialiseTaskLists+0x7c>)
 800768a:	4a05      	ldr	r2, [pc, #20]	@ (80076a0 <prvInitialiseTaskLists+0x68>)
 800768c:	601a      	str	r2, [r3, #0]
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000aac 	.word	0x20000aac
 800769c:	20000f0c 	.word	0x20000f0c
 80076a0:	20000f20 	.word	0x20000f20
 80076a4:	20000f3c 	.word	0x20000f3c
 80076a8:	20000f50 	.word	0x20000f50
 80076ac:	20000f68 	.word	0x20000f68
 80076b0:	20000f34 	.word	0x20000f34
 80076b4:	20000f38 	.word	0x20000f38

080076b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076be:	e019      	b.n	80076f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076c0:	f000 fde2 	bl	8008288 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076c4:	4b10      	ldr	r3, [pc, #64]	@ (8007708 <prvCheckTasksWaitingTermination+0x50>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe fd21 	bl	8006118 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076d6:	4b0d      	ldr	r3, [pc, #52]	@ (800770c <prvCheckTasksWaitingTermination+0x54>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3b01      	subs	r3, #1
 80076dc:	4a0b      	ldr	r2, [pc, #44]	@ (800770c <prvCheckTasksWaitingTermination+0x54>)
 80076de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007710 <prvCheckTasksWaitingTermination+0x58>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007710 <prvCheckTasksWaitingTermination+0x58>)
 80076e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076ea:	f000 fdff 	bl	80082ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f810 	bl	8007714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076f4:	4b06      	ldr	r3, [pc, #24]	@ (8007710 <prvCheckTasksWaitingTermination+0x58>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1e1      	bne.n	80076c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000f50 	.word	0x20000f50
 800770c:	20000f7c 	.word	0x20000f7c
 8007710:	20000f64 	.word	0x20000f64

08007714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007722:	2b00      	cmp	r3, #0
 8007724:	d108      	bne.n	8007738 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772a:	4618      	mov	r0, r3
 800772c:	f000 ff9c 	bl	8008668 <vPortFree>
				vPortFree( pxTCB );
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 ff99 	bl	8008668 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007736:	e019      	b.n	800776c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800773e:	2b01      	cmp	r3, #1
 8007740:	d103      	bne.n	800774a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 ff90 	bl	8008668 <vPortFree>
	}
 8007748:	e010      	b.n	800776c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007750:	2b02      	cmp	r3, #2
 8007752:	d00b      	beq.n	800776c <prvDeleteTCB+0x58>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	60fb      	str	r3, [r7, #12]
}
 8007766:	bf00      	nop
 8007768:	bf00      	nop
 800776a:	e7fd      	b.n	8007768 <prvDeleteTCB+0x54>
	}
 800776c:	bf00      	nop
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800777a:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <prvResetNextTaskUnblockTime+0x38>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007784:	4b0a      	ldr	r3, [pc, #40]	@ (80077b0 <prvResetNextTaskUnblockTime+0x3c>)
 8007786:	f04f 32ff 	mov.w	r2, #4294967295
 800778a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800778c:	e008      	b.n	80077a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778e:	4b07      	ldr	r3, [pc, #28]	@ (80077ac <prvResetNextTaskUnblockTime+0x38>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4a04      	ldr	r2, [pc, #16]	@ (80077b0 <prvResetNextTaskUnblockTime+0x3c>)
 800779e:	6013      	str	r3, [r2, #0]
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	20000f34 	.word	0x20000f34
 80077b0:	20000f9c 	.word	0x20000f9c

080077b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077ba:	4b0b      	ldr	r3, [pc, #44]	@ (80077e8 <xTaskGetSchedulerState+0x34>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d102      	bne.n	80077c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077c2:	2301      	movs	r3, #1
 80077c4:	607b      	str	r3, [r7, #4]
 80077c6:	e008      	b.n	80077da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077c8:	4b08      	ldr	r3, [pc, #32]	@ (80077ec <xTaskGetSchedulerState+0x38>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d102      	bne.n	80077d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077d0:	2302      	movs	r3, #2
 80077d2:	607b      	str	r3, [r7, #4]
 80077d4:	e001      	b.n	80077da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077d6:	2300      	movs	r3, #0
 80077d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077da:	687b      	ldr	r3, [r7, #4]
	}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	20000f88 	.word	0x20000f88
 80077ec:	20000fa4 	.word	0x20000fa4

080077f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077fc:	2300      	movs	r3, #0
 80077fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d058      	beq.n	80078b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007806:	4b2f      	ldr	r3, [pc, #188]	@ (80078c4 <xTaskPriorityDisinherit+0xd4>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	429a      	cmp	r2, r3
 800780e:	d00b      	beq.n	8007828 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	60fb      	str	r3, [r7, #12]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10b      	bne.n	8007848 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60bb      	str	r3, [r7, #8]
}
 8007842:	bf00      	nop
 8007844:	bf00      	nop
 8007846:	e7fd      	b.n	8007844 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800784c:	1e5a      	subs	r2, r3, #1
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800785a:	429a      	cmp	r2, r3
 800785c:	d02c      	beq.n	80078b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007862:	2b00      	cmp	r3, #0
 8007864:	d128      	bne.n	80078b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	3304      	adds	r3, #4
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe fc54 	bl	8006118 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007888:	4b0f      	ldr	r3, [pc, #60]	@ (80078c8 <xTaskPriorityDisinherit+0xd8>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	429a      	cmp	r2, r3
 800788e:	d903      	bls.n	8007898 <xTaskPriorityDisinherit+0xa8>
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007894:	4a0c      	ldr	r2, [pc, #48]	@ (80078c8 <xTaskPriorityDisinherit+0xd8>)
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4a09      	ldr	r2, [pc, #36]	@ (80078cc <xTaskPriorityDisinherit+0xdc>)
 80078a6:	441a      	add	r2, r3
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	3304      	adds	r3, #4
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fe fbd5 	bl	800605e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078b4:	2301      	movs	r3, #1
 80078b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078b8:	697b      	ldr	r3, [r7, #20]
	}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000aa8 	.word	0x20000aa8
 80078c8:	20000f84 	.word	0x20000f84
 80078cc:	20000aac 	.word	0x20000aac

080078d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078da:	4b21      	ldr	r3, [pc, #132]	@ (8007960 <prvAddCurrentTaskToDelayedList+0x90>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078e0:	4b20      	ldr	r3, [pc, #128]	@ (8007964 <prvAddCurrentTaskToDelayedList+0x94>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3304      	adds	r3, #4
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fc16 	bl	8006118 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f2:	d10a      	bne.n	800790a <prvAddCurrentTaskToDelayedList+0x3a>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d007      	beq.n	800790a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007964 <prvAddCurrentTaskToDelayedList+0x94>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3304      	adds	r3, #4
 8007900:	4619      	mov	r1, r3
 8007902:	4819      	ldr	r0, [pc, #100]	@ (8007968 <prvAddCurrentTaskToDelayedList+0x98>)
 8007904:	f7fe fbab 	bl	800605e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007908:	e026      	b.n	8007958 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4413      	add	r3, r2
 8007910:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007912:	4b14      	ldr	r3, [pc, #80]	@ (8007964 <prvAddCurrentTaskToDelayedList+0x94>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	429a      	cmp	r2, r3
 8007920:	d209      	bcs.n	8007936 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007922:	4b12      	ldr	r3, [pc, #72]	@ (800796c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	4b0f      	ldr	r3, [pc, #60]	@ (8007964 <prvAddCurrentTaskToDelayedList+0x94>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3304      	adds	r3, #4
 800792c:	4619      	mov	r1, r3
 800792e:	4610      	mov	r0, r2
 8007930:	f7fe fbb9 	bl	80060a6 <vListInsert>
}
 8007934:	e010      	b.n	8007958 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007936:	4b0e      	ldr	r3, [pc, #56]	@ (8007970 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b0a      	ldr	r3, [pc, #40]	@ (8007964 <prvAddCurrentTaskToDelayedList+0x94>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3304      	adds	r3, #4
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f7fe fbaf 	bl	80060a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007948:	4b0a      	ldr	r3, [pc, #40]	@ (8007974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	429a      	cmp	r2, r3
 8007950:	d202      	bcs.n	8007958 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007952:	4a08      	ldr	r2, [pc, #32]	@ (8007974 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	6013      	str	r3, [r2, #0]
}
 8007958:	bf00      	nop
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	20000f80 	.word	0x20000f80
 8007964:	20000aa8 	.word	0x20000aa8
 8007968:	20000f68 	.word	0x20000f68
 800796c:	20000f38 	.word	0x20000f38
 8007970:	20000f34 	.word	0x20000f34
 8007974:	20000f9c 	.word	0x20000f9c

08007978 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08a      	sub	sp, #40	@ 0x28
 800797c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007982:	f000 fb13 	bl	8007fac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007986:	4b1d      	ldr	r3, [pc, #116]	@ (80079fc <xTimerCreateTimerTask+0x84>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d021      	beq.n	80079d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007996:	1d3a      	adds	r2, r7, #4
 8007998:	f107 0108 	add.w	r1, r7, #8
 800799c:	f107 030c 	add.w	r3, r7, #12
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe fb15 	bl	8005fd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	9202      	str	r2, [sp, #8]
 80079ae:	9301      	str	r3, [sp, #4]
 80079b0:	2302      	movs	r3, #2
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	2300      	movs	r3, #0
 80079b6:	460a      	mov	r2, r1
 80079b8:	4911      	ldr	r1, [pc, #68]	@ (8007a00 <xTimerCreateTimerTask+0x88>)
 80079ba:	4812      	ldr	r0, [pc, #72]	@ (8007a04 <xTimerCreateTimerTask+0x8c>)
 80079bc:	f7ff f8d0 	bl	8006b60 <xTaskCreateStatic>
 80079c0:	4603      	mov	r3, r0
 80079c2:	4a11      	ldr	r2, [pc, #68]	@ (8007a08 <xTimerCreateTimerTask+0x90>)
 80079c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80079c6:	4b10      	ldr	r3, [pc, #64]	@ (8007a08 <xTimerCreateTimerTask+0x90>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80079ce:	2301      	movs	r3, #1
 80079d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10b      	bne.n	80079f0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	613b      	str	r3, [r7, #16]
}
 80079ea:	bf00      	nop
 80079ec:	bf00      	nop
 80079ee:	e7fd      	b.n	80079ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079f0:	697b      	ldr	r3, [r7, #20]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000fd8 	.word	0x20000fd8
 8007a00:	080092d0 	.word	0x080092d0
 8007a04:	08007b45 	.word	0x08007b45
 8007a08:	20000fdc 	.word	0x20000fdc

08007a0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	@ 0x28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10b      	bne.n	8007a3c <xTimerGenericCommand+0x30>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	623b      	str	r3, [r7, #32]
}
 8007a36:	bf00      	nop
 8007a38:	bf00      	nop
 8007a3a:	e7fd      	b.n	8007a38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a3c:	4b19      	ldr	r3, [pc, #100]	@ (8007aa4 <xTimerGenericCommand+0x98>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d02a      	beq.n	8007a9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	dc18      	bgt.n	8007a88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a56:	f7ff fead 	bl	80077b4 <xTaskGetSchedulerState>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d109      	bne.n	8007a74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a60:	4b10      	ldr	r3, [pc, #64]	@ (8007aa4 <xTimerGenericCommand+0x98>)
 8007a62:	6818      	ldr	r0, [r3, #0]
 8007a64:	f107 0110 	add.w	r1, r7, #16
 8007a68:	2300      	movs	r3, #0
 8007a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a6c:	f7fe fc88 	bl	8006380 <xQueueGenericSend>
 8007a70:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a72:	e012      	b.n	8007a9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a74:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa4 <xTimerGenericCommand+0x98>)
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	f107 0110 	add.w	r1, r7, #16
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f7fe fc7e 	bl	8006380 <xQueueGenericSend>
 8007a84:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a86:	e008      	b.n	8007a9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a88:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <xTimerGenericCommand+0x98>)
 8007a8a:	6818      	ldr	r0, [r3, #0]
 8007a8c:	f107 0110 	add.w	r1, r7, #16
 8007a90:	2300      	movs	r3, #0
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	f7fe fd76 	bl	8006584 <xQueueGenericSendFromISR>
 8007a98:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3728      	adds	r7, #40	@ 0x28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20000fd8 	.word	0x20000fd8

08007aa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab2:	4b23      	ldr	r3, [pc, #140]	@ (8007b40 <prvProcessExpiredTimer+0x98>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fe fb29 	bl	8006118 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d023      	beq.n	8007b1c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	18d1      	adds	r1, r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	6978      	ldr	r0, [r7, #20]
 8007ae2:	f000 f8d5 	bl	8007c90 <prvInsertTimerInActiveList>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d020      	beq.n	8007b2e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007aec:	2300      	movs	r3, #0
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	2300      	movs	r3, #0
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	2100      	movs	r1, #0
 8007af6:	6978      	ldr	r0, [r7, #20]
 8007af8:	f7ff ff88 	bl	8007a0c <xTimerGenericCommand>
 8007afc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d114      	bne.n	8007b2e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	60fb      	str	r3, [r7, #12]
}
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
 8007b1a:	e7fd      	b.n	8007b18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b22:	f023 0301 	bic.w	r3, r3, #1
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	6978      	ldr	r0, [r7, #20]
 8007b34:	4798      	blx	r3
}
 8007b36:	bf00      	nop
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000fd0 	.word	0x20000fd0

08007b44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b4c:	f107 0308 	add.w	r3, r7, #8
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 f859 	bl	8007c08 <prvGetNextExpireTime>
 8007b56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f805 	bl	8007b6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b62:	f000 f8d7 	bl	8007d14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b66:	bf00      	nop
 8007b68:	e7f0      	b.n	8007b4c <prvTimerTask+0x8>
	...

08007b6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b76:	f7ff fa37 	bl	8006fe8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b7a:	f107 0308 	add.w	r3, r7, #8
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 f866 	bl	8007c50 <prvSampleTimeNow>
 8007b84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d130      	bne.n	8007bee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10a      	bne.n	8007ba8 <prvProcessTimerOrBlockTask+0x3c>
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d806      	bhi.n	8007ba8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b9a:	f7ff fa33 	bl	8007004 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff ff81 	bl	8007aa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ba6:	e024      	b.n	8007bf2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d008      	beq.n	8007bc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007bae:	4b13      	ldr	r3, [pc, #76]	@ (8007bfc <prvProcessTimerOrBlockTask+0x90>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <prvProcessTimerOrBlockTask+0x50>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e000      	b.n	8007bbe <prvProcessTimerOrBlockTask+0x52>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007c00 <prvProcessTimerOrBlockTask+0x94>)
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	f7fe ff93 	bl	8006af8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007bd2:	f7ff fa17 	bl	8007004 <xTaskResumeAll>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007bdc:	4b09      	ldr	r3, [pc, #36]	@ (8007c04 <prvProcessTimerOrBlockTask+0x98>)
 8007bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	f3bf 8f6f 	isb	sy
}
 8007bec:	e001      	b.n	8007bf2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bee:	f7ff fa09 	bl	8007004 <xTaskResumeAll>
}
 8007bf2:	bf00      	nop
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20000fd4 	.word	0x20000fd4
 8007c00:	20000fd8 	.word	0x20000fd8
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c10:	4b0e      	ldr	r3, [pc, #56]	@ (8007c4c <prvGetNextExpireTime+0x44>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <prvGetNextExpireTime+0x16>
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	e000      	b.n	8007c20 <prvGetNextExpireTime+0x18>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d105      	bne.n	8007c38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c2c:	4b07      	ldr	r3, [pc, #28]	@ (8007c4c <prvGetNextExpireTime+0x44>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	e001      	b.n	8007c3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20000fd0 	.word	0x20000fd0

08007c50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c58:	f7ff fa72 	bl	8007140 <xTaskGetTickCount>
 8007c5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c8c <prvSampleTimeNow+0x3c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d205      	bcs.n	8007c74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c68:	f000 f93a 	bl	8007ee0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	e002      	b.n	8007c7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c7a:	4a04      	ldr	r2, [pc, #16]	@ (8007c8c <prvSampleTimeNow+0x3c>)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c80:	68fb      	ldr	r3, [r7, #12]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20000fe0 	.word	0x20000fe0

08007c90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d812      	bhi.n	8007cdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	1ad2      	subs	r2, r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d302      	bcc.n	8007cca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	e01b      	b.n	8007d02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007cca:	4b10      	ldr	r3, [pc, #64]	@ (8007d0c <prvInsertTimerInActiveList+0x7c>)
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	f7fe f9e6 	bl	80060a6 <vListInsert>
 8007cda:	e012      	b.n	8007d02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d206      	bcs.n	8007cf2 <prvInsertTimerInActiveList+0x62>
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d302      	bcc.n	8007cf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007cec:	2301      	movs	r3, #1
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	e007      	b.n	8007d02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cf2:	4b07      	ldr	r3, [pc, #28]	@ (8007d10 <prvInsertTimerInActiveList+0x80>)
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	f7fe f9d2 	bl	80060a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d02:	697b      	ldr	r3, [r7, #20]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20000fd4 	.word	0x20000fd4
 8007d10:	20000fd0 	.word	0x20000fd0

08007d14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b08e      	sub	sp, #56	@ 0x38
 8007d18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d1a:	e0ce      	b.n	8007eba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	da19      	bge.n	8007d56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d22:	1d3b      	adds	r3, r7, #4
 8007d24:	3304      	adds	r3, #4
 8007d26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10b      	bne.n	8007d46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	61fb      	str	r3, [r7, #28]
}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	e7fd      	b.n	8007d42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d4c:	6850      	ldr	r0, [r2, #4]
 8007d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d50:	6892      	ldr	r2, [r2, #8]
 8007d52:	4611      	mov	r1, r2
 8007d54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f2c0 80ae 	blt.w	8007eba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d004      	beq.n	8007d74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe f9d2 	bl	8006118 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d74:	463b      	mov	r3, r7
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff ff6a 	bl	8007c50 <prvSampleTimeNow>
 8007d7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b09      	cmp	r3, #9
 8007d82:	f200 8097 	bhi.w	8007eb4 <prvProcessReceivedCommands+0x1a0>
 8007d86:	a201      	add	r2, pc, #4	@ (adr r2, 8007d8c <prvProcessReceivedCommands+0x78>)
 8007d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8c:	08007db5 	.word	0x08007db5
 8007d90:	08007db5 	.word	0x08007db5
 8007d94:	08007db5 	.word	0x08007db5
 8007d98:	08007e2b 	.word	0x08007e2b
 8007d9c:	08007e3f 	.word	0x08007e3f
 8007da0:	08007e8b 	.word	0x08007e8b
 8007da4:	08007db5 	.word	0x08007db5
 8007da8:	08007db5 	.word	0x08007db5
 8007dac:	08007e2b 	.word	0x08007e2b
 8007db0:	08007e3f 	.word	0x08007e3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	18d1      	adds	r1, r2, r3
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dd4:	f7ff ff5c 	bl	8007c90 <prvInsertTimerInActiveList>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d06c      	beq.n	8007eb8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007de4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d061      	beq.n	8007eb8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	441a      	add	r2, r3
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	2300      	movs	r3, #0
 8007e02:	2100      	movs	r1, #0
 8007e04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e06:	f7ff fe01 	bl	8007a0c <xTimerGenericCommand>
 8007e0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d152      	bne.n	8007eb8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	61bb      	str	r3, [r7, #24]
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	e7fd      	b.n	8007e26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e30:	f023 0301 	bic.w	r3, r3, #1
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e3c:	e03d      	b.n	8007eba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e44:	f043 0301 	orr.w	r3, r3, #1
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10b      	bne.n	8007e76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	617b      	str	r3, [r7, #20]
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7c:	18d1      	adds	r1, r2, r3
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e84:	f7ff ff04 	bl	8007c90 <prvInsertTimerInActiveList>
					break;
 8007e88:	e017      	b.n	8007eba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d103      	bne.n	8007ea0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007e98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e9a:	f000 fbe5 	bl	8008668 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e9e:	e00c      	b.n	8007eba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ea6:	f023 0301 	bic.w	r3, r3, #1
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007eb2:	e002      	b.n	8007eba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <prvProcessReceivedCommands+0x1a6>
					break;
 8007eb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007eba:	4b08      	ldr	r3, [pc, #32]	@ (8007edc <prvProcessReceivedCommands+0x1c8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	1d39      	adds	r1, r7, #4
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe fbfc 	bl	80066c0 <xQueueReceive>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f47f af26 	bne.w	8007d1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
 8007ed4:	3730      	adds	r7, #48	@ 0x30
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000fd8 	.word	0x20000fd8

08007ee0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ee6:	e049      	b.n	8007f7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3304      	adds	r3, #4
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fe f909 	bl	8006118 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d02f      	beq.n	8007f7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	4413      	add	r3, r2
 8007f24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d90e      	bls.n	8007f4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3304      	adds	r3, #4
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7fe f8ae 	bl	80060a6 <vListInsert>
 8007f4a:	e017      	b.n	8007f7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	2300      	movs	r3, #0
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	2100      	movs	r1, #0
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fd58 	bl	8007a0c <xTimerGenericCommand>
 8007f5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10b      	bne.n	8007f7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	603b      	str	r3, [r7, #0]
}
 8007f76:	bf00      	nop
 8007f78:	bf00      	nop
 8007f7a:	e7fd      	b.n	8007f78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f7c:	4b09      	ldr	r3, [pc, #36]	@ (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1b0      	bne.n	8007ee8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f86:	4b07      	ldr	r3, [pc, #28]	@ (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f8c:	4b06      	ldr	r3, [pc, #24]	@ (8007fa8 <prvSwitchTimerLists+0xc8>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a04      	ldr	r2, [pc, #16]	@ (8007fa4 <prvSwitchTimerLists+0xc4>)
 8007f92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f94:	4a04      	ldr	r2, [pc, #16]	@ (8007fa8 <prvSwitchTimerLists+0xc8>)
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	6013      	str	r3, [r2, #0]
}
 8007f9a:	bf00      	nop
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000fd0 	.word	0x20000fd0
 8007fa8:	20000fd4 	.word	0x20000fd4

08007fac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007fb2:	f000 f969 	bl	8008288 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007fb6:	4b15      	ldr	r3, [pc, #84]	@ (800800c <prvCheckForValidListAndQueue+0x60>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d120      	bne.n	8008000 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007fbe:	4814      	ldr	r0, [pc, #80]	@ (8008010 <prvCheckForValidListAndQueue+0x64>)
 8007fc0:	f7fe f820 	bl	8006004 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fc4:	4813      	ldr	r0, [pc, #76]	@ (8008014 <prvCheckForValidListAndQueue+0x68>)
 8007fc6:	f7fe f81d 	bl	8006004 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007fca:	4b13      	ldr	r3, [pc, #76]	@ (8008018 <prvCheckForValidListAndQueue+0x6c>)
 8007fcc:	4a10      	ldr	r2, [pc, #64]	@ (8008010 <prvCheckForValidListAndQueue+0x64>)
 8007fce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fd0:	4b12      	ldr	r3, [pc, #72]	@ (800801c <prvCheckForValidListAndQueue+0x70>)
 8007fd2:	4a10      	ldr	r2, [pc, #64]	@ (8008014 <prvCheckForValidListAndQueue+0x68>)
 8007fd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	4b11      	ldr	r3, [pc, #68]	@ (8008020 <prvCheckForValidListAndQueue+0x74>)
 8007fdc:	4a11      	ldr	r2, [pc, #68]	@ (8008024 <prvCheckForValidListAndQueue+0x78>)
 8007fde:	2110      	movs	r1, #16
 8007fe0:	200a      	movs	r0, #10
 8007fe2:	f7fe f92d 	bl	8006240 <xQueueGenericCreateStatic>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4a08      	ldr	r2, [pc, #32]	@ (800800c <prvCheckForValidListAndQueue+0x60>)
 8007fea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fec:	4b07      	ldr	r3, [pc, #28]	@ (800800c <prvCheckForValidListAndQueue+0x60>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ff4:	4b05      	ldr	r3, [pc, #20]	@ (800800c <prvCheckForValidListAndQueue+0x60>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	490b      	ldr	r1, [pc, #44]	@ (8008028 <prvCheckForValidListAndQueue+0x7c>)
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe fd52 	bl	8006aa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008000:	f000 f974 	bl	80082ec <vPortExitCritical>
}
 8008004:	bf00      	nop
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20000fd8 	.word	0x20000fd8
 8008010:	20000fa8 	.word	0x20000fa8
 8008014:	20000fbc 	.word	0x20000fbc
 8008018:	20000fd0 	.word	0x20000fd0
 800801c:	20000fd4 	.word	0x20000fd4
 8008020:	20001084 	.word	0x20001084
 8008024:	20000fe4 	.word	0x20000fe4
 8008028:	080092d8 	.word	0x080092d8

0800802c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	3b04      	subs	r3, #4
 800803c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3b04      	subs	r3, #4
 800804a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f023 0201 	bic.w	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3b04      	subs	r3, #4
 800805a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800805c:	4a0c      	ldr	r2, [pc, #48]	@ (8008090 <pxPortInitialiseStack+0x64>)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3b14      	subs	r3, #20
 8008066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3b04      	subs	r3, #4
 8008072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f06f 0202 	mvn.w	r2, #2
 800807a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3b20      	subs	r3, #32
 8008080:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008082:	68fb      	ldr	r3, [r7, #12]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	08008095 	.word	0x08008095

08008094 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800809e:	4b13      	ldr	r3, [pc, #76]	@ (80080ec <prvTaskExitError+0x58>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a6:	d00b      	beq.n	80080c0 <prvTaskExitError+0x2c>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	60fb      	str	r3, [r7, #12]
}
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
 80080be:	e7fd      	b.n	80080bc <prvTaskExitError+0x28>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	60bb      	str	r3, [r7, #8]
}
 80080d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080d4:	bf00      	nop
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0fc      	beq.n	80080d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20000058 	.word	0x20000058

080080f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080f0:	4b07      	ldr	r3, [pc, #28]	@ (8008110 <pxCurrentTCBConst2>)
 80080f2:	6819      	ldr	r1, [r3, #0]
 80080f4:	6808      	ldr	r0, [r1, #0]
 80080f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fa:	f380 8809 	msr	PSP, r0
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f04f 0000 	mov.w	r0, #0
 8008106:	f380 8811 	msr	BASEPRI, r0
 800810a:	4770      	bx	lr
 800810c:	f3af 8000 	nop.w

08008110 <pxCurrentTCBConst2>:
 8008110:	20000aa8 	.word	0x20000aa8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop

08008118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008118:	4808      	ldr	r0, [pc, #32]	@ (800813c <prvPortStartFirstTask+0x24>)
 800811a:	6800      	ldr	r0, [r0, #0]
 800811c:	6800      	ldr	r0, [r0, #0]
 800811e:	f380 8808 	msr	MSP, r0
 8008122:	f04f 0000 	mov.w	r0, #0
 8008126:	f380 8814 	msr	CONTROL, r0
 800812a:	b662      	cpsie	i
 800812c:	b661      	cpsie	f
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	df00      	svc	0
 8008138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800813a:	bf00      	nop
 800813c:	e000ed08 	.word	0xe000ed08

08008140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008146:	4b47      	ldr	r3, [pc, #284]	@ (8008264 <xPortStartScheduler+0x124>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a47      	ldr	r2, [pc, #284]	@ (8008268 <xPortStartScheduler+0x128>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d10b      	bne.n	8008168 <xPortStartScheduler+0x28>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	60fb      	str	r3, [r7, #12]
}
 8008162:	bf00      	nop
 8008164:	bf00      	nop
 8008166:	e7fd      	b.n	8008164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008168:	4b3e      	ldr	r3, [pc, #248]	@ (8008264 <xPortStartScheduler+0x124>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a3f      	ldr	r2, [pc, #252]	@ (800826c <xPortStartScheduler+0x12c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d10b      	bne.n	800818a <xPortStartScheduler+0x4a>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	613b      	str	r3, [r7, #16]
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	e7fd      	b.n	8008186 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800818a:	4b39      	ldr	r3, [pc, #228]	@ (8008270 <xPortStartScheduler+0x130>)
 800818c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	22ff      	movs	r2, #255	@ 0xff
 800819a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	4b31      	ldr	r3, [pc, #196]	@ (8008274 <xPortStartScheduler+0x134>)
 80081b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081b2:	4b31      	ldr	r3, [pc, #196]	@ (8008278 <xPortStartScheduler+0x138>)
 80081b4:	2207      	movs	r2, #7
 80081b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081b8:	e009      	b.n	80081ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80081ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008278 <xPortStartScheduler+0x138>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3b01      	subs	r3, #1
 80081c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008278 <xPortStartScheduler+0x138>)
 80081c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081d6:	2b80      	cmp	r3, #128	@ 0x80
 80081d8:	d0ef      	beq.n	80081ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081da:	4b27      	ldr	r3, [pc, #156]	@ (8008278 <xPortStartScheduler+0x138>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f1c3 0307 	rsb	r3, r3, #7
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d00b      	beq.n	80081fe <xPortStartScheduler+0xbe>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	60bb      	str	r3, [r7, #8]
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	e7fd      	b.n	80081fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008278 <xPortStartScheduler+0x138>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	021b      	lsls	r3, r3, #8
 8008204:	4a1c      	ldr	r2, [pc, #112]	@ (8008278 <xPortStartScheduler+0x138>)
 8008206:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008208:	4b1b      	ldr	r3, [pc, #108]	@ (8008278 <xPortStartScheduler+0x138>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008210:	4a19      	ldr	r2, [pc, #100]	@ (8008278 <xPortStartScheduler+0x138>)
 8008212:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	b2da      	uxtb	r2, r3
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800821c:	4b17      	ldr	r3, [pc, #92]	@ (800827c <xPortStartScheduler+0x13c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a16      	ldr	r2, [pc, #88]	@ (800827c <xPortStartScheduler+0x13c>)
 8008222:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008226:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008228:	4b14      	ldr	r3, [pc, #80]	@ (800827c <xPortStartScheduler+0x13c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a13      	ldr	r2, [pc, #76]	@ (800827c <xPortStartScheduler+0x13c>)
 800822e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008232:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008234:	f000 f8da 	bl	80083ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008238:	4b11      	ldr	r3, [pc, #68]	@ (8008280 <xPortStartScheduler+0x140>)
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800823e:	f000 f8f9 	bl	8008434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008242:	4b10      	ldr	r3, [pc, #64]	@ (8008284 <xPortStartScheduler+0x144>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a0f      	ldr	r2, [pc, #60]	@ (8008284 <xPortStartScheduler+0x144>)
 8008248:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800824c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800824e:	f7ff ff63 	bl	8008118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008252:	f7ff f83f 	bl	80072d4 <vTaskSwitchContext>
	prvTaskExitError();
 8008256:	f7ff ff1d 	bl	8008094 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	e000ed00 	.word	0xe000ed00
 8008268:	410fc271 	.word	0x410fc271
 800826c:	410fc270 	.word	0x410fc270
 8008270:	e000e400 	.word	0xe000e400
 8008274:	200010d4 	.word	0x200010d4
 8008278:	200010d8 	.word	0x200010d8
 800827c:	e000ed20 	.word	0xe000ed20
 8008280:	20000058 	.word	0x20000058
 8008284:	e000ef34 	.word	0xe000ef34

08008288 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	607b      	str	r3, [r7, #4]
}
 80082a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082a2:	4b10      	ldr	r3, [pc, #64]	@ (80082e4 <vPortEnterCritical+0x5c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3301      	adds	r3, #1
 80082a8:	4a0e      	ldr	r2, [pc, #56]	@ (80082e4 <vPortEnterCritical+0x5c>)
 80082aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082ac:	4b0d      	ldr	r3, [pc, #52]	@ (80082e4 <vPortEnterCritical+0x5c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d110      	bne.n	80082d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082b4:	4b0c      	ldr	r3, [pc, #48]	@ (80082e8 <vPortEnterCritical+0x60>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00b      	beq.n	80082d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	603b      	str	r3, [r7, #0]
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	e7fd      	b.n	80082d2 <vPortEnterCritical+0x4a>
	}
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20000058 	.word	0x20000058
 80082e8:	e000ed04 	.word	0xe000ed04

080082ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082f2:	4b12      	ldr	r3, [pc, #72]	@ (800833c <vPortExitCritical+0x50>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10b      	bne.n	8008312 <vPortExitCritical+0x26>
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	607b      	str	r3, [r7, #4]
}
 800830c:	bf00      	nop
 800830e:	bf00      	nop
 8008310:	e7fd      	b.n	800830e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008312:	4b0a      	ldr	r3, [pc, #40]	@ (800833c <vPortExitCritical+0x50>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3b01      	subs	r3, #1
 8008318:	4a08      	ldr	r2, [pc, #32]	@ (800833c <vPortExitCritical+0x50>)
 800831a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800831c:	4b07      	ldr	r3, [pc, #28]	@ (800833c <vPortExitCritical+0x50>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d105      	bne.n	8008330 <vPortExitCritical+0x44>
 8008324:	2300      	movs	r3, #0
 8008326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	f383 8811 	msr	BASEPRI, r3
}
 800832e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	20000058 	.word	0x20000058

08008340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008340:	f3ef 8009 	mrs	r0, PSP
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	4b15      	ldr	r3, [pc, #84]	@ (80083a0 <pxCurrentTCBConst>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	f01e 0f10 	tst.w	lr, #16
 8008350:	bf08      	it	eq
 8008352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835a:	6010      	str	r0, [r2, #0]
 800835c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008360:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008364:	f380 8811 	msr	BASEPRI, r0
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f7fe ffb0 	bl	80072d4 <vTaskSwitchContext>
 8008374:	f04f 0000 	mov.w	r0, #0
 8008378:	f380 8811 	msr	BASEPRI, r0
 800837c:	bc09      	pop	{r0, r3}
 800837e:	6819      	ldr	r1, [r3, #0]
 8008380:	6808      	ldr	r0, [r1, #0]
 8008382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008386:	f01e 0f10 	tst.w	lr, #16
 800838a:	bf08      	it	eq
 800838c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008390:	f380 8809 	msr	PSP, r0
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	f3af 8000 	nop.w

080083a0 <pxCurrentTCBConst>:
 80083a0:	20000aa8 	.word	0x20000aa8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop

080083a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	607b      	str	r3, [r7, #4]
}
 80083c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083c2:	f7fe fecd 	bl	8007160 <xTaskIncrementTick>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083cc:	4b06      	ldr	r3, [pc, #24]	@ (80083e8 <xPortSysTickHandler+0x40>)
 80083ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	2300      	movs	r3, #0
 80083d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	f383 8811 	msr	BASEPRI, r3
}
 80083de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	e000ed04 	.word	0xe000ed04

080083ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008420 <vPortSetupTimerInterrupt+0x34>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008424 <vPortSetupTimerInterrupt+0x38>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008428 <vPortSetupTimerInterrupt+0x3c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a0a      	ldr	r2, [pc, #40]	@ (800842c <vPortSetupTimerInterrupt+0x40>)
 8008402:	fba2 2303 	umull	r2, r3, r2, r3
 8008406:	099b      	lsrs	r3, r3, #6
 8008408:	4a09      	ldr	r2, [pc, #36]	@ (8008430 <vPortSetupTimerInterrupt+0x44>)
 800840a:	3b01      	subs	r3, #1
 800840c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800840e:	4b04      	ldr	r3, [pc, #16]	@ (8008420 <vPortSetupTimerInterrupt+0x34>)
 8008410:	2207      	movs	r2, #7
 8008412:	601a      	str	r2, [r3, #0]
}
 8008414:	bf00      	nop
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	e000e010 	.word	0xe000e010
 8008424:	e000e018 	.word	0xe000e018
 8008428:	20000000 	.word	0x20000000
 800842c:	10624dd3 	.word	0x10624dd3
 8008430:	e000e014 	.word	0xe000e014

08008434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008434:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008444 <vPortEnableVFP+0x10>
 8008438:	6801      	ldr	r1, [r0, #0]
 800843a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800843e:	6001      	str	r1, [r0, #0]
 8008440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008442:	bf00      	nop
 8008444:	e000ed88 	.word	0xe000ed88

08008448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800844e:	f3ef 8305 	mrs	r3, IPSR
 8008452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b0f      	cmp	r3, #15
 8008458:	d915      	bls.n	8008486 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800845a:	4a18      	ldr	r2, [pc, #96]	@ (80084bc <vPortValidateInterruptPriority+0x74>)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008464:	4b16      	ldr	r3, [pc, #88]	@ (80084c0 <vPortValidateInterruptPriority+0x78>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	7afa      	ldrb	r2, [r7, #11]
 800846a:	429a      	cmp	r2, r3
 800846c:	d20b      	bcs.n	8008486 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
}
 8008480:	bf00      	nop
 8008482:	bf00      	nop
 8008484:	e7fd      	b.n	8008482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008486:	4b0f      	ldr	r3, [pc, #60]	@ (80084c4 <vPortValidateInterruptPriority+0x7c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800848e:	4b0e      	ldr	r3, [pc, #56]	@ (80084c8 <vPortValidateInterruptPriority+0x80>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	d90b      	bls.n	80084ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	603b      	str	r3, [r7, #0]
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	e7fd      	b.n	80084aa <vPortValidateInterruptPriority+0x62>
	}
 80084ae:	bf00      	nop
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	e000e3f0 	.word	0xe000e3f0
 80084c0:	200010d4 	.word	0x200010d4
 80084c4:	e000ed0c 	.word	0xe000ed0c
 80084c8:	200010d8 	.word	0x200010d8

080084cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	@ 0x28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084d4:	2300      	movs	r3, #0
 80084d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084d8:	f7fe fd86 	bl	8006fe8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084dc:	4b5c      	ldr	r3, [pc, #368]	@ (8008650 <pvPortMalloc+0x184>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084e4:	f000 f924 	bl	8008730 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084e8:	4b5a      	ldr	r3, [pc, #360]	@ (8008654 <pvPortMalloc+0x188>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4013      	ands	r3, r2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f040 8095 	bne.w	8008620 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01e      	beq.n	800853a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80084fc:	2208      	movs	r2, #8
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4413      	add	r3, r2
 8008502:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	2b00      	cmp	r3, #0
 800850c:	d015      	beq.n	800853a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f023 0307 	bic.w	r3, r3, #7
 8008514:	3308      	adds	r3, #8
 8008516:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f003 0307 	and.w	r3, r3, #7
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00b      	beq.n	800853a <pvPortMalloc+0x6e>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	617b      	str	r3, [r7, #20]
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop
 8008538:	e7fd      	b.n	8008536 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d06f      	beq.n	8008620 <pvPortMalloc+0x154>
 8008540:	4b45      	ldr	r3, [pc, #276]	@ (8008658 <pvPortMalloc+0x18c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	429a      	cmp	r2, r3
 8008548:	d86a      	bhi.n	8008620 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800854a:	4b44      	ldr	r3, [pc, #272]	@ (800865c <pvPortMalloc+0x190>)
 800854c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800854e:	4b43      	ldr	r3, [pc, #268]	@ (800865c <pvPortMalloc+0x190>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008554:	e004      	b.n	8008560 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008558:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	429a      	cmp	r2, r3
 8008568:	d903      	bls.n	8008572 <pvPortMalloc+0xa6>
 800856a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1f1      	bne.n	8008556 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008572:	4b37      	ldr	r3, [pc, #220]	@ (8008650 <pvPortMalloc+0x184>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008578:	429a      	cmp	r2, r3
 800857a:	d051      	beq.n	8008620 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2208      	movs	r2, #8
 8008582:	4413      	add	r3, r2
 8008584:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800858e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	1ad2      	subs	r2, r2, r3
 8008596:	2308      	movs	r3, #8
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	429a      	cmp	r2, r3
 800859c:	d920      	bls.n	80085e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800859e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4413      	add	r3, r2
 80085a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <pvPortMalloc+0xfc>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	613b      	str	r3, [r7, #16]
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	e7fd      	b.n	80085c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085da:	69b8      	ldr	r0, [r7, #24]
 80085dc:	f000 f90a 	bl	80087f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008658 <pvPortMalloc+0x18c>)
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008658 <pvPortMalloc+0x18c>)
 80085ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008658 <pvPortMalloc+0x18c>)
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008660 <pvPortMalloc+0x194>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d203      	bcs.n	8008602 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085fa:	4b17      	ldr	r3, [pc, #92]	@ (8008658 <pvPortMalloc+0x18c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a18      	ldr	r2, [pc, #96]	@ (8008660 <pvPortMalloc+0x194>)
 8008600:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	4b13      	ldr	r3, [pc, #76]	@ (8008654 <pvPortMalloc+0x188>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	431a      	orrs	r2, r3
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008616:	4b13      	ldr	r3, [pc, #76]	@ (8008664 <pvPortMalloc+0x198>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3301      	adds	r3, #1
 800861c:	4a11      	ldr	r2, [pc, #68]	@ (8008664 <pvPortMalloc+0x198>)
 800861e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008620:	f7fe fcf0 	bl	8007004 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00b      	beq.n	8008646 <pvPortMalloc+0x17a>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	60fb      	str	r3, [r7, #12]
}
 8008640:	bf00      	nop
 8008642:	bf00      	nop
 8008644:	e7fd      	b.n	8008642 <pvPortMalloc+0x176>
	return pvReturn;
 8008646:	69fb      	ldr	r3, [r7, #28]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3728      	adds	r7, #40	@ 0x28
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20004ce4 	.word	0x20004ce4
 8008654:	20004cf8 	.word	0x20004cf8
 8008658:	20004ce8 	.word	0x20004ce8
 800865c:	20004cdc 	.word	0x20004cdc
 8008660:	20004cec 	.word	0x20004cec
 8008664:	20004cf0 	.word	0x20004cf0

08008668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d04f      	beq.n	800871a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800867a:	2308      	movs	r3, #8
 800867c:	425b      	negs	r3, r3
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4413      	add	r3, r2
 8008682:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	4b25      	ldr	r3, [pc, #148]	@ (8008724 <vPortFree+0xbc>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4013      	ands	r3, r2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10b      	bne.n	80086ae <vPortFree+0x46>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	60fb      	str	r3, [r7, #12]
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	e7fd      	b.n	80086aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00b      	beq.n	80086ce <vPortFree+0x66>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	60bb      	str	r3, [r7, #8]
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	e7fd      	b.n	80086ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	4b14      	ldr	r3, [pc, #80]	@ (8008724 <vPortFree+0xbc>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4013      	ands	r3, r2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d01e      	beq.n	800871a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d11a      	bne.n	800871a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008724 <vPortFree+0xbc>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	43db      	mvns	r3, r3
 80086ee:	401a      	ands	r2, r3
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086f4:	f7fe fc78 	bl	8006fe8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008728 <vPortFree+0xc0>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4413      	add	r3, r2
 8008702:	4a09      	ldr	r2, [pc, #36]	@ (8008728 <vPortFree+0xc0>)
 8008704:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008706:	6938      	ldr	r0, [r7, #16]
 8008708:	f000 f874 	bl	80087f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800870c:	4b07      	ldr	r3, [pc, #28]	@ (800872c <vPortFree+0xc4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3301      	adds	r3, #1
 8008712:	4a06      	ldr	r2, [pc, #24]	@ (800872c <vPortFree+0xc4>)
 8008714:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008716:	f7fe fc75 	bl	8007004 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800871a:	bf00      	nop
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20004cf8 	.word	0x20004cf8
 8008728:	20004ce8 	.word	0x20004ce8
 800872c:	20004cf4 	.word	0x20004cf4

08008730 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008736:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800873a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800873c:	4b27      	ldr	r3, [pc, #156]	@ (80087dc <prvHeapInit+0xac>)
 800873e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00c      	beq.n	8008764 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3307      	adds	r3, #7
 800874e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f023 0307 	bic.w	r3, r3, #7
 8008756:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	4a1f      	ldr	r2, [pc, #124]	@ (80087dc <prvHeapInit+0xac>)
 8008760:	4413      	add	r3, r2
 8008762:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008768:	4a1d      	ldr	r2, [pc, #116]	@ (80087e0 <prvHeapInit+0xb0>)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800876e:	4b1c      	ldr	r3, [pc, #112]	@ (80087e0 <prvHeapInit+0xb0>)
 8008770:	2200      	movs	r2, #0
 8008772:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	4413      	add	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800877c:	2208      	movs	r2, #8
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	1a9b      	subs	r3, r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0307 	bic.w	r3, r3, #7
 800878a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4a15      	ldr	r2, [pc, #84]	@ (80087e4 <prvHeapInit+0xb4>)
 8008790:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008792:	4b14      	ldr	r3, [pc, #80]	@ (80087e4 <prvHeapInit+0xb4>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2200      	movs	r2, #0
 8008798:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800879a:	4b12      	ldr	r3, [pc, #72]	@ (80087e4 <prvHeapInit+0xb4>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	1ad2      	subs	r2, r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087b0:	4b0c      	ldr	r3, [pc, #48]	@ (80087e4 <prvHeapInit+0xb4>)
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	4a0a      	ldr	r2, [pc, #40]	@ (80087e8 <prvHeapInit+0xb8>)
 80087be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	4a09      	ldr	r2, [pc, #36]	@ (80087ec <prvHeapInit+0xbc>)
 80087c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087c8:	4b09      	ldr	r3, [pc, #36]	@ (80087f0 <prvHeapInit+0xc0>)
 80087ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80087ce:	601a      	str	r2, [r3, #0]
}
 80087d0:	bf00      	nop
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	200010dc 	.word	0x200010dc
 80087e0:	20004cdc 	.word	0x20004cdc
 80087e4:	20004ce4 	.word	0x20004ce4
 80087e8:	20004cec 	.word	0x20004cec
 80087ec:	20004ce8 	.word	0x20004ce8
 80087f0:	20004cf8 	.word	0x20004cf8

080087f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087fc:	4b28      	ldr	r3, [pc, #160]	@ (80088a0 <prvInsertBlockIntoFreeList+0xac>)
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	e002      	b.n	8008808 <prvInsertBlockIntoFreeList+0x14>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	429a      	cmp	r2, r3
 8008810:	d8f7      	bhi.n	8008802 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	4413      	add	r3, r2
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	429a      	cmp	r2, r3
 8008822:	d108      	bne.n	8008836 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	685a      	ldr	r2, [r3, #4]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	441a      	add	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	441a      	add	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d118      	bne.n	800887c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	4b15      	ldr	r3, [pc, #84]	@ (80088a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d00d      	beq.n	8008872 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	441a      	add	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	e008      	b.n	8008884 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008872:	4b0c      	ldr	r3, [pc, #48]	@ (80088a4 <prvInsertBlockIntoFreeList+0xb0>)
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	e003      	b.n	8008884 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	429a      	cmp	r2, r3
 800888a:	d002      	beq.n	8008892 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008892:	bf00      	nop
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	20004cdc 	.word	0x20004cdc
 80088a4:	20004ce4 	.word	0x20004ce4

080088a8 <std>:
 80088a8:	2300      	movs	r3, #0
 80088aa:	b510      	push	{r4, lr}
 80088ac:	4604      	mov	r4, r0
 80088ae:	e9c0 3300 	strd	r3, r3, [r0]
 80088b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088b6:	6083      	str	r3, [r0, #8]
 80088b8:	8181      	strh	r1, [r0, #12]
 80088ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80088bc:	81c2      	strh	r2, [r0, #14]
 80088be:	6183      	str	r3, [r0, #24]
 80088c0:	4619      	mov	r1, r3
 80088c2:	2208      	movs	r2, #8
 80088c4:	305c      	adds	r0, #92	@ 0x5c
 80088c6:	f000 f9f7 	bl	8008cb8 <memset>
 80088ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008900 <std+0x58>)
 80088cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80088ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008904 <std+0x5c>)
 80088d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008908 <std+0x60>)
 80088d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088d6:	4b0d      	ldr	r3, [pc, #52]	@ (800890c <std+0x64>)
 80088d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80088da:	4b0d      	ldr	r3, [pc, #52]	@ (8008910 <std+0x68>)
 80088dc:	6224      	str	r4, [r4, #32]
 80088de:	429c      	cmp	r4, r3
 80088e0:	d006      	beq.n	80088f0 <std+0x48>
 80088e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088e6:	4294      	cmp	r4, r2
 80088e8:	d002      	beq.n	80088f0 <std+0x48>
 80088ea:	33d0      	adds	r3, #208	@ 0xd0
 80088ec:	429c      	cmp	r4, r3
 80088ee:	d105      	bne.n	80088fc <std+0x54>
 80088f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80088f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088f8:	f000 ba56 	b.w	8008da8 <__retarget_lock_init_recursive>
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	bf00      	nop
 8008900:	08008ae9 	.word	0x08008ae9
 8008904:	08008b0b 	.word	0x08008b0b
 8008908:	08008b43 	.word	0x08008b43
 800890c:	08008b67 	.word	0x08008b67
 8008910:	20004cfc 	.word	0x20004cfc

08008914 <stdio_exit_handler>:
 8008914:	4a02      	ldr	r2, [pc, #8]	@ (8008920 <stdio_exit_handler+0xc>)
 8008916:	4903      	ldr	r1, [pc, #12]	@ (8008924 <stdio_exit_handler+0x10>)
 8008918:	4803      	ldr	r0, [pc, #12]	@ (8008928 <stdio_exit_handler+0x14>)
 800891a:	f000 b869 	b.w	80089f0 <_fwalk_sglue>
 800891e:	bf00      	nop
 8008920:	2000005c 	.word	0x2000005c
 8008924:	080090c5 	.word	0x080090c5
 8008928:	2000006c 	.word	0x2000006c

0800892c <cleanup_stdio>:
 800892c:	6841      	ldr	r1, [r0, #4]
 800892e:	4b0c      	ldr	r3, [pc, #48]	@ (8008960 <cleanup_stdio+0x34>)
 8008930:	4299      	cmp	r1, r3
 8008932:	b510      	push	{r4, lr}
 8008934:	4604      	mov	r4, r0
 8008936:	d001      	beq.n	800893c <cleanup_stdio+0x10>
 8008938:	f000 fbc4 	bl	80090c4 <_fflush_r>
 800893c:	68a1      	ldr	r1, [r4, #8]
 800893e:	4b09      	ldr	r3, [pc, #36]	@ (8008964 <cleanup_stdio+0x38>)
 8008940:	4299      	cmp	r1, r3
 8008942:	d002      	beq.n	800894a <cleanup_stdio+0x1e>
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fbbd 	bl	80090c4 <_fflush_r>
 800894a:	68e1      	ldr	r1, [r4, #12]
 800894c:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <cleanup_stdio+0x3c>)
 800894e:	4299      	cmp	r1, r3
 8008950:	d004      	beq.n	800895c <cleanup_stdio+0x30>
 8008952:	4620      	mov	r0, r4
 8008954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008958:	f000 bbb4 	b.w	80090c4 <_fflush_r>
 800895c:	bd10      	pop	{r4, pc}
 800895e:	bf00      	nop
 8008960:	20004cfc 	.word	0x20004cfc
 8008964:	20004d64 	.word	0x20004d64
 8008968:	20004dcc 	.word	0x20004dcc

0800896c <global_stdio_init.part.0>:
 800896c:	b510      	push	{r4, lr}
 800896e:	4b0b      	ldr	r3, [pc, #44]	@ (800899c <global_stdio_init.part.0+0x30>)
 8008970:	4c0b      	ldr	r4, [pc, #44]	@ (80089a0 <global_stdio_init.part.0+0x34>)
 8008972:	4a0c      	ldr	r2, [pc, #48]	@ (80089a4 <global_stdio_init.part.0+0x38>)
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	4620      	mov	r0, r4
 8008978:	2200      	movs	r2, #0
 800897a:	2104      	movs	r1, #4
 800897c:	f7ff ff94 	bl	80088a8 <std>
 8008980:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008984:	2201      	movs	r2, #1
 8008986:	2109      	movs	r1, #9
 8008988:	f7ff ff8e 	bl	80088a8 <std>
 800898c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008990:	2202      	movs	r2, #2
 8008992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008996:	2112      	movs	r1, #18
 8008998:	f7ff bf86 	b.w	80088a8 <std>
 800899c:	20004e34 	.word	0x20004e34
 80089a0:	20004cfc 	.word	0x20004cfc
 80089a4:	08008915 	.word	0x08008915

080089a8 <__sfp_lock_acquire>:
 80089a8:	4801      	ldr	r0, [pc, #4]	@ (80089b0 <__sfp_lock_acquire+0x8>)
 80089aa:	f000 b9fe 	b.w	8008daa <__retarget_lock_acquire_recursive>
 80089ae:	bf00      	nop
 80089b0:	20004e3d 	.word	0x20004e3d

080089b4 <__sfp_lock_release>:
 80089b4:	4801      	ldr	r0, [pc, #4]	@ (80089bc <__sfp_lock_release+0x8>)
 80089b6:	f000 b9f9 	b.w	8008dac <__retarget_lock_release_recursive>
 80089ba:	bf00      	nop
 80089bc:	20004e3d 	.word	0x20004e3d

080089c0 <__sinit>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	4604      	mov	r4, r0
 80089c4:	f7ff fff0 	bl	80089a8 <__sfp_lock_acquire>
 80089c8:	6a23      	ldr	r3, [r4, #32]
 80089ca:	b11b      	cbz	r3, 80089d4 <__sinit+0x14>
 80089cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d0:	f7ff bff0 	b.w	80089b4 <__sfp_lock_release>
 80089d4:	4b04      	ldr	r3, [pc, #16]	@ (80089e8 <__sinit+0x28>)
 80089d6:	6223      	str	r3, [r4, #32]
 80089d8:	4b04      	ldr	r3, [pc, #16]	@ (80089ec <__sinit+0x2c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1f5      	bne.n	80089cc <__sinit+0xc>
 80089e0:	f7ff ffc4 	bl	800896c <global_stdio_init.part.0>
 80089e4:	e7f2      	b.n	80089cc <__sinit+0xc>
 80089e6:	bf00      	nop
 80089e8:	0800892d 	.word	0x0800892d
 80089ec:	20004e34 	.word	0x20004e34

080089f0 <_fwalk_sglue>:
 80089f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f4:	4607      	mov	r7, r0
 80089f6:	4688      	mov	r8, r1
 80089f8:	4614      	mov	r4, r2
 80089fa:	2600      	movs	r6, #0
 80089fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a00:	f1b9 0901 	subs.w	r9, r9, #1
 8008a04:	d505      	bpl.n	8008a12 <_fwalk_sglue+0x22>
 8008a06:	6824      	ldr	r4, [r4, #0]
 8008a08:	2c00      	cmp	r4, #0
 8008a0a:	d1f7      	bne.n	80089fc <_fwalk_sglue+0xc>
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a12:	89ab      	ldrh	r3, [r5, #12]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d907      	bls.n	8008a28 <_fwalk_sglue+0x38>
 8008a18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	d003      	beq.n	8008a28 <_fwalk_sglue+0x38>
 8008a20:	4629      	mov	r1, r5
 8008a22:	4638      	mov	r0, r7
 8008a24:	47c0      	blx	r8
 8008a26:	4306      	orrs	r6, r0
 8008a28:	3568      	adds	r5, #104	@ 0x68
 8008a2a:	e7e9      	b.n	8008a00 <_fwalk_sglue+0x10>

08008a2c <_puts_r>:
 8008a2c:	6a03      	ldr	r3, [r0, #32]
 8008a2e:	b570      	push	{r4, r5, r6, lr}
 8008a30:	6884      	ldr	r4, [r0, #8]
 8008a32:	4605      	mov	r5, r0
 8008a34:	460e      	mov	r6, r1
 8008a36:	b90b      	cbnz	r3, 8008a3c <_puts_r+0x10>
 8008a38:	f7ff ffc2 	bl	80089c0 <__sinit>
 8008a3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a3e:	07db      	lsls	r3, r3, #31
 8008a40:	d405      	bmi.n	8008a4e <_puts_r+0x22>
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	0598      	lsls	r0, r3, #22
 8008a46:	d402      	bmi.n	8008a4e <_puts_r+0x22>
 8008a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a4a:	f000 f9ae 	bl	8008daa <__retarget_lock_acquire_recursive>
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	0719      	lsls	r1, r3, #28
 8008a52:	d502      	bpl.n	8008a5a <_puts_r+0x2e>
 8008a54:	6923      	ldr	r3, [r4, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d135      	bne.n	8008ac6 <_puts_r+0x9a>
 8008a5a:	4621      	mov	r1, r4
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	f000 f8c5 	bl	8008bec <__swsetup_r>
 8008a62:	b380      	cbz	r0, 8008ac6 <_puts_r+0x9a>
 8008a64:	f04f 35ff 	mov.w	r5, #4294967295
 8008a68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a6a:	07da      	lsls	r2, r3, #31
 8008a6c:	d405      	bmi.n	8008a7a <_puts_r+0x4e>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	059b      	lsls	r3, r3, #22
 8008a72:	d402      	bmi.n	8008a7a <_puts_r+0x4e>
 8008a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a76:	f000 f999 	bl	8008dac <__retarget_lock_release_recursive>
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	bd70      	pop	{r4, r5, r6, pc}
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	da04      	bge.n	8008a8c <_puts_r+0x60>
 8008a82:	69a2      	ldr	r2, [r4, #24]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	dc17      	bgt.n	8008ab8 <_puts_r+0x8c>
 8008a88:	290a      	cmp	r1, #10
 8008a8a:	d015      	beq.n	8008ab8 <_puts_r+0x8c>
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	6022      	str	r2, [r4, #0]
 8008a92:	7019      	strb	r1, [r3, #0]
 8008a94:	68a3      	ldr	r3, [r4, #8]
 8008a96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	60a3      	str	r3, [r4, #8]
 8008a9e:	2900      	cmp	r1, #0
 8008aa0:	d1ed      	bne.n	8008a7e <_puts_r+0x52>
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	da11      	bge.n	8008aca <_puts_r+0x9e>
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	210a      	movs	r1, #10
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f000 f85f 	bl	8008b6e <__swbuf_r>
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d0d7      	beq.n	8008a64 <_puts_r+0x38>
 8008ab4:	250a      	movs	r5, #10
 8008ab6:	e7d7      	b.n	8008a68 <_puts_r+0x3c>
 8008ab8:	4622      	mov	r2, r4
 8008aba:	4628      	mov	r0, r5
 8008abc:	f000 f857 	bl	8008b6e <__swbuf_r>
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d1e7      	bne.n	8008a94 <_puts_r+0x68>
 8008ac4:	e7ce      	b.n	8008a64 <_puts_r+0x38>
 8008ac6:	3e01      	subs	r6, #1
 8008ac8:	e7e4      	b.n	8008a94 <_puts_r+0x68>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	6022      	str	r2, [r4, #0]
 8008ad0:	220a      	movs	r2, #10
 8008ad2:	701a      	strb	r2, [r3, #0]
 8008ad4:	e7ee      	b.n	8008ab4 <_puts_r+0x88>
	...

08008ad8 <puts>:
 8008ad8:	4b02      	ldr	r3, [pc, #8]	@ (8008ae4 <puts+0xc>)
 8008ada:	4601      	mov	r1, r0
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	f7ff bfa5 	b.w	8008a2c <_puts_r>
 8008ae2:	bf00      	nop
 8008ae4:	20000068 	.word	0x20000068

08008ae8 <__sread>:
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	460c      	mov	r4, r1
 8008aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af0:	f000 f90c 	bl	8008d0c <_read_r>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	bfab      	itete	ge
 8008af8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008afa:	89a3      	ldrhlt	r3, [r4, #12]
 8008afc:	181b      	addge	r3, r3, r0
 8008afe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b02:	bfac      	ite	ge
 8008b04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b06:	81a3      	strhlt	r3, [r4, #12]
 8008b08:	bd10      	pop	{r4, pc}

08008b0a <__swrite>:
 8008b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0e:	461f      	mov	r7, r3
 8008b10:	898b      	ldrh	r3, [r1, #12]
 8008b12:	05db      	lsls	r3, r3, #23
 8008b14:	4605      	mov	r5, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	4616      	mov	r6, r2
 8008b1a:	d505      	bpl.n	8008b28 <__swrite+0x1e>
 8008b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b20:	2302      	movs	r3, #2
 8008b22:	2200      	movs	r2, #0
 8008b24:	f000 f8e0 	bl	8008ce8 <_lseek_r>
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	4632      	mov	r2, r6
 8008b36:	463b      	mov	r3, r7
 8008b38:	4628      	mov	r0, r5
 8008b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3e:	f000 b8f7 	b.w	8008d30 <_write_r>

08008b42 <__sseek>:
 8008b42:	b510      	push	{r4, lr}
 8008b44:	460c      	mov	r4, r1
 8008b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b4a:	f000 f8cd 	bl	8008ce8 <_lseek_r>
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	bf15      	itete	ne
 8008b54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b5e:	81a3      	strheq	r3, [r4, #12]
 8008b60:	bf18      	it	ne
 8008b62:	81a3      	strhne	r3, [r4, #12]
 8008b64:	bd10      	pop	{r4, pc}

08008b66 <__sclose>:
 8008b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b6a:	f000 b8ad 	b.w	8008cc8 <_close_r>

08008b6e <__swbuf_r>:
 8008b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b70:	460e      	mov	r6, r1
 8008b72:	4614      	mov	r4, r2
 8008b74:	4605      	mov	r5, r0
 8008b76:	b118      	cbz	r0, 8008b80 <__swbuf_r+0x12>
 8008b78:	6a03      	ldr	r3, [r0, #32]
 8008b7a:	b90b      	cbnz	r3, 8008b80 <__swbuf_r+0x12>
 8008b7c:	f7ff ff20 	bl	80089c0 <__sinit>
 8008b80:	69a3      	ldr	r3, [r4, #24]
 8008b82:	60a3      	str	r3, [r4, #8]
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	071a      	lsls	r2, r3, #28
 8008b88:	d501      	bpl.n	8008b8e <__swbuf_r+0x20>
 8008b8a:	6923      	ldr	r3, [r4, #16]
 8008b8c:	b943      	cbnz	r3, 8008ba0 <__swbuf_r+0x32>
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4628      	mov	r0, r5
 8008b92:	f000 f82b 	bl	8008bec <__swsetup_r>
 8008b96:	b118      	cbz	r0, 8008ba0 <__swbuf_r+0x32>
 8008b98:	f04f 37ff 	mov.w	r7, #4294967295
 8008b9c:	4638      	mov	r0, r7
 8008b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	6922      	ldr	r2, [r4, #16]
 8008ba4:	1a98      	subs	r0, r3, r2
 8008ba6:	6963      	ldr	r3, [r4, #20]
 8008ba8:	b2f6      	uxtb	r6, r6
 8008baa:	4283      	cmp	r3, r0
 8008bac:	4637      	mov	r7, r6
 8008bae:	dc05      	bgt.n	8008bbc <__swbuf_r+0x4e>
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 fa86 	bl	80090c4 <_fflush_r>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d1ed      	bne.n	8008b98 <__swbuf_r+0x2a>
 8008bbc:	68a3      	ldr	r3, [r4, #8]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	60a3      	str	r3, [r4, #8]
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	6022      	str	r2, [r4, #0]
 8008bc8:	701e      	strb	r6, [r3, #0]
 8008bca:	6962      	ldr	r2, [r4, #20]
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d004      	beq.n	8008bdc <__swbuf_r+0x6e>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	07db      	lsls	r3, r3, #31
 8008bd6:	d5e1      	bpl.n	8008b9c <__swbuf_r+0x2e>
 8008bd8:	2e0a      	cmp	r6, #10
 8008bda:	d1df      	bne.n	8008b9c <__swbuf_r+0x2e>
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 fa70 	bl	80090c4 <_fflush_r>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d0d9      	beq.n	8008b9c <__swbuf_r+0x2e>
 8008be8:	e7d6      	b.n	8008b98 <__swbuf_r+0x2a>
	...

08008bec <__swsetup_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4b29      	ldr	r3, [pc, #164]	@ (8008c94 <__swsetup_r+0xa8>)
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	6818      	ldr	r0, [r3, #0]
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	b118      	cbz	r0, 8008c00 <__swsetup_r+0x14>
 8008bf8:	6a03      	ldr	r3, [r0, #32]
 8008bfa:	b90b      	cbnz	r3, 8008c00 <__swsetup_r+0x14>
 8008bfc:	f7ff fee0 	bl	80089c0 <__sinit>
 8008c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c04:	0719      	lsls	r1, r3, #28
 8008c06:	d422      	bmi.n	8008c4e <__swsetup_r+0x62>
 8008c08:	06da      	lsls	r2, r3, #27
 8008c0a:	d407      	bmi.n	8008c1c <__swsetup_r+0x30>
 8008c0c:	2209      	movs	r2, #9
 8008c0e:	602a      	str	r2, [r5, #0]
 8008c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c14:	81a3      	strh	r3, [r4, #12]
 8008c16:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1a:	e033      	b.n	8008c84 <__swsetup_r+0x98>
 8008c1c:	0758      	lsls	r0, r3, #29
 8008c1e:	d512      	bpl.n	8008c46 <__swsetup_r+0x5a>
 8008c20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c22:	b141      	cbz	r1, 8008c36 <__swsetup_r+0x4a>
 8008c24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c28:	4299      	cmp	r1, r3
 8008c2a:	d002      	beq.n	8008c32 <__swsetup_r+0x46>
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f000 f8cd 	bl	8008dcc <_free_r>
 8008c32:	2300      	movs	r3, #0
 8008c34:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c3c:	81a3      	strh	r3, [r4, #12]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6063      	str	r3, [r4, #4]
 8008c42:	6923      	ldr	r3, [r4, #16]
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	f043 0308 	orr.w	r3, r3, #8
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	6923      	ldr	r3, [r4, #16]
 8008c50:	b94b      	cbnz	r3, 8008c66 <__swsetup_r+0x7a>
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c5c:	d003      	beq.n	8008c66 <__swsetup_r+0x7a>
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4628      	mov	r0, r5
 8008c62:	f000 fa7d 	bl	8009160 <__smakebuf_r>
 8008c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c6a:	f013 0201 	ands.w	r2, r3, #1
 8008c6e:	d00a      	beq.n	8008c86 <__swsetup_r+0x9a>
 8008c70:	2200      	movs	r2, #0
 8008c72:	60a2      	str	r2, [r4, #8]
 8008c74:	6962      	ldr	r2, [r4, #20]
 8008c76:	4252      	negs	r2, r2
 8008c78:	61a2      	str	r2, [r4, #24]
 8008c7a:	6922      	ldr	r2, [r4, #16]
 8008c7c:	b942      	cbnz	r2, 8008c90 <__swsetup_r+0xa4>
 8008c7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c82:	d1c5      	bne.n	8008c10 <__swsetup_r+0x24>
 8008c84:	bd38      	pop	{r3, r4, r5, pc}
 8008c86:	0799      	lsls	r1, r3, #30
 8008c88:	bf58      	it	pl
 8008c8a:	6962      	ldrpl	r2, [r4, #20]
 8008c8c:	60a2      	str	r2, [r4, #8]
 8008c8e:	e7f4      	b.n	8008c7a <__swsetup_r+0x8e>
 8008c90:	2000      	movs	r0, #0
 8008c92:	e7f7      	b.n	8008c84 <__swsetup_r+0x98>
 8008c94:	20000068 	.word	0x20000068

08008c98 <memcmp>:
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	3901      	subs	r1, #1
 8008c9c:	4402      	add	r2, r0
 8008c9e:	4290      	cmp	r0, r2
 8008ca0:	d101      	bne.n	8008ca6 <memcmp+0xe>
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	e005      	b.n	8008cb2 <memcmp+0x1a>
 8008ca6:	7803      	ldrb	r3, [r0, #0]
 8008ca8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	d001      	beq.n	8008cb4 <memcmp+0x1c>
 8008cb0:	1b18      	subs	r0, r3, r4
 8008cb2:	bd10      	pop	{r4, pc}
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	e7f2      	b.n	8008c9e <memcmp+0x6>

08008cb8 <memset>:
 8008cb8:	4402      	add	r2, r0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d100      	bne.n	8008cc2 <memset+0xa>
 8008cc0:	4770      	bx	lr
 8008cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8008cc6:	e7f9      	b.n	8008cbc <memset+0x4>

08008cc8 <_close_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d06      	ldr	r5, [pc, #24]	@ (8008ce4 <_close_r+0x1c>)
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4604      	mov	r4, r0
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	602b      	str	r3, [r5, #0]
 8008cd4:	f7f9 f9d5 	bl	8002082 <_close>
 8008cd8:	1c43      	adds	r3, r0, #1
 8008cda:	d102      	bne.n	8008ce2 <_close_r+0x1a>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	b103      	cbz	r3, 8008ce2 <_close_r+0x1a>
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}
 8008ce4:	20004e38 	.word	0x20004e38

08008ce8 <_lseek_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d07      	ldr	r5, [pc, #28]	@ (8008d08 <_lseek_r+0x20>)
 8008cec:	4604      	mov	r4, r0
 8008cee:	4608      	mov	r0, r1
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	602a      	str	r2, [r5, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f7f9 f9ea 	bl	80020d0 <_lseek>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_lseek_r+0x1e>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_lseek_r+0x1e>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	20004e38 	.word	0x20004e38

08008d0c <_read_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d07      	ldr	r5, [pc, #28]	@ (8008d2c <_read_r+0x20>)
 8008d10:	4604      	mov	r4, r0
 8008d12:	4608      	mov	r0, r1
 8008d14:	4611      	mov	r1, r2
 8008d16:	2200      	movs	r2, #0
 8008d18:	602a      	str	r2, [r5, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f7f9 f978 	bl	8002010 <_read>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_read_r+0x1e>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_read_r+0x1e>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	20004e38 	.word	0x20004e38

08008d30 <_write_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4d07      	ldr	r5, [pc, #28]	@ (8008d50 <_write_r+0x20>)
 8008d34:	4604      	mov	r4, r0
 8008d36:	4608      	mov	r0, r1
 8008d38:	4611      	mov	r1, r2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	602a      	str	r2, [r5, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	f7f9 f983 	bl	800204a <_write>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_write_r+0x1e>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_write_r+0x1e>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	20004e38 	.word	0x20004e38

08008d54 <__errno>:
 8008d54:	4b01      	ldr	r3, [pc, #4]	@ (8008d5c <__errno+0x8>)
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	20000068 	.word	0x20000068

08008d60 <__libc_init_array>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	4d0d      	ldr	r5, [pc, #52]	@ (8008d98 <__libc_init_array+0x38>)
 8008d64:	4c0d      	ldr	r4, [pc, #52]	@ (8008d9c <__libc_init_array+0x3c>)
 8008d66:	1b64      	subs	r4, r4, r5
 8008d68:	10a4      	asrs	r4, r4, #2
 8008d6a:	2600      	movs	r6, #0
 8008d6c:	42a6      	cmp	r6, r4
 8008d6e:	d109      	bne.n	8008d84 <__libc_init_array+0x24>
 8008d70:	4d0b      	ldr	r5, [pc, #44]	@ (8008da0 <__libc_init_array+0x40>)
 8008d72:	4c0c      	ldr	r4, [pc, #48]	@ (8008da4 <__libc_init_array+0x44>)
 8008d74:	f000 fa62 	bl	800923c <_init>
 8008d78:	1b64      	subs	r4, r4, r5
 8008d7a:	10a4      	asrs	r4, r4, #2
 8008d7c:	2600      	movs	r6, #0
 8008d7e:	42a6      	cmp	r6, r4
 8008d80:	d105      	bne.n	8008d8e <__libc_init_array+0x2e>
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d88:	4798      	blx	r3
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7ee      	b.n	8008d6c <__libc_init_array+0xc>
 8008d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d92:	4798      	blx	r3
 8008d94:	3601      	adds	r6, #1
 8008d96:	e7f2      	b.n	8008d7e <__libc_init_array+0x1e>
 8008d98:	0800936c 	.word	0x0800936c
 8008d9c:	0800936c 	.word	0x0800936c
 8008da0:	0800936c 	.word	0x0800936c
 8008da4:	08009370 	.word	0x08009370

08008da8 <__retarget_lock_init_recursive>:
 8008da8:	4770      	bx	lr

08008daa <__retarget_lock_acquire_recursive>:
 8008daa:	4770      	bx	lr

08008dac <__retarget_lock_release_recursive>:
 8008dac:	4770      	bx	lr

08008dae <memcpy>:
 8008dae:	440a      	add	r2, r1
 8008db0:	4291      	cmp	r1, r2
 8008db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008db6:	d100      	bne.n	8008dba <memcpy+0xc>
 8008db8:	4770      	bx	lr
 8008dba:	b510      	push	{r4, lr}
 8008dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dc4:	4291      	cmp	r1, r2
 8008dc6:	d1f9      	bne.n	8008dbc <memcpy+0xe>
 8008dc8:	bd10      	pop	{r4, pc}
	...

08008dcc <_free_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4605      	mov	r5, r0
 8008dd0:	2900      	cmp	r1, #0
 8008dd2:	d041      	beq.n	8008e58 <_free_r+0x8c>
 8008dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd8:	1f0c      	subs	r4, r1, #4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfb8      	it	lt
 8008dde:	18e4      	addlt	r4, r4, r3
 8008de0:	f000 f8e0 	bl	8008fa4 <__malloc_lock>
 8008de4:	4a1d      	ldr	r2, [pc, #116]	@ (8008e5c <_free_r+0x90>)
 8008de6:	6813      	ldr	r3, [r2, #0]
 8008de8:	b933      	cbnz	r3, 8008df8 <_free_r+0x2c>
 8008dea:	6063      	str	r3, [r4, #4]
 8008dec:	6014      	str	r4, [r2, #0]
 8008dee:	4628      	mov	r0, r5
 8008df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008df4:	f000 b8dc 	b.w	8008fb0 <__malloc_unlock>
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	d908      	bls.n	8008e0e <_free_r+0x42>
 8008dfc:	6820      	ldr	r0, [r4, #0]
 8008dfe:	1821      	adds	r1, r4, r0
 8008e00:	428b      	cmp	r3, r1
 8008e02:	bf01      	itttt	eq
 8008e04:	6819      	ldreq	r1, [r3, #0]
 8008e06:	685b      	ldreq	r3, [r3, #4]
 8008e08:	1809      	addeq	r1, r1, r0
 8008e0a:	6021      	streq	r1, [r4, #0]
 8008e0c:	e7ed      	b.n	8008dea <_free_r+0x1e>
 8008e0e:	461a      	mov	r2, r3
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	b10b      	cbz	r3, 8008e18 <_free_r+0x4c>
 8008e14:	42a3      	cmp	r3, r4
 8008e16:	d9fa      	bls.n	8008e0e <_free_r+0x42>
 8008e18:	6811      	ldr	r1, [r2, #0]
 8008e1a:	1850      	adds	r0, r2, r1
 8008e1c:	42a0      	cmp	r0, r4
 8008e1e:	d10b      	bne.n	8008e38 <_free_r+0x6c>
 8008e20:	6820      	ldr	r0, [r4, #0]
 8008e22:	4401      	add	r1, r0
 8008e24:	1850      	adds	r0, r2, r1
 8008e26:	4283      	cmp	r3, r0
 8008e28:	6011      	str	r1, [r2, #0]
 8008e2a:	d1e0      	bne.n	8008dee <_free_r+0x22>
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	6053      	str	r3, [r2, #4]
 8008e32:	4408      	add	r0, r1
 8008e34:	6010      	str	r0, [r2, #0]
 8008e36:	e7da      	b.n	8008dee <_free_r+0x22>
 8008e38:	d902      	bls.n	8008e40 <_free_r+0x74>
 8008e3a:	230c      	movs	r3, #12
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	e7d6      	b.n	8008dee <_free_r+0x22>
 8008e40:	6820      	ldr	r0, [r4, #0]
 8008e42:	1821      	adds	r1, r4, r0
 8008e44:	428b      	cmp	r3, r1
 8008e46:	bf04      	itt	eq
 8008e48:	6819      	ldreq	r1, [r3, #0]
 8008e4a:	685b      	ldreq	r3, [r3, #4]
 8008e4c:	6063      	str	r3, [r4, #4]
 8008e4e:	bf04      	itt	eq
 8008e50:	1809      	addeq	r1, r1, r0
 8008e52:	6021      	streq	r1, [r4, #0]
 8008e54:	6054      	str	r4, [r2, #4]
 8008e56:	e7ca      	b.n	8008dee <_free_r+0x22>
 8008e58:	bd38      	pop	{r3, r4, r5, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20004e44 	.word	0x20004e44

08008e60 <sbrk_aligned>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	4e0f      	ldr	r6, [pc, #60]	@ (8008ea0 <sbrk_aligned+0x40>)
 8008e64:	460c      	mov	r4, r1
 8008e66:	6831      	ldr	r1, [r6, #0]
 8008e68:	4605      	mov	r5, r0
 8008e6a:	b911      	cbnz	r1, 8008e72 <sbrk_aligned+0x12>
 8008e6c:	f000 f9d6 	bl	800921c <_sbrk_r>
 8008e70:	6030      	str	r0, [r6, #0]
 8008e72:	4621      	mov	r1, r4
 8008e74:	4628      	mov	r0, r5
 8008e76:	f000 f9d1 	bl	800921c <_sbrk_r>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d103      	bne.n	8008e86 <sbrk_aligned+0x26>
 8008e7e:	f04f 34ff 	mov.w	r4, #4294967295
 8008e82:	4620      	mov	r0, r4
 8008e84:	bd70      	pop	{r4, r5, r6, pc}
 8008e86:	1cc4      	adds	r4, r0, #3
 8008e88:	f024 0403 	bic.w	r4, r4, #3
 8008e8c:	42a0      	cmp	r0, r4
 8008e8e:	d0f8      	beq.n	8008e82 <sbrk_aligned+0x22>
 8008e90:	1a21      	subs	r1, r4, r0
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 f9c2 	bl	800921c <_sbrk_r>
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d1f2      	bne.n	8008e82 <sbrk_aligned+0x22>
 8008e9c:	e7ef      	b.n	8008e7e <sbrk_aligned+0x1e>
 8008e9e:	bf00      	nop
 8008ea0:	20004e40 	.word	0x20004e40

08008ea4 <_malloc_r>:
 8008ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea8:	1ccd      	adds	r5, r1, #3
 8008eaa:	f025 0503 	bic.w	r5, r5, #3
 8008eae:	3508      	adds	r5, #8
 8008eb0:	2d0c      	cmp	r5, #12
 8008eb2:	bf38      	it	cc
 8008eb4:	250c      	movcc	r5, #12
 8008eb6:	2d00      	cmp	r5, #0
 8008eb8:	4606      	mov	r6, r0
 8008eba:	db01      	blt.n	8008ec0 <_malloc_r+0x1c>
 8008ebc:	42a9      	cmp	r1, r5
 8008ebe:	d904      	bls.n	8008eca <_malloc_r+0x26>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	6033      	str	r3, [r6, #0]
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fa0 <_malloc_r+0xfc>
 8008ece:	f000 f869 	bl	8008fa4 <__malloc_lock>
 8008ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed6:	461c      	mov	r4, r3
 8008ed8:	bb44      	cbnz	r4, 8008f2c <_malloc_r+0x88>
 8008eda:	4629      	mov	r1, r5
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7ff ffbf 	bl	8008e60 <sbrk_aligned>
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	d158      	bne.n	8008f9a <_malloc_r+0xf6>
 8008ee8:	f8d8 4000 	ldr.w	r4, [r8]
 8008eec:	4627      	mov	r7, r4
 8008eee:	2f00      	cmp	r7, #0
 8008ef0:	d143      	bne.n	8008f7a <_malloc_r+0xd6>
 8008ef2:	2c00      	cmp	r4, #0
 8008ef4:	d04b      	beq.n	8008f8e <_malloc_r+0xea>
 8008ef6:	6823      	ldr	r3, [r4, #0]
 8008ef8:	4639      	mov	r1, r7
 8008efa:	4630      	mov	r0, r6
 8008efc:	eb04 0903 	add.w	r9, r4, r3
 8008f00:	f000 f98c 	bl	800921c <_sbrk_r>
 8008f04:	4581      	cmp	r9, r0
 8008f06:	d142      	bne.n	8008f8e <_malloc_r+0xea>
 8008f08:	6821      	ldr	r1, [r4, #0]
 8008f0a:	1a6d      	subs	r5, r5, r1
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f7ff ffa6 	bl	8008e60 <sbrk_aligned>
 8008f14:	3001      	adds	r0, #1
 8008f16:	d03a      	beq.n	8008f8e <_malloc_r+0xea>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	442b      	add	r3, r5
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	bb62      	cbnz	r2, 8008f80 <_malloc_r+0xdc>
 8008f26:	f8c8 7000 	str.w	r7, [r8]
 8008f2a:	e00f      	b.n	8008f4c <_malloc_r+0xa8>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	1b52      	subs	r2, r2, r5
 8008f30:	d420      	bmi.n	8008f74 <_malloc_r+0xd0>
 8008f32:	2a0b      	cmp	r2, #11
 8008f34:	d917      	bls.n	8008f66 <_malloc_r+0xc2>
 8008f36:	1961      	adds	r1, r4, r5
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	6025      	str	r5, [r4, #0]
 8008f3c:	bf18      	it	ne
 8008f3e:	6059      	strne	r1, [r3, #4]
 8008f40:	6863      	ldr	r3, [r4, #4]
 8008f42:	bf08      	it	eq
 8008f44:	f8c8 1000 	streq.w	r1, [r8]
 8008f48:	5162      	str	r2, [r4, r5]
 8008f4a:	604b      	str	r3, [r1, #4]
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f000 f82f 	bl	8008fb0 <__malloc_unlock>
 8008f52:	f104 000b 	add.w	r0, r4, #11
 8008f56:	1d23      	adds	r3, r4, #4
 8008f58:	f020 0007 	bic.w	r0, r0, #7
 8008f5c:	1ac2      	subs	r2, r0, r3
 8008f5e:	bf1c      	itt	ne
 8008f60:	1a1b      	subne	r3, r3, r0
 8008f62:	50a3      	strne	r3, [r4, r2]
 8008f64:	e7af      	b.n	8008ec6 <_malloc_r+0x22>
 8008f66:	6862      	ldr	r2, [r4, #4]
 8008f68:	42a3      	cmp	r3, r4
 8008f6a:	bf0c      	ite	eq
 8008f6c:	f8c8 2000 	streq.w	r2, [r8]
 8008f70:	605a      	strne	r2, [r3, #4]
 8008f72:	e7eb      	b.n	8008f4c <_malloc_r+0xa8>
 8008f74:	4623      	mov	r3, r4
 8008f76:	6864      	ldr	r4, [r4, #4]
 8008f78:	e7ae      	b.n	8008ed8 <_malloc_r+0x34>
 8008f7a:	463c      	mov	r4, r7
 8008f7c:	687f      	ldr	r7, [r7, #4]
 8008f7e:	e7b6      	b.n	8008eee <_malloc_r+0x4a>
 8008f80:	461a      	mov	r2, r3
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	d1fb      	bne.n	8008f80 <_malloc_r+0xdc>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	6053      	str	r3, [r2, #4]
 8008f8c:	e7de      	b.n	8008f4c <_malloc_r+0xa8>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	6033      	str	r3, [r6, #0]
 8008f92:	4630      	mov	r0, r6
 8008f94:	f000 f80c 	bl	8008fb0 <__malloc_unlock>
 8008f98:	e794      	b.n	8008ec4 <_malloc_r+0x20>
 8008f9a:	6005      	str	r5, [r0, #0]
 8008f9c:	e7d6      	b.n	8008f4c <_malloc_r+0xa8>
 8008f9e:	bf00      	nop
 8008fa0:	20004e44 	.word	0x20004e44

08008fa4 <__malloc_lock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	@ (8008fac <__malloc_lock+0x8>)
 8008fa6:	f7ff bf00 	b.w	8008daa <__retarget_lock_acquire_recursive>
 8008faa:	bf00      	nop
 8008fac:	20004e3c 	.word	0x20004e3c

08008fb0 <__malloc_unlock>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	@ (8008fb8 <__malloc_unlock+0x8>)
 8008fb2:	f7ff befb 	b.w	8008dac <__retarget_lock_release_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	20004e3c 	.word	0x20004e3c

08008fbc <__sflush_r>:
 8008fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc4:	0716      	lsls	r6, r2, #28
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	460c      	mov	r4, r1
 8008fca:	d454      	bmi.n	8009076 <__sflush_r+0xba>
 8008fcc:	684b      	ldr	r3, [r1, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	dc02      	bgt.n	8008fd8 <__sflush_r+0x1c>
 8008fd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	dd48      	ble.n	800906a <__sflush_r+0xae>
 8008fd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fda:	2e00      	cmp	r6, #0
 8008fdc:	d045      	beq.n	800906a <__sflush_r+0xae>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fe4:	682f      	ldr	r7, [r5, #0]
 8008fe6:	6a21      	ldr	r1, [r4, #32]
 8008fe8:	602b      	str	r3, [r5, #0]
 8008fea:	d030      	beq.n	800904e <__sflush_r+0x92>
 8008fec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	0759      	lsls	r1, r3, #29
 8008ff2:	d505      	bpl.n	8009000 <__sflush_r+0x44>
 8008ff4:	6863      	ldr	r3, [r4, #4]
 8008ff6:	1ad2      	subs	r2, r2, r3
 8008ff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ffa:	b10b      	cbz	r3, 8009000 <__sflush_r+0x44>
 8008ffc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ffe:	1ad2      	subs	r2, r2, r3
 8009000:	2300      	movs	r3, #0
 8009002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009004:	6a21      	ldr	r1, [r4, #32]
 8009006:	4628      	mov	r0, r5
 8009008:	47b0      	blx	r6
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	d106      	bne.n	800901e <__sflush_r+0x62>
 8009010:	6829      	ldr	r1, [r5, #0]
 8009012:	291d      	cmp	r1, #29
 8009014:	d82b      	bhi.n	800906e <__sflush_r+0xb2>
 8009016:	4a2a      	ldr	r2, [pc, #168]	@ (80090c0 <__sflush_r+0x104>)
 8009018:	40ca      	lsrs	r2, r1
 800901a:	07d6      	lsls	r6, r2, #31
 800901c:	d527      	bpl.n	800906e <__sflush_r+0xb2>
 800901e:	2200      	movs	r2, #0
 8009020:	6062      	str	r2, [r4, #4]
 8009022:	04d9      	lsls	r1, r3, #19
 8009024:	6922      	ldr	r2, [r4, #16]
 8009026:	6022      	str	r2, [r4, #0]
 8009028:	d504      	bpl.n	8009034 <__sflush_r+0x78>
 800902a:	1c42      	adds	r2, r0, #1
 800902c:	d101      	bne.n	8009032 <__sflush_r+0x76>
 800902e:	682b      	ldr	r3, [r5, #0]
 8009030:	b903      	cbnz	r3, 8009034 <__sflush_r+0x78>
 8009032:	6560      	str	r0, [r4, #84]	@ 0x54
 8009034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009036:	602f      	str	r7, [r5, #0]
 8009038:	b1b9      	cbz	r1, 800906a <__sflush_r+0xae>
 800903a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800903e:	4299      	cmp	r1, r3
 8009040:	d002      	beq.n	8009048 <__sflush_r+0x8c>
 8009042:	4628      	mov	r0, r5
 8009044:	f7ff fec2 	bl	8008dcc <_free_r>
 8009048:	2300      	movs	r3, #0
 800904a:	6363      	str	r3, [r4, #52]	@ 0x34
 800904c:	e00d      	b.n	800906a <__sflush_r+0xae>
 800904e:	2301      	movs	r3, #1
 8009050:	4628      	mov	r0, r5
 8009052:	47b0      	blx	r6
 8009054:	4602      	mov	r2, r0
 8009056:	1c50      	adds	r0, r2, #1
 8009058:	d1c9      	bne.n	8008fee <__sflush_r+0x32>
 800905a:	682b      	ldr	r3, [r5, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d0c6      	beq.n	8008fee <__sflush_r+0x32>
 8009060:	2b1d      	cmp	r3, #29
 8009062:	d001      	beq.n	8009068 <__sflush_r+0xac>
 8009064:	2b16      	cmp	r3, #22
 8009066:	d11e      	bne.n	80090a6 <__sflush_r+0xea>
 8009068:	602f      	str	r7, [r5, #0]
 800906a:	2000      	movs	r0, #0
 800906c:	e022      	b.n	80090b4 <__sflush_r+0xf8>
 800906e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009072:	b21b      	sxth	r3, r3
 8009074:	e01b      	b.n	80090ae <__sflush_r+0xf2>
 8009076:	690f      	ldr	r7, [r1, #16]
 8009078:	2f00      	cmp	r7, #0
 800907a:	d0f6      	beq.n	800906a <__sflush_r+0xae>
 800907c:	0793      	lsls	r3, r2, #30
 800907e:	680e      	ldr	r6, [r1, #0]
 8009080:	bf08      	it	eq
 8009082:	694b      	ldreq	r3, [r1, #20]
 8009084:	600f      	str	r7, [r1, #0]
 8009086:	bf18      	it	ne
 8009088:	2300      	movne	r3, #0
 800908a:	eba6 0807 	sub.w	r8, r6, r7
 800908e:	608b      	str	r3, [r1, #8]
 8009090:	f1b8 0f00 	cmp.w	r8, #0
 8009094:	dde9      	ble.n	800906a <__sflush_r+0xae>
 8009096:	6a21      	ldr	r1, [r4, #32]
 8009098:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800909a:	4643      	mov	r3, r8
 800909c:	463a      	mov	r2, r7
 800909e:	4628      	mov	r0, r5
 80090a0:	47b0      	blx	r6
 80090a2:	2800      	cmp	r0, #0
 80090a4:	dc08      	bgt.n	80090b8 <__sflush_r+0xfc>
 80090a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090ae:	81a3      	strh	r3, [r4, #12]
 80090b0:	f04f 30ff 	mov.w	r0, #4294967295
 80090b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b8:	4407      	add	r7, r0
 80090ba:	eba8 0800 	sub.w	r8, r8, r0
 80090be:	e7e7      	b.n	8009090 <__sflush_r+0xd4>
 80090c0:	20400001 	.word	0x20400001

080090c4 <_fflush_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	690b      	ldr	r3, [r1, #16]
 80090c8:	4605      	mov	r5, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	b913      	cbnz	r3, 80090d4 <_fflush_r+0x10>
 80090ce:	2500      	movs	r5, #0
 80090d0:	4628      	mov	r0, r5
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	b118      	cbz	r0, 80090de <_fflush_r+0x1a>
 80090d6:	6a03      	ldr	r3, [r0, #32]
 80090d8:	b90b      	cbnz	r3, 80090de <_fflush_r+0x1a>
 80090da:	f7ff fc71 	bl	80089c0 <__sinit>
 80090de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0f3      	beq.n	80090ce <_fflush_r+0xa>
 80090e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090e8:	07d0      	lsls	r0, r2, #31
 80090ea:	d404      	bmi.n	80090f6 <_fflush_r+0x32>
 80090ec:	0599      	lsls	r1, r3, #22
 80090ee:	d402      	bmi.n	80090f6 <_fflush_r+0x32>
 80090f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090f2:	f7ff fe5a 	bl	8008daa <__retarget_lock_acquire_recursive>
 80090f6:	4628      	mov	r0, r5
 80090f8:	4621      	mov	r1, r4
 80090fa:	f7ff ff5f 	bl	8008fbc <__sflush_r>
 80090fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009100:	07da      	lsls	r2, r3, #31
 8009102:	4605      	mov	r5, r0
 8009104:	d4e4      	bmi.n	80090d0 <_fflush_r+0xc>
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	059b      	lsls	r3, r3, #22
 800910a:	d4e1      	bmi.n	80090d0 <_fflush_r+0xc>
 800910c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800910e:	f7ff fe4d 	bl	8008dac <__retarget_lock_release_recursive>
 8009112:	e7dd      	b.n	80090d0 <_fflush_r+0xc>

08009114 <__swhatbuf_r>:
 8009114:	b570      	push	{r4, r5, r6, lr}
 8009116:	460c      	mov	r4, r1
 8009118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800911c:	2900      	cmp	r1, #0
 800911e:	b096      	sub	sp, #88	@ 0x58
 8009120:	4615      	mov	r5, r2
 8009122:	461e      	mov	r6, r3
 8009124:	da0d      	bge.n	8009142 <__swhatbuf_r+0x2e>
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800912c:	f04f 0100 	mov.w	r1, #0
 8009130:	bf14      	ite	ne
 8009132:	2340      	movne	r3, #64	@ 0x40
 8009134:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009138:	2000      	movs	r0, #0
 800913a:	6031      	str	r1, [r6, #0]
 800913c:	602b      	str	r3, [r5, #0]
 800913e:	b016      	add	sp, #88	@ 0x58
 8009140:	bd70      	pop	{r4, r5, r6, pc}
 8009142:	466a      	mov	r2, sp
 8009144:	f000 f848 	bl	80091d8 <_fstat_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	dbec      	blt.n	8009126 <__swhatbuf_r+0x12>
 800914c:	9901      	ldr	r1, [sp, #4]
 800914e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009152:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009156:	4259      	negs	r1, r3
 8009158:	4159      	adcs	r1, r3
 800915a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800915e:	e7eb      	b.n	8009138 <__swhatbuf_r+0x24>

08009160 <__smakebuf_r>:
 8009160:	898b      	ldrh	r3, [r1, #12]
 8009162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009164:	079d      	lsls	r5, r3, #30
 8009166:	4606      	mov	r6, r0
 8009168:	460c      	mov	r4, r1
 800916a:	d507      	bpl.n	800917c <__smakebuf_r+0x1c>
 800916c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	6123      	str	r3, [r4, #16]
 8009174:	2301      	movs	r3, #1
 8009176:	6163      	str	r3, [r4, #20]
 8009178:	b003      	add	sp, #12
 800917a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800917c:	ab01      	add	r3, sp, #4
 800917e:	466a      	mov	r2, sp
 8009180:	f7ff ffc8 	bl	8009114 <__swhatbuf_r>
 8009184:	9f00      	ldr	r7, [sp, #0]
 8009186:	4605      	mov	r5, r0
 8009188:	4639      	mov	r1, r7
 800918a:	4630      	mov	r0, r6
 800918c:	f7ff fe8a 	bl	8008ea4 <_malloc_r>
 8009190:	b948      	cbnz	r0, 80091a6 <__smakebuf_r+0x46>
 8009192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009196:	059a      	lsls	r2, r3, #22
 8009198:	d4ee      	bmi.n	8009178 <__smakebuf_r+0x18>
 800919a:	f023 0303 	bic.w	r3, r3, #3
 800919e:	f043 0302 	orr.w	r3, r3, #2
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	e7e2      	b.n	800916c <__smakebuf_r+0xc>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	6020      	str	r0, [r4, #0]
 80091aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091b6:	b15b      	cbz	r3, 80091d0 <__smakebuf_r+0x70>
 80091b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091bc:	4630      	mov	r0, r6
 80091be:	f000 f81d 	bl	80091fc <_isatty_r>
 80091c2:	b128      	cbz	r0, 80091d0 <__smakebuf_r+0x70>
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	f023 0303 	bic.w	r3, r3, #3
 80091ca:	f043 0301 	orr.w	r3, r3, #1
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	431d      	orrs	r5, r3
 80091d4:	81a5      	strh	r5, [r4, #12]
 80091d6:	e7cf      	b.n	8009178 <__smakebuf_r+0x18>

080091d8 <_fstat_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4d07      	ldr	r5, [pc, #28]	@ (80091f8 <_fstat_r+0x20>)
 80091dc:	2300      	movs	r3, #0
 80091de:	4604      	mov	r4, r0
 80091e0:	4608      	mov	r0, r1
 80091e2:	4611      	mov	r1, r2
 80091e4:	602b      	str	r3, [r5, #0]
 80091e6:	f7f8 ff58 	bl	800209a <_fstat>
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	d102      	bne.n	80091f4 <_fstat_r+0x1c>
 80091ee:	682b      	ldr	r3, [r5, #0]
 80091f0:	b103      	cbz	r3, 80091f4 <_fstat_r+0x1c>
 80091f2:	6023      	str	r3, [r4, #0]
 80091f4:	bd38      	pop	{r3, r4, r5, pc}
 80091f6:	bf00      	nop
 80091f8:	20004e38 	.word	0x20004e38

080091fc <_isatty_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d06      	ldr	r5, [pc, #24]	@ (8009218 <_isatty_r+0x1c>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7f8 ff57 	bl	80020ba <_isatty>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_isatty_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_isatty_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20004e38 	.word	0x20004e38

0800921c <_sbrk_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4d06      	ldr	r5, [pc, #24]	@ (8009238 <_sbrk_r+0x1c>)
 8009220:	2300      	movs	r3, #0
 8009222:	4604      	mov	r4, r0
 8009224:	4608      	mov	r0, r1
 8009226:	602b      	str	r3, [r5, #0]
 8009228:	f7f8 ff60 	bl	80020ec <_sbrk>
 800922c:	1c43      	adds	r3, r0, #1
 800922e:	d102      	bne.n	8009236 <_sbrk_r+0x1a>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	b103      	cbz	r3, 8009236 <_sbrk_r+0x1a>
 8009234:	6023      	str	r3, [r4, #0]
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	20004e38 	.word	0x20004e38

0800923c <_init>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr

08009248 <_fini>:
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924a:	bf00      	nop
 800924c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924e:	bc08      	pop	{r3}
 8009250:	469e      	mov	lr, r3
 8009252:	4770      	bx	lr
